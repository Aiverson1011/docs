<Type Name="Roles" FullName="System.Web.Security.Roles">
  <TypeSignature Language="C#" Value="public static class Roles" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Roles extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.Security.Roles" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ASP.NET アプリケーションの承認チェックに使用するロールのユーザー メンバーシップを管理します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ASP.NET のロール管理では、ロールと呼ばれる、ユーザーのグループに基づいて、アプリケーションの承認を管理することができます。 ユーザーをロールに割り当てることによりにはユーザー名に基づく承認を指定するさまざまな部分またはアプリケーションの代わりに、またはそれらに加えて、ロールに基づいて、Web アプリケーションの機能へのアクセス制御できます。 たとえば、従業員のアプリケーションがありますマネージャー、従業員、ディレクターなどの役割ロールごとに異なる権限が指定されています。  
  
 ユーザーは、複数のロールに属することができます。 など、サイトがディスカッション フォーラムの場合は、一部のユーザーがメンバーとモデレーターの両方の役割を担うあります可能性。 各ロールには、サイトで異なる権限を定義することがあり、両方のロールに属するユーザーは両方の権限のセットをされてしまいます。  
  
 ASP.NET アプリケーションのロールの管理を有効にするには、要素を使用して、 `system.web` 、アプリケーションの Web.config ファイルのセクションの次の例に示すようにします。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
  <roleManager defaultProvider="SqlProvider"   
    enabled="true"  
    cacheRolesInCookie="true"  
    cookieName=".ASPROLES"  
    cookieTimeout="30"  
    cookiePath="/"  
    cookieRequireSSL="false"  
    cookieSlidingExpiration="true"  
    cookieProtection="All" >  
    <providers>  
      <add  
        name="SqlProvider"  
        type="System.Web.Security.SqlRoleProvider"  
        connectionStringName="SqlServices"  
        applicationName="SampleApplication" />  
      </providers>  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 Web アプリケーションの構成ファイルまたはプログラムを使用して、コードでは、承認規則を指定できます。 たとえば、Web.config ファイルから次のセクションでは、\(匿名ユーザーを拒否\)、してログオンする必要があり、アクセス権の管理者ロールにユーザーにのみを許可します。  
  
```  
<authorization>  
  <deny users="?" />  
  <allow roles="Administrators" />  
  <deny users="*" />  
</authorization>  
```  
  
 使用する場合、 `authorization` 、アプリケーションのユーザーの役割に基づく承認を指定する、アプリケーションの Web.config ファイル内のセクションは、認証されたユーザー id を指定する必要があります。 Windows またはフォーム認証を使用してユーザーを認証できます。 匿名ユーザーは、ロールに割り当てることはできません。 ロールは、のとは無関係に、または、ASP.NET と組み合わせて使用できます <xref:System.Web.Security.Membership> クラスです。  
  
 使用できるプログラムを使用してロールのメンバーシップを確認するため、 <xref:System.Web.Security.Roles> クラスまたは <xref:System.Web.UI.Page.User%2A?displayProperty=fullName> プロパティを <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッド、または使用して、 <xref:System.Web.UI.Page.User%2A?displayProperty=fullName> プロパティを <xref:System.Security.Principal.IPrincipal.IsInRole%2A?displayProperty=fullName> メソッドです。 プログラムによってロールのメンバーシップをチェックするサンプル コードでは、このトピックの「例」セクションを参照してください。  
  
 <xref:System.Web.Security.Roles> クラスではロールを作成および削除して、ユーザーを追加またはロールからユーザーを削除することもできます。  
  
> [!NOTE]
>  使用するアプリケーションを構成している場合、 <xref:System.Web.Security.WindowsTokenRoleProvider> クラス、ロールまたはロールのメンバーシップを変更することはできません。<xref:System.Web.Security.WindowsTokenRoleProvider> クラスのみの Windows セキュリティ グループのメンバーシップを確認します。 この場合、作成、グループを削除し、グループのメンバーシップを管理する ASP.NET のロールではなく、Windows ユーザー アカウントの管理を使用する必要があります。  
  
 いくつかのデータ ソースにロール情報を格納することができます。  
  
-   使用することができます、 <xref:System.Web.Security.WindowsTokenRoleProvider> ロール情報を取得するクラスの Windows グループのメンバーシップに基づいています。  
  
-   SQL Server データベースにロール情報を格納するにを使用して、 <xref:System.Web.Security.SqlRoleProvider> クラスです。  
  
-   継承するクラスを作成してカスタム ロール プロバイダーを実装するには、既存のロール情報を入手するか、またはロール情報を格納し、Windows、承認ストア、または SQL Server 以外のデータ ソースからロール情報を取得する場合、 <xref:System.Web.Security.RoleProvider> 抽象クラスです。 詳細については、「[Implementing a Role Provider](http://msdn.microsoft.com/ja-jp/851671ce-bf9b-43f2-aba4-bc9d28b11c7d)」を参照してください。  
  
 ユーザーのブラウザーが cookie を受け入れる場合は、ユーザーのコンピューター上の cookie でそのユーザーのロール情報を格納できます。 各ページ要求には、ASP.NET は、cookie からそのユーザーのロール情報を読み取ります。 アプリケーションのパフォーマンスを向上これには、ロール情報を取得したデータ ソースに必要な通信量を削減します。 ユーザーのロール情報が長すぎる、cookie に保存 ASP.NET は、cookie に最近使用した役割情報だけを格納し、必要に応じて、データ ソース内の他のロール情報を検索します。 ユーザーのブラウザーが cookie をサポートしていないか、クッキーが無効になっている、ロール情報がクッキーにキャッシュされません。  
  
 ロール名を指定することで、クッキーにキャッシュの信頼性を向上させることができます、 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ASP.NET のロールを構成するときにプロパティです。 既定値 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> は `All`, 、cookie にロール名を暗号化し、cookie の内容が変更されていないことを検証します。  
  
   
  
## 例  
 次の例では、ASP.NET メンバーシップと ASP.NET のロールの両方を使用して、使用するように構成されて、アプリケーションの Web.config ファイル、 <xref:System.Web.Security.SqlRoleProvider> メンバーシップとロールの情報を SQL Server データベースに保存します。 ユーザーはフォーム認証で認証され、管理者ロールのユーザーのみがアプリケーションへのアクセスを許可します。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=localhost;Initial Catalog=aspnetdb;Integrated Security=SSPI;" />  
  </connectionStrings>  
  
  <system.web>  
    <authentication mode="Forms" >  
      <forms loginUrl="login.aspx"  
      name=".ASPXFORMSAUTH" />  
    </authentication>  
  
    <authorization>  
      <deny users="?" />  
      <allow roles="Administrators" />  
      <deny users="*" />  
    </authorization>  
  
    <membership defaultProvider="AspNetSqlProvider" userIsOnlineTimeWindow="15">  
    </membership>  
  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="true"  
      cookieSlidingExpiration="true"  
      cookieProtection="All" >  
  
      <providers>  
        <clear />  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="SampleApplication" />  
        </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 プログラムを使用して、次のコード例は、他のユーザーのロールを表示するユーザーを許可する前に、ログオン ユーザーが Administrators ロールに属してがかどうかを確認します。  
  
  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddUsersToRole">
      <MemberSignature Language="C#" Value="public static void AddUsersToRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRole(System.String[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">指定されたロールに追加するユーザー名の文字列配列。</param>
        <param name="roleName">指定されたユーザー名を追加するロール。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [AddUsersToRole メソッド \(String\<xref:System.Web.Security.Roles.AddUsersToRole%2A> メソッドは、データ ソースで指定されたロールに指定したユーザーを関連付けるには、既定のロール プロバイダーを呼び出します。  
  
 アプリケーションで使用する場合、 [AddUsersToRole メソッド \(String\<xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 [AddUsersToRole メソッド \(String\<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> メソッドがトランザクション内で行われました。 エラーが発生した場合は、既に指定したロールになっているユーザー名など、トランザクションはロールバックし、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名は、コンマを含めることはできません。  
  
   
  
## 例  
 次のコード例では、1 つまたは複数のユーザーをロールに追加します。 または、ユーザー入力に基づいてロールからユーザーを削除します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 [AddUsersToRole メソッド \(String\<xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 内の要素のいずれかの <paramref name="usernames" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 内の要素のいずれかの <paramref name="usernames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="usernames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUsersToRoles">
      <MemberSignature Language="C#" Value="public static void AddUsersToRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUsersToRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUsersToRoles(System.String[],System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定されたロールに追加するユーザー名の文字列配列。</param>
        <param name="roleNames">指定されたユーザー名の割り当て先となるロール名の文字列配列。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.Roles.AddUsersToRoles%2A> メソッドは、指定されたユーザー データ ソースで指定されたロールに関連付ける既定のロール プロバイダーを呼び出します。  
  
 アプリケーションで使用する場合、 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.SqlRoleProvider.AddUsersToRoles%2A> メソッドがトランザクション内で行われました。 エラーが発生した場合は、既に指定したロールになっているユーザー名など、トランザクションはロールバックし、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名は、コンマを含めることはできません。  
  
   
  
## 例  
 次のコード例では、1 つまたは複数のユーザーを 1 つ以上のロールに追加します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 [AddUsersToRoles メソッド \(String\<xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/adduserstorolescs.aspx#1)]
 [!code-vb[System.Web.Security.Roles\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/adduserstorolesvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">内のロールのいずれかの <paramref name="roleNames" /> は <see langword="null" />です。  
  
 または  
  
 内のユーザーのいずれかの <paramref name="usernames" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">内のロールのいずれかの <paramref name="roleNames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 内のユーザーのいずれかの <paramref name="usernames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="roleNames" /> 重複する要素が含まれています。  
  
 または  
  
 <paramref name="usernames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRole">
      <MemberSignature Language="C#" Value="public static void AddUserToRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールに追加するユーザー名。</param>
        <param name="roleName">指定されたユーザー名を追加するロール。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.AddUserToRole%2A> メソッドは、データ ソースで指定されたロールに指定されたユーザーを関連付ける既定のロール プロバイダーを呼び出します。  
  
> [!NOTE]
>  ユーザー名とロール名は、コンマを含めることはできません。  
  
   
  
## 例  
 次のコード例では、ユーザーをロールに追加します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolecs.aspx#2)]
 [!code-vb[System.Web.Security.Roles\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。  
  
 または  
  
 ユーザーは既に指定したロールに割り当てられています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddUserToRoles">
      <MemberSignature Language="C#" Value="public static void AddUserToRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddUserToRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.AddUserToRoles(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールに追加するユーザー名。</param>
        <param name="roleNames">指定されたユーザー名を追加するロールの文字列配列。</param>
        <summary>指定されたユーザーを指定されたロールに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.AddUserToRoles%2A> メソッドは、データ ソースで指定されたロールに指定されたユーザーを関連付ける既定のロール プロバイダーを呼び出します。  
  
 アプリケーションで使用する場合、 <xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 <xref:System.Web.Security.Roles.AddUserToRoles%2A> メソッドがトランザクション内で行われました。 エラーが発生した場合は、既に指定したロールになっているユーザー名など、トランザクションはロールバックし、更新は実行されません。  
  
> [!NOTE]
>  ユーザー名とロール名は、コンマを含めることはできません。  
  
   
  
## 例  
 次のコード例では、1 つ以上のロールにユーザーを追加します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/addusertorolescs.aspx#3)]
 [!code-vb[System.Web.Security.Roles\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/addusertorolesvb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">内のロールのいずれかの <paramref name="roleNames" /> は <see langword="null" />です。  
  
 または  
  
 <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">内のロールのいずれかの <paramref name="roleNames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="roleNames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール情報を保管および取得するアプリケーションの名前を取得または設定します。</summary>
        <value>ロール情報を保管および取得するアプリケーションの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを使用、 <xref:System.Web.Security.Roles> に複数のアプリケーションのユーザーとロールを関連付けるにはクラスです。 これにより、複数のアプリケーションで重複するユーザー名または重複するロール名の競合を発生させずにユーザーとロール情報を保存する、同じデータ ソースを使用できます。 複数の ASP.NET アプリケーションは、同じデータ ソースを使用してに同じ値を指定することによって、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティです。 設定することができます、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティ、プログラムで設定することもできる宣言によって、Web アプリケーションの構成ファイルでを使用して、 `applicationName` 属性です。  
  
 Web アプリケーションが使用されている場合、 <xref:System.Web.Security.SqlRoleProvider> クラスと値が指定されていない、 `applicationName` 構成ファイルで、 <xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> プロパティの値を現在の <xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> プロパティを使用します。  
  
> [!CAUTION]
>  すべてで処理された要求の 1 つの既定のロール プロバイダーのインスタンスが使用されるため、 <xref:System.Web.HttpApplication> オブジェクト、複数の要求が同時に実行し、設定しようとした、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティの値。<xref:System.Web.Security.Roles.ApplicationName%2A> プロパティは複数の書き込みに対して安全、かつ変化のスレッドではありません、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティの値は、アプリケーションの複数のユーザーに対して予期しない動作をされることができます。 ユーザー設定できるようにするためのコードを作成しないでください、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティには、必要な場合です。 アプリケーションの例の設定場所、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティが必要な可能性がありますが複数のアプリケーション ロールのデータを管理する管理アプリケーションです。 このようなアプリケーションは、シングル ユーザー アプリケーションと Web アプリケーションではなくにする必要があります。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `applicationName` 属性を `MyApplication`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheRolesInCookie">
      <MemberSignature Language="C#" Value="public static bool CacheRolesInCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CacheRolesInCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CacheRolesInCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のユーザーのロールがクッキーにキャッシュされているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 現在のユーザーのロールがクッキー; にキャッシュされている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> にプロパティが設定されている `true` Web.config ファイルで各ユーザーのロール情報が cookie に保存します。 ロール管理は、ユーザーが特定のロールがかどうかを確認、データ ソースにあるロールの一覧を確認するロール プロバイダーが呼び出される前に、ロールの cookie がチェックされます。 最新の検証済みのロール名をキャッシュにクッキーが動的に更新します。  
  
 ロール名を指定することで、クッキーにキャッシュの信頼性を向上させることができます、 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> ASP.NET のロールを構成するときにプロパティです。 既定値 <xref:System.Web.Security.Roles.CookieProtectionValue%2A> は `All`, 、cookie にロール名を暗号化し、cookie の内容が変更されていないことを検証します。  
  
> [!NOTE]
>  ロール名をキャッシュできるデータ ソースとは別に、ためには、ロールの管理、データ ソースへの変更がキャッシュされた値に反映されませんが可能です。 この場合、ユーザー必要があります閉じて開き直します、ブラウザー キャッシュされているクッキーの値をクリアします。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `cacheRolesInCookie` 属性を `true`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
   </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieName">
      <MemberSignature Language="C#" Value="public static string CookieName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookieName" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名がキャッシュされているクッキーの名前を取得します。</summary>
        <value>ロール名がキャッシュされているクッキーの名前。 既定値は .ASPXROLES です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定して、アプリケーションのロールがキャッシュされているクッキーの名前を指定できます、 `cookieName` ASP.NET アプリケーションの Web.config ファイル内の属性です。 これは、機能は、アプリケーションの cookie を一意に識別するときに、またはドメイン cookie などの複数のアプリケーションで cookie を共有すると便利です。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `cookieName` 属性をします。ASPROLES します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiePath">
      <MemberSignature Language="C#" Value="public static string CookiePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CookiePath" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookiePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュされているロール名のクッキーへのパスを取得します。</summary>
        <value>ロール名がキャッシュされているクッキーのパス。 既定値は \/ です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定して、アプリケーションのロールがキャッシュされているクッキーのパスを指定できます、 `cookiePath` ASP.NET アプリケーションの Web.config ファイル内の属性です。 Cookie のパスの詳細については、次を参照してください。 <xref:System.Web.HttpCookie.Path%2A>します。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定、 <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `cookiePath` \/MyApplication するための属性です。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieProtectionValue">
      <MemberSignature Language="C#" Value="public static System.Web.Security.CookieProtection CookieProtectionValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Web.Security.CookieProtection CookieProtectionValue" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieProtectionValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.CookieProtection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クッキーにキャッシュされるロール名のセキュリティ保護の方法を示す値を取得します。</summary>
        <value>いずれか、 <see cref="T:System.Web.Security.CookieProtection" /> クッキーにキャッシュされるロール名を保護する方法を示す列挙値。 既定値は、<see langword="All" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションのロールがキャッシュされている cookie の保護を設定して指定できます、 `cookieProtection` ASP.NET アプリケーションの Web.config ファイル内の属性です。`cookieProtection` 属性は、 <xref:System.Web.Security.CookieProtection> 両方またはどちらも、ロール名を暗号化するかどうかを示す列挙値を検証します。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット `cookieProtection` 属性を `Encrypted`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieRequireSSL">
      <MemberSignature Language="C#" Value="public static bool CookieRequireSSL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieRequireSSL" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieRequireSSL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーをサーバーに返すために SSL を必要とするかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> SSL が必要な場合にロール名のクッキーをサーバーに戻りますそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SSL \(Secure Sockets Layer\) を設定して、アプリケーションでサーバーへのロール名のクッキーを送信する必要かどうかを指定する、 `cookieRequireSSL` ASP.NET アプリケーションの Web.config ファイル内の属性です。 詳細については、「<xref:System.Web.HttpCookie.Secure%2A>」を参照してください。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定、 <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット `cookieRequireSSL` に `true`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieSlidingExpiration">
      <MemberSignature Language="C#" Value="public static bool CookieSlidingExpiration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CookieSlidingExpiration" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieSlidingExpiration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーの有効期限の日時を定期的にリセットするかどうかを示します。</summary>
        <value>
          <see langword="true" /> ロール名のクッキーの有効期限の日付と時刻が定期的にリセットする場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ロール名のクッキーの有効期限の日付と時刻を使用して各応答にリセットされるかどうかを指定する、 `cookieSlidingExpiration` ASP.NET アプリケーションの Web.config ファイル内の属性です。 場合 `true`, 、クッキーの有効期限は現在の日付と時刻に最初に設定すると、 <xref:System.Web.Security.Roles.CookieTimeout%2A> 分単位でします。 ユーザーは引き続きアクティブに ASP.NET アプリケーションを使用して、クッキーの有効期限日時が自動的に更新の半分未満を使用する必要がある場合、 <xref:System.Web.Security.Roles.CookieTimeout%2A> 残り。 詳細については、<xref:System.Web.HttpCookie.Expires%2A> プロパティを参照してください。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> プロパティを `false`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="false"  
  cookieProtection="Encrypted" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookieTimeout">
      <MemberSignature Language="C#" Value="public static int CookieTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 CookieTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CookieTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール クッキーの有効期限が切れるまでの時間 \(分\) を取得します。</summary>
        <value>ロール クッキーの有効期限が切れるまでの時間 \(分\) を指定する整数値。 既定値は、30 分です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Web.Security.Roles.CookieTimeout%2A> property is used when the <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> property is **languageKeyword tag is not supported!!!!**  
 and specifies the time\-to\-live in minutes for the roles cookie. To set the <xref:System.Web.Security.Roles.CookieTimeout%2A> value, add the **languageKeyword tag is not supported!!!!**  
 attribute to the  element in the Web.config file for the ASP.NET application and specify an integer value.  
  
 If <xref:System.Web.Security.Roles.CookieSlidingExpiration%2A> is **languageKeyword tag is not supported!!!!**  
, this property is ignored.  
  
   
  
## 例  
 The following example shows the  element in the **languageKeyword tag is not supported!!!!**  
 section of the Web.config file for an ASP.NET application. It specifies that the application uses a <xref:System.Web.Security.SqlRoleProvider> instance and sets the <xref:System.Web.Security.Roles.CookieTimeout%2A> property to 30 minutes.  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/MyApplication"  
  cookieRequireSSL="true"  
  cookieSlidingExpiration="true"  
  cookieProtection="Encrypted" >  
  <providers>  
  <add  
    name="SqlProvider"  
    type="System.Web.Security.SqlRoleProvider"  
    connectionStringName="SqlServices"  
    applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePersistentCookie">
      <MemberSignature Language="C#" Value="public static bool CreatePersistentCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CreatePersistentCookie" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.CreatePersistentCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーがセッション ベースか、または永続的かを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ロール名のクッキーが永続的な cookie; である場合それ以外の場合 <see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.CreatePersistentCookie%2A> プロパティ値が使用して ASP.NET アプリケーションの構成で設定、 `createPersistentCookie` 構成要素の属性です。  
  
 ときに `false`, 、ロール名のクッキーがセッションの cookie、つまり、クッキーが失われた、ブラウザーを閉じたときです。 ときに `true`, 、ロール名のクッキーは、複数のブラウザー セッション間で提供される永続的な cookie です。 永続的な cookie の有効期限の日付と時刻を現在の日付と時刻に設定と、 <xref:System.Web.Security.Roles.CookieTimeout%2A> 分の値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRole">
      <MemberSignature Language="C#" Value="public static void CreateRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.CreateRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">作成するロールの名前。</param>
        <summary>新しいロールをデータ ソースに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.CreateRole%2A> メソッドは、データ ソースにロール名を追加します。<xref:System.Web.Security.Roles.CreateRole%2A> 呼び出し、 <xref:System.Web.Security.RoleProvider.CreateRole%2A> データ ソースに指定されたロールを追加する既定のロール プロバイダーのメソッドです。  
  
> [!NOTE]
>  ロール名は、コンマを含めることはできません。  
  
   
  
## 例  
 次のコード例では、データ ソースの新しいロールを作成します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> が空の文字列です。  
  
 または  
  
 <paramref name="roleName" /> コンマが含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public static void DeleteCookie ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteCookie() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteCookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ロール名がキャッシュされているクッキーを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.DeleteCookie%2A> メソッドは、ロール名をキャッシュに使用される cookie の内容をクリアします。 ロール名をキャッシュする方法の詳細については、次を参照してください。 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A>します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.DeleteCookie%2A> すべてをクリアしますが、ユーザーがログインすると、ロール名をキャッシュします。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Roles\#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/logincs.aspx#5)]
 [!code-vb[System.Web.Security.Roles\#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/loginvb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">削除するロールの名前。</param>
        <summary>データ ソースからロールを削除します。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="roleName" /> がデータ ソースから削除された以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.DeleteRole%2A> メソッドは、データ ソースからロール名を削除します。<xref:System.Web.Security.Roles.DeleteRole%2A> 呼び出し、 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> データ ソースから、指定したロールを削除する既定のロール プロバイダーのメソッドです。  
  
 ロールがで識別される場合、 `roleName` パラメーターが 1 つ以上のメンバーには、例外がスローされ、ロールは削除されません。  
  
   
  
## 例  
 次のコード例では、データ ソースからロールを削除します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> 1 つまたは複数のメンバーを持ちます。  
  
 または  
  
 ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="DeleteRole">
      <MemberSignature Language="C#" Value="public static bool DeleteRole (string roleName, bool throwOnPopulatedRole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool DeleteRole(string roleName, bool throwOnPopulatedRole) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.DeleteRole(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="throwOnPopulatedRole" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="roleName">削除するロールの名前。</param>
        <param name="throwOnPopulatedRole">場合 <see langword="true" />, 、例外がスロー <c>roleName</c> は 1 つまたは複数のメンバーがあります。</param>
        <summary>データ ソースからロールを削除します。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="roleName" /> 。 それ以外のデータ ソースから削除された <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.DeleteRole%2A> メソッドは、データ ソースからロール名を削除します。<xref:System.Web.Security.Roles.DeleteRole%2A> 呼び出し、 <xref:System.Web.Security.RoleProvider.DeleteRole%2A> データ ソースから、指定したロールを削除する既定のロール プロバイダーのメソッドです。  
  
 場合 `throwOnPopulatedRole` は `true`, し、例外がスローされます、およびロールがで識別される場合、ロールは削除されません、 `roleName` パラメーターが 1 つまたは複数のメンバーです。 場合 `throwOnPopulatedRole` は `false`, が空かどうかどうか、ロールが削除されます。  
  
   
  
## 例  
 次のコード例では、データ ソースからロールを削除します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/deleterolecs.aspx#2)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/deleterolevb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> が空の文字列です。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">
          <paramref name="roleName" /> 1 つまたは複数のメンバーが存在し、 <paramref name="throwOnPopulatedRole" /> は <see langword="true" />です。  
  
 または  
  
 ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public static string Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ロール名のクッキーのドメインの値を取得します。</summary>
        <value>
          <see cref="P:System.Web.HttpCookie.Domain" /> のロール名のクッキー。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.Domain%2A> プロパティ値が使用して ASP.NET アプリケーションの構成で設定、 `domain` 構成要素の属性です。  
  
 構成されたドメイン属性の値が指定されていない場合、 <xref:System.Web.Security.Roles.Domain%2A> プロパティを返します。 `null` とロール名のクッキーのドメインの既定の動作、 <xref:System.Web.HttpCookie><xref:System.Web.HttpCookie.Domain%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public static bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の Web アプリケーションに対してロール管理が有効になっているかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> ロール管理が有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定する <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `enabled` 属性を `true`します。  
  
```  
<roleManager defaultProvider="SqlProvider"   
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All" >  
  <providers>  
    <add  
      name="SqlProvider"  
      type="System.Web.Security.SqlRoleProvider"  
      connectionStringName="SqlServices"  
      applicationName="MyApplication" />  
  </providers>  
</roleManager>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] FindUsersInRole (string roleName, string usernameToMatch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FindUsersInRole(string roleName, string usernameToMatch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.FindUsersInRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
        <Parameter Name="usernameToMatch" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">検索範囲とするロール。</param>
        <param name="usernameToMatch">検索するユーザー名。</param>
        <summary>指定されたロールで、ユーザー名が指定内容と一致するユーザーの一覧を取得します。</summary>
        <returns>ユーザー名と一致するすべてのユーザーの名前を含んでいる文字列配列 <paramref name="usernameToMatch" /> 指定したロールのメンバーとなっているとします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.FindUsersInRole%2A> ユーザー名が、指定された一致が含まれているロールでユーザーの一覧を返す `usernameToMatch` に、構成された `applicationName`します。 たとえば場合、 `usernameToMatch` パラメーターが「ユーザー」から"user3、"ユーザー"user1"、"user2"に設定されなどが返されます。 ユーザーは、ユーザー名によってアルファベット順に返されます。  
  
 <xref:System.Web.Security.SqlRoleProvider> に対して LIKE 句を使用して、検索を実行、 `usernameToMatch` パラメーター。 句で使用できるように SQL Server でサポートされているワイルドカード、 `usernameToMatch` パラメーターの値。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.FindUsersInRole%2A> ユーザー入力に基づいてロールのメンバーシップを表示するメソッドです。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.Roles\#11](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/FindUsersInRolecs.aspx#11)]
 [!code-vb[System.Web.Security.Roles\#11](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/FindUsersInRolevb.aspx#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> <see langword="null" /> \(<see langword="Nothing" /> Visual Basic で\)。  
  
 または  
  
 <paramref name="usernameToMatch" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="usernameToMatch" /> が空の文字列です。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAllRoles">
      <MemberSignature Language="C#" Value="public static string[] GetAllRoles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetAllRoles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetAllRoles" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションのすべてのロールのリストを取得します。</summary>
        <returns>アプリケーションのデータ ソースに保存されているすべてのロール名を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.GetAllRoles%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.GetAllRoles%2A?displayProperty=fullName> アプリケーションのデータ ソースからすべてのロールの一覧を取得する既定のロール プロバイダーのメソッドです。 指定されているアプリケーションのロールのみ、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを取得します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.GetAllRoles%2A> アプリケーションのロールの一覧を取得し、結果にバインドするメソッド、 <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> コントロールです。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在ログオンしているユーザーに割り当てられているロールのリストを取得します。</summary>
        <returns>現在ログオンしているユーザーに割り当てられているすべてのロールの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> データからを取得する既定のロール プロバイダーのメソッドは、現在ログオンしているユーザーに割り当てられているロールをソースします。 現在ログオンしているユーザーがで識別される、 <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> 、現在のプロパティ <xref:System.Web.HttpContext?displayProperty=fullName>, 、または <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> HTTP 以外の環境をホストしています。 ユーザーがログオンしていない場合、例外がスローされます。 指定されているアプリケーションのロールのみ、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを取得します。  
  
 場合 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> は `true`, の結果から、 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドは、指定されたロール プロバイダーではなく、ロールのキャッシュから返される可能性があります。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドを指定したユーザーのロールの一覧を取得するのには、返されたロールをバインドする <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> コントロールです。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-vb[System.Web.Security.Roles\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">現在のログオン ユーザーはありません。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRolesForUser">
      <MemberSignature Language="C#" Value="public static string[] GetRolesForUser (string username);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetRolesForUser(string username) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetRolesForUser(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">ロールの一覧を取得するユーザー。</param>
        <summary>ユーザーに割り当てられたロールのリストを取得します。</summary>
        <returns>指定ユーザーに割り当てられたすべてのロールの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.GetRolesForUser%2A?displayProperty=fullName> メソッド データからを取得する既定のロール プロバイダーのユーザーに割り当てられているロールのソースします。 指定されているアプリケーションのロールのみ、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを取得します。  
  
 場合 `username` が現在ログオンしているユーザーに等しいと <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> は `true`, の結果、 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドは、指定したではなく、ロールのキャッシュから返される可能性が <xref:System.Web.Security.Roles.Provider%2A>です。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.GetRolesForUser%2A> メソッドを指定したユーザーのロールの一覧を取得するのには、返されたロールをバインドする <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> コントロールです。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/ViewRolescs.aspx#4)]
 [!code-vb[System.Web.Security.Roles\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="username" /> コンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUsersInRole">
      <MemberSignature Language="C#" Value="public static string[] GetUsersInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetUsersInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.GetUsersInRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">ユーザーの一覧を取得するロール。</param>
        <summary>指定されたロールに属するユーザーのリストを取得します。</summary>
        <returns>指定されたロールのメンバーであるすべてのユーザーの名前を格納している文字列配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.GetUsersInRole%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.GetUsersInRole%2A> メソッドの既定のロール プロバイダーをデータ ソースからロールに関連付けられたユーザー名を取得します。 指定されているアプリケーションのロールのみ、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを取得します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.GetUsersInRole%2A> 特定のロールにユーザーの一覧を取得し、結果にバインド、 <xref:System.Web.UI.WebControls.GridView> コントロールです。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">検索対象のロールの名前。</param>
        <summary>現在ログオンしているユーザーが指定されたロールに存在するかどうかを示す値を取得します。 API は、ASP.NET 要求スレッドのコンテキスト内でのみ呼び出すよう意図されており、その許可されたユース ケースではスレッド セーフです。</summary>
        <returns>
          <see langword="true" /> 現在ログオンしているユーザーが指定されたロールの場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A?displayProperty=fullName> 現在ログオンしているユーザーがで指定されているアプリケーションのデータ ソースからロールに関連付けられているかどうかを決定する既定のロール プロバイダーのメソッド、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティです。 現在ログオンしているユーザーがで識別される、 <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> 、現在のプロパティ <xref:System.Web.HttpContext?displayProperty=fullName>, 、または <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> HTTP 以外の環境をホストしています。 ユーザーがログオンしていない場合、例外がスローされます。 指定されているアプリケーションのロールのみ、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティを取得します。  
  
 場合 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> は `true`, 、し `roleName` 指定されたロール プロバイダーではなく、ロール キャッシュに対して確認することがあります。  
  
   
  
## 例  
 次のコード例では、プログラムを使用してアプリケーションのロールの設定を表示するユーザーを許可する前に現在ログオンしているユーザーは、Administrators ロールに属しているかどうかを確認します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 または  
  
 現在のログオン ユーザーはありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsUserInRole">
      <MemberSignature Language="C#" Value="public static bool IsUserInRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsUserInRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.IsUserInRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">検索対象のユーザーの名前。</param>
        <param name="roleName">検索対象のロールの名前。</param>
        <summary>指定したユーザーが指定したロールに存在するかどうかを示す値を取得します。 API は、ASP.NET 要求スレッドのコンテキスト内でのみ呼び出すよう意図されており、その許可されたユース ケースではスレッド セーフです。</summary>
        <returns>
          <see langword="true" /> 指定したユーザーが指定されたロールの場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.IsUserInRole%2A> メソッドの呼び出し、 <xref:System.Web.Security.RoleProvider.IsUserInRole%2A> ユーザー名がで指定されているアプリケーションのデータ ソースからロールに関連付けられているかどうかを判断する既定のロール プロバイダーのメソッド、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティです。  
  
 場合 `username` 現在ログオンしているユーザーには、 <xref:System.Web.Security.Roles.CacheRolesInCookie%2A> プロパティの値が `true`, 、`roleName` 指定ではなく、ロールのキャッシュに対して確認することがあります <xref:System.Web.Security.Roles.Provider%2A>します。  
  
   
  
## 例  
 プログラムを使用して、次のコード例は、ユーザーがアプリケーションのロールの設定を表示するユーザーを許可する前に Administrators ロールに属しているかどうかを確認します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/ViewRolescs.aspx#4)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/ViewRolesvb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="username" /> コンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MaxCachedResults">
      <MemberSignature Language="C#" Value="public static int MaxCachedResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxCachedResults" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.MaxCachedResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーに対してキャッシュするロール名の最大数を取得します。</summary>
        <value>ユーザーに対してキャッシュするロール名の最大数。 既定値は 25 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.MaxCachedResults%2A> を使用してプロパティを設定、 `maxCachedResults` configuration の属性です。 値、 `maxCachedResults` 属性の構成する必要があります設定する整数値に 0 より大きい。  
  
   
  
## 例  
 次の例では、内の要素、 `system.web` 、ASP.NET アプリケーションの Web.config ファイルのセクションです。 アプリケーションを使用することを指定、 <xref:System.Web.Security.SqlRoleProvider> インスタンスとセット、 `maxCachedResults` 属性を 10 にします。  
  
```  
<roleManager  
  enabled="true"  
  cacheRolesInCookie="true"  
  cookieName=".ASPROLES"  
  cookieTimeout="30"  
  cookiePath="/"  
  cookieRequireSSL="false"  
  cookieSlidingExpiration="true"  
  cookieProtection="All"   
  maxCachedResults="10" />  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Provider">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProvider Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProvider Provider" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの既定のロール プロバイダーを取得します。</summary>
        <value>継承するクラスとして公開されると、アプリケーション用の既定のロール プロバイダー、 <see cref="T:System.Web.Security.RoleProvider" /> 抽象クラスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.Provider%2A> プロパティでは、アプリケーションの既定のロール プロバイダーを直接参照することができます。 これはよくないロール プロバイダーのカスタムのメンバーにアクセスする使用の一部では、 <xref:System.Web.Security.RoleProvider> 抽象クラスです。  
  
 たとえば、 <xref:System.Web.Security.WindowsTokenRoleProvider> クラスにはオーバー ロードが含まれています、 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> メソッドを使用してユーザーが一般的な Windows ロールであるかどうかを判断することができます、 <xref:System.Security.Principal.WindowsBuiltInRole> 列挙値。 参照、 <xref:System.Web.Security.WindowsTokenRoleProvider> クラスを使用してアプリケーションを取得できます、 <xref:System.Web.Security.Roles.Provider%2A> プロパティとしてキャストすることができます、 <xref:System.Web.Security.WindowsTokenRoleProvider> を参照するために、 <xref:System.Web.Security.WindowsTokenRoleProvider.IsUserInRole%2A> オーバー ロードします。  
  
 使用してさまざまなロール プロバイダーをアクセスするアプリケーションで複数のロール プロバイダーが構成された場合、 <xref:System.Web.Security.Roles.Providers%2A> コレクションです。  
  
   
  
## 例  
 次のコード例ではキャストとして既定のロール プロバイダー、 <xref:System.Web.Security.WindowsTokenRoleProvider> し、アプリケーションのロールの設定を表示するユーザーを許可する前に現在ログオンしているユーザーが Administrators ロールに属しているかどうかを確認します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.WindowsTokenRoleProvider>します。  
  
 [!code-csharp[System.Web.Security.WindowsTokenRoleProvider\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/CS/ViewRoles2cs.aspx#2)]
 [!code-vb[System.Web.Security.WindowsTokenRoleProvider\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.WindowsTokenRoleProvider/VB/ViewRoles2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public static System.Web.Security.RoleProviderCollection Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Web.Security.RoleProviderCollection Providers" />
      <MemberSignature Language="DocId" Value="P:System.Web.Security.Roles.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Security.RoleProviderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ASP.NET アプリケーションのロール プロバイダーのコレクションを取得します。</summary>
        <value>A <see cref="T:System.Web.Security.RoleProviderCollection" /> ASP.NET アプリケーション用に構成されたロール プロバイダーを格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.Providers%2A> Web.config ファイルで追加されたすべてのプロバイダーを含むプロパティは、アプリケーションに対して有効なすべてのロール プロバイダーを参照する。 ロール プロバイダーは、アプリケーションを使用して制御することができます、 `providers` 、アプリケーションの Web.config ファイル内のセクションの要素。  
  
 次の例を既存の任意のプロバイダー \(など、Machine.config ファイルで指定されている\) を削除するセクションを表示し、追加、 <xref:System.Web.Security.SqlRoleProvider> 、アプリケーションのロール プロバイダーとしてのインスタンス。  
  
```  
<configuration>  
  <connectionStrings>  
    <add name="SqlServices" connectionString="Data Source=MySqlServer;Integrated Security=SSPI;Initial Catalog=aspnetdb;" />  
  </connectionStrings>  
  
  <system.web>  
    <roleManager defaultProvider="SqlProvider"   
      enabled="true"  
      cacheRolesInCookie="true"  
      cookieName=".ASPROLES"  
      cookieTimeout="30"  
      cookiePath="/"  
      cookieRequireSSL="false"  
      cookieSlidingExpiration="true"  
      cookieProtection="Encrypted">  
  
      <providers>  
        <clear/>  
        <add  
          name="SqlProvider"  
          type="System.Web.Security.SqlRoleProvider"  
          connectionStringName="SqlServices"  
          applicationName="MyApplication" />  
         </providers>  
  
    </roleManager>  
  </system.web>  
</configuration>  
```  
  
 プロバイダーへの参照を厳密に型を取得することができます、 <xref:System.Web.Security.Roles.Providers%2A> コレクション名でロール プロバイダーのインデックスを作成し、目的の型としてキャストします。  
  
 使用して、アプリケーションの既定のプロバイダーへの参照を取得する、 <xref:System.Web.Security.Roles.Provider%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、アプリケーションとそれらの種類に対して有効なプロバイダーが一覧表示します。  
  
 [!code-csharp[System.Web.Security.Roles\#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/Providerscs.aspx#7)]
 [!code-vb[System.Web.Security.Roles\#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/Providersvb.aspx#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRole (string username, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRole(string username, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRole(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="username">指定されたロールから削除するユーザー。</param>
        <param name="roleName">指定されたユーザーを削除するロール。</param>
        <summary>指定されたユーザーを指定されたロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.RemoveUserFromRole%2A> メソッドは、データ ソースで指定したロールから指定のユーザーを削除する既定のロール プロバイダーを呼び出します。  
  
   
  
## 例  
 次のコード例では、ロールからユーザーを削除します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/adduserstorolecs.aspx#3)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/adduserstorolevb.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています  
  
 <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUserFromRoles (string username, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUserFromRoles(string username, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUserFromRoles(System.String,System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="username" Type="System.String" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="username">指定したロールから削除するユーザー。</param>
        <param name="roleNames">指定したユーザーを削除するロール名の文字列配列。</param>
        <summary>指定したユーザーを指定したロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドは、データ ソースで指定されたロールから指定のユーザーを削除する既定のロール プロバイダーを呼び出します。  
  
 使用するアプリケーションが構成されている場合、 <xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドは、トランザクション内で作成します。 エラーが発生しましたが、指定されたロールにない場合、ユーザー名など、トランザクションがロールバックし、更新は実行されません。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A> メソッドを 1 つ以上のロールからユーザーを削除します。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUserFromRolescs.aspx#10)]
 [!code-vb[System.Web.Security.Roles\#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUserFromRolesvb.aspx#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">内のロールのいずれかの <paramref name="roleNames" /> は <see langword="null" />です。  
  
 または  
  
 <paramref name="username" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">内のロールのいずれかの <paramref name="roleNames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="username" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="roleNames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRole">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRole (string[] usernames, string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRole(string[] usernames, string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRole(System.String[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールから削除するユーザー名の文字列配列。</param>
        <param name="roleName">指定したユーザーを削除するロールの名前。</param>
        <summary>指定したユーザーを指定したロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [RemoveUsersFromRole メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> メソッドは、指定されたユーザー データ ソースで指定されたロールから削除する既定のロール プロバイダーを呼び出します。  
  
 アプリケーションで使用する場合、 [RemoveUsersFromRole メソッド \(String\<xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 [RemoveUsersFromRole メソッド \(String\<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> メソッドは、トランザクション内で作成します。 エラーが発生しましたが、指定されたロールにない場合、ユーザー名など、トランザクションがロールバックし、更新は実行されません。  
  
   
  
## 例  
 次のコード例では、 [RemoveUsersFromRole メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A> ロールから 1 つまたは複数のユーザーを削除する方法です。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 [RemoveUsersFromRole メソッド \(String\<xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolecs.aspx#9)]
 [!code-vb[System.Web.Security.Roles\#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolevb.aspx#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> は <see langword="null" /> です。  
  
 または  
  
 名前、ユーザーのいずれかの <paramref name="usernames" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 名前、ユーザーのいずれかの <paramref name="usernames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="usernames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveUsersFromRoles">
      <MemberSignature Language="C#" Value="public static void RemoveUsersFromRoles (string[] usernames, string[] roleNames);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveUsersFromRoles(string[] usernames, string[] roleNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RemoveUsersFromRoles(System.String[],System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usernames" Type="System.String[]" />
        <Parameter Name="roleNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="usernames">指定したロールから削除するユーザー名の文字列配列。</param>
        <param name="roleNames">指定したユーザーを削除するロール名の文字列配列。</param>
        <summary>指定されたユーザー名を指定されたロールから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> メソッドは、データ ソースで指定されたロールから指定のユーザーを削除する既定のロール プロバイダーを呼び出します。  
  
 アプリケーションで使用する場合、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.SqlRoleProvider> クラスの呼び出し中に実行されるデータベースの更新、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.SqlRoleProvider.RemoveUsersFromRoles%2A> メソッドは、トランザクション内で作成します。 エラーが発生しましたが、指定されたロールにない場合、ユーザー名など、トランザクションがロールバックし、更新は実行されません。  
  
   
  
## 例  
 次のコード例では、 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A> ユーザー入力に基づいて、1 つ以上のロールから 1 つまたは複数のユーザーを削除する方法です。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 [RemoveUsersFromRoles メソッド \(String\<xref:System.Web.Security.Roles>します。  
  
 [!code-csharp[System.Web.Security.Roles\#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.Roles/CS/RemoveUsersFromRolescs.aspx#8)]
 [!code-vb[System.Web.Security.Roles\#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.Roles/VB/RemoveUsersFromRolesvb.aspx#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定されたロールのいずれかの <paramref name="roleNames" /> は <see langword="null" />です。  
  
 または  
  
 指定されたユーザーのいずれかの <paramref name="usernames" /> は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">指定されたロールのいずれかの <paramref name="roleNames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 指定されたユーザーのいずれかの <paramref name="usernames" /> 空の文字列またはコンマ \(,\) が含まれています。  
  
 または  
  
 <paramref name="roleNames" /> 重複する要素が含まれています。  
  
 または  
  
 <paramref name="usernames" /> 重複する要素が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RoleExists">
      <MemberSignature Language="C#" Value="public static bool RoleExists (string roleName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RoleExists(string roleName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Security.Roles.RoleExists(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roleName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roleName">データ ソースで検索するロールの名前。</param>
        <summary>指定されたロール名がロール データ ソースに既に存在するかどうかを示す値を取得します。</summary>
        <returns>
          <see langword="true" /> データ ソース側のロール名が既に存在する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Web.Security.Roles.RoleExists%2A> メソッドの呼び出し、 `RoleExists` ロール名がで指定されているアプリケーションのデータ ソースに存在するかどうかを決定する既定のロール プロバイダーのメソッド、 <xref:System.Web.Security.Roles.ApplicationName%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Web.Security.Roles.RoleExists%2A> ロールを作成する前に、ロール名が既に存在するかどうかを決定する方法です。 ロールの管理を有効にする Web.config ファイルの例は、次を参照してください。 <xref:System.Web.Security.Roles>します。  
  
> [!IMPORTANT]
>  この例には、ユーザー入力を受け付けるテキスト ボックスが含まれています。 既定では、ASP.NET Web ページによって、ユーザー入力にスクリプトまたは HTML 要素が含まれていないかどうかが検証されます。 詳細については、「[Script Exploits Overview](http://msdn.microsoft.com/ja-jp/772c7312-211a-4eb3-8d6e-eec0aa1dcc07)」を参照してください。  
  
 [!code-csharp[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/CS/createrolecs.aspx#1)]
 [!code-vb[System.Web.Security.SqlRoleProvider\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Security.SqlRoleProvider/VB/createrolevb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="roleName" /> <see langword="null" /> \(<see langword="Nothing" /> Visual Basic で\)。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="roleName" /> 空の文字列またはコンマ \(,\) が含まれています。</exception>
        <exception cref="T:System.Configuration.Provider.ProviderException">ロール管理が無効です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsUserInRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーが指定されたロールに存在するかどうかを示す値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetRolesForUser">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ユーザーに割り当てられたロールのリストを取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DeleteRole">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>データ ソースからロールを削除します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>