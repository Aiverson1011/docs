<Type Name="IsLong" FullName="System.Runtime.CompilerServices.IsLong">
  <TypeSignature Language="C#" Value="public static class IsLong" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit IsLong extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.IsLong" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.CompilerServices.VisualC</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>変更された整数が標準の C\+\+ であることを示します <see langword="long" /> 値。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 C\+\+ 標準では、ことを示します、 `long` 値と整数値に種類があります。  ただし、これらは両方を使用して表現 `ELEMENT_TYPE_I4` アセンブリ内。  区別するために、 `long` Microsoft C コンパイラは追加、C\+\+ の整数から、 <xref:System.Runtime.CompilerServices.IsLong> 修飾子の任意のインスタンスを `long` emited が、インスタンスの場合。  このプロセスは、言語レベルの型の安全性を維持するため非常に重要です。  
  
 コンパイラは、ジャストイン タイム \(JIT\) コンパイラが既定の動作が適切ではない場合に、値を処理する方法を変更するメタデータ内のカスタム修飾子を生成します。  JIT コンパイラには、カスタム修飾子が検出されると、修飾子を指定する方法で値を処理します。  コンパイラは、メソッド、パラメーターにカスタム修飾子を適用して、戻り値。  JIT コンパイラでは、必須の修飾子に応答する必要がありますが、オプションの修飾子を無視することができます。  
  
 使用して、次の方法のいずれかのメタデータにカスタム修飾子を出力することができます。  
  
-   内のメソッドを使用して、 <xref:System.Reflection.Emit.TypeBuilder> などクラス <xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>, 、<xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>, 、<xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>, 、および <xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>です。  
  
-   呼び出しを含む Microsoft 中間言語 \(MSIL\) の命令ファイルを生成する `modopt` と `modreq`, を使用してファイルをアセンブルし、 [MSIL Assembler \(Ilasm.exe\)](http://msdn.microsoft.com/ja-jp/4ca3a4f0-4400-47ce-8936-8e219961c76f)です。  
  
-   アンマネージ リフレクション API を使用します。  
  
   
  
## 例  
 次の例では、出力、 <xref:System.Runtime.CompilerServices.IsLong> リフレクションを使用してアセンブリのオブジェクト。  
  
 [!code-cpp[Runtime.CompilerServices.IsLong\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.CompilerServices.IsLong/cpp/sample.cpp#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members />
</Type>