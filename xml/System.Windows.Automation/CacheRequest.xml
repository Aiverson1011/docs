<Type Name="CacheRequest" FullName="System.Windows.Automation.CacheRequest">
  <TypeSignature Language="C#" Value="public sealed class CacheRequest" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit CacheRequest extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.CacheRequest" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationClient</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロパティを指定し、パターンを UI オートメーション framework キャッシュときに、 <see cref="T:System.Windows.Automation.AutomationElement" /> を取得します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティと使用パターンを取得する [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] パフォーマンス遅くなる可能性がプロセス間の呼び出しが必要です。 バッチ操作でプロパティおよびパターンの値をキャッシュすることによって、アプリケーションのパフォーマンスを強化できます。  
  
 クラスのコンス トラクターを呼び出すことによって、新しいキャッシュ要求を作成します。 繰り返し呼び出すにより要求が作成される、 <xref:System.Windows.Automation.CacheRequest.Add%2A> メソッドです。  
  
 1 つだけ <xref:System.Windows.Automation.CacheRequest> アクティブにすることができます。 要求をアクティブ化する 2 つの方法があります。  
  
-   呼び出す <xref:System.Windows.Automation.CacheRequest.Activate%2A> に要求します。 要求をスタックにプッシュし、オブジェクトが破棄されるときに、要求がポップされます。 確実に破棄例外が発生した場合でもからの戻り値を使用して <xref:System.Windows.Automation.CacheRequest.Activate%2A> 内で、 `using` ブロック \(`Using` で [!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]\)。  
  
-   要求を内部スタックを呼び出して添付 <xref:System.Windows.Automation.CacheRequest.Push%2A>します。 スタックの一番上にある要求がアクティブで、によってスタックから削除された、次の固まりをする必要がありますのみ <xref:System.Windows.Automation.CacheRequest.Pop%2A>します。 要求はポップ非アクティブにします。  
  
 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] プロパティおよび指定されたパターンの値は、要求がアクティブなときに取得した要素がキャッシュされます。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Automation.CacheRequest.Activate%2A> キャッシュ パターンとプロパティにします。  
  
 [!code-csharp[UIAClient\_snip\#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient\_snip\#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Automation.CacheRequest.Push%2A> と <xref:System.Windows.Automation.CacheRequest.Pop%2A> キャッシュ パターンとプロパティにします。  
  
 [!code-csharp[UIAClient\_snip\#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient\_snip\#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CacheRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Automation.CacheRequest" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Automation.CacheRequest> が作成される、 <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> 識別子は、既定のプロパティとしてキャッシュに追加されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activate">
      <MemberSignature Language="C#" Value="public IDisposable Activate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IDisposable Activate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Activate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この設定 <see cref="T:System.Windows.Automation.CacheRequest" /> ときに返される項目のアクティブな仕様として、 <see cref="T:System.Windows.Automation.AutomationElement" /> が同じスレッドで要求されました。</summary>
        <returns>破棄するために使用できるオブジェクト、 <see cref="T:System.Windows.Automation.CacheRequest" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する方が便利ではこのメソッドを使用して <xref:System.Windows.Automation.CacheRequest.Push%2A> と <xref:System.Windows.Automation.CacheRequest.Pop%2A> をアクティブ化する手段として、 <xref:System.Windows.Automation.CacheRequest>です。 オブジェクトがスタックにプッシュと <xref:System.Windows.Automation.CacheRequest.Activate%2A> が呼び出され、破棄されるときにポップされます。 破棄のために、配置内で戻り値、 `using` ブロック \(`Using` で [!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]\)。  
  
   
  
## 例  
 次の例は、使用する方法を示しています。 <xref:System.Windows.Automation.CacheRequest.Activate%2A> キャッシュ パターンとプロパティにします。  
  
 [!code-csharp[UIAClient\_snip\#107](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#107)]
 [!code-vb[UIAClient\_snip\#107](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#107)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>追加するプロパティまたはパターンの識別子、 <see cref="T:System.Windows.Automation.CacheRequest" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Automation.CacheRequest> オブジェクトを作成、 <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> 識別子は、既定のプロパティとしてキャッシュに追加されます。  
  
 キャッシュの要求に既に含まれるオブジェクトを追加しても効果はありません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationPattern pattern);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationPattern pattern) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="System.Windows.Automation.AutomationPattern" />
      </Parameters>
      <Docs>
        <param name="pattern">キャッシュにパターンを指定する識別子です。</param>
        <summary>指定した <see cref="T:System.Windows.Automation.AutomationPattern" /> 識別子をこの <see cref="T:System.Windows.Automation.CacheRequest" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キャッシュの要求に既に含まれるパターンを追加しても効果はありません。  
  
   
  
## 例  
 次の例を構築する方法を示しています、 <xref:System.Windows.Automation.CacheRequest> をキャッシュするパターンを追加します。  
  
 [!code-csharp[UIAClient\_snip\#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient\_snip\#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> アクティブになっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Windows.Automation.AutomationProperty property);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Windows.Automation.AutomationProperty property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Windows.Automation.AutomationProperty" />
      </Parameters>
      <Docs>
        <param name="property">キャッシュのプロパティ値を指定する識別子です。</param>
        <summary>指定した <see cref="T:System.Windows.Automation.AutomationProperty" /> 識別子をこの <see cref="T:System.Windows.Automation.CacheRequest" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Windows.Automation.CacheRequest> が作成される、 <xref:System.Windows.Automation.AutomationElement.RuntimeIdProperty> 識別子は、既定のプロパティとしてキャッシュに追加されます。  
  
 キャッシュの要求に既に含まれるプロパティを追加しても効果はありません。  
  
   
  
## 例  
 次の例では、作成する方法、 <xref:System.Windows.Automation.CacheRequest> キャッシュするプロパティを追加します。  
  
 [!code-csharp[UIAClient\_snip\#202](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#202)]
 [!code-vb[UIAClient\_snip\#202](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Windows.Automation.CacheRequest" /> アクティブになっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutomationElementMode">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationElementMode AutomationElementMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.AutomationElementMode AutomationElementMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.AutomationElementMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationElementMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返される要素が、基になる完全参照を含めるかどうかを指定する値を取得または ユーザー インターフェイス (UI), 、またはキャッシュされた情報だけです。</summary>
        <value>
          <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> 返される要素を参照する、基になる場合 ユーザー インターフェイス (UI)。 そうしないと <see cref="F:System.Windows.Automation.AutomationElementMode.None" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.AutomationElementMode.Full> 既定値は、返される要素が、基になる完全参照を含めることを指定 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)]します。<xref:System.Windows.Automation.AutomationElementMode.None> 返される要素には、基になるへの参照を持つしないことを指定 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)], 、キャッシュされた情報だけが含まれるとします。  
  
 などの要素に対して特定の操作 <xref:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue%2A>, 、<xref:System.Windows.Automation.AutomationElement.GetCurrentPattern%2A>, 、および <xref:System.Windows.Automation.AutomationElement.SetFocus%2A>, 、完全参照が必要\]; でこれらを実行しようとしています。 none を持つ要素の結果、 <xref:System.InvalidOperationException>です。  
  
 使用して <xref:System.Windows.Automation.AutomationElementMode.None> する方が効率的プロパティのみが必要なときに、オーバーヘッドを回避できるので完全参照を設定します。  
  
   
  
## 例  
 次の例で <xref:System.Windows.Automation.CacheRequest.AutomationElementMode%2A> に設定されている <xref:System.Windows.Automation.AutomationElementMode.None>, 、結果をキャッシュのみプロパティおよびパターンは、取得したオブジェクトで使用できます。  
  
 [!code-csharp[UIAClient\_snip\#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient\_snip\#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.CacheRequest Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.CacheRequest Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコピーを作成 <see cref="T:System.Windows.Automation.CacheRequest" />します。</summary>
        <returns>現在のオブジェクトの変更可能なコピーです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.CacheRequest Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Automation.CacheRequest Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.CacheRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Automation.CacheRequest" /> 現在のスレッドでアクティブになっています。</summary>
        <value>アクティブな <see cref="T:System.Windows.Automation.CacheRequest" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pop">
      <MemberSignature Language="C#" Value="public void Pop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Pop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Pop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>削除、アクティブな <see cref="T:System.Windows.Automation.CacheRequest" /> 現在のスレッドの内部スタックからです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、現在アクティブな要求に対してのみを削除することができます、 <xref:System.Windows.Automation.CacheRequest.Pop%2A> メソッドです。 現在 1 つ結果ではなく、例外の要求を削除しようとしています。  
  
 使用することをお勧めはキャッシュ要求を入れ子にする場合を除き、 <xref:System.Windows.Automation.CacheRequest.Activate%2A> をスタックに要求を配置します。 使用する理由は、 <xref:System.Windows.Automation.CacheRequest.Activate%2A> 内で、 `using` ブロック \(`Using` で [!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]\)、例外が発生した場合でも、スタックから要求がポップを確保します。  
  
   
  
## 例  
 次の例では、非アクティブ化する方法、 <xref:System.Windows.Automation.CacheRequest> を使用して <xref:System.Windows.Automation.CacheRequest.Pop%2A>します。  
  
 [!code-csharp[UIAClient\_snip\#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient\_snip\#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">スタックにプッシュされた最後の 1 つでなかったキャッシュ要求を削除しようとしています。</exception>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Push" />
      </Docs>
    </Member>
    <Member MemberName="Push">
      <MemberSignature Language="C#" Value="public void Push ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Push() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.CacheRequest.Push" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>場所、 <see cref="T:System.Windows.Automation.CacheRequest" /> 内部状態スタックのことが、現在のスレッドのアクティブな要求です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複数 <xref:System.Windows.Automation.CacheRequest> 状態スタックにオブジェクトを配置することができます。 はプッシュされた順序でスタックからのキャッシュ要求を削除する必要がありますそれ以外の場合、 <xref:System.InvalidOperationException> 例外が発生します。  
  
 使用することをお勧めはキャッシュ要求を入れ子にする場合を除き、 <xref:System.Windows.Automation.CacheRequest.Activate%2A> をスタックに要求を配置します。 使用する理由は、 <xref:System.Windows.Automation.CacheRequest.Activate%2A> 内で、 `using` ブロック \(`Using` で [!INCLUDE[TLA#tla_visualbnet](~/includes/tlasharptla-visualbnet-md.md)]\)、例外が発生した場合でも、スタックから要求がポップを確保します。  
  
   
  
## 例  
 次の例では、アクティブ化する方法、 <xref:System.Windows.Automation.CacheRequest> を使用して <xref:System.Windows.Automation.CacheRequest.Push%2A>します。  
  
 [!code-csharp[UIAClient\_snip\#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient\_snip\#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Automation.CacheRequest.Pop" />
      </Docs>
    </Member>
    <Member MemberName="TreeFilter">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.Condition TreeFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Automation.Condition TreeFilter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.Condition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャッシュ時に使用する、UI オートメーション 要素ツリーのビューを指定する値を取得または設定します。</summary>
        <value>UI オートメーション 要素ツリーのビュー。 既定のビューは <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 その他のビューについて、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 要素ツリーを参照してください [UI Automation Tree Overview](http://msdn.microsoft.com/ja-jp/03b98058-bdb3-47a0-8ff7-45e6cdf67166)します。  
  
   
  
## 例  
 次の例で <xref:System.Windows.Automation.CacheRequest.TreeFilter%2A> に設定されている <xref:System.Windows.Automation.Automation.RawViewCondition> コンテンツ ビューまたはコントロールのビューの一部であるかどうかに関係なく、すべての要素のキャッシュが行われるようにします。  
  
 [!code-csharp[UIAClient\_snip\#108](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#108)]
 [!code-vb[UIAClient\_snip\#108](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#108)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Windows.Automation.Automation.ContentViewCondition" />
      </Docs>
    </Member>
    <Member MemberName="TreeScope">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.TreeScope TreeScope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Automation.TreeScope TreeScope" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.CacheRequest.TreeScope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationClient</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.TreeScope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはキャッシュを実行するか、サブツリーのルートに対してのみ、または子または子孫のもを指定する値を設定します。</summary>
        <value>1 つ以上の <see cref="F:System.Windows.Automation.TreeScope.Element" />, 、<see cref="F:System.Windows.Automation.TreeScope.Children" />, 、<see cref="F:System.Windows.Automation.TreeScope.Descendants" />, 、または <see cref="F:System.Windows.Automation.TreeScope.Subtree" />です。 既定値は <see cref="F:System.Windows.Automation.TreeScope.Element" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 キャッシュのスコープまたは複数のオブジェクトに関連してフェッチされる、対象となるオブジェクトに関連していない <xref:System.Windows.Automation.AutomationElement.FindFirst%2A> または <xref:System.Windows.Automation.AutomationElement.FindAll%2A> が呼び出されます。 この例を参照してください。  
  
   
  
## 例  
 次の例では、リスト ボックスの要素が中に、親ウィンドウの要素から取得した、 <xref:System.Windows.Automation.CacheRequest> がアクティブと <xref:System.Windows.Automation.CacheRequest.TreeScope%2A> は <xref:System.Windows.Automation.TreeScope.Children>です。 子要素 \(つまり、リスト項目\) の指定したプロパティがキャッシュに格納しから取得できます、 <xref:System.Windows.Automation.AutomationElement.CachedChildren%2A> 、リスト ボックスのです。  
  
 [!code-csharp[UIAClient\_snip\#119](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAClient_snip/CSharp/ClientForm.cs#119)]
 [!code-vb[UIAClient\_snip\#119](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAClient_snip/VisualBasic/ClientForm.vb#119)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">プロパティを設定しようとした <see cref="F:System.Windows.Automation.TreeScope.Parent" /> または <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>