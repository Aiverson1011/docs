<Type Name="ControlType" FullName="System.Windows.Automation.ControlType">
  <TypeSignature Language="C#" Value="public class ControlType : System.Windows.Automation.AutomationIdentifier" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlType extends System.Windows.Automation.AutomationIdentifier" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Automation.ControlType" />
  <AssemblyInfo>
    <AssemblyName>UIAutomationTypes</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Automation.AutomationIdentifier</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ユーザー インターフェイス (UI) コントロールの型を識別します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.ControlType>継承<xref:System.Windows.Automation.AutomationIdentifier>によって表されるコントロールの種類を識別するために使用して、<xref:System.Windows.Automation.AutomationElement>です。 コントロールの種類は、UI オートメーション プロバイダーの開発者が決定します。  
  
 このクラスには、静的フィールドには、それ自体が含まれています。<xref:System.Windows.Automation.ControlType>オブジェクト、コントロールの標準型を識別します。<xref:System.Windows.Automation.ControlType.Custom>に定義された型のいずれかと一致しないコントロールの型。  
  
 コントロールがサポートしている場合は、実行時にコントロールのコントロール型を変更可能性がある場合だけ<xref:System.Windows.Automation.MultipleViewPattern>です。 例としては、[!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)]リスト ビューを指定できます、<xref:System.Windows.Automation.ControlType.DataGrid>または<xref:System.Windows.Automation.ControlType.List>に現在のビューに依存します。  
  
 コントロール型には、コントロール パターンを一対一の等価性はありません。 1 つだけの型のコントロールであることができますが可能性がありますサポート複数のパターンまたはパターン、その特定の機能に応じて。  
  
 詳細については、さまざまな種類の制御を参照してください[UI Automation Control Types](http://msdn.microsoft.com/ja-jp/261dcc59-3a62-4e40-91dd-63ff9d2241c0)です。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Button">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Button;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Button" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Button" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ボタン コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ボタンは、クリックされたときに 1 つのアクションを実行します。  
  
 ボタンは、スタンドアロンのコントロール、または別のコントロール型のサブコントロールとして使用できます。 たとえば、コンボ ボックス コントロールでドロップダウンの矢印は、ボタンです。 ボタンはコントロールのビューのサブコントロールとして使用した場合、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] \(コンテンツ ビュー\) ではなくツリーです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Calendar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Calendar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Calendar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付選択カレンダーなどの予定表コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBox">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType CheckBox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType CheckBox" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.CheckBox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>チェック ボックス コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スタンドアロンのコントロール、または別のコントロール型のサブコントロールとして、チェック ボックスを使用できます。  たとえば、コンテンツのビューではなく、コントロールのビューで \(コンテンツの操作に使用\)、行の選択に使用されるグリッド コントロール内の行の先頭にあるチェック ボックスが表示されます。 ただし、データを表すフォーム内のラベルの付いたチェック ボックスは、コンテンツとコントロールのビューです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ComboBox">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ComboBox;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ComboBox" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ComboBox" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンボ ボックス コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 コンボ ボックス コントロールの 2 つのバリエーションがあります。 単純なコンボ ボックスは、ユーザーが選択できる一覧が表示されます。 編集可能なコンボ ボックスでは、選択肢の一覧を紹介し、また、ユーザーが一覧の選択肢から選択することにとらわれることがなく選択で入力できます編集可能なテキスト領域があます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Custom">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Custom;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Custom" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Custom" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>定義済みのコントロール型のいずれでもないコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Windows.Automation.ControlType.Custom> control type indicates a control that is not identified as one of the predefined control types \(such as <xref:System.Windows.Automation.ControlType.Button> or <xref:System.Windows.Automation.ControlType.Calendar>\).  
  
 Control developers should check the other control types before designating their control as a <xref:System.Windows.Automation.ControlType.Custom> control type to be sure that their control does not provide the same functionality as one of the defined control types.  
  
 A <xref:System.Windows.Automation.ControlType.Custom> control type requires extra work for the provider to implement [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)]. Also, UI Automation client products will not be able to anticipate the control structure, keyboard interaction, and possible control patterns based on the control type of the control.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataGrid">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType DataGrid;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType DataGrid" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.DataGrid" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ グリッド コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セルにテキストのみが含まれている場合、コントロールの種類があります <xref:System.Windows.Automation.ControlType.Table>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType DataItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType DataItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.DataItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データ項目のコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.DataItem> は複雑な項目を他の多くのコントロールを含むことができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Document;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Document" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Document" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメントのコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドキュメントには、複数の行のテキストの内容が含まれています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Edit">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Edit;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Edit" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Edit" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト ボックスなどの編集コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.ControlType.Edit> コントロールは、スタンドアロンのコントロール、または別のコントロール型のサブコントロールとして使用できます。  たとえば、領域をユーザーがコンボ ボックス コントロール内の値に入力できますが、 <xref:System.Windows.Automation.ControlType.Edit> コントロール、し、ここでは、コントロールに含まれないコンテンツ ビューのです。  
  
 <xref:System.Windows.Automation.ControlType.Edit> コントロールでは、パスワードを格納しているコントロールを表すこともできます。<xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword%2A> プロパティは、内容を表示するかどうかを知るスクリーン リーダーなどの製品を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNeverSupportedPatterns">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationPattern[] GetNeverSupportedPatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationPattern[] GetNeverSupportedPatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetNeverSupportedPatterns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの種類でサポートされていないパターン識別子を取得します。</summary>
        <returns>UI オートメーション パターン識別子の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、この種類のコントロールで許可されていないすべてのコントロール パターンを検索する必要があるプロバイダーの実装のテスト フレームワークなどの UI オートメーション クライアントに便利です。  
  
   
  
## 例  
 次の例では <xref:System.Windows.Automation.ControlType.GetNeverSupportedPatterns%2A> ですべての種類の <xref:System.Windows.Automation.ControlType> 静的フィールドとして含まれている、 <xref:System.Windows.Automation.ControlType> クラスです。  
  
 [!code-csharp[UIAControlTypePatterns\_snip\#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns\_snip\#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredPatternSets">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationPattern[][] GetRequiredPatternSets ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationPattern[][] GetRequiredPatternSets() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetRequiredPatternSets" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationPattern[][]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>一連の必要なパターンの配列を取得します。</summary>
        <returns>一連の必要なパターンの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列の各要素には、パターンの配列が含まれ、この種類のコントロールのある各要素は、これらのアレイの少なくとも 1 つをサポートする必要があります。  
  
 このメソッドは、UI オートメーション クライアント プロバイダーの実装のテスト フレームワークなど、すべての可能なパターンを検索する必要があるに便利です。  
  
   
  
## 例  
 次の例では <xref:System.Windows.Automation.ControlType.GetRequiredPatternSets%2A> ですべての種類の <xref:System.Windows.Automation.ControlType> 静的フィールドとして含まれている、 <xref:System.Windows.Automation.ControlType> クラスです。  
  
 [!code-csharp[UIAControlTypePatterns\_snip\#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns\_snip\#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRequiredProperties">
      <MemberSignature Language="C#" Value="public System.Windows.Automation.AutomationProperty[] GetRequiredProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Automation.AutomationProperty[] GetRequiredProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.GetRequiredProperties" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.AutomationProperty[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコントロールの種類に必要なプロパティ 識別子 (ID) の配列を取得します。</summary>
        <returns>プロパティ ID の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、UI オートメーション クライアント プロバイダーの実装のテスト フレームワークなどのすべての可能なプロパティを検索する必要があるに便利です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Group;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Group" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Group" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>他のコントロールのコンテナーとして機能するグループ コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 グループは、さまざまなコントロール型が含まれており、それらのコントロールを論理的に関連付けるために使用するコンテナー コントロールです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Header">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Header;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Header" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Header" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ヘッダー コントロールの行のラベルと列の情報のコンテナーを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType HeaderItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType HeaderItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.HeaderItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>行または情報の列のラベルが、"header"項目を識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Hyperlink">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Hyperlink;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Hyperlink" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Hyperlink" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハイパーリンク コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ハイパーリンク コントロールが指定した移動 [!INCLUDE[TLA#tla_url](~/includes/tlasharptla-url-md.md)] コントロールのユーザーがクリックした場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Image;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Image" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Image" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>\[イメージ\] コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.ControlType.Image> コントロールの種類は、スタンドアロンのコントロール、または別のコントロール型のサブコントロールとして使用できます。  たとえば、ボタン使用できますテキストではなく、イメージをユーザーにその機能を示します。  
  
 イメージがのコントロールに表示の装飾的な目的でのみ使用すると、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] \(コンテンツ ビュー\) ではなくツリーです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType List;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType List" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.List" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リスト ボックスなどのリスト コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.List> を含むコントロールの種類は、 <xref:System.Windows.Automation.ControlType.ListItem> \(おそらく\) <xref:System.Windows.Automation.ControlType.Group> の型を制御します。  
  
 A <xref:System.Windows.Automation.ControlType.List> コントロールは、スタンドアロンのコントロール、または別のコントロール型のサブコントロールとして使用できます。 たとえば、コンボ ボックスには、 <xref:System.Windows.Automation.ControlType.List> ドロップダウン ボタンがクリックされたときに表示される選択肢を格納しているコントロール。 サブコントロールで使用すると、 <xref:System.Windows.Automation.ControlType.List> のコントロール ビューにのみ、 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] \(コンテンツ ビュー\) ではなくツリーです。  
  
 サブコントロールで使用すると、 <xref:System.Windows.Automation.ControlType.List> が、 `Name` が割り当てられるプロパティです。  
  
 A <xref:System.Windows.Automation.ControlType.List> 含めることができる <xref:System.Windows.Automation.ControlType.DataItem> コントロールです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ListItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ListItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ListItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ListItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これはリスト コントロールの子項目リスト項目のコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Header> リスト コントロールの子にすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizedControlType">
      <MemberSignature Language="C#" Value="public string LocalizedControlType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalizedControlType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Automation.ControlType.LocalizedControlType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール型の説明を取得します。</summary>
        <value>"ボタン" など、コントロール型のローカライズされた説明。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、すべてのコントロール型の検索は、リフレクションとその <xref:System.Windows.Automation.ControlType.LocalizedControlType%2A> プロパティは、他の情報と共に出力します。  
  
 [!code-csharp[UIAControlTypePatterns\_snip\#101](~/samples/snippets/csharp/VS_Snippets_Wpf/UIAControlTypePatterns_snip/CSharp/GetPatternsForm.cs#101)]
 [!code-vb[UIAControlTypePatterns\_snip\#101](~/samples/snippets/visualbasic/VS_Snippets_Wpf/UIAControlTypePatterns_snip/visualbasic/getpatternsform.vb#101)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupById">
      <MemberSignature Language="C#" Value="public static System.Windows.Automation.ControlType LookupById (int id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Automation.ControlType LookupById(int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Automation.ControlType.LookupById(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="id">コントロールの種類の識別子。</param>
        <summary>取得、 <see cref="T:System.Windows.Automation.ControlType" /> 指定の数値識別子をカプセル化します。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、コントロールの種類がで識別される、 <xref:System.Windows.Automation.ControlType> オブジェクトです。 このメソッドでは、数値の識別子のみがわかっている場合は、このようなオブジェクトを構築することができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Menu">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Menu;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Menu" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Menu" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション ウィンドウの最上位メニューなどのメニュー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メニューがメニュー項目のコレクションのコンテナー下に表示されるコントロールのインスタンス **ファイル** をクリックして、格納しているとき **新規**, 、**開く**, 、という具合です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType MenuBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType MenuBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.MenuBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通常は、一連の最上位メニュー、メニュー バー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.MenuBar> コントロールの種類は、一連のアプリケーションのトップレベルのメニューのコンテナーを表します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MenuItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType MenuItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType MenuItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.MenuItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.MenuItem> の子である、 <xref:System.Windows.Automation.ControlType.Menu> または <xref:System.Windows.Automation.ControlType.MenuBar> コントロールです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pane">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Pane;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Pane" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Pane" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウ コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Pane> 内のコンテンツを視覚的に分離するために使用する <xref:System.Windows.Automation.ControlType.Window>です。 ユーザーは、通常、状況に応じて、タブ、f6 キーまたは ctrl キーを押しながら TAB を押すと、ペイン間が移動します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProgressBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ProgressBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ProgressBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ProgressBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時間のかかる操作の進行状況を視覚的に示す進行状況バー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioButton">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType RadioButton;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType RadioButton" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.RadioButton" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これは、選択機構することができますが 1 つだけ選択した項目グループにオプション ボタン コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ScrollBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ScrollBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ScrollBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション ウィンドウのスクロール バーなどのスクロール バー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.ScrollBar> コントロールの種類には、一連ボタンとユーザーがマウスを使用して、ウィンドウまたはアイテムのコンテナーの内容をスクロールできるようにする \[thumb\] コントロールにはが含まれています。  
  
 使用して、 <xref:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId%2A> プロパティを区別するために、 <xref:System.Windows.Automation.ControlType.Button> 大きなインクリメント、大規模なデクリメント、小さな増分、および小規模デクリメント ボタンに対応する要素。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Separator">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Separator;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Separator" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Separator" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニューやツールバーなどのコントロールに視覚的に区切る区切り記号を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Slider">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Slider;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Slider" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Slider" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スライダー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Slider> コントロールの種類に関連付けられたボタンのセットから成る、 <xref:System.Windows.Automation.ControlType.Edit> コントロールをユーザーが項目のセットから選択するか、範囲内での数値を設定できるようにします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Spinner">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Spinner;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Spinner" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Spinner" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スピン ボックス コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Spinner> コントロールの種類は、一連の項目から選択するか、範囲内から数値を設定するユーザーを有効にするボタンのセットで構成されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SplitButton">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType SplitButton;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType SplitButton" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.SplitButton" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のアクションを実行し、その他のアクションの一覧にも拡張できますボタンは、分割ボタンを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType StatusBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType StatusBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.StatusBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ステータス バー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Automation.ControlType.StatusBar> コントロールの種類は、通常の subcontrols <xref:System.Windows.Automation.ControlType.Window> コントロール型 [!INCLUDE[TLA2#tla_uiautomation](~/includes/tla2sharptla-uiautomation-md.md)] 要素。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tab">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Tab;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Tab" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Tab" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タブ コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Tab> を少なくとも 1 つを含むコントロールの種類は、 <xref:System.Windows.Automation.ControlType.TabItem> 子コントロール。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TabItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TabItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TabItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タブ コントロールのページを表すタブ項目のコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Table;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Table" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Table" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テーブルを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Table> コントロールの種類がに似ていますが、 <xref:System.Windows.Automation.ControlType.DataGrid> テキストのみが含まれていますが、します。 テーブルを含めることも <xref:System.Windows.Automation.ControlType.Header> の型を制御します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Text;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Text" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Text" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト ボックスまたはリッチ テキスト ボックスなどのための編集コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Text> コントロールをなど、スタンドアロンのコントロールとして使用できる、 <xref:System.Windows.Automation.ControlType.Edit> コントロール、またはの領域などのサブコンポーネントとして、 <xref:System.Windows.Automation.ControlType.ComboBox> 、ユーザーが値を入力できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Thumb">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Thumb;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Thumb" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Thumb" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>別の位置にドラッグできるスクロール バーのコントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Thumb> のサブコントロールとしてコントロールを使用して、 <xref:System.Windows.Automation.ControlType.ScrollBar> の種類を制御します。 サブコントロールで、 <xref:System.Windows.Automation.ControlType.Thumb> が、 <xref:System.Windows.Automation.AutomationElement.NameProperty>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TitleBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TitleBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TitleBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのキャプション バーを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolBar">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ToolBar;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ToolBar" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ToolBar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーション ウィンドウで、コマンド ボタンのセットを含むコントロールなどのツールバーを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToolTip">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType ToolTip;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType ToolTip" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.ToolTip" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ツールヒント コントロールと、ポインターを移動、コントロールの上またはタブ移動するときにも、キーボードを使用してコントロールに結果として表示される情報ウィンドウを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tree">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Tree;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Tree" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Tree" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ツリー コントロールを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.Tree> コントロール型の階層構造のコンテナーは、 <xref:System.Windows.Automation.ControlType.TreeItem> または <xref:System.Windows.Automation.ControlType.DataItem> の型を制御します。  
  
 ツリーの各ノードには、他のノードを含めることができます。  子としてのノードを表示することが含まれるノードを展開または折りたたみます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TreeItem">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType TreeItem;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType TreeItem" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.TreeItem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>内のノードを識別する、 <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> コントロールです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Windows.Automation.ControlType.TreeItem> コントロールの種類は、のサブコントロールとしてのみ使用できます、 <xref:System.Windows.Automation.ControlType.Tree> コントロールです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.Automation.ControlType Window;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.Automation.ControlType Window" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Automation.ControlType.Window" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>UIAutomationTypes</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Automation.ControlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>子オブジェクトが格納されるウィンドウ フレームを識別します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この種類のコントロールが常にサポート <xref:System.Windows.Automation.WindowPattern>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>