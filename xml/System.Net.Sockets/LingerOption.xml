<Type Name="LingerOption" FullName="System.Net.Sockets.LingerOption">
  <TypeSignature Language="C#" Value="public class LingerOption" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LingerOption extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.LingerOption" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>指定するかどうか、 <see cref="T:System.Net.Sockets.Socket" /> は、呼び出し後に接続されたまま、 <see cref="M:System.Net.Sockets.Socket.Close" /> または <see cref="M:System.Net.Sockets.TcpClient.Close" /> メソッドと状態のままにする時間の長さ接続、データが、送信する場合。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ある可能性がありますもデータ送信のネットワーク バッファーで使用できるアプリケーションを呼び出してから、 <xref:System.Net.Sockets.Socket> または <xref:System.Net.Sockets.TcpClient> メソッドです。 量を指定する場合に、 <xref:System.Net.Sockets.Socket> は終了タグの後の未送信のデータを送信するを作成しよう、 <xref:System.Net.Sockets.LingerOption> で、 `enable` パラメーターを設定する `true`, 、および `seconds` パラメーターが必要な時間数に設定します。`seconds` 時間かを示すためにパラメーターが使用される、 <xref:System.Net.Sockets.Socket> タイムアウトするまでに接続したままにします。 たくない場合、 <xref:System.Net.Sockets.Socket> 、期間終了後に接続したまま、次のように作成します。、 <xref:System.Net.Sockets.LingerOption> インスタンス、 `enable` パラメーターを設定する `true` と `seconds` パラメーター 0 に設定します。 ここで、 <xref:System.Net.Sockets.Socket> は直ちに終了し、未送信のすべてのデータは失われます。 作成されると、渡す、 <xref:System.Net.Sockets.LingerOption> に、 <xref:System.Net.Sockets.Socket.SetSocketOption%2A?displayProperty=fullName> メソッドです。 データを送受信する場合、 <xref:System.Net.Sockets.TcpClient>, 、設定、 <xref:System.Net.Sockets.LingerOption> インスタンス、 <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=fullName> プロパティです。  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上に大きな意味です。 これは、既定の動作、 <xref:System.Net.Sockets.Socket> ときに、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていないと、 <xref:System.Net.Sockets.TcpClient> ときに、 <xref:System.Net.Sockets.TcpClient.LingerState%2A> プロパティが設定されていません。  
  
   
  
## 例  
 次の例では以前に作成した設定 <xref:System.Net.Sockets.Socket> 呼び出した後に 1 秒間の待機、 <xref:System.Net.Sockets.Socket.Close%2A> メソッドです。  
  
 [!code-cpp[Classic LingerOption Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LingerOption (bool enable, int seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool enable, int32 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.LingerOption.#ctor(System.Boolean,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="enable" Type="System.Boolean" />
        <Parameter Name="seconds" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="enable">
          <see langword="true" /> 後に接続したままに、 <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出された以外の場合、 <see langword="false" />です。</param>
        <param name="seconds">後の接続を維持する秒数、 <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドが呼び出されます。</param>
        <summary>
          <see cref="T:System.Net.Sockets.LingerOption" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ある可能性がありますもデータ送信のネットワーク バッファーで使用できるを閉じた後、 <xref:System.Net.Sockets.Socket>です。 使用して、 `enable` かどうかを指定するパラメーター、 <xref:System.Net.Sockets.Socket> close メソッドが呼び出された後に未送信のデータの送信を続行します。 使用して、 `seconds` 時間かを示すためにパラメーター、 <xref:System.Net.Sockets.Socket> タイムアウトするまでに未送信のデータの転送を試みます。 指定した場合 `true` の `enable` パラメーターおよび 0 を `seconds` 、パラメーター、 <xref:System.Net.Sockets.Socket> は出力方向のネットワーク バッファーにデータの左側がなくなるまで、データを送信ましょう。 指定した場合 `false` の `enable` 、パラメーター、 <xref:System.Net.Sockets.Socket> は直ちに終了し、未送信のすべてのデータは失われます。  
  
 動作を次の表に示します、 <xref:System.Net.Sockets.Socket.Close%2A?displayProperty=fullName> と <xref:System.Net.Sockets.TcpClient.Close%2A?displayProperty=fullName> の方法で使用できる値に基づいて、 `enable` と `seconds` 閉じてインスタンスが作成され設定する場合のパラメーター、 <xref:System.Net.Sockets.Socket.LingerState%2A?displayProperty=fullName> または <xref:System.Net.Sockets.TcpClient.LingerState%2A?displayProperty=fullName> プロパティです。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------|  
|`false` \(無効\)、既定値|タイムアウトは、必要に応じて、されません \(既定値\)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット \(TCP など\) のデータ送信を試みますが有効期限です。|  
|`true` \(有効\)|0 以外のタイムアウト|指定されたタイムアウトに達すると、試行が失敗した場合は、Winsock 接続がリセットされるまで、保留中のデータ送信を試みます。|  
|`true` \(有効\)|0 のタイムアウト|保留中のデータを破棄します。 接続志向ソケット \(TCP など\) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上に大きな意味です。 これは、ソケットの既定の動作と、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていません。  
  
 ときに、 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> にプロパティが格納されている、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定も、既定の IP プロトコル タイムアウトはまだ適用してオーバーライドできます。  
  
   
  
## 例  
 次の例では以前に作成した設定 <xref:System.Net.Sockets.Socket> 呼び出した後に 1 秒間の待機、 <xref:System.Net.Sockets.Socket.Close%2A> メソッドです。  
  
 [!code-cpp[Classic LingerOption Example\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic LingerOption Example/CPP/source.cpp#1)]
 [!code-csharp[Classic LingerOption Example\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic LingerOption Example/CS/source.cs#1)]
 [!code-vb[Classic LingerOption Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic LingerOption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または後に待機するかどうかを示す値を設定、 <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Net.Sockets.Socket" /> 後に待機する必要があります <see cref="M:System.Net.Sockets.Socket.Close" /> が呼び出された場合、それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティを決定するかどうか、 <xref:System.Net.Sockets.Socket> 終了タグの後の待機です。 この値に変更 `true` または `false` し、変更された渡す <xref:System.Net.Sockets.LingerOption> に、 <xref:System.Net.Sockets.Socket.SetSocketOption%2A> メソッドまたはセット、 <xref:System.Net.Sockets.TcpClient.LingerState%2A> または <xref:System.Net.Sockets.Socket.LingerState%2A> property.to が接続の待機を有効または無効にします。  
  
 次の表の有効な値では、動作、 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティおよび <xref:System.Net.Sockets.LingerOption.LingerTime%2A> にプロパティが格納されている、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティです。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------|  
|`false` \(無効\)、既定値|タイムアウトは、必要に応じて、されません \(既定値\)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット \(TCP など\) のデータ送信を試みますが有効期限です。|  
|`true` \(有効\)|0 以外のタイムアウト|指定されたタイムアウトに達すると、試行が失敗した場合は、Winsock 接続がリセットされるまで、保留中のデータ送信を試みます。|  
|`true` \(有効\)|0 のタイムアウト|保留中のデータを破棄します。 接続志向ソケット \(TCP など\) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上に大きな意味です。 これは、ソケットの既定の動作と、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていません。  
  
 ときに、 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> にプロパティが格納されている、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定も、既定の IP プロトコル タイムアウトはまだ適用してオーバーライドできます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LingerTime">
      <MemberSignature Language="C#" Value="public int LingerTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LingerTime" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.LingerOption.LingerTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を呼び出した後に接続しておく時間、 <see cref="M:System.Net.Sockets.Socket.Close" /> メソッドに送信されるデータのままの場合。</summary>
        <value>呼び出した後に接続しておく秒単位での時間 <see cref="M:System.Net.Sockets.Socket.Close" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 長時間閉じた方法を決定する場合は、この値を使用 <xref:System.Net.Sockets.Socket> にタイムアウトするまでに未送信のデータが転送されます。 秒単位で、目的のタイムアウト期間、この値を設定することもできます。  
  
 場合、 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティは、 `true`, を設定して <xref:System.Net.Sockets.LingerOption.LingerTime%2A> を 0 に、 <xref:System.Net.Sockets.Socket> 保留中の送信のネットワーク バッファーに送信するデータがすべて破棄します。 この値を変更する場合は、渡す必要があります、変更された <xref:System.Net.Sockets.LingerOption> インスタンスを <xref:System.Net.Sockets.Socket.SetSocketOption%2A> メソッドまたはセット、 <xref:System.Net.Sockets.TcpClient.LingerState%2A> または <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティです。  
  
 次の表の有効な値では、動作、 <xref:System.Net.Sockets.LingerOption.Enabled%2A> プロパティおよび <xref:System.Net.Sockets.LingerOption.LingerTime%2A> にプロパティが格納されている、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティです。  
  
|`enable`|`seconds`|動作|  
|--------------|---------------|--------|  
|`false` \(無効\)、既定値|タイムアウトは、必要に応じて、されません \(既定値\)。|既定値まで IP プロトコル タイムアウト保留中の接続指向のソケット \(TCP など\) のデータ送信を試みますが有効期限です。|  
|`true` \(有効\)|0 以外のタイムアウト|指定されたタイムアウトに達すると、試行が失敗した場合は、Winsock 接続がリセットされるまで、保留中のデータ送信を試みます。|  
|`true` \(有効\)|0 のタイムアウト|保留中のデータを破棄します。 接続志向ソケット \(TCP など\) の場合は、Winsock は接続をリセットします。|  
  
 IP スタックは、接続の往復時間に基づいて使用する既定の IP プロトコルのタイムアウト期間を計算します。 ほとんどの場合、スタックによって計算されたタイムアウトは、アプリケーションで定義された 1 つ以上に大きな意味です。 これは、ソケットの既定の動作と、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティが設定されていません。  
  
 ときに、 <xref:System.Net.Sockets.LingerOption.LingerTime%2A> にプロパティが格納されている、 <xref:System.Net.Sockets.Socket.LingerState%2A> プロパティは、既定の IP プロトコル タイムアウトよりも大きい設定も、既定の IP プロトコル タイムアウトはまだ適用してオーバーライドできます。  
  
   
  
## 例  
 次の例では、このプロパティの値を表示します。  
  
 [!code-cpp[Socket\_Socket\_Options\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Socket_Socket_Options/CPP/source.cpp#2)]
 [!code-csharp[Socket\_Socket\_Options\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Socket_Socket_Options/CS/source.cs#2)]
 [!code-vb[Socket\_Socket\_Options\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Socket_Socket_Options/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>