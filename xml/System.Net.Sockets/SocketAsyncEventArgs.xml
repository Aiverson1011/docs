<Type Name="SocketAsyncEventArgs" FullName="System.Net.Sockets.SocketAsyncEventArgs">
  <TypeSignature Language="C#" Value="public class SocketAsyncEventArgs : EventArgs, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SocketAsyncEventArgs extends System.EventArgs implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.SocketAsyncEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>非同期ソケット操作を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.SocketAsyncEventArgs> クラスは、一連の機能強化の一部、 <xref:System.Net.Sockets.Socket?displayProperty=fullName> によって特殊な高パフォーマンスのソケット アプリケーションで使用できる代替非同期パターンを提供するクラス。 このクラスは、高パフォーマンスを必要とするネットワーク サーバー アプリケーションを特別に設計されました。 強化された非同期パターンのみを使用できます。 またはでのみ、ホット領域 \(大量のデータを受信する場合など\) を対象とするアプリケーション。  
  
 これらの拡張機能の主な機能は、大量の非同期ソケット I\/O 操作時にオブジェクトの同期と繰り返しの割り当てを回避します。 現在実装 Begin\/end デザイン パターン、 <xref:System.Net.Sockets.Socket?displayProperty=fullName> クラスが必要、 <xref:System.IAsyncResult?displayProperty=fullName> 非同期ソケット操作ごとのオブジェクトが割り当てられます。  
  
 新しい <xref:System.Net.Sockets.Socket?displayProperty=fullName> クラスの拡張機能、によって再利用可能な操作が記載されている非同期ソケット <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクトが割り当てられ、アプリケーションで維持します。 高パフォーマンスのソケット アプリケーションが最適な維持する必要がある重複したソケット操作の量。 アプリケーションでの数だけ作成できます、 <xref:System.Net.Sockets.SocketAsyncEventArgs> 必要のあるオブジェクト。 たとえば、サーバー アプリケーションは、15 のソケットが着信クライアント接続の速度をサポートするために、未処理の操作を常にそのまま使用しておく必要がある場合に、割り当てることができます 15 の再利用可能な <xref:System.Net.Sockets.SocketAsyncEventArgs> を目的とするオブジェクト。  
  
 このクラスを使用して非同期ソケット操作を実行するためのパターンは、次の手順で構成されます。  
  
1.  新しい割り当て <xref:System.Net.Sockets.SocketAsyncEventArgs> コンテキスト オブジェクト、またはアプリケーション プールから無料版を取得します。  
  
2.  プロパティの設定のコンテキストにオブジェクトを操作について \(完了コールバック メソッド、データ バッファー、バッファーと、転送するデータの最大量にオフセット\) を実行します。  
  
3.  非同期操作を開始するには、適切なソケット メソッド \(xxxAsync\) を呼び出します。  
  
4.  非同期ソケット メソッド \(xxxAsync\) が true の場合、コールバックに返される場合は、完了状態のコンテキスト プロパティを照会します。  
  
5.  非同期ソケット メソッド \(xxxAsync\) が false を返した場合、操作を同期的に完了します。 コンテキスト プロパティは、操作の結果を照会することがあります。  
  
6.  別の操作のコンテキストを再利用、プールに戻さないまたは破棄します。  
  
 新しい非同期ソケット操作コンテキスト オブジェクトの有効期間は、アプリケーション コードと非同期の I\/O 参照によって参照によって決まります。 アプリケーションで非同期ソケット操作メソッドのいずれかのパラメーターとして送信された後に非同期ソケット操作コンテキスト オブジェクトへの参照を保持する必要はありません。 完了時のコールバックが返されるまでは参照先に残ります。 ただし、今後の非同期ソケット操作を再利用できるように、コンテキストへの参照を保持するアプリケーションのことをお勧めします。  
  
   
  
## 例  
 次のコード例を使用するソケット サーバーの接続ロジックを実装して、 <xref:System.Net.Sockets.SocketAsyncEventArgs> クラスです。 接続を受け入れた後は、クライアントから読み取られるすべてのデータは、クライアントに返されます。 読み取りと、クライアントが切断されるまで、クライアント パターンにエコーが続きます。 コード例では、この例で使用される BufferManager クラスが表示される、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29> メソッドです。 コード例ではこの例で使用される SocketAsyncEventArgsPool クラスが表示される、 <xref:System.Net.Sockets.SocketAsyncEventArgs.%23ctor%2A> コンス トラクターです。  
  
 [!code-csharp[NCLAsyncSocketServer\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAsyncSocketServer/CS/AsyncSocketServer.cs#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IAsyncResult" />
    <altmember cref="T:System.Net.Sockets.Socket" />
    <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
    <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SocketAsyncEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>空の <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> インスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの呼び出し後にすべてのプロパティには、既定値があります。  
  
-   オブジェクト参照は null になります。  
  
-   整数を返すプロパティでは、0 を返します。  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.LastOperation%2A> プロパティと等しくなる <xref:System.Net.Sockets.SocketAsyncOperation.None>します。  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags%2A> プロパティと同じになります <xref:System.Net.Sockets.TransmitFileOptions.UseDefaultWorkerThread?displayProperty=fullName>, 、使用するフラグを指定するしません。  
  
-   <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags%2A> プロパティと等しくなる <xref:System.Net.Sockets.SocketAsyncOperation.None>します。  
  
 呼び出し元は、オブジェクトを適切な非同期ソケット \(xxxAsync\) メソッドに渡す前に適切なプロパティを設定する必要があります。  
  
   
  
## 例  
 次のコード例は、再利用可能なのコレクションを表します <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクトです。  
  
 [!code-csharp[NCLAsyncSocketServer\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAsyncSocketServer/CS/AsyncSocketServer.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">プラットフォームがサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket AcceptSocket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または使用するソケットまたは非同期ソケット メソッドを使用して接続を受け入れるために作成されたソケットを設定します。</summary>
        <value>
          <see cref="T:System.Net.Sockets.Socket" /> や非同期ソケット メソッドを使用して接続を受け入れるために作成されたソケットを使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、既に作成して使用することができます <xref:System.Net.Sockets.Socket> 非同期ソケットを使用する操作をそのまま使用します。 受信操作の完了は、受け入れられた接続を表すソケットを勧めします。 \(Null に設定\) を呼び出す前に指定されていない場合、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A?displayProperty=fullName> メソッド、新しいソケットが自動的に作成し、このプロパティを使用して、完了コールバックでアクセスできることです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Buffer">
      <MemberSignature Language="C#" Value="public byte[] Buffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] Buffer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ソケット メソッドで使用するデータ バッファーを取得します。</summary>
        <value>A <see cref="T:System.Byte" /> 非同期ソケット メソッドで使用するデータ バッファーを表す配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、現在関連付けられているデータ バッファーを取得、 <xref:System.Net.Sockets.SocketAsyncEventArgs> インスタンス。 バッファーを設定する、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A> メソッドを使用する必要があります。  
  
 このプロパティで使用、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName>, 、および <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="Overload:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer" />
      </Docs>
    </Member>
    <Member MemberName="BufferList">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IList&lt;ArraySegment&lt;byte&gt;&gt; BufferList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;valuetype System.ArraySegment`1&lt;unsigned int8&gt;&gt; BufferList" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.ArraySegment&lt;System.Byte&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期ソケット メソッドで使用するデータ バッファーの配列を設定します。</summary>
        <value>
          <see cref="T:System.Collections.IList" /> を表す非同期ソケット メソッドで使用するデータ バッファーの配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、使用、 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName> と <xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName> メソッドです。  
  
 このプロパティは、送信する、または送信したり、データを受信する非同期ソケット操作の受信データを格納するための複数のバッファーを提供するデータの複数のバッファーを提供する使用されます。 複数のバッファーを使用して、 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> でプロパティがサポートされて、 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName> と <xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName> メソッドです。  
  
 場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> プロパティが null 以外の値に設定されている、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティが null である必要がありでは無視されます、 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName> と <xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName> メソッドです。  
  
 場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> null 以外の値に設定された設定が試行され、 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> プロパティを null 以外の値は、例外がスローされます。  
  
 場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> プロパティが null 以外の値に設定されている、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName> と <xref:System.Net.Sockets.Socket.AcceptAsync%2A?displayProperty=fullName> メソッドがスローされます、 <xref:System.ArgumentException>です。  
  
 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> パラメーターは、 <xref:System.Net.Sockets.Socket.DisconnectAsync%2A?displayProperty=fullName> と <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">セット操作で指定されたあいまいなバッファーがあります。 場合にこの例外が発生した、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティが null 以外の値に設定されているし、設定しようとした、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> プロパティを null 値にします。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
      </Docs>
    </Member>
    <Member MemberName="BytesTransferred">
      <MemberSignature Language="C#" Value="public int BytesTransferred { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesTransferred" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソケット操作で転送されたバイト数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> ソケット操作で転送されたバイト数を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、受信したり、データを送信できる非同期ソケット操作で転送されたバイト数を提供します。 0 は、読み取り操作から返された場合、リモート end の接続が終了します。  
  
 このプロパティを除くすべての非同期ソケット操作によって、 <xref:System.Net.Sockets.Socket.DisconnectAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Net.Sockets.SocketAsyncEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Net.Sockets.SocketAsyncEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Net.Sockets.SocketAsyncEventArgs.Completed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Net.Sockets.SocketAsyncEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作を完了するために使用するイベントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed> イベントは、クライアント アプリケーションの非同期ソケット操作を完了するための手段を提供します。 内のイベントにイベント ハンドラーを関連付ける、 <xref:System.Net.Sockets.SocketAsyncEventArgs> インスタンス非同期ソケット操作を開始すると、それ以外の場合、アプリケーションはできません、操作が完了したときを判断します。  
  
 によって参照される完了コールバック デリゲート、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed> イベントには、クライアントの非同期ソケット操作の処理が完了するプログラム ロジックが含まれています。  
  
 イベントがシグナル状態になるアプリケーションを使用して、 <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクト パラメーター、完了した非同期ソケット操作の状態を取得します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectByNameError">
      <MemberSignature Language="C#" Value="public Exception ConnectByNameError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception ConnectByNameError" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>接続エラーの場合、例外を取得ときに、 <see cref="T:System.Net.DnsEndPoint" /> が使用されました。</summary>
        <value>
          <see cref="T:System.Exception" /> の接続エラーの原因が示されているときに、 <see cref="T:System.Net.DnsEndPoint" /> が指定されました、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 接続エラーの場合と、 <xref:System.Net.DnsEndPoint> が指定されました、 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A> プロパティには、 <xref:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError%2A> プロパティは、ソケット エラーの原因の詳細を示す例外が格納されます。  
  
 ときに、 <xref:System.Net.IPEndPoint> が指定されました、 <xref:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint%2A> プロパティと接続エラーが発生すると、 <xref:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError%2A> プロパティ、 `null` 参照します。  
  
 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A> プロパティは、接続エラーの場合は常に設定します。<xref:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError%2A> プロパティが接続に失敗した場合、エラーに関する詳細を格納、 <xref:System.Net.DnsEndPoint>です。 確認するアプリケーションにのみ必要なアプリケーションがのみに関心がある場合、接続の操作が成功したか失敗するかどうか、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SocketError%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Net.Sockets.Socket.ConnectAsync" />
      </Docs>
    </Member>
    <Member MemberName="ConnectSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket ConnectSocket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket ConnectSocket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>作成と接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトが正常に完了した後、 <see cref="Overload:System.Net.Sockets.Socket.ConnectAsync" /> メソッドです。</summary>
        <value>接続されている <see cref="T:System.Net.Sockets.Socket" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正常に完了した後、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A> メソッド、このプロパティには、新しく作成して接続が含まれている <xref:System.Net.Sockets.Socket> オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Net.Sockets.Socket.ConnectAsync" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期操作で送信または受信するバイト数で、データの最大量を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 最大量 \(バイト単位\) を送信または受信のデータを格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを呼び出して、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A> メソッドです。  
  
 このプロパティで使用、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName>, 、および <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="Overload:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DisconnectReuseSocket">
      <MemberSignature Language="C#" Value="public bool DisconnectReuseSocket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DisconnectReuseSocket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.DisconnectReuseSocket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または切断操作の後にソケットを再利用できるかどうかを指定する値を設定します。</summary>
        <value>A <see cref="T:System.Boolean" /> ソケットが切断操作の後に再利用できるかどうかを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して、動作の変更を <xref:System.Net.Sockets.Socket.DisconnectAsync%2A?displayProperty=fullName> メソッドです。 かどうかは true、ソケットによって切断、 <xref:System.Net.Sockets.Socket.DisconnectAsync%2A?displayProperty=fullName> メソッドを再利用できる以降のソケットで補完を切断した後を受け入れるか、操作を接続します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>使用されるアンマネージ リソースを解放、 <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> インスタンス化し、必要に応じてマネージ リソースを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、パブリック `Dispose()` メソッドおよび <xref:System.Object.Finalize%2A> メソッドです。`Dispose()` 保護対象の起動 `Dispose(Boolean)` メソッドを `disposing` パラメーターを設定する `true`です。<xref:System.Object.Finalize%2A> 呼び出す `Dispose` と `disposing` 設定 `false`します。  
  
 `disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Net.Sockets.SocketAsyncEventArgs> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。 このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。<see langword="Dispose(Boolean)" /> をオーバーライドする場合は、以前に <see langword="Dispose" /> を呼び出したときに破棄されたオブジェクトを参照しないように注意する必要があります。<see langword="Dispose(Boolean)" /> の実装方法の詳細については、「[[&lt;topic:\/\/cpconImplementingDisposeMethod&gt;]](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9)」を参照してください。  
  
 詳細については <see langword="Dispose" /> と <see cref="M:System.Object.Finalize" />, を参照してください [[&lt;topic:\/\/cpconCleaningUpUnmanagedResources&gt;]](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) と [Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/ja-jp/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)します。</para>
        </block>
        <altmember cref="M:System.Object.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SocketAsyncEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.Sockets.SocketAsyncEventArgs" /> クラスによって使用されていたリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.SocketAsyncEventArgs> クラスのファイナライザーが閉じ、 <xref:System.Net.Sockets.SocketAsyncEventArgs> に関連付けられているリソースを解放し、 <xref:System.Net.Sockets.SocketAsyncEventArgs>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LastOperation">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketAsyncOperation LastOperation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketAsyncOperation LastOperation" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketAsyncOperation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このコンテキスト オブジェクトで最近実行されたソケット操作の種類を取得します。</summary>
        <value>A <see cref="T:System.Net.Sockets.SocketAsyncOperation" /> ソケット操作の種類を示すインスタンスをこのコンテキスト オブジェクトで最も最近実行します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、これを使用して最も最近完了した非同期ソケット操作を示します。 <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクトです。 このプロパティの値になります <xref:System.Net.Sockets.SocketAsyncOperation.None?displayProperty=fullName> まで、 <xref:System.Net.Sockets.SocketAsyncEventArgs> 非同期ソケット操作を開始するインスタンスを使用します。 プロパティを受け取るメソッドで実行される操作の種類に設定し、 <xref:System.Net.Sockets.SocketAsyncEventArgs> をパラメーターとして。 このプロパティには、複数の種類の非同期ソケット操作に対する 1 つの完了コールバック デリゲートを使用してより簡単に容易になります。  
  
 このプロパティの値で有効な <xref:System.Net.Sockets.SocketAsyncEventArgs> をインスタンス化されるまで、 <xref:System.Net.Sockets.SocketAsyncEventArgs> インスタンスは、別の非同期ソケット \(xxxAsync\) 操作に使用します。  
  
 すべての非同期ソケット \(xxxAsync\) メソッドによって設定されます。  
  
 非同期ソケット メソッド \(xxxAsync\) を呼び出して、 <xref:System.Net.Sockets.Socket?displayProperty=fullName> クラスは、このプロパティの値を設定します。 このプロパティは、アプリケーションによって実装される SocketAsyncCallback 完了ルーチンで使用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="T:System.Net.Sockets.SocketAsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="Offset">
      <MemberSignature Language="C#" Value="public int Offset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Offset" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>によって参照されるデータのバッファーにオフセットをバイト単位で取得、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティです。</summary>
        <value>
          <see cref="T:System.Int32" /> によって参照されるデータ バッファーのオフセット \(バイト単位\) を含む、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの説明内のデータのバイト オフセット、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティです。 この設定は呼び出すことによって、 <xref:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer%2A> メソッドです。  
  
 このプロパティには適用されません、 <xref:System.Net.Sockets.SocketAsyncEventArgs.BufferList%2A> プロパティです。  
  
 このプロパティで使用、 <xref:System.Net.Sockets.Socket.AcceptAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName>, 、および <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
      </Docs>
    </Member>
    <Member MemberName="OnCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnCompleted (System.Net.Sockets.SocketAsyncEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCompleted(class System.Net.Sockets.SocketAsyncEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Net.Sockets.SocketAsyncEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">通知されるイベントです。</param>
        <summary>非同期操作が完了したときに呼び出されるメソッドを表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ユーザー コードで呼び出すことはできません。 このメソッドは、の内部から呼び出される、 <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクトの現在の操作が完了するとします。 このメソッドは、すべての非同期ソケット \(xxxAsync\) メソッドを使用します。  
  
 継承するクラスを作成するアプリケーション <xref:System.Net.Sockets.SocketAsyncEventArgs> この完了通知をフックし、操作に割り当てられているすべてのリソースをクリーンアップするには、このメソッドをオーバーライドします。 既定の実装だけを生成、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Completed> イベントです。  
  
 このメソッドは、以降の非同期ソケット操作の完了時のコールバックとして使用するイベント ハンドラーをフックするのには使用されます。 呼び出し元でを使用して非同期 \(xxxAsync\) のいずれかの非同期ソケット操作を開始する前にこのメソッドから継承された少なくとも 1 つのコールバック デリゲートを実装する必要があります、 <xref:System.Net.Sockets.Socket?displayProperty=fullName> クラスです。  
  
 呼び出し元の <xref:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted%2A> メソッドは、クライアント アプリケーションの非同期ソケット操作を完了するための手段を提供します。 非同期ソケット操作を開始すると、コールバック デリゲートを実装する必要があります。 継承された完了コールバックの代理人、 <xref:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted%2A> メソッドは、クライアントの非同期ソケット操作の処理が完了するプログラム ロジックを含める必要があります。  
  
 非同期操作がシグナル状態になるアプリケーションを使用して、 <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクト パラメーター、完了した非同期ソケット操作の状態を取得します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ReceiveMessageFromPacketInfo">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.IPPacketInformation ReceiveMessageFromPacketInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.IPPacketInformation ReceiveMessageFromPacketInfo" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.IPPacketInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信したパケットのインターフェイスの IP アドレスを取得します。</summary>
        <value>
          <see cref="T:System.Net.Sockets.IPPacketInformation" /> 宛先 IP アドレスと受信パケットのインターフェイスを格納しているインスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを使用して受信したパケットに関する情報を提供する、 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName> メソッドです。  
  
 このプロパティは、使用、 <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="T:System.Net.Sockets.IPPacketInformation" />
        <altmember cref="P:System.Net.Sockets.IPPacketInformation.Address" />
        <altmember cref="P:System.Net.Sockets.IPPacketInformation.Interface" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RemoteEndPoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint RemoteEndPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint RemoteEndPoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期操作の場合、リモートの IP エンドポイントを設定します。</summary>
        <value>
          <see cref="T:System.Net.EndPoint" /> を表す非同期操作の場合、リモートの IP エンドポイント。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、リモートのエンドポイントを指定します。 このプロパティで指定し、リモート エンドポイントを使用して接続するために、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName> メソッドです。 このプロパティで指定し、リモート エンドポイントを使用してデータを送信するために <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。 このプロパティを使用してデータの受信元となるリモート エンドポイントを指定できます、 <xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName> または <xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName> メソッドです。  
  
 このプロパティで指定するリモート エンドポイントには、IPv4 または IPv6 アドレスを含めることができます。  
  
 このプロパティは、使用、 <xref:System.Net.Sockets.Socket.ConnectAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveMessageFromAsync%2A?displayProperty=fullName>, 、または <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.EndPoint" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SendPacketsElements">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SendPacketsElement[] SendPacketsElements { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.SendPacketsElement[] SendPacketsElements" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SendPacketsElement[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定で使用される非同期操作の場合に送信するバッファーの配列、 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドです。</summary>
        <value>配列 <see cref="T:System.Net.Sockets.SendPacketsElement" /> に送信するバッファーの配列を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バッファーの配列には、ファイルまたはメモリまたは一連のデータ バッファーのメモリ内のファイルを表すことができます。 このプロパティは、使用、 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.SendPacketsElement" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="SendPacketsFlags">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TransmitFileOptions SendPacketsFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.TransmitFileOptions SendPacketsFlags" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TransmitFileOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ビットごとの組み合わせを取得または <see cref="T:System.Net.Sockets.TransmitFileOptions" /> によって使用される非同期操作の値、 <see cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" /> メソッドです。</summary>
        <value>A <see cref="T:System.Net.Sockets.TransmitFileOptions" /> 、非同期操作に使用される値のビットごとの組み合わせを格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを指定、 <xref:System.Net.Sockets.TransmitFileOptions> で使用される、 <xref:System.Net.Sockets.Socket.SendPacketsAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="T:System.Net.Sockets.TransmitFileOptions" />
      </Docs>
    </Member>
    <Member MemberName="SendPacketsSendSize">
      <MemberSignature Language="C#" Value="public int SendPacketsSendSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SendPacketsSendSize" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("unused property")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または送信操作で使用されるデータ ブロックのバイト単位のサイズを設定します。</summary>
        <value>
          <see cref="T:System.Int32" /> 送信操作で使用されるデータ ブロックのバイト単位のサイズを格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 0、ソケット レイヤーの既定の送信サイズを選択できるようにするには、このプロパティを設定します。 このプロパティを 0 xffffffff を有効に設定すると、呼び出し元のサイズと各送信要求の内容を制御するを使用して実現、 <xref:System.Net.Sockets.SendPacketsElement.EndOfPacket%2A?displayProperty=fullName> プロパティです。 この機能は、個々 の送信要求のサイズに制限を加えるメッセージ プロトコルに便利です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.SendPacketsElement.EndOfPacket" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBuffer">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期ソケット メソッドで使用するデータ バッファーを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティを null に、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A> と <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A> プロパティを 0 にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBuffer">
      <MemberSignature Language="C#" Value="public void SetBuffer (int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBuffer(int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="offset">操作を開始するデータ バッファー内のバイト オフセット。</param>
        <param name="count">送信または受信バッファー内のバイト単位のデータの最大量。</param>
        <summary>非同期ソケット メソッドで使用するデータ バッファーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `offset` と `count` パラメーターが負の数値にすることはできません。 組み合わせ、 `offset` と `count` パラメーターを指定のバッファー配列の境界、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティです。  
  
 このメソッドは、設定、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A> プロパティを `count` パラメーターおよび <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A> プロパティを `offset` パラメーター。 場合、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティが null で、このメソッドは、無視、 `offset` と `count` パラメーターと設定、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A> と <xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A> プロパティを 0 にします。  
  
 このメソッドは変わらないので、 <xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">引数が範囲外でした。 場合にこの例外が発生した、 <paramref name="offset" /> パラメーターが 0 の配列の長さより大きいか小さい、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティです。 場合にもこの例外が発生した、 <paramref name="count" /> パラメーターが 0 の配列の長さより大きいか小さい、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティより小さい、 <paramref name="offset" /> パラメーター。</exception>
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
      </Docs>
    </Member>
    <Member MemberName="SetBuffer">
      <MemberSignature Language="C#" Value="public void SetBuffer (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBuffer(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">非同期ソケット メソッドで使用するデータのバッファー。</param>
        <param name="offset">操作を開始するデータ バッファー内のバイト オフセット。</param>
        <param name="count">送信または受信バッファー内のバイト単位のデータの最大量。</param>
        <summary>非同期ソケット メソッドで使用するデータ バッファーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `offset` と `count` パラメーターが負の数値にすることはできません。 組み合わせ、 `offset` と `count` パラメーターは、データの配列の境界で記述する必要があります、 `buffer` パラメーター。  
  
 このメソッドは、設定、 [SetBuffer メソッド \(Byte\<xref:System.Net.Sockets.SocketAsyncEventArgs.Buffer%2A> プロパティを `buffer` 、パラメーター、 [SetBuffer メソッド \(Byte\<xref:System.Net.Sockets.SocketAsyncEventArgs.Count%2A> プロパティを `count` パラメーター、および [SetBuffer メソッド \(Byte\<xref:System.Net.Sockets.SocketAsyncEventArgs.Offset%2A> プロパティを `offset` パラメーター。  
  
   
  
## 例  
 次のコード例を作成および分割することができるに割り当てられている 1 つの大きなバッファー [SetBuffer メソッド \(Byte\<xref:System.Net.Sockets.SocketAsyncEventArgs> ソケット I\/O 操作のそれぞれで使用するためのオブジェクト。 これにより、バッファーを簡単に再利用して、ヒープ メモリの断片化を防ぐ。  
  
 [!code-csharp[NCLAsyncSocketServer\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLAsyncSocketServer/CS/AsyncSocketServer.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">あいまいなバッファーの指定があります。 場合にこの例外が発生した、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティも null でないと、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.BufferList" /> またプロパティは null です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">引数が範囲外でした。 場合にこの例外が発生した、 <paramref name="offset" /> パラメーターが 0 の配列の長さより大きいか小さい、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティです。 場合にもこの例外が発生した、 <paramref name="count" /> パラメーターが 0 の配列の長さより大きいか小さい、 <see cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" /> プロパティより小さい、 <paramref name="offset" /> パラメーター。</exception>
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Buffer" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Count" />
        <altmember cref="P:System.Net.Sockets.SocketAsyncEventArgs.Offset" />
      </Docs>
    </Member>
    <Member MemberName="SocketClientAccessPolicyProtocol">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketClientAccessPolicyProtocol SocketClientAccessPolicyProtocol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketClientAccessPolicyProtocol SocketClientAccessPolicyProtocol" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SocketClientAccessPolicyProtocol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketClientAccessPolicyProtocol</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソケット クライアント アクセス ポリシー ファイルのダウンロードに使用するプロトコルを取得または設定します。</summary>
        <value>
          <see cref="T:System.Net.Sockets.SocketClientAccessPolicyProtocol" /> を返します。  
  
 ソケット クライアント アクセス ポリシー ファイルのダウンロードに使用するプロトコル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.SocketClientAccessPolicyProtocol> クライアント アクセス ポリシー ファイルをダウンロードする方法を指定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SocketError">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketError SocketError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketError SocketError" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SocketError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期ソケット操作の結果を設定します。</summary>
        <value>A <see cref="T:System.Net.Sockets.SocketError" /> 非同期ソケット操作の結果を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、非同期ソケット操作の完了状態を提供します。 値 <xref:System.Net.Sockets.SocketError.Success?displayProperty=fullName> 操作が正常に完了を示します。 このプロパティは、主に、アプリケーションのイベント ハンドラー ルーチンで使用します。  
  
 このプロパティは、すべての非同期ソケット \(xxxAsync\) メソッドで使用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="T:System.Net.Sockets.SocketError" />
      </Docs>
    </Member>
    <Member MemberName="SocketFlags">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.SocketFlags SocketFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Sockets.SocketFlags SocketFlags" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.SocketFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期ソケット操作の結果を取得または非同期操作の動作を設定します。</summary>
        <value>A <see cref="T:System.Net.Sockets.SocketFlags" /> 非同期ソケット操作の結果を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ビットごとの組み合わせを指定、 <xref:System.Net.Sockets.SocketFlags?displayProperty=fullName> 非同期ソケット操作に使用します。  
  
 このプロパティは、使用、 <xref:System.Net.Sockets.Socket.ReceiveAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.ReceiveFromAsync%2A?displayProperty=fullName>, 、<xref:System.Net.Sockets.Socket.SendAsync%2A?displayProperty=fullName>, と <xref:System.Net.Sockets.Socket.SendToAsync%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="T:System.Net.Sockets.SocketFlags" />
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public object UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserToken" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.SocketAsyncEventArgs.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこの非同期ソケット操作に関連付けられているユーザーまたはアプリケーションのオブジェクトを設定します。</summary>
        <value>ユーザーを表すオブジェクトまたはこの非同期ソケット操作に関連付けられているアプリケーションのオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに持つアプリケーションの状態オブジェクトを関連付けるには、アプリケーションが使用する、 <xref:System.Net.Sockets.SocketAsyncEventArgs> オブジェクトです。 主に、このプロパティは、アプリケーション状態をアプリケーションのイベント ハンドラー \(たとえば、非同期操作完了メソッド\) に渡すための方法です。  
  
 このプロパティは、すべての非同期ソケット \(xxxAsync\) メソッドで使用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
        <altmember cref="M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)" />
      </Docs>
    </Member>
  </Members>
</Type>