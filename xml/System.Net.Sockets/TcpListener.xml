<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>TCP ネットワーク クライアントからの接続をリッスンします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener> クラスをリッスンし、同期モードのブロックでの着信接続要求を受け入れる単純なメソッドを提供します。 使用するか、 <xref:System.Net.Sockets.TcpClient> または <xref:System.Net.Sockets.Socket> に接続する、 <xref:System.Net.Sockets.TcpListener>です。 作成、 <xref:System.Net.Sockets.TcpListener> を使用して、 <xref:System.Net.IPEndPoint>, 、ローカル IP アドレスとポート番号、またはポート番号だけです。 指定 <xref:System.Net.IPAddress.Any> ローカル IP アドレスと基になるサービス プロバイダーは、これらの値を割り当てる場合は、ローカル ポート番号の場合は 0 です。 これを行う場合は、行うこともできます、 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> ソケットが接続された後に割り当てられている情報を識別するプロパティです。  
  
 使用して、 <xref:System.Net.Sockets.TcpListener.Start%2A> 受信接続要求のリッスンを開始します。<xref:System.Net.Sockets.TcpListener.Start%2A> いずれかが呼び出されるまでに受信接続をキュー、 <xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドまたはそれがキューに登録 <xref:System.Net.Sockets.SocketOptionName.MaxConnections>します。 いずれかの方法 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> または <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 着信接続要求のキューからの接続をプルするためです。 これら 2 つのメソッドがブロックされます。 使用することができますがブロックされないようにする場合、 <xref:System.Net.Sockets.TcpListener.Pending%2A> 接続要求がキューに使用可能なかどうかを判断するには、最初のメソッドです。  
  
 呼び出す、 <xref:System.Net.Sockets.TcpListener.Stop%2A> を終了するメソッド、 <xref:System.Net.Sockets.TcpListener>です。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A> 承認済みのすべての接続は閉じられません。 これらを個別に閉じるを担当しています。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.Sockets.TcpListener>です。  
  
 [!code-cpp[System.Net.Sockets.TcpListener\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 参照してください <xref:System.Net.Sockets.TcpClient> クライアントなどです。  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">to establish an outgoing connection or accept an incoming request.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">受信の試行の接続をリッスンするポートです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Sockets.TcpListener" /> は指定したポートでリッスンするクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンストラクターは今後は使用しません。 使用して、 <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=fullName> または <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=fullName> コンス トラクターです。  
  
 このコンス トラクターでは、受信試行の接続をリッスンするポート番号を指定することができます。 このコンス トラクターでは、基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。 使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。 この場合、サービス プロバイダーは、1024年 ~ 5000 で、使用可能なポート番号を割り当てます。 使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出するにはこの方法を使用する場合、 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティです。  
  
 呼び出す、 <xref:System.Net.Sockets.TcpListener.Start%2A> 着信接続の要求のリッスンを開始します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.Sockets.TcpListener> ローカル ポート番号を使用します。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 間 <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" />です。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <see cref="T:System.Net.IPEndPoint" /> リスナーのバインド先となるローカル エンドポイントを表す <see cref="T:System.Net.Sockets.Socket" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Sockets.TcpListener" /> クラスが指定のローカル エンドポイントを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号を試行します。 このコンス トラクターを使用して、前に作成する必要があります、 <xref:System.Net.IPEndPoint> 必要なローカル IP アドレスとポート番号を使用します。 これを渡す <xref:System.Net.IPEndPoint> としてコンス トラクターに、 `localEP` パラメーター。  
  
 ローカル アドレスが割り当てられているを限定しない場合は、作成、 <xref:System.Net.IPEndPoint> を使用して <xref:System.Net.IPAddress.Any?displayProperty=fullName> アドレス パラメータと基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てます。 これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを単純化のに役立ちます。 使用されているローカル ポートを限定しない場合は、作成、 <xref:System.Net.IPEndPoint> 0 ポート番号を使用しています。 この場合、サービス プロバイダーは、1024年 ~ 5000 で、使用可能なポート番号を割り当てます。 使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出するにはこの方法を使用する場合、 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティです。  
  
 呼び出す、 <xref:System.Net.Sockets.TcpListener.Start%2A> 着信接続の要求のリッスンを開始します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、のインスタンスを作成、 <xref:System.Net.Sockets.TcpListener> クラスのローカル エンドポイントを使用します。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">
          <see cref="T:System.Net.IPAddress" /> ローカル IP アドレスを表します。</param>
        <param name="port">受信の試行の接続をリッスンするポートです。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Sockets.TcpListener" /> 着信接続をリッスンするクラスは、指定したローカル IP アドレスとポート番号を試みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、ローカル IP アドレスを指定することができ、着信接続をリッスンするポート番号を試行します。 このコンス トラクターを呼び出す前に作成する必要が最初に、 <xref:System.Net.IPAddress> 必要なローカル アドレスを使用します。 これを渡す <xref:System.Net.IPAddress> としてコンス トラクターに、 `localaddr` パラメーター。 ローカル アドレスが割り当てられているを限定しない場合は、指定 <xref:System.Net.IPAddress.Any?displayProperty=fullName> の `localaddr` パラメーター、および基になるサービス プロバイダーは、最も適切なネットワーク アドレスを割り当てられます。 これにより、複数のネットワーク インターフェイスがある場合に、アプリケーションを単純化のに役立ちます。 使用されているローカル ポートを限定しない場合は、ポート番号の場合は 0 を指定できます。 この場合、サービス プロバイダーは、1024年 ~ 5000 で、使用可能なポート番号を割り当てます。 使用してどのようなローカル ネットワーク アドレスとポート番号が割り当てられてを検出するにはこの方法を使用する場合、 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> プロパティです。  
  
 呼び出す、 <xref:System.Net.Sockets.TcpListener.Start%2A> 着信接続の要求のリッスンを開始します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例は、のインスタンスを作成、 <xref:System.Net.Sockets.TcpListener> クラスのローカル IP アドレスとポート番号を使用します。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localaddr" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> 間 <see cref="F:System.Net.IPEndPoint.MinPort" /> と <see cref="F:System.Net.IPEndPoint.MaxPort" />です。</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の接続要求を受け入れます。</summary>
        <returns>A <see cref="T:System.Net.Sockets.Socket" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> 返すブロッキング メソッド、 <xref:System.Net.Sockets.Socket> データの送受信に使用することできます。 ブロックされないようにする場合は、使用、 <xref:System.Net.Sockets.TcpListener.Pending%2A> 接続要求が着信接続のキューで利用可能なかどうかを判断するメソッドです。  
  
 <xref:System.Net.Sockets.Socket> 返されたリモート ホストの IP アドレスとポート番号で初期化されます。 いずれかを使用することができます、 <xref:System.Net.Sockets.Socket.Send%2A> と <xref:System.Net.Sockets.Socket.Receive%2A> で使用できるメソッド、 <xref:System.Net.Sockets.Socket> リモート ホストと通信するクラス。 終了したらを使用して、 <xref:System.Net.Sockets.Socket>, 、必ずその <xref:System.Net.Sockets.Socket.Close%2A> メソッドです。 アプリケーションが比較的単純な場合は、使用を検討して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドではなく、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。<xref:System.Net.Sockets.TcpClient> 同期モードのブロックにネットワーク経由でデータを送受信するための簡単な方法でするを提供します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> を返すメソッドが使用される、 <xref:System.Net.Sockets.Socket>です。 これは、 <xref:System.Net.Sockets.Socket> 新しく接続したクライアントと通信するために使用します。  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出しで、リスナーが開始されていない <see cref="M:System.Net.Sockets.TcpListener.Start" />します。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期操作として、保留中の接続要求を受け取ります。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Net.Sockets.Socket" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、ソケット接続が同意した後に完了します。  
  
 <xref:System.Net.Sockets.Socket> で返される <xref:System.Threading.Tasks.Task%601> はリモート ホストの IP アドレスとポート番号で初期化します。 いずれかを使用することができます、 <xref:System.Net.Sockets.Socket.Send%2A> と <xref:System.Net.Sockets.Socket.Receive%2A> で使用できるメソッド、 <xref:System.Net.Sockets.Socket> リモート ホストと通信するクラス。 終了したらを使用して、 <xref:System.Net.Sockets.Socket>, 、必ずその <xref:System.Net.Sockets.Socket.Close%2A> メソッドです。 アプリケーションが比較的単純な場合は、使用を検討して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドではなく、 <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> メソッドです。<xref:System.Net.Sockets.TcpClient> 同期モードのブロックにネットワーク経由でデータを送受信するための簡単な方法でするを提供します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出しで、リスナーが開始されていない <see cref="M:System.Net.Sockets.TcpListener.Start" />します。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の接続要求を受け入れます。</summary>
        <returns>A <see cref="T:System.Net.Sockets.TcpClient" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> 返すブロッキング メソッド、 <xref:System.Net.Sockets.TcpClient> データの送受信に使用することできます。 使用して、 <xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドがブロックされないようにする場合は、接続要求が着信接続のキューで使用できるが判断されます。  
  
 使用して、 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> メソッドは、基になるかを取得する <xref:System.Net.Sockets.NetworkStream> 、返された <xref:System.Net.Sockets.TcpClient>です。<xref:System.Net.Sockets.NetworkStream> くれますメソッドでのリモート ホストと送受信します。 を通じては、 <xref:System.Net.Sockets.TcpClient>, 、必ずその <xref:System.Net.Sockets.TcpClient.Close%2A> メソッドです。 も高い柔軟性が必要な場合、 <xref:System.Net.Sockets.TcpClient> のオファーは、使用を検討して <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>します。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> を返すメソッドが使用される、 <xref:System.Net.Sockets.TcpClient>です。 これは、 <xref:System.Net.Sockets.TcpClient> 新しく接続したクライアントと通信するために使用します。  
  
 [!code-cpp[Classic TcpListenerExample\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出しで、リスナーが開始されていない <see cref="M:System.Net.Sockets.TcpListener.Start" />します。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用して、 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントを MSDN エラーの詳細について参照できます。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期操作として、保留中の接続要求を受け取ります。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task`1" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。<see cref="P:System.Threading.Tasks.Task`1.Result" /> タスク オブジェクトのプロパティを返します、 <see cref="T:System.Net.Sockets.TcpClient" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task%601> オブジェクトは、TCP 接続が同意した後に完了します。  
  
 使用して、 <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=fullName> メソッドは、基になるかを取得する <xref:System.Net.Sockets.NetworkStream> 、返された <xref:System.Net.Sockets.TcpClient> で、 <xref:System.Threading.Tasks.Task%601>です。<xref:System.Net.Sockets.NetworkStream> くれますメソッドでのリモート ホストと送受信します。 を通じては、 <xref:System.Net.Sockets.TcpClient>, 、必ずその <xref:System.Net.Sockets.TcpClient.Close%2A> メソッドです。 も高い柔軟性が必要な場合、 <xref:System.Net.Sockets.TcpClient> のオファーは、使用を検討して <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> または <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>です。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出しで、リスナーが開始されていない <see cref="M:System.Net.Sockets.TcpListener.Start" />します。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用して、 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントを MSDN エラーの詳細について参照できます。</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか <see cref="T:System.Net.Sockets.TcpListener" /> クライアント接続のリッスンがアクティブにします。</summary>
        <value>
          <see langword="true" /> 場合 <see cref="T:System.Net.Sockets.TcpListener" /> がアクティブにリッスンしている場合、それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス <xref:System.Net.Sockets.TcpListener> かどうかをこのプロパティを使用して、 <xref:System.Net.Sockets.Socket> 受信接続が試行リッスンします。<xref:System.Net.Sockets.TcpClient.Active%2A> 冗長を避けるためにプロパティを使用できる <xref:System.Net.Sockets.TcpListener.Start%2A> しようとします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">有効にするか、NAT トラバーサルを無効にするかどうかを指定するブール値。</param>
        <summary>有効またはネットワーク アドレス変換 \(NAT\) トラバーサルを無効にする <see cref="T:System.Net.Sockets.TcpListener" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドを使用を有効にするか、NAT トラバーサルを無効にする、 <xref:System.Net.Sockets.TcpListener> インスタンス。 Teredo、6to4、または ISATAP トンネルを使用して、NAT トラバーサルを指定することがあります。  
  
 ときに、 `allowed` パラメーターが false の場合、 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> に関連付けられているソケットのオプションが設定されている <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>します。 NAT トラバーサルが明示的に無効になります、 <xref:System.Net.Sockets.TcpListener> インスタンス。  
  
 ときに、 `allowed` パラメーターが true の場合、 <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> に関連付けられているソケットのオプションが設定されている <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>します。 これは NAT トラバーサルをできるようにする、 <xref:System.Net.Sockets.TcpListener> によっては、システム上の場所でのファイアウォール ルール。  
  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドを呼び出す前に呼び出す必要がある、 <xref:System.Net.Sockets.TcpListener.Start%2A> \(ソケットをバインドすると\) する前に、接続要求のリッスンを開始します。 場合 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> メソッドは、 <xref:System.Net.Sockets.TcpListener.Start%2A> メソッドを <xref:System.InvalidOperationException> がスローされます。  
  
 Teredo アドレスは、IPv6 アドレス プレフィックス 2001年::\/32 です。 Teredo アドレスは、通常の DNS 名の解決によって返されるまたはローカルのインターフェイスに割り当てられた IPv6 アドレスとして列挙できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> 呼び出した後にメソッドが呼び出された、 <see cref="M:System.Net.Sockets.TcpListener.Start" /> メソッド</exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">受信操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>callback</c> デリゲートに渡されます。</param>
        <summary>着信接続の試行をそのまま使用する非同期操作を開始します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> の非同期の作成を参照する、 <see cref="T:System.Net.Sockets.Socket" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期の <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> を呼び出して操作を完了する必要があります、 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドです。 通常、このメソッドはによって、 `callback` を委任します。  
  
 このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでにブロックするを使用して、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。  
  
 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
> [!NOTE]
>  呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ <xref:System.Net.Sockets.Socket> をリモート ホストのネットワーク アドレスとポート番号を識別します。  
  
> [!NOTE]
>  表示された場合、 <xref:System.Net.Sockets.SocketException>, を使用して、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API エラー コード ドキュメントを参照して [http:\/\/msdn.microsoft.com\/library\/](http://msdn.microsoft.com/library/) エラーの詳細な説明をします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> メソッドを作成し、ソケットを接続します。 コールバックのデリゲートの呼び出し、 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドを非同期の要求を終了します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</param>
        <param name="state">受信操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>callback</c> デリゲートに渡されます。</param>
        <summary>着信接続の試行をそのまま使用する非同期操作を開始します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> の非同期の作成を参照する、 <see cref="T:System.Net.Sockets.TcpClient" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期の <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> を呼び出して操作を完了する必要があります、 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドです。 通常、このメソッドはによって、 `callback` を委任します。  
  
 このメソッドは、操作が完了するまでにはブロックされません。 操作が完了するまでにブロックするを使用して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドです。  
  
 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)します。  
  
> [!NOTE]
>  表示された場合、 <xref:System.Net.Sockets.SocketException>, を使用して、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API エラー コード ドキュメントを参照して [http:\/\/msdn.microsoft.com\/library\/](http://msdn.microsoft.com/library/) エラーの詳細な説明をします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> メソッドを作成し、ソケットを接続します。 コールバックのデリゲートの呼び出し、 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドを非同期の要求を終了します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">受信の試行の接続をリッスンするポートです。</param>
        <summary>新たに作成 <see cref="T:System.Net.Sockets.TcpListener" /> インスタンスを指定したポートでリッスンします。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.TcpListener" /> を返します。  
  
 新しい <see cref="T:System.Net.Sockets.TcpListener" /> インスタンスを指定したポートでリッスンします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返される、 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドです。</param>
        <summary>非同期的に受信接続の試行を受け入れるし、新たに作成 <see cref="T:System.Net.Sockets.Socket" /> リモート ホストの通信を処理します。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.Socket" />  
  
 <see cref="T:System.Net.Sockets.Socket" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはブロックするまで、操作を完了します。 この操作を同期的に実行するを使用して、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。  
  
> [!NOTE]
>  呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 、返されたプロパティ <xref:System.Net.Sockets.Socket> をリモート ホストのネットワーク アドレスとポート番号を識別します。  
  
> [!NOTE]
>  表示された場合、 <xref:System.Net.Sockets.SocketException>, を使用して、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API エラー コード ドキュメントを参照して [http:\/\/msdn.microsoft.com\/library\/](http://msdn.microsoft.com/library/) エラーの詳細な説明をします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> メソッドを作成し、ソケットを接続します。 コールバックのデリゲートの呼び出し、 <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> メソッドを非同期の要求を終了します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> パラメーターがへの呼び出しによって作成されていない、 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> メソッドです。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> メソッドが呼び出されました。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">アクセス中にエラーが発生しました、 <see cref="T:System.Net.Sockets.Socket" />です。 詳細については、「解説」を参照してください。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返される、 <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> メソッドです。</param>
        <summary>非同期的に受信接続の試行を受け入れるし、新たに作成 <see cref="T:System.Net.Sockets.TcpClient" /> リモート ホストの通信を処理します。</summary>
        <returns>
          <see cref="T:System.Net.Sockets.TcpClient" />  
  
 <see cref="T:System.Net.Sockets.TcpClient" /> データを送受信するために使用します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはブロックするまで、操作を完了します。 この操作を同期的に実行するを使用して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドです。  
  
> [!NOTE]
>  呼び出すことができます、 <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> 基になるソケットのプロパティ \(<xref:System.Net.Sockets.TcpClient.Client%2A>\) をリモート ホストのネットワーク アドレスとポート番号を識別します。  
  
> [!NOTE]
>  表示された場合、 <xref:System.Net.Sockets.SocketException>, を使用して、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API エラー コード ドキュメントを参照して [http:\/\/msdn.microsoft.com\/library\/](http://msdn.microsoft.com/library/) エラーの詳細な説明をします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> メソッドを作成し、ソケットを接続します。 コールバックのデリゲートの呼び出し、 <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> メソッドを非同期の要求を終了します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Boolean" /> を指定する値かどうか、 <see cref="T:System.Net.Sockets.TcpListener" /> 特定のポートをリッスンするように 1 つだけの基になるソケットを使用します。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Net.Sockets.TcpListener" /> により、1 つだけ <see cref="T:System.Net.Sockets.TcpListener" /> 特定のポートをリッスンするようにそれ以外の場合、 <see langword="false" />です。 」を参照してください。 既定値は、Windows Server 2003 および Windows XP Service Pack 2 以降では <see langword="true" /> で、その他のすべてのバージョンでは <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、複数のリスナーは、特定のポートをリッスンできます。 ただし、リスナーの 1 つだけでは、ポートに送信されるネットワーク トラフィックの操作を実行できます。 複数のリスナーが特定のポートにバインドしようとすると、特定の IP アドレスを持つ 1 つはそのポートに送信されるネットワーク トラフィックを処理します。 使用することができます、 <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> プロパティを複数のリスナーが特定のポートをリッスンしていることを防ぐためにします。  
  
 呼び出しの前にこのプロパティを設定 <xref:System.Net.Sockets.TcpListener.Start%2A>, を呼び出したり、 <xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドし、このプロパティを設定します。  
  
   
  
## 例  
 次のコード例を取得および設定、 <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> プロパティです。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.TcpListener" /> が開始されました。 呼び出す、 <see cref="M:System.Net.Sockets.TcpListener.Stop" /> メソッドと設定、 <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> プロパティです。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">基になるソケットにアクセスするときにエラーが発生しました。</exception>
        <exception cref="T:System.ObjectDisposedException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になる取得 <see cref="T:System.Net.EndPoint" /> 、現在の <see cref="T:System.Net.Sockets.TcpListener" />です。</summary>
        <value>
          <see cref="T:System.Net.EndPoint" /> 先、 <see cref="T:System.Net.Sockets.Socket" /> がバインドされています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> ソケット接続が確立した後で着信クライアント接続要求をリッスンするように使用されているローカル ネットワーク インターフェイスとポート番号を特定するプロパティです。 これを最初にキャストする必要があります <xref:System.Net.EndPoint> に、 <xref:System.Net.IPEndPoint>です。 呼び出すことができます、 <xref:System.Net.IPEndPoint.Address%2A?displayProperty=fullName> 、ローカル IP アドレスを取得するプロパティと <xref:System.Net.IPEndPoint.Port%2A?displayProperty=fullName> ローカル ポート番号を取得するプロパティです。  
  
   
  
## 例  
 次のコード例では、ローカル IP アドレスとポート番号を表示する、 <xref:System.Net.Sockets.TcpListener> が接続要求をリッスンします。  
  
 [!code-cpp[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の接続要求があるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 接続が保留中の場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この非ブロッキング メソッドでは、保留中の接続要求があるかを決定します。<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> と <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> まで実行をブロックする方法、 <xref:System.Net.Sockets.TcpListener.Start%2A> メソッドには、受信接続要求がキューに登録、 <xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドは、ライセンス条項に同意する前に、接続が利用可能なかどうかを判断するために使用できます。  
  
   
  
## 例  
 次のコード例の確認、 <xref:System.Net.Sockets.TcpListener.Pending%2A> メソッドです。 接続要求が受け入れられるを待機している場合への呼び出し、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドを作成します。  
  
 [!code-cpp[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener\_Pending\_LocalEndPoint\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出しで、リスナーが開始されていない <see cref="M:System.Net.Sockets.TcpListener.Start" />します。</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるネットワーク取得 <see cref="T:System.Net.Sockets.Socket" />します。</summary>
        <value>基になる <see cref="T:System.Net.Sockets.Socket" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener> 作成、 <xref:System.Net.Sockets.Socket> 着信クライアント接続要求をリッスンします。 派生するクラス <xref:System.Net.Sockets.TcpListener> これをこのプロパティを使用して <xref:System.Net.Sockets.Socket>します。 基になるを使用して <xref:System.Net.Sockets.Socket> によって返される、 <xref:System.Net.Sockets.TcpListener.Server%2A> プロパティが必要な場合にこれ以外にもアクセス <xref:System.Net.Sockets.TcpListener> を提供します。  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Server%2A> プロパティだけを返します、 <xref:System.Net.Sockets.Socket> 着信クライアント接続要求をリッスンするために使用します。 使用して、 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> を保留中の接続要求をそのまま使用し、取得するメソッド、 <xref:System.Net.Sockets.Socket> データを送受信するためです。 使用することも、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> を保留中の接続要求をそのまま使用し、取得するメソッド、 <xref:System.Net.Sockets.TcpClient> データを送受信するためです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Net.Sockets.TcpListener.Server%2A> プロパティです。 基になる <xref:System.Net.Sockets.Socket> が取得されると、 <xref:System.Net.Sockets.SocketOptionName.Linger><xref:System.Net.Sockets.Socket> オプションが構成されているタイムアウトに 10 秒後に、接続が閉じられた後、このデータは、まだネットワーク バッファーに残っている場合。  
  
 [!code-csharp[TcpListenerProtectedMembers1\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>接続要求のリッスンを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.Start%2A> メソッドは、基になる、初期化 <xref:System.Net.Sockets.Socket>, 、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします。 接続要求を受信した場合、 <xref:System.Net.Sockets.TcpListener.Start%2A> メソッドは、要求はキューを呼び出すまで、追加の要求のリッスンを続行、 <xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドです。 場合 <xref:System.Net.Sockets.TcpListener> は接続要求を受け取るスローすることにより、接続の最大数が既にキューに後、 <xref:System.Net.Sockets.SocketException> クライアントにします。  
  
 着信接続のキューからの接続を削除するには、いずれかを使用、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドまたは <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドは、キューからの接続の削除を返す、 <xref:System.Net.Sockets.TcpClient> データの送受信に使用することできます。<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドから返される、 <xref:System.Net.Sockets.Socket> 同じように使用することできます。 アプリケーションには、同期 I\/O のみ必要とする場合を使用して <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>します。 コントロールの動作に関するより詳細なを使用して <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>します。 これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。  
  
 使用して、 <xref:System.Net.Sockets.TcpListener.Stop%2A> を終了するメソッド、 <xref:System.Net.Sockets.TcpListener> リッスンし、停止します。 別に、承認済みの接続の終了を担当しています。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例を示す方法 <xref:System.Net.Sockets.TcpListener.Start%2A> 着信クライアント接続要求をリッスンするために使用します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用して、 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントを MSDN エラーの詳細について参照できます。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">保留中の接続のキューの最大長。</param>
        <summary>保留中の接続の最大数と接続要求のリッスンを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.Start%2A> メソッドは、基になる、初期化 <xref:System.Net.Sockets.Socket>, 、ローカル エンドポイントにバインドされ、受信接続が試行をリッスンします。 接続要求を受信した場合 <xref:System.Net.Sockets.TcpListener.Start%2A> の要求をキューが呼び出されるまで、追加の要求のリッスンを続行され、 <xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドです。 場合 <xref:System.Net.Sockets.TcpListener> は接続要求を受け取るをスローする接続の最大数は、キューに登録した後、 <xref:System.Net.Sockets.SocketException> クライアントにします。  
  
 着信接続のキューからの接続を削除するには、いずれかを使用、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドまたは <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。<xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> メソッドは、キューからの接続の削除を返す、 <xref:System.Net.Sockets.TcpClient> データの送受信に使用することできます。<xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドから返される、 <xref:System.Net.Sockets.Socket> 同じように使用することできます。 アプリケーションには、同期 I\/O のみ必要とする場合を使用して、 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>です。 コントロールの動作に関するより詳細なを使用して <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> メソッドです。 これら両方のメソッドは、接続要求が、キューで使用可能になるまでブロックします。  
  
 使用して、 <xref:System.Net.Sockets.TcpListener.Stop%2A> を終了するメソッド、 <xref:System.Net.Sockets.TcpListener> リッスンし、停止します。 別に、承認済みの接続の終了を担当しています。  
  
> [!NOTE]
>  使用して、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> プロパティを特定のエラー コードを取得し、MSDN ライブラリで Windows ソケット バージョン 2 API エラー コード ドキュメントを参照して [http:\/\/msdn.microsoft.com\/library\/](http://msdn.microsoft.com/library/) エラーの詳細な説明をします。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例を示す方法 <xref:System.Net.Sockets.TcpListener.Start%2A> 着信クライアント接続要求をリッスンするために使用します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">ソケットへのアクセス中にエラーが発生しました。 詳細については、次の「解説」を参照してください。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name=" backlog" /> パラメーターが 0 より小さいか許可されている接続の最大数を超えています。</exception>
        <exception cref="T:System.InvalidOperationException">基になる <see cref="T:System.Net.Sockets.Socket" /> が null です。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リスナーを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.TcpListener.Stop%2A> リスナーを閉じます。 キュー内の任意の未承認の接続要求はすべて失われます。 許容されるためにリモート ホスト接続を待機しているがスローされます、 <xref:System.Net.Sockets.SocketException>です。 別に、承認済みの接続の終了を担当しています。  
  
> [!NOTE]
>  このメンバーは、アプリケーションでネットワーク トレースが有効にされている場合にトレース情報を出力します。 詳細については、「[&#91;\<topic:\/\/conUsingNetworkTracing\>&#93;](http://msdn.microsoft.com/ja-jp/e993b7c3-087f-45d8-9c02-9dded936d804)」を参照してください。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.Net.Sockets.TcpListener.Stop%2A> メソッドを基になる閉じる <xref:System.Net.Sockets.Socket>します。  
  
 [!code-cpp[System.Net.Sockets.TcpListener\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">使用して、 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> 固有のエラー コードを取得するプロパティです。 このコードを取得したときに、Windows ソケット バージョン 2 API エラー コードのドキュメントを MSDN エラーの詳細について参照できます。</exception>
        <block subset="none" type="usage">
          <para>The <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method also closes the underlying <see cref="T:System.Net.Sockets.Socket" />, and creates a new <see cref="T:System.Net.Sockets.Socket" /> for the <see cref="T:System.Net.Sockets.TcpListener" />. If you set any properties on the underlying <see cref="T:System.Net.Sockets.Socket" /> prior to calling the <see cref="M:System.Net.Sockets.TcpListener.Stop" /> method, those properties will not carry over to the new <see cref="T:System.Net.Sockets.Socket" />.</para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>接続要求のリッスンを開始します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Sockets.TcpListener" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>