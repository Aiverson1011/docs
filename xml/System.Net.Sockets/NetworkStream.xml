<Type Name="NetworkStream" FullName="System.Net.Sockets.NetworkStream">
  <TypeSignature Language="C#" Value="public class NetworkStream : System.IO.Stream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NetworkStream extends System.IO.Stream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.NetworkStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IO.Stream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ネットワーク アクセスのためには、データの基になるストリームを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream> クラス経由でデータを送受信するためのメソッドを提供 <xref:System.Net.Sockets.SocketType.Stream> ブロッキング モード ソケットです。 ブロックの詳細については非ブロッキング <xref:System.Net.Sockets.Socket>s」を参照してください [Using an Asynchronous Client Socket](http://msdn.microsoft.com/ja-jp/fd85bc88-e06c-467d-a30d-9fd7cffcfca1)します。 使用することができます、 <xref:System.Net.Sockets.NetworkStream> の両方の同期および非同期のデータ転送クラス。 同期および非同期通信の詳細については、次を参照してください。 [Sockets](http://msdn.microsoft.com/ja-jp/10d22735-bd37-42c1-a2be-c1932f979a7d)します。  
  
 作成する、 <xref:System.Net.Sockets.NetworkStream>, 、接続を提供する必要があります <xref:System.Net.Sockets.Socket>します。 何を指定することも <xref:System.IO.FileAccess> アクセス許可、 <xref:System.Net.Sockets.NetworkStream> より提供された <xref:System.Net.Sockets.Socket>します。 既定では、終了、 <xref:System.Net.Sockets.NetworkStream> が提供されているを閉じない <xref:System.Net.Sockets.Socket>します。 場合は、 <xref:System.Net.Sockets.NetworkStream> を閉じる、指定した権限を持っているを <xref:System.Net.Sockets.Socket>, を指定する必要があります `true` の値を `ownsSocket` パラメーター。  
  
 使用して、 <xref:System.Net.Sockets.NetworkStream.Write%2A> と <xref:System.Net.Sockets.NetworkStream.Read%2A> スレッド同期のブロッキング I\/O の単純な 1 つの方法です。 個別のスレッドを使用して、I\/O を処理する場合は、使用を検討して、 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> と <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> メソッド、または <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> と <xref:System.Net.Sockets.NetworkStream.EndRead%2A> の通信方法です。  
  
 <xref:System.Net.Sockets.NetworkStream> ネットワーク データのストリームへのランダム アクセスをサポートしていません。 値、 <xref:System.Net.Sockets.NetworkStream.CanSeek%2A> 、ストリームがシークをサポートしているかどうかを示す、プロパティは常に `false`; 読み取りを行って、 <xref:System.Net.Sockets.NetworkStream.Position%2A> プロパティには、読み取り、 <xref:System.Net.Sockets.NetworkStream.Length%2A> プロパティ、または呼び出し元、 <xref:System.Net.Sockets.NetworkStream.Seek%2A> メソッドをスロー、 <xref:System.NotSupportedException>です。  
  
 読み取りし、書き込み操作のインスタンスで同時に実行できる、 <xref:System.Net.Sockets.NetworkStream> クラス同期の必要がない場合。 書き込み操作の 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある、限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。  
  
   
  
## 例  
 次のコード例では、作成、 <xref:System.Net.Sockets.NetworkStream> 、接続グループから <xref:System.Net.Sockets.SocketType.Stream><xref:System.Net.Sockets.Socket> 基本的な同期のブロッキング I\/O を実行します。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> を <see cref="T:System.Net.Sockets.NetworkStream" /> データの送受信に使用されます。</param>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Net.Sockets.NetworkStream" /> クラスは、指定された <see cref="T:System.Net.Sockets.Socket" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream> を指定された読み取り\/書き込みアクセスで作成された <xref:System.Net.Sockets.Socket>します。<xref:System.Net.Sockets.NetworkStream> が、基になるを所有していない <xref:System.Net.Sockets.Socket>, を呼び出すので、 <xref:System.Net.Sockets.NetworkStream.Close%2A> メソッドが閉じない、 <xref:System.Net.Sockets.Socket>です。  
  
   
  
## 例  
 次のコード例を作成する方法を示しています、 <xref:System.Net.Sockets.NetworkStream> で、 <xref:System.Net.Sockets.Socket>です。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> パラメーターが接続されていません。  
  
 または  
  
 <see cref="P:System.Net.Sockets.Socket.SocketType" /> のプロパティ、 <paramref name="socket" /> パラメーターがない <see cref="F:System.Net.Sockets.SocketType.Stream" />します。  
  
 または  
  
 <paramref name="socket" /> パラメーターは非ブロッキング状態です。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> を <see cref="T:System.Net.Sockets.NetworkStream" /> データの送受信に使用されます。</param>
        <param name="ownsSocket">設定 <see langword="true" /> ことを示すために、 <see cref="T:System.Net.Sockets.NetworkStream" /> の所有権を取得、 <see cref="T:System.Net.Sockets.Socket" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Sockets.NetworkStream" /> クラスは、指定された <see cref="T:System.Net.Sockets.Socket" /> 、指定した <see cref="T:System.Net.Sockets.Socket" /> 所有します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream> を指定された読み取り\/書き込みアクセスで作成された <xref:System.Net.Sockets.Socket>します。 場合の値 `ownsSocket` パラメーターは `true`, 、 <xref:System.Net.Sockets.NetworkStream> 所有権を基になる <xref:System.Net.Sockets.Socket>, を呼び出すと、 <xref:System.Net.Sockets.NetworkStream.Close%2A> もメソッドでは、基になるが閉じられます <xref:System.Net.Sockets.Socket>します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.Sockets.NetworkStream> の所有権を <xref:System.Net.Sockets.Socket>です。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> パラメーターが接続されていません。  
  
 または  
  
 値、 <see cref="P:System.Net.Sockets.Socket.SocketType" /> のプロパティ、 <paramref name="socket" /> パラメーターがない <see cref="F:System.Net.Sockets.SocketType.Stream" />します。  
  
 または  
  
 <paramref name="socket" /> パラメーターは非ブロッキング状態です。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> を <see cref="T:System.Net.Sockets.NetworkStream" /> データの送受信に使用されます。</param>
        <param name="access">ビットごとの組み合わせ、 <see cref="T:System.IO.FileAccess" /> に与えられるアクセスの種類を示す値、 <see cref="T:System.Net.Sockets.NetworkStream" /> 経由で提供されている <see cref="T:System.Net.Sockets.Socket" />します。</param>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Net.Sockets.NetworkStream" /> クラスは、指定された <see cref="T:System.Net.Sockets.Socket" /> 指定のアクセス権を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream> を指定された、指定のアクセスで作成された <xref:System.Net.Sockets.Socket>します。 このコンス トラクターで、 <xref:System.Net.Sockets.NetworkStream> が、基になるを所有していない <xref:System.Net.Sockets.Socket>, を呼び出すので、 <xref:System.Net.Sockets.NetworkStream.Close%2A> メソッドは、基になるを終了しない <xref:System.Net.Sockets.Socket>します。  
  
 `access` パラメーター セット、 <xref:System.Net.Sockets.NetworkStream.CanRead%2A> と <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> のプロパティ、 <xref:System.Net.Sockets.NetworkStream>です。 指定した場合 <xref:System.IO.FileAccess.Write>, 、 <xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドです。 指定した場合 <xref:System.IO.FileAccess.Read>, 、 <xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドです。 指定した場合 <xref:System.IO.FileAccess.ReadWrite>, 、両方のメソッド呼び出しを許可します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.Sockets.NetworkStream> を読み書きする機能を <xref:System.Net.Sockets.Socket>です。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> パラメーターが接続されていません。  
  
 または  
  
 <see cref="P:System.Net.Sockets.Socket.SocketType" /> のプロパティ、 <paramref name="socket" /> パラメーターがない <see cref="F:System.Net.Sockets.SocketType.Stream" />します。  
  
 または  
  
 <paramref name="socket" /> パラメーターは非ブロッキング状態です。</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NetworkStream (System.Net.Sockets.Socket socket, System.IO.FileAccess access, bool ownsSocket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.Sockets.Socket socket, valuetype System.IO.FileAccess access, bool ownsSocket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.#ctor(System.Net.Sockets.Socket,System.IO.FileAccess,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="socket" Type="System.Net.Sockets.Socket" />
        <Parameter Name="access" Type="System.IO.FileAccess" />
        <Parameter Name="ownsSocket" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="socket">
          <see cref="T:System.Net.Sockets.Socket" /> を <see cref="T:System.Net.Sockets.NetworkStream" /> データの送受信に使用されます。</param>
        <param name="access">ビットごとの組み合わせ、 <see cref="T:System.IO.FileAccess" /> に与えられるアクセスの種類を指定する値、 <see cref="T:System.Net.Sockets.NetworkStream" /> 経由で提供されている <see cref="T:System.Net.Sockets.Socket" />します。</param>
        <param name="ownsSocket">設定 <see langword="true" /> ことを示すために、 <see cref="T:System.Net.Sockets.NetworkStream" /> の所有権を取得、 <see cref="T:System.Net.Sockets.Socket" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Net.Sockets.NetworkStream" /> クラスは、指定された <see cref="T:System.Net.Sockets.Socket" /> で指定したアクセス権と、指定した <see cref="T:System.Net.Sockets.Socket" /> 所有します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream> を指定された読み取り\/書き込みアクセスで作成された <xref:System.Net.Sockets.Socket>します。 場合の値、 `ownsSocket` パラメーターは `true`, 、 <xref:System.Net.Sockets.NetworkStream> 所有権を基になる <xref:System.Net.Sockets.Socket>, を呼び出すと、 <xref:System.Net.Sockets.NetworkStream.Close%2A> もメソッドでは、基になるが閉じられます <xref:System.Net.Sockets.Socket>します。  
  
 `access` パラメーター セット、 <xref:System.Net.Sockets.NetworkStream.CanRead%2A> と <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> のプロパティ、 <xref:System.Net.Sockets.NetworkStream>です。 指定した場合 <xref:System.IO.FileAccess.Write>, 、 <xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドです。 指定した場合 <xref:System.IO.FileAccess.Read>, 、 <xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドです。 指定した場合 <xref:System.IO.FileAccess.ReadWrite>, 、両方のメソッド呼び出しを許可します。  
  
   
  
## 例  
 次のコード例を作成、 <xref:System.Net.Sockets.NetworkStream> を読み書きする機能を <xref:System.Net.Sockets.Socket>です。 所有権、 <xref:System.Net.Sockets.Socket> はこれを指定した <xref:System.Net.Sockets.NetworkStream> を指定して `true` の `ownsSocket` パラメーター。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#1)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="socket" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">
          <paramref name="socket" /> パラメーターが接続されていません。  
  
 または  
  
 <see cref="P:System.Net.Sockets.Socket.SocketType" /> のプロパティ、 <paramref name="socket" /> パラメーターがない <see cref="F:System.Net.Sockets.SocketType.Stream" />します。  
  
 または  
  
 <paramref name="socket" /> パラメーターは非ブロッキング状態です。</exception>
        <altmember cref="T:System.IO.FileAccess" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">型の配列 <see cref="T:System.Byte" /> から読み取られたデータを格納するメモリ内の場所は、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="offset">内の場所 <c>buffer</c> データの格納を開始します。</param>
        <param name="size">読み取るバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委任されているときに実行 <see cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> が完了するとします。</param>
        <param name="state">その他のユーザー定義データを格納するオブジェクト。</param>
        <summary>非同期読み取りを開始、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期呼び出しを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドは非同期的に受信したネットワーク バッファーからデータの読み取りを開始します。 呼び出す、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドは、個別の実行スレッド内でデータを受信する機能を提供します。  
  
 実装するコールバック メソッドを作成する必要があります、 [BeginRead メソッド \(Byte\<xref:System.AsyncCallback> を委任し、その名前を渡す、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドです。 極端に言えば、 `state` パラメーターを含める必要があります、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream>です。 コールバック メソッド内で受信したデータを取得するため、小さなクラスまたは読み取りバッファーなどの有用な情報を保持する構造体を作成する必要があります。 構造体またはクラス インスタンスを渡す、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドによって、 `state` パラメーター。  
  
 コールバック メソッドを呼び出す必要があります、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッドです。 アプリケーションを呼び出すと [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, 、システムが待機するまで、データの受信またはエラーが発生して、システムが指定されたコールバック メソッド、および上のメモリ ブロックを実行する別のスレッドを使用し、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.EndRead%2A> まで、提供された [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> データを読み取るか、例外をスローします。 ブロックを呼び出した後に元のスレッドが必要なかどうかは、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドを使用して、 [BeginRead メソッド \(Byte\<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドです。 呼び出す [BeginRead メソッド \(Byte\<xref:System.Threading.EventWaitHandle.Set%2A> 、元のスレッド実行を継続する場合は、コールバック メソッドにします。 コールバック メソッドの記述に関する詳細については、次を参照してください。 [Callback Sample](http://msdn.microsoft.com/ja-jp/6ddd7866-9804-4571-84de-83f5cc017a5a)します。  
  
 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドで指定したバイトの数までの使用可能な量のデータを読み取り、 `size` パラメーター。  
  
> [!NOTE]
>  表示された場合、 [BeginRead メソッド \(Byte\<xref:System.IO.IOException>, 、確認、 [BeginRead メソッド \(Byte\<xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.SocketException>です。 場合は、使用、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.SocketException.ErrorCode%2A> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
 読み取りし、書き込み操作のインスタンスで同時に実行できる、 [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> クラス同期の必要がない場合。 書き込み操作の 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある、限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。  
  
   
  
## 例  
 次のコード例では [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> をネットワーク ストリームから非同期的にデータを読み取る。`myReadCallBack` メソッドを実装、 [BeginRead メソッド \(Byte\<xref:System.AsyncCallback> を委任し、システムから呼び出されるときに [BeginRead メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginRead%2A> を返します。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="offset" /> パラメーターがの長さより大きい、 <paramref name="buffer" /> パラメーター。  
  
 または  
  
 <paramref name="size" /> が 0 未満です。  
  
 または  
  
 <paramref name="size" /> の長さより大きい <paramref name="buffer" /> の値を差し引いて、 <paramref name="offset" /> パラメーター。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。  
  
 または  
  
 ネットワークからの読み取り中にエラーが発生しました。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じられます。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int size, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 size, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">型の配列 <see cref="T:System.Byte" /> に書き込むデータを格納している、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="offset">内の場所 <c>buffer</c> データの送信を開始します。</param>
        <param name="size">書き込むバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> 委任されているときに実行 <see cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> が完了するとします。</param>
        <param name="state">その他のユーザー定義データを格納するオブジェクト。</param>
        <summary>ストリームに非同期の書き込みを開始します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期呼び出しを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドがリモート ホストへの非同期送信操作を開始します。 呼び出す、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドは、個別の実行スレッド内でデータを送信する機能を提供します。  
  
 実装するコールバック メソッドを作成する必要があります、 [BeginWrite メソッド \(Byte\<xref:System.AsyncCallback> を委任し、その名前を渡す、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドです。 極端に言えば、 `state` パラメーターを含める必要があります、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream>です。 コールバックは、詳細を必要とする場合は、小さなクラスまたは構造体を作成することができます、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> およびその他の必要な情報です。 構造体またはクラス インスタンスを渡す、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドによって、 `state` パラメーター。  
  
 コールバック メソッドを実装する必要があります、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.EndWrite%2A> メソッドです。 アプリケーションを呼び出すと [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, 、システムは、別のスレッドを使用して、指定されたコールバック メソッドを実行しでブロック [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.EndWrite%2A> まで、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> 要求されたバイト数を送信するか、例外をスローします。 ブロックを呼び出した後に元のスレッドが必要なかどうかは、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドを使用して、 [BeginWrite メソッド \(Byte\<xref:System.Threading.WaitHandle.WaitOne%2A> メソッドです。 呼び出す [BeginWrite メソッド \(Byte\<xref:System.Threading.EventWaitHandle.Set%2A> 、元のスレッド実行を継続する場合は、コールバック メソッドにします。 コールバック メソッドの記述に関する詳細については、次を参照してください。 [Callback Sample](http://msdn.microsoft.com/ja-jp/6ddd7866-9804-4571-84de-83f5cc017a5a)します。  
  
> [!NOTE]
>  表示された場合、 [BeginWrite メソッド \(Byte\<xref:System.IO.IOException>, 、確認、 [BeginWrite メソッド \(Byte\<xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.SocketException>です。 場合は、使用、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.SocketException.ErrorCode%2A> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
 読み取りし、書き込み操作のインスタンスで同時に実行できる、 [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> クラス同期の必要がない場合。 書き込み操作の 1 つの一意のスレッドと読み取り操作の 1 つの一意なスレッドがある、限りは行われません間のインターフェイス間での読み取りと書き込みスレッドとは同期されませんが必要です。  
  
   
  
## 例  
 次のコード例では [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> データをネットワーク ストリームを非同期的に書き込む。`myWriteCallBack` メソッドを実装、 [BeginWrite メソッド \(Byte\<xref:System.AsyncCallback> を委任し、システムから呼び出されるときに [BeginWrite メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> を返します。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#2)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#2)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="offset" /> パラメーターがの長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="size" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="size" /> パラメーターがの長さより大きい <paramref name="buffer" /> の値を差し引いて、 <paramref name="offset" /> パラメーター。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。  
  
 または  
  
 ネットワークへの書き込み中にエラーが発生しました。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じられます。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Net.Sockets.NetworkStream" /> が読み取りをサポートします。</summary>
        <value>
          <see langword="true" /> ストリームからデータを読み取れる場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Net.Sockets.NetworkStream.CanRead%2A> は `true`, 、<xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドです。 適切な提供 <xref:System.IO.FileAccess> 列挙値を読みやすさとの書き込みの許可を設定するコンス トラクターで、 <xref:System.Net.Sockets.NetworkStream>です。<xref:System.Net.Sockets.NetworkStream.CanRead%2A> 場合、プロパティが設定、 <xref:System.Net.Sockets.NetworkStream> が初期化されています。  
  
   
  
## 例  
 次のコード例のチェックを <xref:System.Net.Sockets.NetworkStream.CanRead%2A> ことを確認する、 <xref:System.Net.Sockets.NetworkStream> を読み取ることができます。 読み取り操作を実行し、 <xref:System.Net.Sockets.NetworkStream>です。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリームがシークをサポートしているかどうかを示す値を取得します。 このプロパティは現在サポートされていません。このプロパティは常に返します <see langword="false" />します。</summary>
        <value>
          <see langword="false" /> 常にあることを示す <see cref="T:System.Net.Sockets.NetworkStream" /> ストリーム内の特定の位置をシークすることはできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイムアウト プロパティを使用するかどうかを示す <see cref="T:System.Net.Sockets.NetworkStream" />します。</summary>
        <value>常に <see langword="true" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 継承されているために、このプロパティがある <xref:System.IO.Stream>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Net.Sockets.NetworkStream" /> が書き込みをサポートします。</summary>
        <value>
          <see langword="true" /> データを書き込む場合、 <see cref="T:System.Net.Sockets.NetworkStream" />。 そうしないと、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> は `true`, 、<xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドです。 適切な提供 <xref:System.IO.FileAccess> 列挙値を読みやすさとの書き込みの許可を設定するコンス トラクターで、 <xref:System.Net.Sockets.NetworkStream>です。<xref:System.Net.Sockets.NetworkStream.CanWrite%2A> 場合、プロパティが設定、 <xref:System.Net.Sockets.NetworkStream> が初期化されています。  
  
   
  
## 例  
 次のコード例のチェックを <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> ことを確認する、 <xref:System.Net.Sockets.NetworkStream> が書き込み可能です。 書き込み操作を実行し、 <xref:System.Net.Sockets.NetworkStream>です。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
        <altmember cref="T:System.IO.FileAccess" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close (int timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close(int32 timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Close(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="timeout">終了する前に、残りのデータを送信するまで待機するミリ秒数を指定する 32 ビット符号付き整数。</param>
        <summary>閉じる、 <see cref="T:System.Net.Sockets.NetworkStream" /> データの送信を許可するように指定された時間待機した後にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream.Close%2A> メソッドに関連付けられている、アンマネージ コードとマネージの両方のリソースを解放、 <xref:System.Net.Sockets.NetworkStream>です。 場合、 <xref:System.Net.Sockets.NetworkStream> 、基になるを所有している <xref:System.Net.Sockets.Socket>, 、そのセッションも閉じられます。  
  
 場合、 <xref:System.Net.Sockets.NetworkStream> に関連付けられた、 <xref:System.Net.Sockets.TcpClient>, 、 <xref:System.Net.Sockets.NetworkStream.Close%2A> メソッドには、TCP 接続を閉じたが、関連付けられている置換は <xref:System.Net.Sockets.TcpClient>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="timeout" /> パラメーターは、\-1 より小さくします。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool DataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DataAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.DataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>データがで使用できるかどうかを示す値を取得、 <see cref="T:System.Net.Sockets.NetworkStream" /> 読めるようにします。</summary>
        <value>
          <see langword="true" /> データのストリームを読み取ることができる場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> プロパティ データが読み取ることができるかを判断します。 場合 <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> は `true`, への呼び出し <xref:System.Net.Sockets.NetworkStream.Read%2A> が直ちに返されます。 リモート ホストがシャット ダウンまたは、接続を閉じる場合 <xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> スローする可能性が、 <xref:System.Net.Sockets.SocketException>です。  
  
   
  
## 例  
 次のコード例を読み取り、 <xref:System.Net.Sockets.NetworkStream> データが使用可能な限りです。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じています。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。</exception>
        <exception cref="T:System.Net.Sockets.SocketException">使用して、 <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Net.Sockets.NetworkStream" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
 method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Net.Sockets.NetworkStream> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndRead(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 非同期呼び出しを表します。</param>
        <summary>非同期の読み込みの終了を処理します。</summary>
        <returns>読み取られたバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッド開始される非同期の読み取り操作が完了すると、 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドです。  
  
 呼び出しの前に <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>, を実装するコールバック メソッドを作成する必要があります、 <xref:System.AsyncCallback> を委任します。 このコールバック メソッドは、個別のスレッドで実行され、後にシステムによって呼び出される <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> を返します。 コールバック メソッド、 <xref:System.IAsyncResult> から返される、 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドをパラメーターとして。  
  
 コールバック メソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> のプロパティ、 <xref:System.IAsyncResult> に渡される状態オブジェクトを取得し、 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドです。 受信側の抽出 <xref:System.Net.Sockets.NetworkStream> この状態オブジェクトから。 取得した後、 <xref:System.Net.Sockets.NetworkStream>, を呼び出す、 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッドを正常に読み取り操作を完了し、読み取られたバイト数を返します。  
  
 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッドは、データが使用可能になるまでブロックします。<xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッドで指定されたバイトの数まで使用量のデータを読み取り、 `size` のパラメーター、 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドです。 リモート ホストがシャット ダウンした場合、 <xref:System.Net.Sockets.Socket> 接続と使用可能なすべてのデータを受信、 <xref:System.Net.Sockets.NetworkStream.EndRead%2A> メソッドがすぐに完了して、0 バイトを返します。  
  
 受信したデータを取得する呼び出し、 <xref:System.IAsyncResult.AsyncState%2A> のプロパティ、 <xref:System.IAsyncResult>, 、し、結果の状態オブジェクトに含まれているバッファーを抽出します。  
  
> [!NOTE]
>  表示された場合、 <xref:System.IO.IOException>, 、確認、 <xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 <xref:System.Net.Sockets.SocketException>です。 場合は、使用、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
   
  
## 例  
 次のコード例で `myReadCallback` に提供される <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> としてコールバック メソッド。<xref:System.Net.Sockets.NetworkStream.EndRead%2A> 実装された `myReadCallback` を非同期に完了するには、呼び出しによって開始されたを読み取る <xref:System.Net.Sockets.NetworkStream.BeginRead%2A>します。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#5](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#5)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#5](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#5)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じています。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.EndWrite(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> 非同期呼び出しを表します。</param>
        <summary>非同期の書き込みの終了を処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> 開始された非同期送信操作が完了すると <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>です。  
  
 呼び出しの前に <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>, を実装するコールバック メソッドを作成する必要があります、 <xref:System.AsyncCallback> を委任します。 このコールバック メソッドは、個別のスレッドで実行され、後にシステムによって呼び出される <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> を返します。 コールバック メソッド、 <xref:System.IAsyncResult> から返される、 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドをパラメーターとして。  
  
 コールバック メソッド内で、 <xref:System.IAsyncResult.AsyncState%2A> のプロパティ、 `IAsyncResult` を取得するパラメーター、 <xref:System.Net.Sockets.NetworkStream>です。 取得した後、 <xref:System.Net.Sockets.NetworkStream>, 、呼び出すことができます、 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> を正常に送信操作を完了して送信されたバイト数を返します。  
  
 <xref:System.Net.Sockets.NetworkStream.EndWrite%2A> メソッドは、要求されたバイト数が送信されるまでブロックします。  
  
> [!NOTE]
>  表示された場合、 <xref:System.IO.IOException>, 、確認、 <xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 <xref:System.Net.Sockets.SocketException>です。 場合は、使用、 <xref:System.Net.Sockets.SocketException.ErrorCode%2A> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
   
  
## 例  
 次のコード例で `myWriteCallback` に提供される <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> としてコールバック メソッド。<xref:System.Net.Sockets.NetworkStream.EndWrite%2A> 実装された `myWriteCallback` によって開始された非同期の書き込みの呼び出しを完了する <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A>です。  
  
 [!code-cpp[NetworkStream\_Async\_SendAndReceive\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream\_Async\_SendAndReceive\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream\_Async\_SendAndReceive\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Async_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。  
  
 または  
  
 ネットワークへの書き込み中にエラーが発生しました。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じています。</exception>
        <altmember cref="M:System.Net.Sockets.NetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NetworkStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.Sockets.NetworkStream" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method overrides <xref:System.Object.Finalize%2A?displayProperty=fullName>. Application code should not call this method; an object's <xref:System.Object.Finalize%2A> method is automatically invoked during garbage collection, unless finalization by the garbage collector has been disabled by a call to the <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> method.  
  
 For more information about using the Finalize method, see [Finalize Methods and Destructors](http://msdn.microsoft.com/ja-jp/fd376774-1643-499b-869e-9546a3aeea70), [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213), and [Overriding the Finalize Method](http://msdn.microsoft.com/ja-jp/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ストリームからのデータをフラッシュします。 このメソッドは将来使用するために予約されています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Sockets.NetworkStream.Flush%2A> メソッドを実装して、 <xref:System.IO.Stream.Flush%2A?displayProperty=fullName> メソッド。 ただし、ため <xref:System.Net.Sockets.NetworkStream> はバッファリングされないに影響を与えませんネットワーク ストリームにします。 呼び出す、 <xref:System.Net.Sockets.NetworkStream.Flush%2A> メソッドが例外をスローしません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">この操作を取り消す必要があることを示す通知を伝達するために使用するキャンセル トークン。</param>
        <summary>非同期操作として、ストリームからのデータをフラッシュします。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作はブロックされません。 返された <xref:System.Threading.Tasks.Task> オブジェクトはデータのストリームからフラッシュされた後、完了、 <xref:System.Net.Sockets.NetworkStream> インスタンス。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ストリームで使用できるデータの長さを取得します。 このプロパティは現在サポートされていない、常にスロー、 <see cref="T:System.NotSupportedException" />です。</summary>
        <value>ストリームで使用可能なデータの長さ。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの使用は任意です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはストリームの現在位置を設定します。 このプロパティは現在サポートされていない、常にスロー、 <see cref="T:System.NotSupportedException" />です。</summary>
        <value>ストリームの現在の位置。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの使用は任意です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">型の配列 <see cref="T:System.Byte" /> から読み取られたデータを格納するメモリ内の場所は、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="offset">内の場所 <c>buffer</c> にデータの格納を開始します。</param>
        <param name="size">読み取るバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <summary>データを読み取る、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</summary>
        <returns>読み取られたバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドにデータを読み込みます、 `buffer` パラメーターと正常に読み取られたバイト数を返します。 読み取り、可能なデータがない場合、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Read%2A> 0 が返されます。[Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Read%2A> 操作で指定したバイトの数までの使用可能な量のデータを読み取り、 `size` パラメーター。 リモート ホストをシャット ダウン、接続し、すべての利用可能なデータを受信すると場合、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドはすぐに完了し、ゼロ バイトを返します。  
  
> [!NOTE]
>  かどうかをチェック、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> 呼び出すことにより読み取ることが、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.CanRead%2A> プロパティです。 読み取りを試みると、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> を読み取ることができない、表示される、 [Read メソッド \(Byte\<xref:System.IO.IOException>です。  
  
> [!NOTE]
>  表示された場合、 [Read メソッド \(Byte\<xref:System.IO.IOException>, 、確認、 [Read メソッド \(Byte\<xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 [Read メソッド \(Byte\<xref:System.Net.Sockets.SocketException>です。 場合は、使用、 [Read メソッド \(Byte\<xref:System.Net.Sockets.SocketException.ErrorCode%2A> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
   
  
## 例  
 次のコード例では [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.DataAvailable%2A> データが読み取り可能かを判断します。 読み取ったデータがある場合、 [Read メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream>です。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#4)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#4)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="offset" /> パラメーターがの長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="size" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="size" /> パラメーターがの長さより大きい <paramref name="buffer" /> の値を差し引いて、 <paramref name="offset" /> パラメーター。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.IO.IOException">基になる <see cref="T:System.Net.Sockets.Socket" /> が閉じられます。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じています。  
  
 または  
  
 ネットワークからの読み取りエラーが発生します。</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.DataAvailable" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
      </Docs>
    </Member>
    <Member MemberName="Readable">
      <MemberSignature Language="C#" Value="protected bool Readable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Readable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Readable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Net.Sockets.NetworkStream" /> 読み取ることができます。</summary>
        <value>
          <see langword="true" /> あることを示す、 <see cref="T:System.Net.Sockets.NetworkStream" /> 読み取り。 それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生する必要があります、 <xref:System.Net.Sockets.NetworkStream> クラスを使用する、 <xref:System.Net.Sockets.NetworkStream.Readable%2A> プロパティです。 場合 <xref:System.Net.Sockets.NetworkStream.Readable%2A> は `true`, 、<xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドです。 確認することもあるかどうか、 <xref:System.Net.Sockets.NetworkStream> チェック パブリックにアクセスして読み取ることが <xref:System.Net.Sockets.NetworkStream.CanRead%2A> プロパティです。  
  
 <xref:System.Net.Sockets.NetworkStream.Readable%2A> 場合、プロパティが設定、 <xref:System.Net.Sockets.NetworkStream> が初期化されています。  
  
   
  
## 例  
 次のコード例では、 `CanCommunicate` プロパティのチェック、 <xref:System.Net.Sockets.NetworkStream.Readable%2A> プロパティかどうかを <xref:System.Net.Sockets.NetworkStream> を読み取ることができます。  
  
 [!code-cpp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream\_Protected\_Members\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanRead" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;int&gt; ReadAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の時間データを読み取り操作の待機します。</summary>
        <value>A <see cref="T:System.Int32" /> される読み取り操作が失敗するまでの経過をミリ秒単位で時間の大きさを指定します。 既定値 <see cref="F:System.Threading.Timeout.Infinite" />, 、読み取り操作がタイムアウトにないことを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティで指定された時間内で読み取り操作が完了しない場合、読み取り操作のスロー、 <xref:System.IO.IOException>です。  
  
> [!NOTE]
>  このプロパティは影響のみ同期読み取りを呼び出すことによって実行される、 <xref:System.Net.Sockets.NetworkStream.Read%2A> メソッドです。 このプロパティでは呼び出すことによって実行された非同期の読み取りには影響しません、 <xref:System.Net.Sockets.NetworkStream.BeginRead%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、10 ミリ秒をネットワーク ストリームの読み取りのタイムアウトを設定します。  
  
 [!code-csharp[NCLTcpClientSync\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NCLTcpClientSync/CS/tcpclient.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満とは <see cref="F:System.Threading.Timeout.Infinite" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">このパラメーターは使用されません。</param>
        <param name="origin">このパラメーターは使用されません。</param>
        <summary>所定の値に、ストリームの現在位置を設定します。 このメソッドは現在サポートされていませんし、常にスロー、 <see cref="T:System.NotSupportedException" />です。</summary>
        <returns>ストリーム内の位置。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの使用は任意です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.SetLength(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">このパラメーターは使用されません。</param>
        <summary>ストリームの長さを設定します。 このメソッドは常にスロー、 <see cref="T:System.NotSupportedException" />です。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの使用は任意です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Socket">
      <MemberSignature Language="C#" Value="protected System.Net.Sockets.Socket Socket { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Socket" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Socket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になる <see cref="T:System.Net.Sockets.Socket" /> を取得します。</summary>
        <value>A <see cref="T:System.Net.Sockets.Socket" /> 基になるネットワーク接続を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生するクラス <xref:System.Net.Sockets.NetworkStream> 、基になるため、このプロパティを使用して <xref:System.Net.Sockets.Socket>します。 基になるを使用して <xref:System.Net.Sockets.Socket> から返される、 <xref:System.Net.Sockets.NetworkStream.Socket%2A> プロパティが必要な場合にこれ以外にもアクセス <xref:System.Net.Sockets.NetworkStream> を提供します。  
  
> [!NOTE]
>  このプロパティは、このクラスまたは派生クラスによってのみアクセスできます。  
  
   
  
## 例  
 次のコード例では、基になるを取得 <xref:System.Net.Sockets.Socket> をアクティブな接続を確認します。  
  
 [!code-cpp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream\_Protected\_Members\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">型の配列 <see cref="T:System.Byte" /> に書き込むデータを格納している、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <param name="offset">内の場所 <c>buffer</c> 元となると、データの書き込みを開始します。</param>
        <param name="size">書き込むバイト数、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</param>
        <summary>データを書き込む、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドを指定した開始 `offset` し、送信 `size` の内容からバイト `buffer` ネットワークにします。[Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドは、要求されたバイト数が送信されるまで、ブロック [Write メソッド \(Byte\<xref:System.Net.Sockets.SocketException> がスローされます。 表示された場合、 [Write メソッド \(Byte\<xref:System.Net.Sockets.SocketException>, を使用して、 [Write メソッド \(Byte\<xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=fullName> を特定のエラー コードを取得し、ドキュメントを参照して、Windows ソケット バージョン 2 API エラー コード MSDN でエラーの詳細な説明のプロパティです。  
  
> [!NOTE]
>  かどうかをチェック、 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> にアクセスして、書き込み可能、 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.CanWrite%2A> プロパティです。 書き込みを試みると、 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> が書き込み不可、表示される、 [Write メソッド \(Byte\<xref:System.IO.IOException>です。 表示された場合、 [Write メソッド \(Byte\<xref:System.IO.IOException>, 、確認、 [Write メソッド \(Byte\<xref:System.Exception.InnerException%2A> プロパティのかどうかが原因で、 [Write メソッド \(Byte\<xref:System.Net.Sockets.SocketException>です。  
  
   
  
## 例  
 次のコード例をチェックするかどうか、 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream> が書き込み可能です。 である場合、 [Write メソッド \(Byte\<xref:System.Net.Sockets.NetworkStream.Write%2A> 小さいメッセージを書き込むために使用します。  
  
 [!code-cpp[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CPP/source.cpp#3)]
 [!code-csharp[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/CS/source.cs#3)]
 [!code-vb[NetworkStream\_Synch\_SendAndReceive\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Synch_SendAndReceive/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="offset" /> パラメーターがの長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="size" /> パラメーターが 0 より小さい。  
  
 または  
  
 <paramref name="size" /> パラメーターがの長さより大きい <paramref name="buffer" /> の値を差し引いて、 <paramref name="offset" /> パラメーター。</exception>
        <exception cref="T:System.IO.IOException">ネットワークへの書き込み中にエラーが発生しました。  
  
 または  
  
 ソケットへのアクセス中にエラーが発生しました。 詳細については、「解説」を参照してください。</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.NetworkStream" /> が閉じています。  
  
 または  
  
 ネットワークからの読み取りでエラーが発生しました。</exception>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Writeable" />
      </Docs>
    </Member>
    <Member MemberName="Writeable">
      <MemberSignature Language="C#" Value="protected bool Writeable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Writeable" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.Writeable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Net.Sockets.NetworkStream" /> が書き込み可能です。</summary>
        <value>
          <see langword="true" /> データをストリームに書き込む場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 派生する必要があります、 <xref:System.Net.Sockets.NetworkStream> クラスを使用する、 <xref:System.Net.Sockets.NetworkStream.Writeable%2A> プロパティです。 場合 <xref:System.Net.Sockets.NetworkStream.Writeable%2A> は `true`, 、<xref:System.Net.Sockets.NetworkStream> への呼び出しにより、 <xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドです。 確認することもあるかどうか、 <xref:System.Net.Sockets.NetworkStream> がパブリックにアクセスできるをチェックして書き込み可能 <xref:System.Net.Sockets.NetworkStream.CanWrite%2A> プロパティです。  
  
 <xref:System.Net.Sockets.NetworkStream.Writeable%2A> 場合、プロパティが設定、 <xref:System.Net.Sockets.NetworkStream> が初期化されています。  
  
   
  
## 例  
 次のコード例では、 `CanCommunicate` プロパティのチェック、 <xref:System.Net.Sockets.NetworkStream.Writeable%2A> プロパティかどうかを <xref:System.Net.Sockets.NetworkStream> が書き込み可能です。  
  
 [!code-cpp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CPP/source.cpp#1)]
 [!code-csharp[NetworkStream\_Protected\_Members\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NetworkStream_Protected_Members/CS/source.cs#1)]
 [!code-vb[NetworkStream\_Protected\_Members\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/NetworkStream_Protected_Members/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Sockets.NetworkStream.CanWrite" />
        <altmember cref="P:System.Net.Sockets.NetworkStream.Readable" />
      </Docs>
    </Member>
    <Member MemberName="WriteAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int size, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task WriteAsync(unsigned int8[] buffer, int32 offset, int32 size, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.NetworkStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="size">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.NetworkStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の時間データを待って、書き込み操作がブロックされます。</summary>
        <value>A <see cref="T:System.Int32" /> 書き込み操作が失敗するまでの経過をミリ秒単位で時間の大きさを指定します。 既定値 <see cref="F:System.Threading.Timeout.Infinite" />, 、書き込み操作がタイムアウトにないことを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書き込み操作をスローしてこのプロパティで指定された時間内での書き込み操作が完了しない場合、 <xref:System.IO.IOException>です。  
  
> [!NOTE]
>  このプロパティを呼び出して実行された唯一の同期書き込み操作の影響、 <xref:System.Net.Sockets.NetworkStream.Write%2A> メソッドです。 このプロパティでは呼び出すことによって実行された非同期の書き込みには影響しません、 <xref:System.Net.Sockets.NetworkStream.BeginWrite%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、10 ミリ秒をネットワーク ストリームの書き込みタイムアウトを設定します。  
  
 [!code-cpp[NCLTcpServerSync\#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclTcpServerSync/cpp/tcplistener.cpp#0)]
 [!code-csharp[NCLTcpServerSync\#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclTcpServerSync/CS/tcplistener.cs#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が 0 未満とは <see cref="F:System.Threading.Timeout.Infinite" />です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Sockets.NetworkStream" /> クラスの新しいインスタンスを作成します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>