<Type Name="IKeyboardInputSink" FullName="System.Windows.Interop.IKeyboardInputSink">
  <TypeSignature Language="C#" Value="public interface IKeyboardInputSink" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IKeyboardInputSink" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.IKeyboardInputSink" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>相互運用の境界を越えてと Hwnd の間では、tab キーを管理するコンポーネント、アクセラレータ キー、およびニーモニック キーボード シンクを提供します。 このインターフェイスの実装でキーボード メッセージ管理 WPF\-Win32 相互運用シナリオです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 キーボード シンクの全般的なキーボードの入力モデルの特定のサブセットから入力を処理する [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] と [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], 、でき、一部のキーボード処理され、現在のキーボード フォーカスを持つ 1 つ以外 Hwnd に送信する入力します。  
  
 コンポーネントは、他のコンポーネントが含まれていて、タブの順序を保持する場合、コンポーネントを実装する必要がありますも <xref:System.Windows.Interop.IKeyboardInputSite> フォーカスがあるコンポーネントの追跡とします。  
  
 入力のアーキテクチャを個別に実装の詳細について [!INCLUDE[TLA#tla_winforms](~/includes/tlasharptla-winforms-md.md)] 相互運用機能は、「」を参照 [Windows フォームと WPF の相互運用性入力アーキテクチャ](http://msdn.microsoft.com/ja-jp/0eb6f137-f088-4c5e-9e37-f96afd28f235)します。  
  
 <xref:System.Windows.Interop.HwndSource> <xref:System.Windows.Interop.HwndHost> 各実装、 <xref:System.Windows.Interop.IKeyboardInputSink> で明示的なインターフェイスの定義のインターフェイスです。 明示的な定義は、既定の動作を指定で必要な場合にもアクセスできると、 <xref:System.Windows.Interop.IKeyboardInputSink> のインターフェイスにキャスト <xref:System.Windows.Interop.HwndSource> または <xref:System.Windows.Interop.HwndHost>です。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="T:System.Windows.Interop.HwndHost" />
  </Docs>
  <Members>
    <Member MemberName="HasFocusWithin">
      <MemberSignature Language="C#" Value="public bool HasFocusWithin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasFocusWithin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シンクまたはそのに含まれるコンポーネントのいずれかにフォーカスがあるかどうかを示す値を取得します。</summary>
        <returns>
          <see langword="true" /> シンクまたはそのに含まれるコンポーネントのいずれかにフォーカスがある場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、転送するために必要な <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> 内からフォーカスを持つ子コンポーネントへの呼び出し、 <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> 実装します。 呼び出す <xref:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin%2A> 特定フォーカスと転送のレベルに到達するまで再帰的に <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
      </Docs>
    </Member>
    <Member MemberName="KeyboardInputSite">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite KeyboardInputSite { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Interop.IKeyboardInputSite KeyboardInputSite" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンポーネントのコンテナーへの参照を取得または <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスです。</summary>
        <value>コンテナーへの参照を <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティに最初に設定する必要があります `null`します。 シンクをそのコンポーネントの一覧に追加するコンテナーは設定 <xref:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite%2A> 前、他のメソッドが呼び出されると、その後複数回を設定することできますに。 プロパティを設定する必要があります `null` 処分する前にもう一度です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.IKeyboardInputSite" />
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="OnMnemonic">
      <MemberSignature Language="C#" Value="public bool OnMnemonic (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool OnMnemonic(valuetype System.Windows.Interop.MSG msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">ニーモニックと関連付けられているデータに関するメッセージ。 このメッセージ構造を変更しないでください。 パフォーマンス上の理由からのみ参照によって渡されます。</param>
        <param name="modifiers">修飾子キー。</param>
        <summary>このシンクのニーモニック \(アクセス キー\) のいずれかが呼び出されると呼び出されます。</summary>
        <returns>
          <see langword="true" /> メッセージが処理された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] WM\_CHAR、wm\_syschar です、WM\_DEADCHAR または WM\_SYSDEADCHAR メッセージがある必要があります。  
  
 各呼び出すことによって実装されているコンポーネントのメッセージを渡す必要がある場合は、コンポーネントには、コンポーネントが含まれる、 <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> メソッドです。  
  
 返すインターフェイス `true` から <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> は呼び出しません <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>します。 実装もをすべて特定のキーの組み合わせでの処理を実行できます <xref:System.Windows.Interop.IKeyboardInputSink.TranslateChar%2A>そしてバイパス <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
        <altmember cref="T:System.Windows.Input.AccessKeyManager" />
      </Docs>
    </Member>
    <Member MemberName="RegisterKeyboardInputSink">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink (System.Windows.Interop.IKeyboardInputSink sink);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Interop.IKeyboardInputSite RegisterKeyboardInputSink(class System.Windows.Interop.IKeyboardInputSink sink) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.IKeyboardInputSite</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sink" Type="System.Windows.Interop.IKeyboardInputSink" />
      </Parameters>
      <Docs>
        <param name="sink">
          <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 含まれているコンポーネントのシンク。</param>
        <summary>登録、 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 格納されているコンポーネントのインターフェイスです。</summary>
        <returns>
          <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 含まれているコンポーネントのサイトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 子コンポーネントを持つコンポーネントは、サイトの内部コレクションの管理し、新しいシンクを追加し、新しいサイトを返すこのメソッドを使用する必要があります。 すれば十分サイト コレクションを維持するために、シンクは、サイトから取得できるためです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabInto">
      <MemberSignature Language="C#" Value="public bool TabInto (System.Windows.Input.TraversalRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TabInto(class System.Windows.Input.TraversalRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.Windows.Input.TraversalRequest" />
      </Parameters>
      <Docs>
        <param name="request">フォーカスを最初のページまたは最後のタブ ストップを設定するかどうかを指定します。</param>
        <summary>最初のタブ ストップまたはシンクの最後のタブ ストップのいずれかにフォーカスを設定します。</summary>
        <returns>
          <see langword="true" /> フォーカスが設定されている場合は、次の要求です。 <see langword="false" />, タブ ストップがない場合は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Input.FocusNavigationDirection.First> <xref:System.Windows.Input.FocusNavigationDirection.Last> でこのメソッドに渡されるだけに関連する値は、 <xref:System.Windows.Input.TraversalRequest>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateAccelerator">
      <MemberSignature Language="C#" Value="public bool TranslateAccelerator (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateAccelerator(valuetype System.Windows.Interop.MSG msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">メッセージと関連付けられているデータ。 この構造体を変更しないでください。 パフォーマンス上の理由からのみ参照によって渡されます。</param>
        <param name="modifiers">修飾子キー。</param>
        <summary>Keydown メッセージ レベルでキーボード入力を処理します。</summary>
        <returns>
          <see langword="true" /> メソッドの実装によって、メッセージが処理された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 WM\_KEYDOWN または WM\_SYSKEYDOWN のメッセージでなければなりません。  
  
 コンポーネントが入力の変換を処理することがない可能性のある翻訳子コンポーネントのある場合、通常、呼び出します <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> 、結果を返す前に、現在のフォーカスを保持している子コンポーネントにメソッドです。  
  
 場合は、メッセージは、すぐに処理できない場合、再をディスパッチできることから、 <xref:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator%2A> 実装が必要であれば、戻って `false`します。  
  
 アクセラレータ キーを変換するための主なシナリオが VK\_TAB keydown メッセージを処理しを呼び出して、コンポーネント内でフォーカスを設定するかどうかを決定する <xref:System.Windows.Interop.IKeyboardInputSink.TabInto%2A> 子コンポーネントにまたはを呼び出す <xref:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops%2A> 親サイトのタブのシーケンスの先頭または末尾の境界に達したためです。 特定のコンポーネントは、このような形で tab キーを処理しないこともできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      </Docs>
    </Member>
    <Member MemberName="TranslateChar">
      <MemberSignature Language="C#" Value="public bool TranslateChar (ref System.Windows.Interop.MSG msg, System.Windows.Input.ModifierKeys modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TranslateChar(valuetype System.Windows.Interop.MSG msg, valuetype System.Windows.Input.ModifierKeys modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Interop.MSG&amp;" RefType="ref" />
        <Parameter Name="modifiers" Type="System.Windows.Input.ModifierKeys" />
      </Parameters>
      <Docs>
        <param name="msg">メッセージと関連付けられているデータ。 この構造体を変更しないでください。 パフォーマンス上の理由からのみ参照によって渡されます。</param>
        <param name="modifiers">修飾子キー。</param>
        <summary>前に、WM\_CHAR、wm\_syschar です、WM\_DEADCHAR、および WM\_SYSDEADCHAR 入力メッセージを処理 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> が呼び出されます。</summary>
        <returns>
          <see langword="true" /> メッセージが処理された場合、 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> と呼ばれる以外の場合を使用することはできません <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返すには、このメソッドを実装する場合 `true`, 、入力のアーキテクチャは呼び出しません <xref:System.Windows.Interop.IKeyboardInputSink.OnMnemonic%2A> キー メッセージに対応します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>