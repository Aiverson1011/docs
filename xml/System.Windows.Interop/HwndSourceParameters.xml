<Type Name="HwndSourceParameters" FullName="System.Windows.Interop.HwndSourceParameters">
  <TypeSignature Language="C#" Value="public struct HwndSourceParameters" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit HwndSourceParameters extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.HwndSourceParameters" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="M:System.Windows.Interop.HwndSource.#ctor(System.Windows.Interop.HwndSourceParameters)" /> コンストラクターを使用して <see cref="T:System.Windows.Interop.HwndSource" /> オブジェクトを作成するために使用されるパラメーターを格納します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この構造体がでのみ使用される、 <xref:System.Windows.Interop.HwndSource> オブジェクトのコンス トラクターの呼び出しです。  
  
 値を持つが、この構造体によって確立プロパティが直接公開されない <xref:System.Windows.Interop.HwndSource> インスタンスの場合、 <xref:System.Windows.Interop.HwndSource> を構築します。 ただしの値、 <xref:System.Windows.Interop.HwndSourceParameters> 構造体は通常全般的な影響 [!INCLUDE[TLA2#tla_ui](~/includes/tla2sharptla-ui-md.md)] 「高さ」と"Width"ホスト型の特定のオブジェクトに存在するなどのプロパティとその [!INCLUDE[TLA2#tla_api#plural](~/includes/tla2sharptla-apisharpplural-md.md)]します。  
  
> [!IMPORTANT]
>  既定の \(パラメーターなし\) コンス トラクターを使用して、この構造体のインスタンスを作成しないでください。<xref:System.Windows.Interop.HwndSourceParameters> で結果を既定のコンス トラクターによって作成されるインスタンス <xref:System.Windows.Interop.HwndSourceParameters> を割り当てることはできない、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> \(にもかかわらず、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> を設定するプロパティが表示されます\)。 パラメーターとして、このようなインスタンスが適用されるかどうか、 <xref:System.Windows.Interop.HwndSource> 、その結果、コンス トラクター <xref:System.Windows.Interop.HwndSource>ウィンドウを表示することはできません。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Interop.HwndSource" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSourceParameters" /> クラスの新しいインスタンスを初期化します。<see cref="T:System.Windows.Interop.HwndSourceParameters" /> の既定のコンストラクターは使用しないでください。「解説」を参照してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  既定の \(パラメーターなし\) コンス トラクターを使用して、この構造体のインスタンスを作成しないでください。<xref:System.Windows.Interop.HwndSourceParameters> で結果を既定のコンス トラクターによって作成されるインスタンス <xref:System.Windows.Interop.HwndSourceParameters> を割り当てることはできない、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> \(にもかかわらず、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> を設定するプロパティが表示されます\)。 パラメーターとして、このようなインスタンスが適用されるかどうか、 <xref:System.Windows.Interop.HwndSource> 、その結果、コンス トラクター <xref:System.Windows.Interop.HwndSource> ウィンドウを表示することはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HwndSourceParameters (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">ウィンドウの名前。</param>
        <summary>指定したウィンドウ名を使用して、<see cref="T:System.Windows.Interop.HwndSourceParameters" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HwndSourceParameters (string name, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.#ctor(System.String,System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="name">ウィンドウの名前。</param>
        <param name="width">ウィンドウの幅 \(ピクセル単位\)。</param>
        <param name="height">ウィンドウの高さ \(ピクセル単位\)。</param>
        <summary>指定したウィンドウ名と初期サイズを使用して、<see cref="T:System.Windows.Interop.HwndSourceParameters" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 処理されない 0 \(ゼロ\) のいずれか、 `width` または `height` パラメーター。 このメソッドは成功しますが、0 を渡した場合でも、大幅なパフォーマンス低下します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="AcquireHwndFocusInMenuMode">
      <MemberSignature Language="C#" Value="public bool AcquireHwndFocusInMenuMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcquireHwndFocusInMenuMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.AcquireHwndFocusInMenuMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSource" /> が作成されるときにウィンドウを含む WPF の Win32 フォーカスを取得するかどうかを決定する値を取得または設定します。</summary>
        <value>ユーザーがメニューを操作するときにウィンドウを含む WPF の Win32 フォーカスを取得する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see cref="P:System.Windows.Interop.HwndSource.DefaultAcquireHwndFocusInMenuMode" /> の値を使用する場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustSizingForNonClientArea">
      <MemberSignature Language="C#" Value="public bool AdjustSizingForNonClientArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AdjustSizingForNonClientArea" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.AdjustSizingForNonClientArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非クライアント領域をサイズ設定に含めるかどうかを示す値を取得または設定します。</summary>
        <value>レイアウト マネージャーのサイズ変更ロジックに非クライアント領域を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Window> クラスでは、このパラメーターを設定 `true` の一部として内部的には、この構造体を使用する場合、 [!INCLUDE[TLA#tla_win32](~/includes/tlasharptla-win32-md.md)] ウィンドウ作成プロセスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
        <altmember cref="P:System.Windows.Interop.HwndSourceParameters.PositionX" />
        <altmember cref="P:System.Windows.Interop.HwndSourceParameters.PositionY" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">等しいかどうかをテストするオブジェクト。</param>
        <summary>指定したオブジェクトがこの構造体と等しいかどうかを判断します。</summary>
        <returns>等しいという比較結果が出た場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This implementation checks all members \(public and private\) of both structures for exact value equality.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (System.Windows.Interop.HwndSourceParameters obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Equals(valuetype System.Windows.Interop.HwndSourceParameters obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.Equals(System.Windows.Interop.HwndSourceParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Windows.Interop.HwndSourceParameters" />
      </Parameters>
      <Docs>
        <param name="obj">等しいかどうかをテストする構造体。</param>
        <summary>指定した <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体がこの構造体と等しいかどうかを判断します。</summary>
        <returns>構造体が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This implementation checks all members \(public and private\) of both structures for exact value equality.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtendedWindowStyle">
      <MemberSignature Language="C#" Value="public int ExtendedWindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ExtendedWindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.ExtendedWindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Microsoft Windows の拡張ウィンドウ スタイルを取得または設定します。</summary>
        <value>拡張ウィンドウ スタイル。 これらのスタイルの一覧については、[CreateWindowEx](http://go.microsoft.com/fwlink/?LinkId=98462) を参照してください。 既定値は 0 \(拡張ウィンドウ スタイルなし\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Interop.HwndSourceParameters" /> インスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装では、GetHashCode のオブジェクトの実装を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasAssignedSize">
      <MemberSignature Language="C#" Value="public bool HasAssignedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAssignedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.HasAssignedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サイズが割り当てられたかどうかを示す値を取得します。</summary>
        <value>ウィンドウのサイズが割り当てられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。ただし、幅と高さを指定して構造体が作成された場合、値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ウィンドウのサイズが割り当てられていない場合に既定のサイズ。  
  
 呼び出し <xref:System.Windows.Interop.HwndSourceParameters.SetSize%2A> 設定または <xref:System.Windows.Interop.HwndSourceParameters.Width%2A> または <xref:System.Windows.Interop.HwndSourceParameters.Height%2A> されるこのプロパティと、すべて `true`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの高さを示す値を取得または設定します。</summary>
        <value>ウィンドウの高さ \(デバイス ピクセル単位\)。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 四角形の画面領域の大きさを受け取るほとんどのメソッドとは異なり [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], 、標準的なデバイスに依存しない単位ではなく、デバイス ピクセル単位でこのウィンドウのサイズを指定します。 そのコンテンツにウィンドウのサイズを変更する場合は、設定 <xref:System.Windows.Interop.HwndSource.SizeToContent%2A> に `true`します。  
  
 設定しない <xref:System.Windows.Interop.HwndSourceParameters.Height%2A> を 0 \(ゼロ\)。 そうと、レンダリングのパフォーマンスがかなり低下が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
        <altmember cref="M:System.Windows.Interop.HwndSourceParameters.SetSize(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HwndSourceHook">
      <MemberSignature Language="C#" Value="public System.Windows.Interop.HwndSourceHook HwndSourceHook { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Interop.HwndSourceHook HwndSourceHook" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.HwndSourceHook" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Interop.HwndSourceHook</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのメッセージ フックを取得または設定します。</summary>
        <value>ウィンドウのメッセージ フック。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前にこのメッセージ フックが有効になっている `CreateWindow` のすべてのウィンドウ作成メッセージを受け取るようにするために呼び出されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype System.Windows.Interop.HwndSourceParameters a, valuetype System.Windows.Interop.HwndSourceParameters b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.op_Equality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Windows.Interop.HwndSourceParameters" />
        <Parameter Name="b" Type="System.Windows.Interop.HwndSourceParameters" />
      </Parameters>
      <Docs>
        <param name="a">比較する最初の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体。</param>
        <param name="b">比較する 2 番目の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体。</param>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体が別の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体と等しいかどうかを判断します。</summary>
        <returns>構造体が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This implementation calls the <xref:System.Windows.Interop.HwndSourceParameters.Equals%2A> method.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Windows.Interop.HwndSourceParameters a, System.Windows.Interop.HwndSourceParameters b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype System.Windows.Interop.HwndSourceParameters a, valuetype System.Windows.Interop.HwndSourceParameters b) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.op_Inequality(System.Windows.Interop.HwndSourceParameters,System.Windows.Interop.HwndSourceParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="System.Windows.Interop.HwndSourceParameters" />
        <Parameter Name="b" Type="System.Windows.Interop.HwndSourceParameters" />
      </Parameters>
      <Docs>
        <param name="a">比較する最初の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体。</param>
        <param name="b">比較する 2 番目の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体。</param>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体が別の <see cref="T:System.Windows.Interop.HwndSourceParameters" /> 構造体と等しくないかどうかを判断します。</summary>
        <returns>構造体が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この実装を呼び出す、 <xref:System.Windows.Interop.HwndSourceParameters.Equals%2A> メソッドと、結果を反転します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentWindow">
      <MemberSignature Language="C#" Value="public IntPtr ParentWindow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ParentWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.ParentWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>作成されたウィンドウの親ウィンドウ ハンドル \(HWND\) を取得または設定します。</summary>
        <value>親ウィンドウの HWND。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="PositionX">
      <MemberSignature Language="C#" Value="public int PositionX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.PositionX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの左端の位置を取得または設定します。</summary>
        <value>ウィンドウの左端の位置。 既定値は、<c>CreateWindow</c> によって処理される CW\_USEDEFAULT です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.HwndSourceParameters.SetPosition(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="PositionY">
      <MemberSignature Language="C#" Value="public int PositionY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PositionY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.PositionY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの上端の位置を取得または設定します。</summary>
        <value>ウィンドウの上端の位置。 既定値は、<c>CreateWindow</c> によって処理される CW\_USEDEFAULT です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="RestoreFocusMode">
      <MemberSignature Language="C#" Value="public System.Windows.Input.RestoreFocusMode RestoreFocusMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Input.RestoreFocusMode RestoreFocusMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.RestoreFocusMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Input.RestoreFocusMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>WPF がウィンドウにフォーカスを戻す方法を取得または設定します。</summary>
        <value>WPF がウィンドウのフォーカスを戻す方法を指定する列挙値の 1 つ。 既定値は、<see cref="F:System.Windows.Input.RestoreFocusMode.Auto" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 WPF を自動的にしない限り、ウィンドウにフォーカスを戻すしよう <xref:System.Windows.Interop.HwndSourceParameters.RestoreFocusMode%2A> に設定されている <xref:System.Windows.Input.RestoreFocusMode.None>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPosition">
      <MemberSignature Language="C#" Value="public void SetPosition (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetPosition(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.SetPosition(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">ウィンドウの左端の位置。</param>
        <param name="y">ウィンドウの上端の位置。</param>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSource" /> のウィンドウの画面位置として使用される値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="SetSize">
      <MemberSignature Language="C#" Value="public void SetSize (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSize(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.HwndSourceParameters.SetSize(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">ウィンドウの幅 \(デバイス ピクセル単位\)。</param>
        <param name="height">ウィンドウの高さ \(デバイス ピクセル単位\)。</param>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSource" /> のウィンドウ サイズとして使用される値を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 四角形の画面領域の大きさを受け取るほとんどのメソッドとは異なり [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], 、標準的なデバイスに依存しない単位ではなく、デバイスのピクセル単位で、ウィンドウ サイズを指定できます。 そのコンテンツにウィンドウのサイズを変更する場合は、設定 <xref:System.Windows.Interop.HwndSource.SizeToContent%2A> に `true`します。  
  
 処理されない 0 \(ゼロ\) のいずれか、 `width` または `height` パラメーター。 メソッドは、最終的に、0 を渡した場合でも成功しますが、大幅なパフォーマンスの低下が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
        <altmember cref="P:System.Windows.Interop.HwndSourceParameters.Height" />
        <altmember cref="P:System.Windows.Interop.HwndSourceParameters.Width" />
      </Docs>
    </Member>
    <Member MemberName="TreatAncestorsAsNonClientArea">
      <MemberSignature Language="C#" Value="public bool TreatAncestorsAsNonClientArea { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatAncestorsAsNonClientArea" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.TreatAncestorsAsNonClientArea" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSource" /> の親ウィンドウをレイアウト パスの間にウィンドウの非クライアント領域と見なす必要があるかどうかを示す値を取得または設定します。</summary>
        <value>レイアウト パスの間に、<see cref="T:System.Windows.Interop.HwndSource" /> の親ウィンドウをウィンドウの非クライアント領域と見なす必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TreatAsInputRoot">
      <MemberSignature Language="C#" Value="public bool TreatAsInputRoot { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatAsInputRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.TreatAsInputRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Interop.HwndSource" /> がメッセージ ポンプによって生成されたウィンドウ メッセージを <see cref="T:System.Windows.Interop.ComponentDispatcher" /> を介して受け取る必要があるかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Interop.HwndSource" /> がメッセージ ポンプによって生成されたウィンドウ メッセージを <see cref="T:System.Windows.Interop.ComponentDispatcher" /> を介して受け取る必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Windows.Interop.HwndSource" /> がトップレベル ウィンドウに対応する場合の既定値は <see langword="true" />、それ以外の場合の既定値は <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesPerPixelOpacity">
      <MemberSignature Language="C#" Value="public bool UsesPerPixelOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesPerPixelOpacity" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース ウィンドウ コンテンツのピクセルごとの不透明度を使用するかどうかを示す値を取得します。</summary>
        <value>ピクセルごとの不透明度を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ピクセルごとの不透明度を有効にすると、システムでは、非クライアント領域が不要になったを描画します。  
  
 ウィンドウがデスクトップ上に描画されるときに、不透明度が使用される \(その最終的なレンダリング ステップ、プロパティの値に共同作成者としてなど、表示されません <xref:System.Windows.UIElement.Opacity%2A>\)。  
  
 <xref:System.Windows.Interop.HwndSourceParameters.UsesPerPixelOpacity%2A> 最上位レベルの windows にのみ適用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="UsesPerPixelTransparency">
      <MemberSignature Language="C#" Value="public bool UsesPerPixelTransparency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesPerPixelTransparency" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.UsesPerPixelTransparency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ソース ウィンドウ コンテンツのピクセルごとに透明度を使用するかどうかを示す値を取得します。</summary>
        <value>ピクセルごとに透明度を使用する場合は <see langword="true" />。それ以外の場合 <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの幅を示す値を取得または設定します。</summary>
        <value>ウィンドウの幅 \(デバイス ピクセル単位\)。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 四角形の画面領域の大きさを受け取るほとんどのメソッドとは異なり [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)], 、デバイス ピクセル単位で、通常のデバイスに依存しない単位ではなく、このウィンドウのサイズを指定します。 そのコンテンツにウィンドウのサイズを変更する場合は、設定 <xref:System.Windows.Interop.HwndSource.SizeToContent%2A> に `true`します。  
  
 設定しない <xref:System.Windows.Interop.HwndSourceParameters.Width%2A> を 0 \(ゼロ\)。 そう、レンダリングの大幅なパフォーマンスの低下が発生します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Interop.HwndSourceParameters.SetSize(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowClassStyle">
      <MemberSignature Language="C#" Value="public int WindowClassStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowClassStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.WindowClassStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの Microsoft Windows クラスのスタイルを取得または設定します。</summary>
        <value>ウィンドウのクラスのスタイル。 詳細については、[ウィンドウ クラスのスタイル](http://go.microsoft.com/fwlink/?LinkId=178417)を参照してください。 既定値は 0 です \(ウィンドウ クラス スタイルなし\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="WindowName">
      <MemberSignature Language="C#" Value="public string WindowName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WindowName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.WindowName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウの名前を取得または設定します。</summary>
        <value>ウィンドウの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  既定の \(パラメーターなし\) コンス トラクターを使用して、この構造体のインスタンスを作成しないでください。<xref:System.Windows.Interop.HwndSourceParameters> で結果を既定のコンス トラクターによって作成されるインスタンス <xref:System.Windows.Interop.HwndSourceParameters> を割り当てることはできない、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> \(にもかかわらず、 <xref:System.Windows.Interop.HwndSourceParameters.WindowName%2A> を設定するプロパティが表示されます\)。 パラメーターとして、このようなインスタンスが適用されるかどうか、 <xref:System.Windows.Interop.HwndSource> 、その結果、コンス トラクター <xref:System.Windows.Interop.HwndSource> ウィンドウを表示することはできません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <Member MemberName="WindowStyle">
      <MemberSignature Language="C#" Value="public int WindowStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WindowStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.HwndSourceParameters.WindowStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのスタイルを取得または設定します。</summary>
        <value>ウィンドウ スタイル。 参照してください、 [CreateWindowEx](http://go.microsoft.com/fwlink/?LinkId=98462) スタイル ビットの完全な一覧については機能します。 既定値については、「解説」を参照してください。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、次のビットを構造の作成時に設定されます。 WS\_VISIBLE です。WS\_CAPTION です。WS\_SYSMENU です。WS\_THICKFRAME です。WS\_MINIMIZEBOX です。WS\_MAXIMIZEBOX です。WS\_CLIPCHILDREN します。  
  
 標準ウィンドウ WS\_CLIPCHILDREN ビットを設定する必要があります。 このスタイルのビットは、コード自体で適用されます。このフラグを設定することを省略した場合、WPF はそれをどのような値を指定する必要に追加します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Interop.HwndSource" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した構造体がこの構造体と等しいかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>