<Type Name="WindowInteropHelper" FullName="System.Windows.Interop.WindowInteropHelper">
  <TypeSignature Language="C#" Value="public sealed class WindowInteropHelper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WindowInteropHelper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Interop.WindowInteropHelper" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>間の相互運用を支援 Windows Presentation Foundation (WPF) と Win32 コードです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスのメンバーでは、呼び出し元へのアクセスを内部に、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] HWND と HWND の親の [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window>します。   適切なセキュリティ チェックは、これらのメンバーによって実行されます。  
  
 具体的なオブジェクトと hwnd の分離に基づくが必要なときに、このクラスを使用します。  
  
 シナリオの例は、ホストする必要があるかどうか、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] \] ダイアログ ボックスで、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] アプリケーションです。 初期化、 <xref:System.Windows.Interop.WindowInteropHelper> で、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] \] ダイアログ ボックスの window オブジェクトです。 表示する、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] ウィンドウのハンドル \(HWND\) から、 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> プロパティの所有者を指定し、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] \] ウィンドウで、 <xref:System.Windows.Interop.WindowInteropHelper.Owner%2A> プロパティです。 次のコード例は、使用する方法を示しています。 <xref:System.Windows.Interop.WindowInteropHelper> をホストする場合、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] \] ダイアログ ボックスで、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] アプリケーションです。  
  
 [!code-csharp[CorePseudocode\#WindowInteropHelper](~/samples/snippets/csharp/VS_Snippets_Wpf/CorePseudocode/CSharp/corepseudocode.cs#windowinterophelper)]
 [!code-vb[CorePseudocode\#WindowInteropHelper](~/samples/snippets/visualbasic/VS_Snippets_Wpf/CorePseudocode/visualbasic/corepseudocode.vb#windowinterophelper)]  
  
 このクラスでサポートされている別のシナリオでは取得する、 <xref:System.Windows.Interop.HwndSource> オブジェクトから、 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] <xref:System.Windows.Window> オブジェクトです。 <xref:System.Windows.Interop.HwndSource> の処理を直接有効 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] メッセージを通じて、 <xref:System.Windows.Interop.HwndSource.AddHook%2A> メソッドです。 使用して <xref:System.Windows.Interop.HwndSource> と <xref:System.Windows.Interop.HwndSource.AddHook%2A> の代わりに、 <xref:System.Windows.Window> を不要と同等かの処理を持つメッセージを処理することができます [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)]します。 作成、 <xref:System.Windows.Interop.WindowInteropHelper> で、 <xref:System.Windows.Window> ソースをし、呼び出す <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> で、 <xref:System.Windows.Interop.WindowInteropHelper> hwnd の分離を取得する <xref:System.Windows.Interop.HwndSource>です。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Window" />
    <altmember cref="T:System.Windows.Interop.HwndSource" />
    <altmember cref="M:System.Windows.Interop.HwndSource.AddHook(System.Windows.Interop.HwndSourceHook)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowInteropHelper (System.Windows.Window window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Window window) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.#ctor(System.Windows.Window)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="window" Type="System.Windows.Window" />
      </Parameters>
      <Docs>
        <param name="window">A WPF ウィンドウ オブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Interop.WindowInteropHelper" /> 、指定されたクラス Windows Presentation Foundation (WPF) ウィンドウです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ウィンドウは、ダイアログ ボックスで、またはそれ以外の場合に適していませんの境界内でホストされているウィンドウを指定できます、 [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] アプリケーションです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureHandle">
      <MemberSignature Language="C#" Value="public IntPtr EnsureHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int EnsureHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Interop.WindowInteropHelper.EnsureHandle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>HWND が作成されていない場合は、ウィンドウの HWND を作成します。</summary>
        <returns>
          <see cref="T:System.IntPtr" /> HWND を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> マネージの実際の表示のウィンドウ ハンドル \(HWND\) の作成を分割する場合は、メソッド <xref:System.Windows.Window>します。 これは、オートメーション クライアントのウィンドウを表示せずには、その作業を行うことができますがある場合に便利です。  
  
 ネイティブのウィンドウが作成されていない場合、このメソッドはネイティブのウィンドウでは、セットを作成、 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> プロパティ、および HWND を返します。 ネイティブのウィンドウを既に作成されている場合は、既存のネイティブ ウィンドウのハンドルが返されます。  
  
 このメソッドの呼び出しの結果として、ネイティブなウィンドウを作成する場合、 <xref:System.Windows.Window.SourceInitialized> イベントが発生します。  
  
 クエリを実行する、 <xref:System.Windows.Interop.WindowInteropHelper.Handle%2A> 後プロパティ、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> メソッドが呼び出される既存のウィンドウ ハンドルを返します。 ビジュアル ツリーは、後まで\] ウィンドウにアタッチされていない、 <xref:System.Windows.Window.Show%2A> メソッドが呼び出されます。  
  
 呼び出す、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> メソッドに複数回は新しいウィンドウ ハンドルを作成しません。 呼び出す、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> 、ハンドルは既にへの呼び出しによって作成された場合は、メソッド、 <xref:System.Windows.Window.Show%2A> メソッドは新しいウィンドウ ハンドルを作成しません。 ハンドルが存在しない場合にのみ、ネイティブのウィンドウが作成時に、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> メソッドが呼び出されます。  
  
 プラットフォーム呼び出しによるネイティブ ウィンドウ Api を使用して設定されているウィンドウのプロパティは、Api の管理\] ウィンドウでされない可能性があります。 後にネイティブ MS\_EX\_TOPMOST フラグを使用して最上位であるウィンドウを設定する場合など、 <xref:System.Windows.Interop.WindowInteropHelper.EnsureHandle%2A> メソッドが呼び出されると、 <xref:System.Windows.Window.Topmost%2A> プロパティは、ネイティブの設定を反映する保証はありません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">to create and access a window handle. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウ ハンドルを取得、 Windows Presentation Foundation (WPF) これを作成するために使用されるウィンドウ <see cref="T:System.Windows.Interop.WindowInteropHelper" />です。</summary>
        <value>Windows Presentation Foundation (WPF) ウィンドウ ハンドル \(HWND\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">to obtain a window handle. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="public IntPtr Owner { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Owner" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Interop.WindowInteropHelper.Owner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定のハンドル、 Windows Presentation Foundation (WPF) オーナー ウィンドウです。</summary>
        <value>所有者のウィンドウ ハンドル \(HWND\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows の親を変更するには、このプロパティを設定します。 True は一般的な [!INCLUDE[TLA2#tla_win32](~/includes/tla2sharptla-win32-md.md)] プログラミングと、既に使用されている windows いない親を変更しないでください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">to get or set this property value. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="T:System.Windows.Window" />
      </Docs>
    </Member>
  </Members>
</Type>