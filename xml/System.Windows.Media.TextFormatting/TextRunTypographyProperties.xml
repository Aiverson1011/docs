<Type Name="TextRunTypographyProperties" FullName="System.Windows.Media.TextFormatting.TextRunTypographyProperties">
  <TypeSignature Language="C#" Value="public abstract class TextRunTypographyProperties" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextRunTypographyProperties extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>文字体裁プロパティをサポートするための抽象クラスを提供 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> オブジェクトです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト レイアウト クライアントを使用して、 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties> OpenType レイアウト エンジンによって処理される機能のセットを生成するクラス。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextRunTypographyProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextRunTypographyProperties.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationAlternates">
      <MemberSignature Language="C#" Value="public abstract int AnnotationAlternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AnnotationAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.AnnotationAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>注釈の代替形式のインデックスを取得します。</summary>
        <value>注釈の代替形式のインデックス。 既定では 0 \(ゼロです\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注釈のフォームには、または塗りつぶされた円、四角形、かっこ、ダイヤ、または丸みのあるボックス内に配置されたグリフが含まれます。  
  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.AnnotationAlternates%2A> は 0 より大きく、選択したフォントが注釈のバリエーションをサポートしない、文字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Capitals">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontCapitals Capitals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontCapitals Capitals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Capitals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontCapitals</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>選択したフォントの大文字の形式を示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontCapitals" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontCapitals.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字に変換は、大文字のスタイルのグリフのテキストをレンダリングする文字体裁のフォームのセットです。 通常、テキストがすべて大文字で表示されると、文字間隔が表示されますあまりにも堅く太さと決して大きな文字の比率。 OpenType は、小文字に変換する小型英大文字を含め、超小型英大文字、タイトル、および大文字スペーシングをさまざまなスタイルの形式をサポートします。 これらのスタイル形式を使用して、英大文字の外観を制御できます。  
  
 次のテキストには、「小型英大文字」と"AllSmallCaps"スタイルを指定の文字の後に、Pescadero フォントの標準の大文字が表示されます。 この場合は、同じフォント サイズは、次の 3 つすべての単語です。  
  
 3da02efe-1b9a-4fd5-80c1-6960e00e4e8b  
大文字の例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CapitalSpacing" />
      </Docs>
    </Member>
    <Member MemberName="CapitalSpacing">
      <MemberSignature Language="C#" Value="public abstract bool CapitalSpacing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapitalSpacing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CapitalSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読みやすさを向上させるために、すべて大文字のテキストのグリフ間の間隔をグローバルに調整するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 間隔を調整します。 場合、それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字間隔は、テキストをすべて大文字を使用する場合は、間隔を設けることができるようにする機能です。 通常、英大文字は小文字とブレンドする設計されます。 間で魅力的な間隔を表示し、大文字と小文字をあまりにも堅く見えますすべて大文字を使用するとします。 次のテキストには、Pescadero フォントの標準と資本の間隔が表示されます。  
  
 e06276f8-ce28-4bd2-85a4-e20ec817ce6d  
通常と資本の間隔の例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Capitals" />
      </Docs>
    </Member>
    <Member MemberName="CaseSensitiveForms">
      <MemberSignature Language="C#" Value="public abstract bool CaseSensitiveForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CaseSensitiveForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.CaseSensitiveForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グリフが大文字のグリフに合わせるために、垂直方向の位置を調整するかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 垂直方向の位置が調整されている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextualAlternates">
      <MemberSignature Language="C#" Value="public abstract bool ContextualAlternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContextualAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>表示されているテキストのコンテキストに基づいて、カスタム グリフのフォームを使用できるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> カスタム グリフのフォームを使用する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ランダムなコンテキスト代替は、単一の文字の複数の代替グリフを提供します。 スクリプトの種類のフォントで実装された場合、この機能は、ランダムに選択したグリフの外観にわずかな相違点のセットを使用して、手書きをシミュレートできます。 次のテキストは、ランダムなコンテキスト代替を Lindsey フォントを使用します。 注意して、文字"a"がわずかに異なって表示  
  
 b77a3b66-0df2-4487-9ed5-3b3ebf09c14c  
ランダムなコンテキスト代替グリフの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticAlternates" />
      </Docs>
    </Member>
    <Member MemberName="ContextualLigatures">
      <MemberSignature Language="C#" Value="public abstract bool ContextualLigatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContextualLigatures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト合字が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> コンテキスト合字が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 合字を構成する文字の間の結合の動作を提供することで読みやすさを向上させることは、コンテキスト合字が設計されています。  
  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures%2A> は `true` 選択したフォントがコンテキスト合字をサポートしていないと、文字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures" />
      </Docs>
    </Member>
    <Member MemberName="ContextualSwashes">
      <MemberSignature Language="C#" Value="public abstract int ContextualSwashes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ContextualSwashes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualSwashes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト巻き髭形式のインデックスを指定する値を取得します。</summary>
        <value>標準的な巻き髭形式のインデックス。 既定では 0 \(ゼロです\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スワッシュ グリフの特定の組み合わせには、隣接する文字の重なり合ったディセンダーなどの魅力的ではありません外観可能性があります。 コンテキスト飾り付きを使用するには、優れた外観を生成する代替飾り付きグリフを使用することができます。 次のテキストは前に、とコンテキストの飾り付きの適用後に、同じ単語を示します。  
  
 959ef0ca-9db5-4b40-b98a-24ae23fee566  
コンテキストの飾り付きの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardSwashes" />
      </Docs>
    </Member>
    <Member MemberName="DiscretionaryLigatures">
      <MemberSignature Language="C#" Value="public abstract bool DiscretionaryLigatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DiscretionaryLigatures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>随意合字が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 随意合字が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 随意合字は、装飾に設計されていて、読みやすくするため特別に設計されていません。 次のテキストには、Pericles フォントの随意合字のグリフが表示されます。  
  
 f51d5560-c15a-4834-a2f7-3762c781ea5c  
随意合字セットの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures" />
      </Docs>
    </Member>
    <Member MemberName="EastAsianExpertForms">
      <MemberSignature Language="C#" Value="public abstract bool EastAsianExpertForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EastAsianExpertForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianExpertForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日本語フォントの標準的な形式を対応する適切なタイポグラフィの形式に置き換えられているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 日本語フォントの標準的な形式は、対応する優先文字体裁形式; に置き換えられている場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianLanguage" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianWidths" />
      </Docs>
    </Member>
    <Member MemberName="EastAsianLanguage">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontEastAsianLanguage EastAsianLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontEastAsianLanguage EastAsianLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontEastAsianLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>特定の書記体系または言語に使用するグリフのバージョンを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontEastAsianLanguage" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontEastAsianLanguage.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianExpertForms" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianWidths" />
      </Docs>
    </Member>
    <Member MemberName="EastAsianWidths">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontEastAsianWidths EastAsianWidths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontEastAsianWidths EastAsianWidths" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontEastAsianWidths</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>東アジア言語のフォントでラテン文字に使用する比例幅を示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontEastAsianWidths" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontEastAsianWidths.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianExpertForms" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.EastAsianLanguage" />
      </Docs>
    </Member>
    <Member MemberName="Fraction">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontFraction Fraction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontFraction Fraction" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Fraction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontFraction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>分数のスタイルを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontFraction" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontFraction.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OpenType フォントは、小数、スラッシュや積み上げなどのスタイルをサポートします。  
  
 次のテキストは、分数 Palatino Linotype フォントのスタイルを表示します。  
  
 61a662df-2c48-41f4-8ee2-d2d025f9c145  
スラッシュと積み上げ分数スタイルの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HistoricalForms">
      <MemberSignature Language="C#" Value="public abstract bool HistoricalForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HistoricalForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォームの履歴が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォームの履歴が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 歴史的形式は、過去に一般的であった表記規則です。 次のテキストには、「、マサチューセッツ州ボストン」という語句が表示されます。 Palatino Linotype フォントのグリフの履歴フォームを使用します。  
  
 1bee1e3c-fc7a-49a1-be78-7c27187d77f3  
歴史的書体の例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures" />
      </Docs>
    </Member>
    <Member MemberName="HistoricalLigatures">
      <MemberSignature Language="C#" Value="public abstract bool HistoricalLigatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HistoricalLigatures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>歴史的合字が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 歴史的合字が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 歴史的合字は、フォントの設計者は、フォントに追加する履歴の文字体裁で使用される表記形式です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalForms" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures" />
      </Docs>
    </Member>
    <Member MemberName="Kerning">
      <MemberSignature Language="C#" Value="public abstract bool Kerning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Kerning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Kerning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーニングが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> カーニングが有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カーニングは、word 図形を強化する文字の間隔を調整します。 文字体裁の機能です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MathematicalGreek">
      <MemberSignature Language="C#" Value="public abstract bool MathematicalGreek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MathematicalGreek" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.MathematicalGreek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ギリシャ語のグリフの印刷用の標準のフォント形式を数学的表記でよく使用されるフォントの対応する形式に置き換えられているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 数学的なギリシャのフォームが有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.MathematicalGreek%2A> は `true` と選択したフォントが学ギリシャ語形式をサポートしていないため、文字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumeralAlignment">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontNumeralAlignment NumeralAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontNumeralAlignment NumeralAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontNumeralAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数字を使用するときは、幅の調整を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontNumeralAlignment" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontNumeralAlignment.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OpenType フォントは、数字を使用するときに、幅の調整を制御するプロポーショナルおよび表形式の図の機能をサポートします。 プロポーショナル数字では、各数字を扱うさまざまな幅を持つものとして、「1」の「5」で使われています。 表形式の図は、位置が揃う縦方向に数値情報を読みやすくできるように、等幅の数字として扱われます。  
  
 次のテキストは、Miramonte フォントを使用して最初の列に 2 つのプロポーショナル数字を表示します。 「5」と「1」数字の幅の違いに注意してください。 2 番目の列では、表形式の図の機能を使用して調整幅と同じ 2 つの数値が表示されます。  
  
 91967282-97ea-4a95-a190-22487411df25  
比例とタブ付きの数値の例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralStyle" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero" />
      </Docs>
    </Member>
    <Member MemberName="NumeralStyle">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontNumeralStyle NumeralStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontNumeralStyle NumeralStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontNumeralStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値の代替フォント形式を表示するためのグリフのセットを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontNumeralStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontNumeralStyle.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OpenType フォントは、旧形式の数字形式をサポートします。 この形式は、標準になっているスタイルの数字を表示するのに便利です。 次のテキストは、Palatino Linotype フォントの標準および古いスタイルの数字の形式で 18th 世紀日付を表示します。  
  
 fb75cf8d-d264-4e09-bdb0-c6b2e76afdad  
標準および古いスタイルの数字の例  
  
 次のテキストには、古いスタイルの数字に続いて、Palatino Linotype フォントの標準の数字が表示されます。  
  
 e38d3e59-5bd8-4734-9ab1-0ac2b50b61a1  
標準および古いスタイルの数字セットの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralAlignment" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero" />
      </Docs>
    </Member>
    <Member MemberName="OnPropertiesChanged">
      <MemberSignature Language="C#" Value="protected void OnPropertiesChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnPropertiesChanged() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextRunTypographyProperties.OnPropertiesChanged" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>内部状態を修正、 <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> いずれかの場合は、クラスを派生 <see cref="T:System.Windows.Media.TextFormatting.TextRunTypographyProperties" /> プロパティの値が変更されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの set アクセサーから呼び出す、 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties> プロパティのオーバーライドで、かつ setter の一部として値が変更された場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SlashedZero">
      <MemberSignature Language="C#" Value="public abstract bool SlashedZero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SlashedZero" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>公称ゼロ フォント形式するかどうかを示す値を取得スラッシュ ゼロに置き換えられます。</summary>
        <value>
          <see langword="true" /> 付きの場合は、ゼロが有効にします。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 OpenType フォント サポート スラッシュ ゼロの数字形式、文字"O"と数字の「0」の違いを強調します。 スラッシュ ゼロ、財務およびビジネス情報の識別子によく使用されます。  
  
 次のテキストは、Miramonte フォントを使用してサンプル発注 id を表示します。 最初の行では、標準の数字を使用します。 使用する 2 番目の線はスラッシュ ゼロ コントラストを提供する優れた大文字の"O"とします。  
  
 e11ef0fd-b4ee-4edd-9a4f-a7c592e5753d  
0 個のスラッシュを付きの例  
  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.SlashedZero%2A> は `true` され、選択したフォントがいないサポート スラッシュ ゼロ、数字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralAlignment" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.NumeralStyle" />
      </Docs>
    </Member>
    <Member MemberName="StandardLigatures">
      <MemberSignature Language="C#" Value="public abstract bool StandardLigatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StandardLigatures" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準合字が有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 標準合字が有効な場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次のテキストには、Pericles フォントの標準合字のグリフが表示されます。  
  
 154b444e-2d1f-431f-9147-8d9670cb9568  
合字の標準セットの例  
  
 既定では、OpenType フォントで [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] 標準合字を有効にします。 たとえば、Palatino Linotype フォントを使用する場合の標準合字"fi"、"ff"および"fl"として表示されます、組み合わせ文字のグリフ。 各標準合字の文字が互いに接触することに注意してください。  
  
 5739b367-5f18-4bfa-b9bf-d970aa97e663  
既定で有効になっている標準合字の例  
  
 ただし、"ff"などの標準合字は、結合された文字のグリフではなくとして 2 つの別個のグリフが表示されるように、標準合字機能が無効にできます。  
  
 05b24984-3bf1-457f-b44d-389e89b22f35  
無効な標準合字の例  
  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardLigatures%2A> は `true` 選択したフォントが標準合字をサポートしていないと、文字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.DiscretionaryLigatures" />
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.HistoricalLigatures" />
      </Docs>
    </Member>
    <Member MemberName="StandardSwashes">
      <MemberSignature Language="C#" Value="public abstract int StandardSwashes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StandardSwashes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardSwashes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準的な巻き髭形式のインデックスを取得します。</summary>
        <value>標準的な巻き髭形式のインデックス。 既定では 0 \(ゼロです\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 巻き髭は、多くの場合、カリグラフィに関連付けられている手の込んだ装飾を使用して装飾的なグリフです。 次のテキストには、標準グリフと飾り付きグリフ Pescadero フォントが表示されます。  
  
 f38c4aea-de95-4cec-8660-11fea33ca5d1  
標準グリフと飾り付きグリフの例  
  
 巻き髭は、イベントのお知らせなどの短い語句で装飾的な要素としてよく使用されます。 次のテキストでは、巻き髭を使用して、イベントの名前の大文字を強調します。  
  
 1b633df4-af34-4f59-9f1e-35e5655f9987  
大文字に使用される巻き髭の例  
  
 場合の値 <xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StandardSwashes%2A> は 0 より大きく、選択したフォントが、指定したインデックス値から標準巻き髭フォームをサポートしない、文字の既定のフォームが表示されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualSwashes" />
      </Docs>
    </Member>
    <Member MemberName="StylisticAlternates">
      <MemberSignature Language="C#" Value="public abstract int StylisticAlternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StylisticAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スタイル上の代替形式のインデックスを取得します。</summary>
        <value>スタイル上の代替形式のインデックス。 既定では 0 \(ゼロです\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 代替文字は、標準的なグリフの代わりに使用できますです。 次の例で使用される Pericles フォントなど、OpenType フォントには、異なる外観のテキストを作成に使用できる代替グリフが含まれます。 次のテキストには、Pericles フォントの標準グリフが表示されます。  
  
 b3dca9d8-6a94-472d-899b-769d22492c25  
グリフの標準セットの例  
  
 Pericles OpenType フォントは、一連の標準グリフをデザインのバリエーションを提供する追加のグリフを格納します。 次のテキストのスタイル代替グリフを表示します。  
  
 d5292fdf-5974-4b60-a851-9aa44d5d12c7  
スタイル代替グリフの例  
  
 次のテキストは、Pericles フォントのいくつかのスタイル代替グリフを表示します。  
  
 beb3c0be-9856-4dac-9593-97cfacad142b  
その他のスタイル代替グリフの例  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.ContextualAlternates" />
      </Docs>
    </Member>
    <Member MemberName="StylisticSet1">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet1" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet10">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet10 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet10" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet10" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet11">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet11 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet11" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet11" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet12">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet12 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet12" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet12" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet13">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet13 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet13" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet13" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet14">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet14 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet14" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet14" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet15">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet15 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet15" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet15" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet16">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet16 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet16" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet16" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet17">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet17 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet17" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet17" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet18">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet18 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet18" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet18" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet19">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet19 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet19" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet19" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet2">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet20">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet20 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet20" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet20" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet3">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet3" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet4">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet4" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet5">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet5" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet6">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet6" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet7">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet7" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet8">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet8 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet8" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet8" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StylisticSet9">
      <MemberSignature Language="C#" Value="public abstract bool StylisticSet9 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StylisticSet9" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.StylisticSet9" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>フォントのフォームのデザインのセットが有効になっているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> フォントのフォームのデザインのセットが有効の場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 一部のフォントには、文字セットの部分に対応するバリアント型のスタイルのグリフが含まれます。 視覚的に調和させて、特定の方法で操作またはその他の方法で共同作業するには、スタイル セットでのグリフをデザインすることもできます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variants">
      <MemberSignature Language="C#" Value="public abstract System.Windows.FontVariants Variants { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FontVariants Variants" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Variants" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FontVariants</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用する標準の表記形式のバリエーションを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.FontVariants" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.FontVariants.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バリアントは、上付きのフォントの形式に似ています。 フォント形式上付き文字と序数に基づくフォーム間、または添字とより下のフォーム間でのさまざまなグリフ セットを格納することができます。<xref:System.Windows.Media.TextFormatting.TextRunTypographyProperties.Variants%2A> プロパティでは、OpenType フォントの上付き文字と下付き文字の値を設定することができます。  
  
 次のテキストは、Palatino Linotype フォントの上付き文字を表示します。  
  
 b5bcefc4-bb2a-4968-89cc-3248a9256103  
上付き文字の例  
  
 次のテキストには、Palatino Linotype フォントの添字が表示されます。  
  
 f1d9e8e6-fa65-4119-a656-f75de23e59e8  
添字の例  
  
 フォントのバリアントをサポートしないフォント形式の近似アルゴリズムがあります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>