<Type Name="TextSource" FullName="System.Windows.Media.TextFormatting.TextSource">
  <TypeSignature Language="C#" Value="public abstract class TextSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TextSource extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.TextFormatting.TextSource" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>文字データを指定すると、書式設定プロパティで使用される抽象クラスを提供、 <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> オブジェクトです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 内のテキストに対するすべてのアクセス、 <xref:System.Windows.Media.TextFormatting.TextSource> オブジェクトは、 <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>, 、これはテキスト レイアウト クライアントを選択した任意の方法でテキストを仮想化を許可するように設計されています。  
  
 <xref:System.Windows.Media.TextFormatting.TextFormatter> [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] テキストの書式設定とテキストの行を最新のサービスを提供するテキスト エンジンです。<xref:System.Windows.Media.TextFormatting.TextFormatter> 別のテキスト文字書式および段落のスタイルを処理できるため、国際的なテキスト レイアウトがサポートされています。 従来のテキストとは異なり [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], 、 <xref:System.Windows.Media.TextFormatting.TextFormatter> コールバック メソッドのセット内のテキスト レイアウト クライアントと対話します。 これらのメソッドの実装を提供するために必要な <xref:System.Windows.Media.TextFormatting.TextSource> クラスです。 次の一覧には、3 つのメンバーをオーバーライドする必要がありますがについて説明します。  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A>: 取得、 <xref:System.Windows.Media.TextFormatting.TextRun> 始まる、指定した <xref:System.Windows.Media.TextFormatting.TextSource> 位置。  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A>: 直前に、指定したテキスト範囲を取得する <xref:System.Windows.Media.TextFormatting.TextSource> 位置。  
  
-   <xref:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex%2A>: マップする値を取得する、 <xref:System.Windows.Media.TextFormatting.TextSource> 文字のインデックス、 <xref:System.Windows.Media.TextEffect> 文字インデックス。  
  
> [!NOTE]
>  派生を実装する方法を示す完全なコード サンプルの <xref:System.Windows.Media.TextFormatting.TextSource> を参照してください [Advanced Text Formatting Sample](http://go.microsoft.com/fwlink/?LinkID=159965) します。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.TextFormatting.TextFormatter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TextSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrecedingText">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText (int textSourceCharacterIndexLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextSpan`1&lt;class System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt; GetPrecedingText(int32 textSourceCharacterIndexLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextSpan&lt;System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndexLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndexLimit">
          <see cref="T:System.Int32" /> 文字列の検索を停止する文字のインデックス位置を示す値。</param>
        <summary>直前に、指定したテキスト範囲の取得 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 位置。</summary>
        <returns>A <see cref="T:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange" /> 直前にテキスト範囲を表す値 <paramref name="textSourceCharacterIndexLimit" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Media.TextFormatting.TextSource.GetPrecedingText%2A> メソッドは空白を返します <xref:System.Windows.Media.TextFormatting.CultureSpecificCharacterBufferRange> テキストが直前にまたがっている場合 `textSourceCharacterIndexLimit` インライン オブジェクトまたは非表示の実行などの任意のテキストは含まれません。  
  
 このメソッドは、前の値がない場合、長さ 0 のテキスト範囲を返します `textSourceCharacterIndexLimit`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextEffectCharacterIndexFromTextSourceCharacterIndex">
      <MemberSignature Language="C#" Value="public abstract int GetTextEffectCharacterIndexFromTextSourceCharacterIndex (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetTextEffectCharacterIndexFromTextSourceCharacterIndex(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextEffectCharacterIndexFromTextSourceCharacterIndex(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">
          <see cref="T:System.Int32" /> を指定する値、 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> にマップする文字インデックス。</param>
        <summary>マップの値を取得、 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 文字のインデックス、 <see cref="T:System.Windows.Media.TextEffect" /> 文字インデックス。</summary>
        <returns>
          <see cref="T:System.Int32" /> を表す値、 <see cref="T:System.Windows.Media.TextEffect" /> 文字インデックス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRun">
      <MemberSignature Language="C#" Value="public abstract System.Windows.Media.TextFormatting.TextRun GetTextRun (int textSourceCharacterIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Media.TextFormatting.TextRun GetTextRun(int32 textSourceCharacterIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.TextFormatting.TextSource.GetTextRun(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.TextFormatting.TextRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textSourceCharacterIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="textSourceCharacterIndex">内の文字インデックス位置の指定、 <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 場所、 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> を取得します。</param>
        <summary>取得、 <see cref="T:System.Windows.Media.TextFormatting.TextRun" /> 始まる、指定した <see cref="T:System.Windows.Media.TextFormatting.TextSource" /> 位置。</summary>
        <returns>表す値、 <see cref="T:System.Windows.Media.TextFormatting.TextRun" />, から派生したオブジェクトまたは <see cref="T:System.Windows.Media.TextFormatting.TextRun" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキスト ランでは、1 つのプロパティ セットを共有する文字のシーケンスです。 フォント ファミリ、フォント スタイル、前景の色、テキスト装飾、またはその他の書式設定効果、テキスト ランなどの形式に変更します。<xref:System.Windows.Media.TextFormatting.TextRun> クラスによって処理されたテキスト コンテンツのいくつかの型を表す型階層のルートは、 <xref:System.Windows.Media.TextFormatting.TextFormatter>です。 各クラスから派生した <xref:System.Windows.Media.TextFormatting.TextRun> 、特殊な種類のテキストの内容を表します。  
  
|クラス|説明|  
|---------|--------|  
|<xref:System.Windows.Media.TextFormatting.TextRun>|階層のルートです。 同じ文字プロパティのセットを共有する文字のグループを定義します。|  
|<xref:System.Windows.Media.TextFormatting.TextCharacters>|異なる物理タイプフェイスから文字のグリフのコレクションを定義します。|  
|<xref:System.Windows.Media.TextFormatting.TextEmbeddedObject>|個別のエンティティとして行われます。 どの測定、ヒット テスト、および全体のコンテンツの描画、テキスト コンテンツの種類を定義します。 この種類のコンテンツの例は、テキストの行の途中でボタンです。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfLine>|改行文字のコードを定義します。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfParagraph>|段落区切り文字のコードを定義します。<xref:System.Windows.Media.TextFormatting.TextEndOfLine> から派生します。|  
|<xref:System.Windows.Media.TextFormatting.TextEndOfSegment>|セグメント区切りマーカーを定義します。|  
|<xref:System.Windows.Media.TextFormatting.TextHidden>|非表示の文字の範囲を定義します。|  
|<xref:System.Windows.Media.TextFormatting.TextModifier>|変更のスコープの先頭を定義します。|  
  
   
  
## 例  
 次の例のオーバーライドで、 <xref:System.Windows.Media.TextFormatting.TextSource.GetTextRun%2A> メソッドを実装します。  
  
 [!code-csharp[TextFormattingSnippets\#TextFormattingSnippet4](~/samples/snippets/csharp/VS_Snippets_Wpf/TextFormattingSnippets/CSharp/CustomTextClasses.cs#textformattingsnippet4)]
 [!code-vb[TextFormattingSnippets\#TextFormattingSnippet4](~/samples/snippets/visualbasic/VS_Snippets_Wpf/TextFormattingSnippets/visualbasic/customtextclasses.vb#textformattingsnippet4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelsPerDip">
      <MemberSignature Language="C#" Value="public double PixelsPerDip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 PixelsPerDip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキストを表示する PixelsPerDip を取得または設定します。</summary>
        <value>現在の <see cref="P:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 拡張するクラス<xref:System.Windows.Media.TextFormatting.TextSource>更新する必要があります<xref:System.Windows.Media.TextFormatting.TextSource.PixelsPerDip%2A>あたりモニター DPI 対応のアプリケーションの DPI が変更されるたびにします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>