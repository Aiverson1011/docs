<Type Name="InheritanceMappingAttribute" FullName="System.Data.Linq.Mapping.InheritanceMappingAttribute">
  <TypeSignature Language="C#" Value="public sealed class InheritanceMappingAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InheritanceMappingAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>継承階層内のマップ、 LINQ to SQL アプリケーションです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つ <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> マップされたクラスごとに指定します。  
  
 継承階層をマップするときに、次に注意してください。  
  
-   階層内のすべてのクラスは、1 つのテーブルにマップする必要があります。  
  
-   階層の最上部にマップされた型では、継承階層のテーブルを宣言する必要があります。 最上位のクラスから派生したクラスでは、テーブルまたはマッピング属性を指定できません。  
  
-   階層では、インターフェイスを使用することができますが、 [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] がマップされません。  
  
-   クラスをマップがマップされたクラスのみを照会する場合に、階層内のクラスを省略できます。  
  
 適切な具体化識別子コード値では一意であり、データベースの値と一致する必要があります。 完全に一致しない \(しても大文字と小文字\) 識別子のコード値を持つ行を使用して、クラスをインスタンス化 <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> 設定 `true`します。  
  
   
  
## 例  
 この例では、階層における継承の割り当て、先頭が割り当てられているクラス \(`Shape`\) は抽象クラスです。  
  
 [!code-csharp[System.Data.Linq.Mapping.InheritanceMappingAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/vb/Module1.vb#1)]  
  
 次の例では、マップされていないクラスを含めることを示します。 階層の任意の場所マップされていないクラスを配置できます。  
  
 [!code-csharp[System.Data.Linq.Mapping.InheritanceMappingAttribute\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/cs/Program.cs#2)]
 [!code-vb[System.Data.Linq.Mapping.InheritanceMappingAttribute\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.Mapping.InheritanceMappingAttribute/vb/Module1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InheritanceMappingAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Code">
      <MemberSignature Language="C#" Value="public object Code { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Code" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはマップされた継承階層の識別子のコード値を設定します。</summary>
        <value>ユーザー指定をする必要があります。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public bool IsDefault { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または識別子の値が指定した値と一致しない場合にこの種類のオブジェクトをインスタンス化するかどうかを設定します。</summary>
        <value>既定値 \= <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つだけ、 <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute> で属性を宣言する必要があります <xref:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault%2A> として `true`します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または、階層内のクラスの型を設定します。</summary>
        <value>ユーザー指定をする必要があります。 既定値はありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ルート型を含む、継承階層内の任意の非抽象型を使用します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>