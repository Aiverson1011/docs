<Type Name="ResultTypeAttribute" FullName="System.Data.Linq.Mapping.ResultTypeAttribute">
  <TypeSignature Language="C#" Value="public sealed class ResultTypeAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResultTypeAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Mapping.ResultTypeAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>結果の各型を指定するために使用関数のさまざまな結果型があります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この属性は、さまざまな結果の型を返す関数を適用します。 関数から返される可能性のある結果の型を宣言に使用されます。 継承される型の継承階層のルート型のみを指定する必要があります。  
  
 「<xref:System.Data.Linq.Mapping.ResultTypeAttribute.Type?displayProperty=fullName>」を参照してください。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResultTypeAttribute (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">さまざまな結果型を持つ関数によって返される結果の型。</param>
        <summary>
          <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>さまざまな結果型を持つ関数の有効なまたは期待される型マッピングを取得します。</summary>
        <value>結果の型 \(<see cref="T:System.Type" />\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この属性は、さまざまな結果の型を返す関数を適用します。 関数から返される可能性のある結果の型を宣言に使用されます。 継承される型の継承階層のルート型のみを指定する必要があります。  
  
   
  
## 例  
 [!code-csharp[DLinqSprox\#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqSprox/cs/northwind-sprox.cs#4)]
 [!code-vb[DLinqSprox\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqSprox/vb/northwind-sprox.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>