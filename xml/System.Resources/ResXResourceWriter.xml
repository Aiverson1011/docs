<Type Name="ResXResourceWriter" FullName="System.Resources.ResXResourceWriter">
  <TypeSignature Language="C#" Value="public class ResXResourceWriter : System.Resources.IResourceWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ResXResourceWriter extends System.Object implements class System.IDisposable, class System.Resources.IResourceWriter" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResXResourceWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceWriter</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XML リソース \(.resx\) ファイルまたは出力ストリームにリソースを書き込みます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResXResourceWriter> XML 形式でリソースを書き込みます。 バイナリ リソース ファイルを書き込むには使用<xref:System.Resources.ResourceWriter>です。  
  
 リソースが使用する名前\/値ペアとして指定された、<xref:System.Resources.ResXResourceWriter.AddResource%2A>メソッドです。 リソース名は検索に使用されるときに区別されます。サポートするようにより簡単に作成ツールのバグを取り除く<xref:System.Resources.ResXResourceWriter>a.resx ファイル ケースのみが異なる名前を持つことはできません。  
  
 A.resx ファイルを作成するには、作成、<xref:System.Resources.ResXResourceWriter>一意のファイル名では、コール<xref:System.Resources.ResXResourceWriter.AddResource%2A>を少なくとも 1 回呼び出す<xref:System.Resources.ResXResourceWriter.Generate%2A>リソース ファイルをディスクに書き込むし、呼び出す<xref:System.Resources.ResXResourceWriter.Close%2A>ファイルを閉じます。 呼び出す<xref:System.Resources.ResXResourceWriter.Close%2A>を暗黙的に<xref:System.Resources.ResXResourceWriter.Generate%2A>ファイルが必要な場合です。  
  
 リソースは、追加されたのと同じ順序で必ずしもは書き込まれません。  
  
 A.resx ファイルの形式の詳細については、次を参照してください。[Working with .resx Files Programmatically](http://msdn.microsoft.com/ja-jp/168f941a-2b84-43f8-933f-cf4a8548d824)です。  
  
> [!NOTE]
>  このクラスには、リンク確認要求し、すべてのメンバーに適用されるクラス レベルの継承確認要求が含まれています。 A<xref:System.Security.SecurityException>直前の呼び出し元または派生クラスのいずれかに完全信頼アクセス許可がない場合にスローされます。  
  
   
  
## 例  
 次の例では、という名前の .resx ファイル`CarResources.resx`6 つの文字列、アイコン、およびアプリケーション定義の 2 つのオブジェクトを格納する \(2 つ`Automobile`オブジェクト\)。 例で定義されてインスタンス化された `Automobile` クラスは、<xref:System.SerializableAttribute> 属性でタグ付けされることに注意してください。  
  
 [!code-csharp[conceptual.resources.resx\#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/create1.cs#1)]
 [!code-vb[conceptual.resources.resx\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/create1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">出力ストリーム。</param>
        <summary>指定したストリーム オブジェクトにリソースを書き込む <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  <xref:System.Resources.ResXResourceWriter.Close%2A> メソッドがパラメーターとして指定したストリームを閉じます。 リソースをストリームに書き込むために、ストリームを閉じずを使用する必要があります、 <xref:System.Resources.ResXResourceWriter.Generate%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (System.IO.TextWriter textWriter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter textWriter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="textWriter">出力の送信先の <see cref="T:System.IO.TextWriter" /> オブジェクト。</param>
        <summary>指定した <see cref="T:System.IO.TextWriter" /> オブジェクトに書き込む <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">出力ファイル名。</param>
        <summary>指定したファイルにリソースを書き込む <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成 `filename` しが存在しない場合は、それを上書きします。 場合 `filename` ディレクトリ パスを含む完全なパスがないし、コンス トラクターをスロー、 <xref:System.IO.DirectoryNotFoundException> 例外です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="filename" /> で指定されたディレクトリが存在しません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (System.IO.Stream stream, Func&lt;Type,string&gt; typeNameConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Func`2&lt;class System.Type, string&gt; typeNameConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.IO.Stream,System.Func{System.Type,System.String})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="typeNameConverter" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="stream">出力の送信先のストリーム。</param>
        <param name="typeNameConverter">以前のバージョンの .NET Framework を対象のフレームワークとする場合に使用されるデリゲート。</param>
        <summary>指定したストリーム オブジェクトへのリソースの書き込みとコンバーター デリゲートの設定をする <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。 このデリゲートは、修飾アセンブリ名を使用して .NET Framework 4 以前の各 .NET Framework バージョンを対象とするリソース アセンブリの書き込みを可能にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前に .NET Framework のバージョンを対象とするアプリケーションのリソースを作成するときにこのコンス トラクターを使用して、visual Studio および MSBuild の [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (System.IO.TextWriter textWriter, Func&lt;Type,string&gt; typeNameConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter textWriter, class System.Func`2&lt;class System.Type, string&gt; typeNameConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.IO.TextWriter,System.Func{System.Type,System.String})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="textWriter" Type="System.IO.TextWriter" />
        <Parameter Name="typeNameConverter" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="textWriter">出力の送信先のオブジェクト。</param>
        <param name="typeNameConverter">以前のバージョンの .NET Framework を対象のフレームワークとする場合に使用されるデリゲート。</param>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。このクラスは、指定された <see cref="T:System.IO.TextWriter" /> オブジェクトにリソースを書き込み、修飾アセンブリ名を使用して .NET Framework 4 以前の各 .NET Framework バージョンを対象とするリソース アセンブリの書き込みを可能にするデリゲートを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前に .NET Framework のバージョンを対象とするアプリケーションのリソースを作成するときにこのコンス トラクターを使用して、visual Studio および MSBuild の [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResXResourceWriter (string fileName, Func&lt;Type,string&gt; typeNameConverter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, class System.Func`2&lt;class System.Type, string&gt; typeNameConverter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.#ctor(System.String,System.Func{System.Type,System.String})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="typeNameConverter" Type="System.Func&lt;System.Type,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="fileName">出力の送信先のファイル。</param>
        <param name="typeNameConverter">以前のバージョンの .NET Framework を対象のフレームワークとする場合に使用されるデリゲート。</param>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。このクラスは、指定されたファイルにリソースを書き込み、修飾アセンブリ名を使用して .NET Framework 4 以前の各 .NET Framework バージョンを対象とするリソース アセンブリの書き込みを可能にするデリゲートを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 前に .NET Framework のバージョンを対象とするアプリケーションのリソースを作成するときにこのコンス トラクターを使用して、visual Studio および MSBuild の [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)]です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <paramref name="filename" /> で指定されたディレクトリが存在しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddAlias">
      <MemberSignature Language="C#" Value="public virtual void AddAlias (string aliasName, System.Reflection.AssemblyName assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAlias(string aliasName, class System.Reflection.AssemblyName assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddAlias(System.String,System.Reflection.AssemblyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aliasName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.Reflection.AssemblyName" />
      </Parameters>
      <Docs>
        <param name="aliasName">エイリアスの名前。</param>
        <param name="assemblyName">
          <c>aliasName</c> で表されるアセンブリの名前。</param>
        <summary>エイリアスのリストに、指定したエイリアスを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 エイリアスを持つアセンブリからは、値がリソースは、エイリアスの一覧に自動的に追加されます。 リソースはまで書き込まれません <xref:System.Resources.ResXResourceWriter.Generate%2A> が呼び出されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assemblyName" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMetadata">
      <MemberSignature Language="C#" Value="public void AddMetadata (string name, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetadata(string name, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">プロパティの名前。</param>
        <param name="value">追加するプロパティの値を格納しているバイト配列。</param>
        <summary>書き込むリソースのリストに、バイト配列として指定された値を持つデザイン時のプロパティを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定されたリソース、 <paramref name="name" /> パラメーターは既に追加されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMetadata">
      <MemberSignature Language="C#" Value="public void AddMetadata (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetadata(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">プロパティの名前。</param>
        <param name="value">追加するプロパティの値を示すオブジェクト。</param>
        <summary>書き込むリソースのリストに、オブジェクトとして指定された値を持つデザイン時のプロパティを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定されたリソース、 <paramref name="name" /> パラメーターは既に追加されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddMetadata">
      <MemberSignature Language="C#" Value="public void AddMetadata (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddMetadata(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddMetadata(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">プロパティの名前。</param>
        <param name="value">追加するプロパティの値を示す文字列。</param>
        <summary>書き込むリソースのリストに、文字列として指定された値を持つデザイン時のプロパティを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定されたリソース、 <paramref name="name" /> プロパティは既に追加されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (System.Resources.ResXDataNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(class System.Resources.ResXDataNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddResource(System.Resources.ResXDataNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Resources.ResXDataNode" />
      </Parameters>
      <Docs>
        <param name="node">リソースの名前と値のペアを格納している <see cref="T:System.Resources.ResXDataNode" /> オブジェクト。</param>
        <summary>書き込むリソースのリストに、<see cref="T:System.Resources.ResXDataNode" /> オブジェクトで指定されている名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">8 ビット符号なし整数の配列として追加するリソースの値。</param>
        <summary>書き込むリソースのリストに、バイト配列として指定された名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースはまで書き込まれません <xref:System.Resources.ResXResourceWriter.Generate%2A> が呼び出されます。  
  
 リソースはシリアル化され、バイナリ形式で格納されています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">リソースの値です。</param>
        <summary>書き込むリソースのリストに、オブジェクトとして指定された名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースはまで書き込まれません<xref:System.Resources.ResXResourceWriter.Generate%2A>と呼びます。 追加されたリソースは、シリアル化する必要があります。  
  
 追加するリソースが、文字列の場合は、文字列として記述します。それ以外の場合、リソースがシリアル化され、バイナリ形式で格納します。  
  
   
  
## 例  
 次の例では、という名前の .resx ファイル`CarResources.resx`6 つの文字列、アイコン、およびアプリケーション定義の 2 つのオブジェクトを格納する \(2 つ`Automobile`オブジェクト\)。 アイコンを格納して、`Automobile`オブジェクトを呼び出して、<xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.Object%29>メソッドです。 例で定義されてインスタンス化された `Automobile` クラスは、<xref:System.SerializableAttribute> 属性でタグ付けされることに注意してください。  
  
 [!code-csharp[conceptual.resources.resx\#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/create1.cs#1)]
 [!code-vb[conceptual.resources.resx\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/create1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">リソースの値です。</param>
        <summary>文字列リソースをリソースに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースはまで書き込まれません<xref:System.Resources.ResXResourceWriter.Generate%2A>と呼びます。  
  
   
  
## 例  
 次の例では、という名前の .resx ファイル`CarResources.resx`6 つの文字列、アイコン、およびアプリケーション定義の 2 つのオブジェクトを格納する \(2 つ`Automobile`オブジェクト\)。 呼び出し文字列を格納する、<xref:System.Resources.ResXResourceWriter.AddResource%28System.String%2CSystem.String%29>メソッドです。  
  
 [!code-csharp[conceptual.resources.resx\#1](~/samples/snippets/csharp/VS_Snippets_CLR/conceptual.resources.resx/cs/create1.cs#1)]
 [!code-vb[conceptual.resources.resx\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/conceptual.resources.resx/vb/create1.vb#1)]  
  
 Note that the `Automobile` class, which is defined and instantiated in the example, is tagged with the <xref:System.SerializableAttribute> attribute.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BasePath">
      <MemberSignature Language="C#" Value="public string BasePath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BasePath" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResXResourceWriter.BasePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResXFileRef" /> オブジェクトで指定されている相対ファイル パスのベース パスを取得または設定します。</summary>
        <value>
          <see cref="T:System.Resources.ResXFileRef" /> オブジェクトで指定されている相対ファイル パスの前に付加されると、XML リソース ファイルの絶対パスとなるパス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BinSerializedObjectMimeType">
      <MemberSignature Language="C#" Value="public static readonly string BinSerializedObjectMimeType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string BinSerializedObjectMimeType" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.BinSerializedObjectMimeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バイナリ オブジェクトの既定コンテンツ タイプを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ByteArraySerializedObjectMimeType">
      <MemberSignature Language="C#" Value="public static readonly string ByteArraySerializedObjectMimeType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ByteArraySerializedObjectMimeType" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.ByteArraySerializedObjectMimeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バイト配列オブジェクトの既定コンテンツ タイプを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling this method is the equivalent of calling <xref:System.Resources.ResXResourceWriter.Dispose%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSerializedObjectMimeType">
      <MemberSignature Language="C#" Value="public static readonly string DefaultSerializedObjectMimeType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string DefaultSerializedObjectMimeType" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.DefaultSerializedObjectMimeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトの既定コンテンツ タイプを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public virtual void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Resources.ResXResourceWriter.Dispose%2A> method calls the <xref:System.Resources.ResXResourceWriter.Generate%2A> method, if necessary, before releasing managed and unmanaged system resources.  
  
 Calling <xref:System.Resources.ResXResourceWriter.Dispose%2A> allows the system resources used by the <xref:System.Resources.ResXResourceWriter> to be reallocated for other purposes. For more information about <xref:System.Resources.ResXResourceWriter.Dispose%2A>, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Resources.ResXResourceWriter.Dispose%2A> method calls the <xref:System.Resources.ResXResourceWriter.Generate%2A> method, if necessary, before releasing managed and unmanaged system resources.  
  
 This method is called by the public <xref:System.Resources.ResXResourceWriter.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Resources.ResXResourceWriter> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see  and .</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~ResXResourceWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメンバーは、<see cref="M:System.Object.Finalize" /> メソッドをオーバーライドします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public void Generate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Generate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResXResourceWriter.Generate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Resources.ResXResourceWriter.AddResource(System.String,System.Byte[])" /> メソッドで追加されたすべてのリソースを出力ファイルまたはストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResXResourceWriter.Generate%2A> メソッド、リソースを出力ファイルまたはストリームに書き込みます。 近くの出力ファイルまたはストリームにリソースを記述する場合を呼び出す、 <xref:System.Resources.ResXResourceWriter.Close%2A> メソッドです。  
  
 <xref:System.Resources.ResXResourceWriter.Generate%2A> メソッドを一度だけ呼び出すことができます。 呼び出した後、 <xref:System.Resources.ResXResourceWriter.Generate%2A> メソッドをすべて <xref:System.Resources.IResourceWriter> メソッド以外の <xref:System.Resources.ResXResourceWriter.Close%2A> は例外をスローします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リソースが既に保存されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResMimeType">
      <MemberSignature Language="C#" Value="public static readonly string ResMimeType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ResMimeType" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.ResMimeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML リソースのコンテンツ タイプを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResourceSchema">
      <MemberSignature Language="C#" Value="public static readonly string ResourceSchema;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string ResourceSchema" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.ResourceSchema" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ファイルの書き込みに使用するスキーマを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 スキーマは、書き込まれているリソースの種類に基づいて、リソースのエンコード方法の詳細を説明します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SoapSerializedObjectMimeType">
      <MemberSignature Language="C#" Value="public static readonly string SoapSerializedObjectMimeType;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string SoapSerializedObjectMimeType" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.SoapSerializedObjectMimeType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>SOAP オブジェクトのコンテンツ タイプを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public static readonly string Version;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly string Version" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResXResourceWriter.Version" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 出力が準拠するスキーマのバージョンを指定します。 このフィールドは読み取り専用です。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddMetadata">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書き込むリソースのリストに、デザイン時のプロパティを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AddResource">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書き込むリソースのリストにリソースを追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResXResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>