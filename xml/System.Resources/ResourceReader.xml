<Type Name="ResourceReader" FullName="System.Resources.ResourceReader">
  <TypeSignature Language="C#" Value="public sealed class ResourceReader : System.Resources.IResourceReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceReader extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable, class System.Resources.IResourceReader" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceReader" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Reader</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceReader</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>順次リソースの名前と値のペアを読み取って、バイナリ リソース \(.resources\) ファイル内のリソースを列挙します。  
  
 **セキュリティに関するメモ**: このクラスのメソッドを信頼できないデータを指定して呼び出すことには、セキュリティ上のリスクが伴います。 このクラスのメソッドの呼び出しは、信頼されたデータだけを指定して実行してください。 詳細については、「[信頼されていないデータのセキュリティ リスク](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)」を参照してください。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Resources.ResourceReader> class provides a standard implementation of the <xref:System.Resources.IResourceReader> interface. A <xref:System.Resources.ResourceReader> instance represents either a standalone .resources file or a .resources file that is embedded in an assembly. It is used to enumerate the resources in a .resources file and retrieve its name\/value pairs. It differs from the <xref:System.Resources.ResourceManager> class, which is used to retrieve specified named resources from a .resources file that is embedded in an assembly. The <xref:System.Resources.ResourceManager> class is used to retrieve resources whose names are known in advance, whereas the <xref:System.Resources.ResourceReader> class is useful for retrieving resources whose number or precise names are not known at compile time. For example, an application may use a resources file to store configuration information that is organized into sections and items in a section, where the number of sections or items in a section is not known in advance. Resources can then be named generically \(such as `Section1`, `Section1Item1`, `Section1Item2`, and so on\) and retrieved by using a <xref:System.Resources.ResourceReader> object.  
  
> [!IMPORTANT]
>  This type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a **languageKeyword tag is not supported!!!!**  
> \/**languageKeyword tag is not supported!!!!**  
>  block. To dispose of it indirectly, use a language construct such as **languageKeyword tag is not supported!!!!**  
>  \(in C\#\) or **languageKeyword tag is not supported!!!!**  
>  \(in Visual Basic\). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
  
 For more information about using the <xref:System.Resources.ResourceReader> class, see the following sections:  
  
-   [Instantiating a ResourceReader object](#instantiate)  
  
-   [Enumerating a ResourceReader object's resources](#enumerate)  
  
    -   [Retrieving resources by using IDictionaryEnumerator properties](#idictionaryenumerator)  
  
    -   [Retrieving resources by name with GetResourceData](#getresourcedata)  
  
<a name="instantiate"></a>   
## Instantiating a ResourceReader Object  
 A .resources file is a binary file that has been compiled from either a text file or an XML .resx file by [Resgen.exe \(Resource File Generator\)](http://msdn.microsoft.com/ja-jp/8ef159de-b660-4bec-9213-c3fbc4d1c6f4). A <xref:System.Resources.ResourceReader> object can represent either a standalone .resources file or a .resources file that has been embedded in an assembly.  
  
 To instantiate a <xref:System.Resources.ResourceReader> object that reads from a standalone .resources file, use the <xref:System.Resources.ResourceReader> class constructor with either an input stream or a string that contains the .resources file name. The following example illustrates both approaches. The first instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources1.resources` by using its file name. The second instantiates a <xref:System.Resources.ResourceReader> object that represents a .resources file named `Resources2.resources` by using a stream created from the file.  
  
 [!code-csharp[System.Resources.ResourceReader.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#2)]  
  
 To create a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file, instantiate an <xref:System.Reflection.Assembly> object from the assembly in which the .resources file is embedded. Its <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> method returns a <xref:System.IO.Stream> object that can be passed to the <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> constructor. The following example instantiates a <xref:System.Resources.ResourceReader> object that represents an embedded .resources file.  
  
 [!code-csharp[System.Resources.ResourceReader.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/ctor1.cs#3)]
 [!code-vb[System.Resources.ResourceReader.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/ctor1.vb#3)]  
  
<a name="enumerate"></a>   
## Enumerating a ResourceReader Object's Resources  
 To enumerate the resources in a .resources file, you call the <xref:System.Resources.ResourceReader.GetEnumerator%2A> method, which returns an <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> object. You call the **languageKeyword tag is not supported!!!!**  
 method to move from one resource to the next. The method returns **languageKeyword tag is not supported!!!!**  
 when all the resources in the .resources file have been enumerated.  
  
> [!NOTE]
>  Although the <xref:System.Resources.ResourceReader> class implements the <xref:System.Collections.IEnumerable> interface and the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> method, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method does not provide the <xref:System.Collections.IEnumerable.GetEnumerator%2A?displayProperty=fullName> implementation. Instead, the <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> method  returns an <xref:System.Collections.IDictionaryEnumerator> interface object that provides access to each resource's name\/value pair.  
  
 You can retrieve the individual resources in the collection in two ways:  
  
-   You can iterate each resource in the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and use <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> properties to retrieve the resource name and value. We recommend this technique when all the resources are of the same type, or you know the data type of each resource.  
  
-   You can retrieve the name of each resource when you iterate the <xref:System.Collections.IDictionaryEnumerator?displayProperty=fullName> collection and call the <xref:System.Resources.ResourceReader.GetResourceData%2A> method to retrieve the resource's data. We recommend this approach when you do not know the data type of each resource or if the previous approach throws exceptions.  
  
<a name="idictionaryenumerator"></a>   
### Retrieving Resources by Using IDictionaryEnumerator Properties  
 The first method of enumerating the resources in a .resources file involves directly retrieving each resource's name\/value pair. After you call the **languageKeyword tag is not supported!!!!**  
 method to move to each resource in the collection, you can retrieve the resource name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property and the resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property.  
  
 The following example shows how to retrieve the name and value of each resource in a .resources file by using the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties. To run the example, create the following text file named ApplicationResources.txt to define string resources.  
  
```  
Title="Contact Information"  
Label1="First Name:"  
Label2="Middle Name:"  
Label3="Last Name:"  
Label4="SSN:"  
Label5="Street Address:"  
Label6="City:"  
Label7="State:"  
Label8="Zip Code:"  
Label9="Home Phone:"  
Label10="Business Phone:"  
Label11="Mobile Phone:"  
Label12="Other Phone:"  
Label13="Fax:"  
Label14="Email Address:"  
Label15="Alternate Email Address:"  
```  
  
 You can then convert the text resource file to a binary file named ApplicationResources.resources by using the following command:  
  
 **resgen ApplicationResources.txt**  
  
 The following example then uses the <xref:System.Resources.ResourceReader> class to enumerate each resource in the standalone binary .resources file and to display its key name and corresponding value.  
  
 [!code-csharp[System.Resources.ResourceReader.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/class1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/class1.vb#1)]  
  
 The attempt to retrieve resource data from the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property can throw the following exceptions:  
  
-   A <xref:System.FormatException> if the data is not in the expected format.  
  
-   A <xref:System.IO.FileNotFoundException> if the assembly that contains the type to which the data belongs cannot be found.  
  
-   A <xref:System.TypeLoadException> if the type to which the data belongs cannot be cannot be found.  
  
 Typically, these exceptions are thrown if the .resources file has been modified manually, if the assembly in which a type is defined has either not been included with an application or has been inadvertently deleted, or if the assembly is an older version that predates a type. If one of these exceptions is thrown, you can retrieve resources by enumerating each resource and calling the <xref:System.Resources.ResourceReader.GetResourceData%2A> method, as the following section shows. This approach provides you with some information about the data type that the <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> property attempted to return.  
  
<a name="getresourcedata"></a>   
### Retrieving Resources by Name with GetResourceData  
 The second approach to enumerating resources in a .resources file also involves navigating through the resources in the file by calling the **languageKeyword tag is not supported!!!!**  
 method. For each resource, you retrieve the resource's name from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> property, which is then passed to the <xref:System.Resources.ResourceReader.GetResourceData%28System.String%2CSystem.String%40%2CSystem.Byte%5B%5D%40%29> method to retrieve the resource's data. This is returned as a byte array in the **parameterReference tag is not supported!!!!**  
 argument.  
  
 This approach is more awkward than retrieving the resource name and value from the <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> and <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> properties, because it returns the actual bytes that form the resource value. However, if the attempt to retrieve the resource throws an exception, the <xref:System.Resources.ResourceReader.GetResourceData%2A> method can help identify the source of the exception by supplying information about the resource's data type. For more information about the string that indicates the resource's data type, see <xref:System.Resources.ResourceReader.GetResourceData%2A>.  
  
 The following example illustrates how to use this approach to retrieve resources and to handle any exceptions that are thrown. It programmatically creates a binary .resources file that contains four strings, one Boolean, one integer, one bitmap, and one custom `DateTimeTZI` object. To run the example, do the following:  
  
1.  Create an assembly named Library.dll that contains the `DateTimeTZI` structure. The following is the source code for the assembly.  
  
     [!code-csharp[System.Resources.ResourceReader.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/library.cs#4)]
     [!code-vb[System.Resources.ResourceReader.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/library.vb#4)]  
  
     Compile the source code in C\# by using the following command:  
  
    ```  
    csc /t:library library.cs  
    ```  
  
     Or, you can compile it in Visual Basic by using the following command:  
  
    ```  
    vbc library.vb /t:library  
    ```  
  
2.  Compile and execute the following source code, which creates a .resources file named ContactResources.resources.  
  
     [!code-csharp[System.Resources.ResourceReader.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/createresourceex1.cs#5)]
     [!code-vb[System.Resources.ResourceReader.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/createresourceex1.vb#5)]  
  
     The source code file is named CreateResources.cs. You can compile it in C\# by using the following command:  
  
    ```  
    csc CreateResources.cs /r:library.dll  
    ```  
  
     Or, you can compile it in Visual Basic by using the following command:  
  
    ```  
    vbc CreateResources.vb /r:library.dll  
    ```  
  
3.  Compile and run the following code to enumerate the resources in the ContactResources.resources file.  
  
     [!code-csharp[System.Resources.ResourceReader.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.class/cs/readresourceex1.cs#6)]
     [!code-vb[System.Resources.ResourceReader.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.class/vb/readresourceex1.vb#6)]  
  
     After modifying the source code \(for example, by deliberately throwing a <xref:System.FormatException> at the end of the **languageKeyword tag is not supported!!!!**  
     block\) or renaming the Library.dll assembly so that it is unavailable at runtime, you can run the example to see how calls to <xref:System.Resources.ResourceReader.GetResourceData%2A> enable you to retrieve or recreate some resource information.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。 このオブジェクトを使用して、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">リソースを読み取る入力ストリーム。</param>
        <summary>指定したストリーム用の <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンス トラクターのインスタンスを作成、 <xref:System.Resources.ResourceReader> アセンブリに埋め込まれたリソースまたはスタンドアロンの .resources ファイル .resources からファイルを取得するオブジェクト。 スタンドアロンの .resources ファイルから読み取れませんをインスタンス化、 <xref:System.IO.Stream> オブジェクトに渡すと、 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンス トラクターです。 埋め込みの .resources ファイルから読み取れませんを呼び出す、 <xref:System.Reflection.Assembly.GetManifestResourceStream%2A?displayProperty=fullName> .resources ファイルと、返されたパスの名前を持つメソッド <xref:System.IO.Stream> オブジェクトを <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンス トラクターです。  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。 このオブジェクトを使用して、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
   
  
## 例  
 このセクションの例では、という名前の次の .txt ファイルを使用して `PatientForm.txt` アプリケーションによって使用されているリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例では、リソース ファイルは、アプリケーションの実行可能コードを含むアセンブリに埋め込まれていると想定しています。 という名前のリソース ファイルを取得 `PatientForm.resources` 現在実行中のアセンブリからし、名前とそのリソースのそれぞれの値を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream1.cs#1)]
 [!code-vb[System.Resources.ResourceReader.Ctor\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream1.vb#1)]  
  
 C\# の例の名前を付けて場合 `Example.cs`, 、次のコマンドを使用してコンパイルすることができます。  
  
 **csc Example.cs\/res:PatientForm.resources**  
  
 Visual Basic の例の名前を付けて場合 `Example.vb`, 、次のコマンドを使用してコンパイルすることができます。  
  
 **vbc Example.vb\/res:PatientForm.resources**  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> パラメーターを読み取ることができません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.IOException">アクセス中に I\/O エラーが発生しました <paramref name="stream" />します。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for providing serialization services. Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Reflection.Assembly.GetManifestResourceStream(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceReader (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">読み取るリソース ファイルのパスと名前。<c>filename</c> では、大文字と小文字は区別されません。</param>
        <summary>リソース ファイルを指定して <see cref="T:System.Resources.ResourceReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceReader.%23ctor%28System.String%29> コンス トラクターのインスタンスを作成、 <xref:System.Resources.ResourceReader> スタンドアロンの .resources ファイルからリソースを取得するオブジェクト。 埋め込みの .resources ファイルからリソースを取得するには、 <xref:System.Resources.ResourceReader.%23ctor%28System.IO.Stream%29> コンス トラクターです。  
  
> [!IMPORTANT]
>  セキュリティ上のリスクは、信頼できないデータをこのオブジェクトのインスタンスを使用します。 このオブジェクトを使用して、信頼されたデータだけです。 詳細については、次を参照してください。 [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378)します。  
  
   
  
## 例  
 このセクションの例では、という名前の次の .txt ファイルを使用して `PatientForm.txt` アプリケーションによって使用されているリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例のリソースを列挙する `PatientForm.resources` し、それぞれの値と名前を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">ファイルが見つかりません。</exception>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.BadImageFormatException">リソース ファイルには、無効な形式があります。 たとえば、ファイルの長さは 0 にすることがあります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトに関連付けられたすべてのオペレーティング システム リソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceReader.Close%2A> can be safely called multiple times.  
  
   
  
## 例  
 The following example moves through a file's resources and displays all the key\/value pairs it finds. The code then uses the <xref:System.Resources.ResourceReader.Close%2A> method to shut down the <xref:System.Resources.ResourceReader> and to release all resources used by it.  
  
 [!code-cpp[System.Resources.ResourceReader.GetEnumerator Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceReader.GetEnumerator Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceReader.GetEnumerator Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceReader.GetEnumerator Example/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When you are finished using this instance of <xref:System.Resources.ResourceReader>, call <xref:System.Resources.ResourceReader.Dispose%2A> to release all resources used by this instance. You should eliminate further references to this <xref:System.Resources.ResourceReader> instance so that the garbage collector can reclaim the memory of the instance instead of keeping it alive for finalization.  
  
 <xref:System.Resources.ResourceReader.Dispose%2A> calls the private Dispose\(Boolean\) method, which contains the code to release managed and unmanaged resources. For more information, see [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Reader</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常を呼び出してリソースを列挙、 <xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドを繰り返し呼び出す、 <xref:System.Collections.IEnumerator.MoveNext%2A> メソッドで返された <xref:System.Collections.IDictionaryEnumerator> オブジェクトのメソッドが戻るまで `false`します。 リソース名は、 <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> プロパティ; からその値、 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> プロパティです。 この例では、この方法でリソースを列挙する方法を示します。  
  
 実装、 <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName> でプロパティを <xref:System.Resources.ResourceReader> クラスは、次の例外をスローできます。  
  
-   <xref:System.IO.FileNotFoundException>  
  
     データが属している型を含むアセンブリが見つかりません。  
  
-   <xref:System.FormatException>  
  
     データは、予期された形式ではないです。  
  
-   <xref:System.TypeLoadException>  
  
     データが属する型が見つかりません。  
  
 例外を処理するには呼び出すことによって、 <xref:System.Resources.ResourceReader.GetResourceData%2A> については、データ型と名前付きリソースに割り当てられているバイト配列を取得します。 詳細については、"を取得するリソースを名前で GetResourceData"」セクションを参照してください、 <xref:System.Resources.ResourceReader> クラスに関するトピック。  
  
> [!IMPORTANT]
>  <xref:System.Resources.ResourceReader> クラスには、列挙子を返す 2 つのメソッドが含まれています。<xref:System.Resources.ResourceReader.GetEnumerator%2A> メソッドが返される、 <xref:System.Collections.IDictionaryEnumerator> インターフェイス オブジェクトとメソッドを呼び出すことをお勧めのメソッドは、リソースの列挙します。  
  
   
  
## 例  
 このセクションの例では、という名前の次の .txt ファイルを使用して `PatientForm.txt` アプリケーションによって使用されているリソースを定義します。  
  
```  
  
Title="Top Pet Animal Clinic"  
Label1="Patient Number:"  
Label2="Pet Name:"  
Label3="Species:"  
Label4="Breed:"  
Label5="Date of Birth:"  
Label6="Age:"  
Label7="Owner:"  
Label8="Address:"  
Label9="Home Phone:"  
Label10="Work Phone:"  
Label11="Mobile Phone:"  
  
```  
  
 .Resources ファイルに .txt ファイルをコンパイルするには、次のコマンドを発行します。  
  
 **resgen PatientForm.txt**  
  
 次の例のリソースを列挙する `PatientForm.resources` し、それぞれの値と名前を表示します。  
  
 [!code-csharp[System.Resources.ResourceReader.Ctor\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/cs/stream2.cs#2)]
 [!code-vb[System.Resources.ResourceReader.Ctor\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcereader.ctor/vb/stream2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーの終了または破棄されると、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="GetResourceData">
      <MemberSignature Language="C#" Value="public void GetResourceData (string resourceName, out string resourceType, out byte[] resourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetResourceData(string resourceName, string resourceType, unsigned int8[] resourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.GetResourceData(System.String,System.String@,System.Byte[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="resourceType" Type="System.String&amp;" RefType="out" />
        <Parameter Name="resourceData" Type="System.Byte[]&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resourceName">リソースの名前。</param>
        <param name="resourceType">このメソッドから制御が戻った時点で、取得したリソースの型名を表す文字列が格納されます \(詳細については、「解説」を参照\)。 このパラメーターは初期化せずに渡されます。</param>
        <param name="resourceData">このメソッドから制御が戻った時点で、取得した型のバイナリ表現であるバイト配列が格納されます。 このパラメーターは初期化せずに渡されます。</param>
        <summary>オープン リソース ファイルまたはストリームから名前付きリソースの型名とデータを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceReader.GetResourceData%2A> メソッドはバイト配列として名前付きリソースの値を取得します。 通常これは際に使用される、 <xref:System.Collections.IDictionaryEnumerator.Value%2A> プロパティは、リソースの値を取得するときに例外をスローします。  
  
 `resourceType` リソースのデータ型を表す文字列です。 次の値のいずれかを指定できます。  
  
-   文字列表現、 `ResourceTypeCode` リソースのデータ型を示す列挙メンバー。`ResourceTypeCode` で使用されるプライベート列挙体では、19 の一般的なデータ型のいずれかを格納する特殊なバイナリ形式を使用することを指示します。 .NET Framework のプリミティブ データ型が含まれます \(<xref:System.Boolean>, 、<xref:System.Byte>, 、<xref:System.Char>, 、<xref:System.Decimal>, 、<xref:System.Double>, 、<xref:System.Int16>, 、<xref:System.Int32>, 、<xref:System.Int64>, 、<xref:System.Single>, 、<xref:System.SByte>, 、<xref:System.UInt16>, 、<xref:System.UInt32>, 、<xref:System.UInt64>\)、だけでなく <xref:System.String>, 、<xref:System.DateTime>, 、および <xref:System.TimeSpan>, 、さらに、 `ResourceTypeCode` 列挙体には、次の表に示すように値が含まれています。  
  
    |ResourceTypeCode 値|説明|  
    |------------------------|--------|  
    |`ResourceTypeCode.ByteArray`|データは、バイト配列です。 このデータ型への呼び出しの結果では通常、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29?displayProperty=fullName> メソッドです。|  
    |`ResourceTypeCode.Null`|データは、null 参照です。 このデータ型への呼び出しの結果では通常、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29?displayProperty=fullName> メソッド、オブジェクトの値が `null`です。|  
    |`ResourceTypeCode.Stream`|データは、ストリームに格納されます。 このデータ型への呼び出しの結果では通常、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29?displayProperty=fullName> または <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29?displayProperty=fullName> メソッドです。|  
  
     仮定すると `resourceData` いないが壊れているか、通常変換するバイト配列から元の値に戻すを呼び出して、 <xref:System.BitConverter> または <xref:System.IO.BinaryReader> メソッドです。  
  
-   シリアル化されたデータを含むに割り当てられた型の完全修飾名を表す文字列、 `resourceData` 引数 \(たとえば、 `System.String`\)。 さらに、.NET Framework クラス ライブラリの一部ではない種類の場合は、格納する文字列名、バージョン、カルチャ、および種類を含むアセンブリの公開キー。 次の文字列がシリアル化されたデータのインスタンスを表すことを示すなど、 `Person` に入力、 `Extensions` 名前空間、バージョン 1.0 のないパブリック キーとしない指定されたカルチャを持つユーティリティという名前のアセンブリに含まれています。  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
     前提として `resourceData` 壊れていないことと、ソースの種類が使用可能な `resourceData` して変換できますバイト配列から元の値に戻すするバイト配列に変換する、 <xref:System.IO.Stream> オブジェクトと、そのストリームを渡すこと、 <xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter.Deserialize%2A?displayProperty=fullName> メソッドです。  
  
-   データ型を記述するために使用する文字列、 <xref:System.Resources.ResourceWriter.AddResourceData%2A?displayProperty=fullName> メソッドの呼び出しです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="resourceName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="resourceName" /> 存在しません。</exception>
        <exception cref="T:System.BadImageFormatException">
          <paramref name="resourceName" /> 無効な型があります。</exception>
        <exception cref="T:System.FormatException">取得したリソースのデータが壊れています。</exception>
        <exception cref="T:System.InvalidOperationException">現在 <see cref="T:System.Resources.ResourceReader" /> オブジェクトが初期化されていない可能性がありますが閉じているためです。</exception>
        <altmember cref="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceReader.System#Collections#IEnumerable#GetEnumerator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子を返します。</summary>
        <returns>この <see cref="T:System.Resources.ResourceReader" /> オブジェクトの列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceReader.System%23Collections%23IEnumerable%23GetEnumerator%2A?displayProperty=fullName> 明示的なインターフェイス実装です。 これは、<xref:System.Resources.ResourceReader> のインスタンスが <xref:System.Collections.IEnumerable> インターフェイスにキャストされる場合にのみ、使用できます。 呼び出すことの .resources ファイルにリソースを列挙するための推奨アプローチです、 <xref:System.Collections.IEnumerator.MoveNext%2A> のメソッド、 <xref:System.Collections.IDictionaryEnumerator> によって返されるオブジェクト、 <xref:System.Resources.ResourceReader.GetEnumerator%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーは、既に閉じられてし、アクセスできません。</exception>
        <altmember cref="T:System.Collections.IDictionary" />
        <altmember cref="T:System.Collections.IDictionaryEnumerator" />
      </Docs>
    </Member>
  </Members>
</Type>