<Type Name="ResourceWriter" FullName="System.Resources.ResourceWriter">
  <TypeSignature Language="C#" Value="public sealed class ResourceWriter : System.Resources.IResourceWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ResourceWriter extends System.Object implements class System.IDisposable, class System.Resources.IResourceWriter" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Resources.Writer</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Resources.IResourceWriter</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リソースをシステム既定の形式で出力ファイルまたは出力ストリームに書き込みます。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceWriter> 既定の実装を提供、 <xref:System.Resources.IResourceWriter> インターフェイスです。 プログラムを使用してバイナリ リソース \(.resources\) ファイルを作成できます。  
  
 リソースが使用する名前と値のペアとして指定された、 <xref:System.Resources.ResourceWriter.AddResource%2A> メソッドです。 リソース名参照については、使用すると大文字小文字が区別されますが、作成ツールをより簡単にサポートし、バグを回避 <xref:System.Resources.ResourceWriter> .resources ファイルの場合のみが異なる名前を持つことはできません。<xref:System.Resources.ResourceWriter> クラスでは、文字列、オブジェクト、およびバイナリのリソースを作成することができます。 バイナリのリソースは、バイト配列やストリームとしてリソース ファイルに書き込むことができます。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 リソース ファイルを作成するには、作成、 <xref:System.Resources.ResourceWriter> 一意のファイル名を使用して呼び出せます <xref:System.Resources.ResourceWriter.AddResource%2A> を少なくとも 1 回呼び出す <xref:System.Resources.ResourceWriter.Generate%2A> をディスクにリソース ファイルを作成し、呼び出す <xref:System.Resources.ResourceWriter.Close%2A> ファイルを閉じます。 呼び出す <xref:System.Resources.ResourceWriter.Close%2A> が暗黙的に呼び出す <xref:System.Resources.ResourceWriter.Generate%2A> 場合は明示的に呼び出す必要はありません <xref:System.Resources.ResourceWriter.Generate%2A>します。  
  
 リソースはない追加されたのと同じ順序で記述とは限りません。  
  
 によって作成されたバイナリ .resources ファイルからリソースを取得する、 <xref:System.Resources.ResourceWriter> 使用する、クラス、 <xref:System.Resources.ResourceManager> クラスは、名前付きリソースを取得できます、または <xref:System.Resources.ResourceReader> クラスは、ファイル内のすべてのリソースを列挙することができます。  
  
   
  
## 例  
 次の例では、myResources.resources ファイルにいくつかの文字列を書き込みます。  
  
 [!code-cpp[Classic ResourceWriter Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Resources.IResourceWriter" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">出力ストリーム。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Resources.ResourceWriter" /> リソースを指定されたストリームに書き込みを行う。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例の新しいインスタンスを定義する、 <xref:System.Resources.ResourceWriter> 、指定したストリームに書き込みを行うクラス。 コードでは、ライターにリソースを追加し、リソースをストリームに書き込みます。  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> パラメーターは書き込み可能ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceWriter (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">出力ファイル名。</param>
        <summary>指定したファイルにリソースを書き込む <see cref="T:System.Resources.ResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例の新しいインスタンスを定義する、 <xref:System.Resources.ResourceWriter> クラスが指定されたファイルに書き込む。 コードでは、ライターにリソースを追加し、リソースをファイルに書き込みます。  
  
 [!code-cpp[Classic ResourceWriter Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ResourceWriter Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ResourceWriter Example/CS/source.cs#1)]
 [!code-vb[Classic ResourceWriter Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ResourceWriter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">8 ビット符号なし整数の配列としてリソースの値。</param>
        <summary>書き込むリソースの一覧に、バイト配列として指定された名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースはまで書き込まれません <xref:System.Resources.ResourceWriter.Generate%2A> が呼び出されます。  
  
 によって書き込まれたリソースを取得できます、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> メソッドを呼び出して、 <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Byte%5B%5D%29> バイトの配列として読み取られたグラフィック イメージを追加するメソッドを <xref:System.Resources.ResourceWriter> オブジェクトです。  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_byt1.cs#4)]
 [!code-vb[System.Resources.ResourceWriter.AddResource\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_byt1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(またはで大文字と小文字のみそれぞれ異なる名\) に既に追加されて <see cref="T:System.Resources.ResourceWriter" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられて、そのハッシュ テーブルは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="name">追加するリソースの名前。</param>
        <param name="value">追加するリソースの値。 リソースをサポートする必要があります、 <see cref="P:System.IO.Stream.Length" /> プロパティです。</param>
        <summary>書き込むリソースの一覧に、ストリームとして指定された名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サポートする任意のストリームを指定する、 <xref:System.IO.Stream.Length%2A?displayProperty=fullName> プロパティ `value`します。  
  
 によって書き込まれたリソースを取得できます、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> メソッドを呼び出して、 <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%29> に保存されているグラフィック イメージを追加する方法、 <xref:System.IO.MemoryStream> オブジェクトを <xref:System.Resources.ResourceWriter> オブジェクトです。  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str1.cs#2)]
 [!code-vb[System.Resources.ResourceWriter.AddResource\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(またはで大文字と小文字のみそれぞれ異なる名\) に既に追加されて <see cref="T:System.Resources.ResourceWriter" />します。  
  
 または  
  
 ストリームがサポートしていない、 <see cref="P:System.IO.Stream.Length" /> プロパティです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられました。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">リソースの値です。</param>
        <summary>書き込むリソースの一覧に、オブジェクトとして指定された名前付きリソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `value` シリアル化可能である必要があります。  
  
 リソースはまで書き込まれませんが、 <xref:System.Resources.ResourceWriter.Generate%2A> メソッドが呼び出されます。  
  
 によって書き込まれたリソースを取得できます、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> メソッドを呼び出して、 <xref:System.Resources.ResourceManager.GetObject%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.Object%29> オブジェクト データをバイナリ リソース ファイルに追加するメソッドです。  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_obj1.cs#1)]  
  
 `DonorColumns` is a custom class whose fields contain the names of columns to be displayed in the user interface. Note that the class is marked with the <xref:System.SerializableAttribute> attribute. Ordinarily, the class would be defined in a separate assembly, and a reference to it would be provided to the compiler at compile time.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(またはで大文字と小文字のみそれぞれ異なる名\) に既に追加されて <see cref="T:System.Resources.ResourceWriter" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられて、そのハッシュ テーブルは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddResource(string name, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">リソースの名前。</param>
        <param name="value">リソースの値です。</param>
        <summary>書き込むリソースの一覧には、文字列リソースを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リソースはまで書き込まれません <xref:System.Resources.ResourceWriter.Generate%2A> が呼び出されます。  
  
 によって書き込まれたリソースを取得できます、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.String%29> メソッドを呼び出して、 <xref:System.Resources.ResourceManager.GetString%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.AddResource%2A> に文字列リソースを追加する方法、 <xref:System.Resources.ResourceWriter> オブジェクトです。  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(またはで大文字と小文字のみそれぞれ異なる名\) は、この ResourceWriter に既に追加されています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられて、そのハッシュ テーブルは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResource">
      <MemberSignature Language="C#" Value="public void AddResource (string name, System.IO.Stream value, bool closeAfterWrite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResource(string name, class System.IO.Stream value, bool closeAfterWrite) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResource(System.String,System.IO.Stream,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.IO.Stream" />
        <Parameter Name="closeAfterWrite" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">追加するリソースの名前。</param>
        <param name="value">追加するリソースの値。 リソースをサポートする必要があります、 <see cref="P:System.IO.Stream.Length" /> プロパティです。</param>
        <param name="closeAfterWrite">
          <see langword="true" /> 後にストリームを閉じない、 <see cref="M:System.Resources.ResourceWriter.Generate" /> メソッドが呼び出された以外の場合、 <see langword="false" />です。</param>
        <summary>書き込まれるリソースの一覧に、ストリームとして指定された名前付きリソースの追加後にストリームを閉じる必要があるかどうかを指定し、 <see cref="M:System.Resources.ResourceWriter.Generate" /> メソッドが呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サポートする任意のストリームを指定する、 <xref:System.IO.Stream.Length%2A?displayProperty=fullName> プロパティ `value`します。  
  
 によって書き込まれたリソースを取得できます、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> メソッドを呼び出して、 <xref:System.Resources.ResourceManager.GetStream%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.AddResource%28System.String%2CSystem.IO.Stream%2CSystem.Boolean%29> に保存されているグラフィック イメージを追加する方法、 <xref:System.IO.MemoryStream> オブジェクトを <xref:System.Resources.ResourceWriter> オブジェクトです。  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResource\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/cs/addresource_str2.cs#3)]
 [!code-vb[System.Resources.ResourceWriter.AddResource\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresource/vb/addresource_str2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(またはで大文字と小文字のみそれぞれ異なる名\) に既に追加されて <see cref="T:System.Resources.ResourceWriter" />します。  
  
 または  
  
 ストリームがサポートしていない、 <see cref="P:System.IO.Stream.Length" /> プロパティです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられました。</exception>
      </Docs>
    </Member>
    <Member MemberName="AddResourceData">
      <MemberSignature Language="C#" Value="public void AddResourceData (string name, string typeName, byte[] serializedData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddResourceData(string name, string typeName, unsigned int8[] serializedData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.AddResourceData(System.String,System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="serializedData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="name">追加対象のデータを含むリソースを識別する名前。</param>
        <param name="typeName">追加対象のデータの型名。 詳細については、「解説」を参照してください。</param>
        <param name="serializedData">追加対象のデータのバイナリ表記を含むバイト配列。</param>
        <summary>書き込むリソースのリストに、データ ユニットをリソースとして追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、<xref:System.Resources.ResourceWriter.AddResourceData%2A>バイナリ形式のリソースを追加する方法 \(つまり、バイトの配列として\) 書き込むリソースの一覧にします。 リソース、リソース、およびデータ自体のバイナリ表現に含まれるデータの型名の名前を指定する必要があります。 必要な各リソースを追加した後を使用して、<xref:System.Resources.ResourceWriter.Generate%2A>で指定されたリソース ファイルにリソースの一覧を書き込んだり、ストリームをメソッド、<xref:System.Resources.ResourceWriter.%23ctor%2A>コンス トラクターです。  
  
 `typeName`リソースのデータ型を表す文字列です。 次の値のいずれかを指定できます。  
  
-   文字列形式を`ResourceTypeCode`リソースのデータ型を示す列挙メンバー。`ResourceTypeCode`19 の一般的なデータ型のいずれかの格納に特殊なバイナリ形式を使用することを示すために使用されるプライベート列挙です。 These include the .NET Framework primitive data types \(<xref:System.Boolean>, <xref:System.Byte>, <xref:System.Char>, <xref:System.Decimal>, <xref:System.Double>, <xref:System.Int16>, <xref:System.Int32>, <xref:System.Int64>, <xref:System.Single>, <xref:System.SByte>, <xref:System.UInt16>, <xref:System.UInt32>, <xref:System.UInt64>\), as well as <xref:System.String>, <xref:System.DateTime>, and <xref:System.TimeSpan>. さらに、`ResourceTypeCode`列挙には、次の表に示すように値が含まれています。  
  
    |`ResourceTypeCode` の値|説明|  
    |---------------------------|--------|  
    |`ResourceTypeCode.ByteArray`|データは、バイト配列です。|  
    |`ResourceTypeCode.Null`|データは、null 参照です。|  
    |`ResourceTypeCode.Stream`|データは、ストリームに格納されます。|  
  
-   バイナリ データを含むが割り当てられている型の完全修飾名を含む文字列、`serializedData`引数 \(たとえば、 `System.String`\)。 さらに、.NET Framework クラス ライブラリの一部ではない型、文字列が含まれます名前、バージョン、カルチャ、および種類を含むアセンブリの公開キー。 たとえば、次の文字列を示します、シリアル化データがのインスタンスを表すこと、`Person`に入力、`Extensions`ない公開キーとなしの指定されたカルチャを持つユーティリティをという名前のアセンブリのバージョン 1.0 である名前空間。  
  
     `Extensions.Person, Utility, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null`  
  
 記述されたリソース データを読み取る並列メソッド、<xref:System.Resources.ResourceWriter.AddResourceData%2A>メソッドは<xref:System.Resources.ResourceReader.GetResourceData%2A?displayProperty=fullName>します。  
  
   
  
## 例  
 次の例では、<xref:System.Resources.ResourceWriter.AddResourceData%2A>に 2 つの整数を書き込みます、.resources ファイルに値を使用して、<xref:System.Resources.ResourceReader>を取得するオブジェクト。  
  
 [!code-csharp[System.Resources.ResourceWriter.AddResourceData\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/cs/addresourcedata.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.AddResourceData\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.resources.resourcewriter.addresourcedata/vb/addresourcedata.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" />、<paramref name="typeName" />、または <paramref name="serializedData" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> \(または、大文字小文字のみが異なる名前\) が、この <see cref="T:System.Resources.ResourceWriter" /> オブジェクトに既に追加されています。</exception>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Resources.ResourceWriter" /> オブジェクトが初期化されていません。 原因として、<see cref="T:System.Resources.ResourceWriter" /> オブジェクトが閉じていることが考えられます。</exception>
        <altmember cref="Overload:System.Resources.ResourceWriter.#ctor" />
        <altmember cref="M:System.Resources.ResourceWriter.Close" />
        <altmember cref="M:System.Resources.ResourceWriter.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>出力ストリームにリソースを保存し、および終了したとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceWriter.Generate%2A> によって暗黙的と呼ばれる <xref:System.Resources.ResourceWriter.Close%2A>, 必要であれば、します。  
  
   
  
## 例  
 次の例では、 <xref:System.Resources.ResourceWriter.Close%2A> 内のオブジェクトのすべてのリソースを記述するメソッド、 <xref:System.Resources.ResourceWriter> を出力ストリーム クラス。 コードから、シャット ダウン、ライターです。  
  
 [!code-cpp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CPP/resourcewritercstr1.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/CS/resourcewritercstr1.cs#1)]
 [!code-vb[System.Resources.ResourceWriter Cstr1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter Cstr1 Example/VB/resourcewritercstr1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">オブジェクトのシリアル化中にエラーが発生しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リソース ファイルまたはリソースを明示的に解放するストリームを終了することができます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの実装は、同じとして <xref:System.Resources.ResourceWriter.Close%2A>します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Resources.ResourceWriter.Dispose%2A> 内のオブジェクトのすべてのリソースを記述するメソッド、 <xref:System.Resources.ResourceWriter> クラスを出力ストリーム。 ライターをシャット ダウンし、ライターのリソースを他のプロセスを使用できるようにします。  
  
 [!code-cpp[System.Resources.ResourceWriter.Dispose Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CPP/resourcewriterdispose.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Dispose Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/CS/resourcewriterdispose.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Dispose Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Dispose Example/VB/resourcewriterdispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">オブジェクトのシリアル化中にエラーが発生しました。</exception>
        <altmember cref="T:System.IDisposable" />
      </Docs>
    </Member>
    <Member MemberName="Generate">
      <MemberSignature Language="C#" Value="public void Generate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Generate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceWriter.Generate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのリソースをシステム既定の形式で出力ストリームに保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Resources.ResourceWriter.Generate%2A> メソッドがによって暗黙的に呼び出される、 <xref:System.Resources.ResourceWriter.Close%2A> メソッドの場合は、アプリケーション コードでは呼び出されません。  
  
 <xref:System.Resources.ResourceWriter.Generate%2A> 1 回しか呼べません、すべての呼び出し後 <xref:System.Resources.ResourceWriter.AddResource%2A> と <xref:System.Resources.ResourceWriter.AddResourceData%2A> 加えられました。 リソースの書き込み中に例外が発生した場合は無効な情報を記述する出力ストリームは閉じられます。  
  
 <xref:System.Resources.ResourceWriter.Generate%2A> 通常の出力ストリームは閉じられません。 .Resources ファイルに余分なデータを組み合わせるするか、またはストリームへのアクセスを後で必要な場合を除きを呼び出す必要があります <xref:System.Resources.ResourceWriter.Close%2A> 呼び出した後 <xref:System.Resources.ResourceWriter.Generate%2A>, を呼び出すだけで、または <xref:System.Resources.ResourceWriter.Close%2A>です。  
  
   
  
## 例  
 次のコード例では、 <xref:System.Resources.ResourceWriter.Generate%2A> 内のオブジェクトのすべてのリソースを記述するメソッド、 <xref:System.Resources.ResourceWriter> を出力ストリーム クラス  
  
 [!code-cpp[System.Resources.ResourceWriter.Generate Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CPP/resourcewritergenerate.cpp#1)]
 [!code-csharp[System.Resources.ResourceWriter.Generate Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/CS/resourcewritergenerate.cs#1)]
 [!code-vb[System.Resources.ResourceWriter.Generate Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceWriter.Generate Example/VB/resourcewritergenerate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">I\/O エラーが発生しました。</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">オブジェクトのシリアル化中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Resources.ResourceWriter" /> が閉じられて、そのハッシュ テーブルは使用できません。</exception>
      </Docs>
    </Member>
    <Member MemberName="TypeNameConverter">
      <MemberSignature Language="C#" Value="public Func&lt;Type,string&gt; TypeNameConverter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Type, string&gt; TypeNameConverter" />
      <MemberSignature Language="DocId" Value="P:System.Resources.ResourceWriter.TypeNameConverter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Type,System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソースのアセンブリを書き込むことができるデリゲートより前のバージョンの .NET Framework のバージョンのターゲットを取得または設定、 .NET Framework 4 アセンブリの修飾名を使用しています。</summary>
        <value>デリゲートによってカプセル化される型。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[vs_dev10_long](~/includes/vs-dev10-long-md.md)] MSBuild は、.NET Framework の以前のバージョンを対象とする場合にこのプロパティを設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddResource">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書き込むリソースの一覧にリソースを追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Resources.Writer</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Resources.ResourceWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>