<Type Name="WorkflowApplication" FullName="System.Activities.WorkflowApplication">
  <TypeSignature Language="C#" Value="public sealed class WorkflowApplication : System.Activities.Hosting.WorkflowInstance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowApplication extends System.Activities.Hosting.WorkflowInstance" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowApplication" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Activities.Hosting.WorkflowInstance</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ワークフローの単一インスタンスにホストを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication> クラスは、単一のワークフロー インスタンスにホストを提供します。 このクラスは、ワークフロー ランタイムによって管理される実際のワークフロー インスタンスのプロキシとなります。<xref:System.Activities.WorkflowApplication> のユーザーは、ワークフロー ランタイムにワークフロー インスタンス上でアクションを実行させることができます。そのためには、<xref:System.Activities.WorkflowApplication> オブジェクト上で該当するメソッドを呼び出します。 要求されたアクションが有効でない場合は、例外がスローされます。  
  
 <xref:System.Activities.WorkflowApplication> を使用して、次の作業を実行できます。  
  
1.  新しいワークフロー インスタンスを作成するか、インスタンス ストアからワークフロー インスタンスをロードします。  
  
2.  ワークフロー インスタンス内でアクティビティによって使用される拡張機能を提供します。  
  
3.  ワークフロー インスタンスの実行を制御します。  
  
4.  ワークフロー インスタンス内でアクティビティによって作成されるブックマークを再開します。  
  
5.  ワークフロー インスタンスを永続化するかアンロードします。  
  
6.  ワークフロー インスタンスのライフサイクル イベントが通知されるようにします。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
593976e8-558d-4989-94d6-50a14b34fd7b のワークフローがアイドル状態です。  
ワークフローを終了します。  
完了したワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b  
ワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b アンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">ワークフロー定義。</param>
        <summary>指定されたワークフロー定義で <see cref="T:System.Activities.WorkflowApplication" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 1 つの <xref:System.Activities.WorkflowApplication> アクティビティで構成されるワークフロー定義を使用して `DiceRoll` インスタンスが構築されます。`DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、<xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーで出力が取得され、次の出力がコンソールに表示されます。  
  
```Output  
Workflow aae3fb48-7229-4737-b969-d63e131b96b3 Completed.  
2 つ目は、1 および 5 です。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Activities.WorkflowIdentity definitionIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Activities.WorkflowIdentity definitionIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Activities.WorkflowIdentity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">ワークフロー定義。</param>
        <param name="definitionIdentity">定義の id です。</param>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Activities.WorkflowApplication" /> クラスの指定されたワークフロー定義と定義の id を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">ワークフロー定義。</param>
        <param name="inputs">ワークフロー定義のルート アクティビティ上で定義される、引数名でキー指定された引数の値。</param>
        <summary>指定されたワークフロー定義および引数値を使用する <see cref="T:System.Activities.WorkflowApplication" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 2 つの入力引数、および引数名でキー指定された 2 つの値が渡される入力引数のディクショナリを持つ 1 つの <xref:System.Activities.WorkflowApplication> アクティビティで構成されたワークフロー定義を使用して、`Divide` インスタンスが構築されます。 必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> への呼び出しを使用してワークフローが呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
完了したワークフロー 8dc844c1-bbf8-4b21-a9a2-05f89e416055  
500/36 = 13 Remainder 32  
ワークフロー 8dc844c1-bbf8-4b21-a9a2-05f89e416055 アンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowApplication (System.Activities.Activity workflowDefinition, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, System.Activities.WorkflowIdentity definitionIdentity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflowDefinition, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.Activities.WorkflowIdentity definitionIdentity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.#ctor(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.Activities.WorkflowIdentity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflowDefinition" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
      </Parameters>
      <Docs>
        <param name="workflowDefinition">ワークフロー定義。</param>
        <param name="inputs">定義の id です。</param>
        <param name="definitionIdentity">ワークフロー定義のルート アクティビティ上で定義される、引数名でキー指定された引数の値。</param>
        <summary>新しいインスタンスを作成、 <see cref="T:System.Activities.WorkflowApplication" /> 指定されたワークフロー定義および引数の値と定義の id を使用するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Abort">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー ランタイムにこのワークフロー インスタンスを中止すべきであると伝えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication> によってホストされているワークフローを中止すると、<xref:System.Activities.WorkflowApplication.Aborted%2A> ハンドラーは呼び出されますが、<xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーは呼び出されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー ランタイムにこのワークフロー インスタンスを中止すべきであると伝えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication> によってホストされているワークフローを中止すると、<xref:System.Activities.WorkflowApplication.Aborted%2A> ハンドラーは呼び出されますが、<xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーは呼び出されません。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Abort%2A> が呼び出されます。 このワークフローを中止すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー 3b76d562-516a-4a52-b17c-0f2ce531ad93 がアイドル状態です。  
ワークフロー 3b76d562-516a-4a52-b17c-0f2ce531ad93 Aborted  
例外: System.Activities.WorkflowApplicationAbortedException  
ワークフローが中止されました。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#11](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort(string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Abort(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">要求を中止する理由。</param>
        <summary>ワークフロー ランタイムに、指定された理由でこのワークフロー インスタンスを中止すべきであると伝えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication> によってホストされているワークフローを中止すると、<xref:System.Activities.WorkflowApplication.Aborted%2A> ハンドラーは呼び出されますが、<xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーは呼び出されません。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Abort%2A> が呼び出されます。 このワークフローを中止すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー 607b042e-98db-4bbe-abe8-f4d750feec41 がアイドル状態です。  
ワークフロー 607b042e-98db-4bbe-abe8-f4d750feec41 Aborted  
例外: System.Activities.WorkflowApplicationAbortedException  
の中止、ワークフローの理由。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#11](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Aborted">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationAbortedEventArgs&gt; Aborted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationAbortedEventArgs&gt; Aborted" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Aborted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationAbortedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ワークフロー インスタンスが中止されると呼び出される <see cref="T:System.Action`1" /> を取得または設定します。</summary>
        <value>ワークフロー インスタンスが中止されると呼び出されるアクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication> によってホストされているワークフローを中止すると、<xref:System.Activities.WorkflowApplication.Aborted%2A> ハンドラーは呼び出されますが、<xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーは呼び出されません。  
  
   
  
## 例  
 <xref:System.Activities.WorkflowApplicationAbortedEventArgs> インスタンスの <xref:System.Activities.WorkflowApplication.Aborted%2A> ハンドラーに渡される <xref:System.Activities.WorkflowApplication> を調べ、ワークフローが中止された理由に関する情報を表示するコード サンプルを次に示します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#5](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInitialInstanceValues">
      <MemberSignature Language="C#" Value="public void AddInitialInstanceValues (System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,object&gt; writeOnlyValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddInitialInstanceValues(class System.Collections.Generic.IDictionary`2&lt;class System.Xml.Linq.XName, object&gt; writeOnlyValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.AddInitialInstanceValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writeOnlyValues" Type="System.Collections.Generic.IDictionary&lt;System.Xml.Linq.XName,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="writeOnlyValues">最初の永続化によって含まれるメタデータ値。</param>
        <summary>新しいインスタンスの最初の永続化によって含まれるインスタンスのメタデータ値を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginCancel">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、ワークフローを非同期的に取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCancel (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCancel(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCancel(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">取り消し操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された <see cref="T:System.AsyncCallback" /> およびユーザー指定状態を使用して、ワークフロー インスタンスを非同期的に取り消します。</summary>
        <returns>非同期取り消し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取り消し操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndCancel%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndCancel%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndCancel%2A> は、呼び出されたときに取り消し操作が完了していなかった場合、取り消し操作が完了するまでブロックします。 既定では、取り消し操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndCancel%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に取り消します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginCancel (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginCancel(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCancel(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">取り消し操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">取り消し操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト期間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、ワークフロー インスタンスを非同期的に取り消します。</summary>
        <returns>非同期取り消し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取り消し操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndCancel%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndCancel%2A> パラメーターで指定されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndCancel%2A> は、呼び出されたときに取り消し操作が完了していなかった場合、取り消し操作が完了するまでブロックします。`timeOut` パラメーターによって指定された期間内に取り消し操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndCancel%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に取り消します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginCreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginCreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="definitionIdentity">定義 id。</param>
        <param name="identityFilter">Identity フィルターです。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に既定のインスタンス所有者を作成、<see cref="T:System.IAsyncResult" />指定したインスタンス ストア、定義 id、identity フィルター、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginCreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginCreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginCreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="definitionIdentity">定義 id。</param>
        <param name="identityFilter">Identity フィルターです。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に既定のインスタンス所有者を作成、<see cref="T:System.IAsyncResult" />指定したインスタンス ストア、定義 id、identity フィルター、タイムアウト間隔、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginDeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginDeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に既定のインスタンス所有者を削除、<see cref="T:System.IAsyncResult" />で指定したインスタンス ストア、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginDeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginDeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginDeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に既定のインスタンス所有者を削除、<see cref="T:System.IAsyncResult" />指定したインスタンス ストア、タイムアウト間隔、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">インスタンス識別子。</param>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的にインスタンスの所有者を取得、<see cref="T:System.IAsyncResult" />指定したインスタンス id、インスタンス ストア、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">インスタンス識別子。</param>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的にインスタンスの所有者を取得、<see cref="T:System.IAsyncResult" />指定したインスタンス id、インスタンス ストア、タイムアウト間隔、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に実行可能なインスタンス所有者を取得、<see cref="T:System.IAsyncResult" />で指定したインスタンス ストア、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static IAsyncResult BeginGetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IAsyncResult BeginGetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginGetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用して非同期的に実行可能なインスタンス所有者を取得、<see cref="T:System.IAsyncResult" />指定したインスタンス ストア、タイムアウト間隔、コールバック、および状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginLoad">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、インスタンス ストアからワークフローを非同期的にロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用してインスタンス ストアからワークフローを非同期的にロード、<see cref="T:System.IAsyncResult" />で指定されたインスタンス、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (Guid instanceId, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(valuetype System.Guid instanceId, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">ワークフロー インスタンスのグローバルに一意な 128 ビットの識別子。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたインスタンス識別子、コールバック メソッド、およびユーザー指定の状態を使用して、インスタンス ストアからワークフローを非同期的にロードします。</summary>
        <returns>非同期操作のステータス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="updateMap">更新マップします。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用してインスタンス ストアからワークフローを非同期的にロード、<see cref="T:System.IAsyncResult" />で指定されたインスタンス、マップの更新、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用してインスタンス ストアからワークフローを非同期的にロード、<see cref="T:System.IAsyncResult" />で指定されたインスタンス、タイムアウト間隔、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (Guid instanceId, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(valuetype System.Guid instanceId, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Guid,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instanceId">ワークフロー インスタンスのグローバルに一意な 128 ビットの識別子。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたインスタンス識別子、タイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、インスタンス ストアからワークフローを非同期的にロードします。</summary>
        <returns>非同期操作のステータス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoad">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoad (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoad(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoad(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="updateMap">更新マップします。</param>
        <param name="timeout">ロード開始操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">ロード開始操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>使用してインスタンス ストアからワークフローを非同期的にロード、<see cref="T:System.IAsyncResult" />で指定されたインスタンス、マップの更新、タイムアウト間隔、コールバックおよび状態の非同期デザイン パターンです。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginLoadRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>実行可能なワークフロー インスタンスを <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> からロードするという非同期処理を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoadRunnableInstance (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoadRunnableInstance(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を含む、オプションのアプリケーション固有オブジェクト。</param>
        <summary>実行可能なワークフロー インスタンスを <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> からロードする操作を開始します。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 ロード操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 既定では、再開操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的にロードします。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginLoadRunnableInstance (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginLoadRunnableInstance(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginLoadRunnableInstance(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">ロード操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を含む、オプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト期間を使用して、実行可能なワークフロー インスタンスを <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> からロードする操作を開始します。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 ロード操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 指定されたタイムアウト期間内にロード操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndLoadRunnableInstance%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的にロードします。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginPersist">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、ワークフロー インスタンスをインスタンス ストアに非同期的に永続化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginPersist">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPersist (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPersist(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginPersist(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">永続化操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたコールバック メソッドおよびユーザー指定の状態を使用して、ワークフロー インスタンスをインスタンス ストアに非同期的に永続化します。</summary>
        <returns>非同期永続化操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 永続化操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndPersist%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndPersist%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndPersist%2A> は、呼び出されたときに永続化操作が完了していなかった場合、永続化操作が完了するまでブロックします。 永続化操作が 30 秒以内に完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndPersist%2A> からスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に永続化します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginPersist">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginPersist (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginPersist(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginPersist(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">操作が取り消され <see cref="T:System.TimeoutException" /> がスローされるまでの時間の長さ。永続化操作は、この時間内に完了する必要があります。</param>
        <param name="callback">永続化操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスをインスタンス ストアに非同期的に永続化します。</summary>
        <returns>非同期永続化操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 永続化操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndPersist%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndPersist%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndPersist%2A> は、呼び出されたときに永続化操作が完了していなかった場合、永続化操作が完了するまでブロックします。 指定されたタイムアウト期間内に永続化操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndPersist%2A> からスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に永続化します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (System.Activities.Bookmark bookmark, object value, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">再開するブックマーク。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="callback">再開操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された値、コールバック メソッド、および状態を使用して、ブックマークを再開する操作を開始します。</summary>
        <returns>非同期ブックマーク再開操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 再開操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 既定では、再開操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ブックマークを非同期的に再開します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (string bookmarkName, object value, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(string bookmarkName, object value, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">再開するブックマークの名前。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="callback">非同期操作の完了時に呼び出されるメソッド。</param>
        <param name="state">非同期操作が開始される前に呼び出し元のスレッドによって保持されたワークフローの実行の状態。</param>
        <summary>指定された値、コールバック メソッド、および状態を使用して、指定された名前を持つブックマークを再開する非同期操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">再開するブックマーク。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="timeout">再開操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">再開操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された値、タイムアウト期間、コールバック メソッド、および状態を使用して、ブックマークを再開する操作を開始します。</summary>
        <returns>非同期ブックマーク再開操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 再開操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 指定されたタイムアウト期間内に再開操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndResumeBookmark%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ブックマークを非同期的に再開します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginResumeBookmark">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginResumeBookmark (string bookmarkName, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginResumeBookmark(string bookmarkName, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginResumeBookmark(System.String,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">再開するブックマークの名前。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="timeout">ブックマークが再開される必要がある時間間隔。</param>
        <param name="callback">非同期操作の完了時に呼び出されるメソッド。</param>
        <param name="state">非同期操作が開始される前に呼び出し元のスレッドによって保存されたワークフローの実行の状態。</param>
        <summary>指定された値、タイムアウト期間、コールバック メソッド、および状態を使用して、指定された名前を持つブックマークを再開する非同期操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginRun">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に開始または再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginRun">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRun (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginRun(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginRun(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">再開操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたコールバック メソッドおよびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に開始または再開します。</summary>
        <returns>非同期実行操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndRun%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndRun%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndRun%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 既定では、再開操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndRun%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に開始または再開します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRun">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginRun (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginRun(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginRun(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">再開操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">再開操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に開始または再開します。</summary>
        <returns>非同期実行操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndRun%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndRun%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndRun%2A> は、呼び出されたときに再開操作が完了していなかった場合、再開操作が完了するまでブロックします。 指定されたタイムアウト期間内に再開操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndRun%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に開始または再開します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTerminate">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (Exception reason, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(class System.Exception reason, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスが終了した理由。</param>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された例外、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に終了します。</summary>
        <returns>現在の <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndTerminate%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了するまでブロックします。 既定では、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndTerminate%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に終了します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (string reason, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(string reason, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたエラー メッセージ、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に終了します。</summary>
        <returns>現在の <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndTerminate%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了するまでブロックします。 既定では、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndTerminate%2A> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に終了します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (Exception reason, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(class System.Exception reason, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.Exception,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <param name="timeout">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された例外、タイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に終了します。</summary>
        <returns>現在の <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndTerminate%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> メソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了するまでブロックします。 指定されたタイムアウト期間内に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了しない場合、<xref:System.TimeoutException> がスローされます。 この例外または <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> プロセス中に発生するその他の例外が、<xref:System.Activities.WorkflowApplication.EndTerminate%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフローを非同期的に終了します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTerminate">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginTerminate (string reason, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginTerminate(string reason, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginTerminate(System.String,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <param name="timeout">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたエラー メッセージ、タイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に終了します。</summary>
        <returns>非同期 <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndTerminate%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndTerminate%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了するまでブロックします。 指定されたタイムアウト期間内に <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> 操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndTerminate%2A> からスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に終了します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginUnload">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に永続化し破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginUnload">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginUnload (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginUnload(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginUnload(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたコールバック メソッドおよびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に永続化し破棄します。</summary>
        <returns>非同期 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndUnload%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndUnload%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndUnload%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginUnload%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作が完了するまでブロックします。 既定では、<xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> から <xref:System.Activities.WorkflowApplication.EndUnload%2A> がスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に永続化し破棄します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUnload">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginUnload (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginUnload(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.BeginUnload(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginTerminate" /> 操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <param name="callback">
          <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作が完了した時点で呼び出すメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト期間、コールバック メソッド、およびユーザー指定の状態を使用して、ワークフロー インスタンスを非同期的に永続化し破棄します。</summary>
        <returns>非同期 <see cref="Overload:System.Activities.WorkflowApplication.BeginUnload" /> 操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作が成功したかどうかを確認するには、<xref:System.Activities.WorkflowApplication.EndUnload%2A> を呼び出します。<xref:System.Activities.WorkflowApplication.EndUnload%2A> パラメーターで参照されたメソッドの内部または外部から `callback` を呼び出すこともできます。<xref:System.Activities.WorkflowApplication.EndUnload%2A> 操作が完了する前に <xref:System.Activities.WorkflowApplication.BeginUnload%2A> が呼び出された場合、<xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作が完了するまでブロックします。 指定されたタイムアウト期間内に <xref:System.Activities.WorkflowApplication.BeginUnload%2A> 操作が完了しない場合、<xref:System.TimeoutException> が <xref:System.Activities.WorkflowApplication.EndUnload%2A> からスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、ワークフロー インスタンスを非同期的に永続化しアンロードします。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Cancel">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスを取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの取り消しをスケジュールします。 取り消し操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 既定では、取り消し操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー インスタンスを取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの取り消しをスケジュールします。 取り消し操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドラーを使用します。  
  
 既定では、取り消し操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Cancel%2A> が呼び出されます。 このワークフローを取り消すと、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー bcce00c2-d323-42c2-8c25-19ff0c4b6dac がアイドル状態です。  
取り消されたワークフロー bcce00c2-d323-42c2-8c25-19ff0c4b6dac  
bcce00c2-d323-42c2-8c25-19ff0c4b6dac のワークフローをアンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#13](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Cancel(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">取り消し操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスを取り消します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの取り消しをスケジュールします。 取り消し操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドラーを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Cancel%2A> が呼び出されます。 このワークフローを取り消すと、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー bcce00c2-d323-42c2-8c25-19ff0c4b6dac がアイドル状態です。  
取り消されたワークフロー bcce00c2-d323-42c2-8c25-19ff0c4b6dac  
ワークフロー bcce00c2-d323-42c2-8c25-19ff0c4b6dac をアンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#13](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationCompletedEventArgs&gt; Completed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Completed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ワークフロー インスタンスが完了すると呼び出される <see cref="T:System.Action`1" /> を取得または設定します。</summary>
        <value>ワークフロー インスタンスが完了すると呼び出されるアクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 <xref:System.Activities.WorkflowApplicationCompletedEventArgs> インスタンスの <xref:System.Activities.WorkflowApplication.Completed%2A> ハンドラーに渡される <xref:System.Activities.WorkflowApplication> を調べ、ワークフローの完了方法に関する情報を表示するコード サンプルを次に示します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#4](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void CreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="definitionIdentity">ワークフローの定義 id。</param>
        <param name="identityFilter">Identity フィルターです。</param>
        <summary>指定したインスタンス ストア、定義 id、および識別情報のフィルターを使用して、ワークフローの既定のインスタンス所有者を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void CreateDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, System.Activities.WorkflowIdentity definitionIdentity, System.Activities.WorkflowIdentityFilter identityFilter, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, class System.Activities.WorkflowIdentity definitionIdentity, valuetype System.Activities.WorkflowIdentityFilter identityFilter, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.CreateDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.Activities.WorkflowIdentity,System.Activities.WorkflowIdentityFilter,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="definitionIdentity" Type="System.Activities.WorkflowIdentity" />
        <Parameter Name="identityFilter" Type="System.Activities.WorkflowIdentityFilter" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセス。</param>
        <param name="definitionIdentity">ワークフローの定義 id。</param>
        <param name="identityFilter">Identity フィルターです。</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了間隔。</param>
        <summary>指定したインスタンス ストア、定義 id、および識別情報のフィルターとタイムアウト間隔を使用して、ワークフローの既定のインスタンス所有者を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void DeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化の状態にアクセスします。</param>
        <summary>指定したインスタンス ストアとワークフローの既定のインスタンス所有者を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void DeleteDefaultInstanceOwner (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteDefaultInstanceOwner(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.DeleteDefaultInstanceOwner(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化の状態にアクセスします。</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了の間隔。</param>
        <summary>指定したインスタンス ストアとタイムアウト間隔を含むワークフローの既定のインスタンス所有者を削除するには.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCancel">
      <MemberSignature Language="C#" Value="public void EndCancel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndCancel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndCancel(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期の取り消し操作。</param>
        <summary>保留中の非同期取り消し操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method determines whether a <xref:System.Activities.WorkflowApplication.BeginCancel%2A> operation was successful. If called before the cancel operation completes, it blocks until the cancel operation is complete.  
  
 This method completes the asynchronous cancel operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCreateDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void EndCreateDefaultInstanceOwner (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndCreateDefaultInstanceOwner(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndCreateDefaultInstanceOwner(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">非同期の結果。</param>
        <summary>完了する既定のインスタンス所有者の作成を待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDeleteDefaultInstanceOwner">
      <MemberSignature Language="C#" Value="public static void EndDeleteDefaultInstanceOwner (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndDeleteDefaultInstanceOwner(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndDeleteDefaultInstanceOwner(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">非同期の結果。</param>
        <summary>完了する既定のインスタンス所有者を削除するために待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance EndGetInstance (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance EndGetInstance(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndGetInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">非同期の結果。</param>
        <summary>インスタンスの取得を完了するまで待機します。</summary>
        <returns>操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance EndGetRunnableInstance (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance EndGetRunnableInstance(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndGetRunnableInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">非同期の結果。</param>
        <summary>操作が完了する実行可能なインスタンスの非同期取得を待機します。</summary>
        <returns>操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoad">
      <MemberSignature Language="C#" Value="public void EndLoad (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoad(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndLoad(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期のロード操作。</param>
        <summary>保留中の非同期ロード操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If this method is called before the loading operation completes, it blocks until the loading operation is complete.  
  
 This method completes the asynchronous load operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndLoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void EndLoadRunnableInstance (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndLoadRunnableInstance(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndLoadRunnableInstance(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期ロード操作への参照。</param>
        <summary>実行可能インスタンスの非同期ロード操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method determines whether a <xref:System.Activities.WorkflowApplication.BeginLoadRunnableInstance%2A> operation was successful. If called before the load operation completes, it blocks until the operation is complete.  
  
 This method loads workflows asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndPersist">
      <MemberSignature Language="C#" Value="public void EndPersist (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndPersist(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndPersist(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期の永続化操作。</param>
        <summary>保留中の非同期永続化操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method determines whether a <xref:System.Activities.WorkflowApplication.BeginPersist%2A> operation was successful. If called before the persist operation completes, it blocks until the persist operation is complete.  
  
 This method completes the asynchronous persist operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult EndResumeBookmark (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult EndResumeBookmark(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndResumeBookmark(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期ブックマーク再開操作への参照。</param>
        <summary>ブックマーク再開操作が完了するまで待機します。</summary>
        <returns>ブックマーク再開操作の結果を示す列挙値の 1 つ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method determines whether a <xref:System.Activities.WorkflowApplication.BeginResumeBookmark%2A> operation was successful. If called before the load operation completes, it blocks until the operation is complete.  
  
 This method resumes a bookmark asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRun">
      <MemberSignature Language="C#" Value="public void EndRun (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndRun(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndRun(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期の実行操作。</param>
        <summary>保留中の非同期実行操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method determines whether a <xref:System.Activities.WorkflowApplication.BeginRun%2A> operation was successful. If called before the resume operation completes, it blocks until the resume operation is complete.  
  
 This method completes an asynchronous run operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTerminate">
      <MemberSignature Language="C#" Value="public void EndTerminate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndTerminate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndTerminate(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期の終了操作。</param>
        <summary>保留中の非同期終了操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method can be called to determine whether a <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operation was successful. If called before the terminate operation completes, it blocks until the operation is complete.  
  
 This method completes an asynchronous <xref:System.Activities.WorkflowApplication.BeginTerminate%2A> operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUnload">
      <MemberSignature Language="C#" Value="public void EndUnload (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUnload(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.EndUnload(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">非同期のアンロード操作。</param>
        <summary>保留中の非同期アンロード操作が完了するまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method can be called to determine whether a <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operation was successful. If called before the unload operation completes, it blocks until the operation is complete.  
  
 This method completes an asynchronous <xref:System.Activities.WorkflowApplication.BeginUnload%2A> operation using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフロー インスタンスの拡張機能のコレクションを取得します。</summary>
        <value>オブジェクトのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBookmarks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetBookmarks" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー インスタンスのブックマークのコレクションを返します。</summary>
        <returns>ワークフロー インスタンスのブックマークの読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この操作が 30 秒以内に完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、<xref:System.Activities.WorkflowApplication.GetBookmarks%2A> が呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
What is your name?  
BookmarkName: ユーザー名 - OwnerDisplayName: ReadLine  
Steve  
こんにちは、Steve  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#14](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBookmarks">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Activities.Hosting.BookmarkInfo&gt; GetBookmarks(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetBookmarks(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Activities.Hosting.BookmarkInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、このメソッドが完了する必要がある期間。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスのブックマークのコレクションを返します。</summary>
        <returns>ワークフロー インスタンスのブックマークの読み取り専用コレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、<xref:System.Activities.WorkflowApplication.GetBookmarks%2A> が呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
What is your name?  
BookmarkName: ユーザー名 - OwnerDisplayName: ReadLine  
Steve  
こんにちは、Steve  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#14](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceId">インスタンス識別子。</param>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化の状態にアクセスします。</param>
        <summary>指定されたインスタンス識別子とインスタンス ストアを使用して、ワークフロー インスタンスを取得します。</summary>
        <returns>取得したインスタンスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetInstance (Guid instanceId, System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetInstance(valuetype System.Guid instanceId, class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetInstance(System.Guid,System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceId">インスタンス識別子。</param>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化の状態にアクセスします。</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了の間隔。</param>
        <summary>指定したインスタンス id、インスタンス ストアとタイムアウトを使用してワークフロー インスタンスの取得間隔。</summary>
        <returns>非同期操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化状態へのアクセス</param>
        <summary>指定したインスタンス ストアとワークフローの実行可能なインスタンスを取得します。</summary>
        <returns>実行可能なインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunnableInstance">
      <MemberSignature Language="C#" Value="public static System.Activities.WorkflowApplicationInstance GetRunnableInstance (System.Runtime.DurableInstancing.InstanceStore instanceStore, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Activities.WorkflowApplicationInstance GetRunnableInstance(class System.Runtime.DurableInstancing.InstanceStore instanceStore, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.GetRunnableInstance(System.Runtime.DurableInstancing.InstanceStore,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.WorkflowApplicationInstance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceStore" Type="System.Runtime.DurableInstancing.InstanceStore" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceStore">ワークフロー アプリケーションの現在のインスタンスの永続化状態へのアクセス</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了の間隔。</param>
        <summary>指定したインスタンス ストアとタイムアウト間隔を含むワークフローの実行可能なインスタンスを取得します。</summary>
        <returns>実行可能なインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public override Guid Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid Id" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフロー アプリケーション インスタンスの 128 ビットの GUID 識別子を取得します。</summary>
        <value>128 ビットの GUID 識別子。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、<xref:System.Activities.WorkflowApplication> インスタンスを作成し、次に <xref:System.Activities.WorkflowApplication.Id%2A> 値をコンソールに表示します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#28](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationIdleEventArgs&gt; Idle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationIdleEventArgs&gt; Idle" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Idle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationIdleEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフロー インスタンスがアイドル状態になると呼び出される <see cref="T:System.Action`1" /> を取得または設定します。</summary>
        <value>ワークフロー インスタンスがアイドル状態になると実行されるアクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 <xref:System.Activities.WorkflowApplicationIdleEventArgs> インスタンスの <xref:System.Activities.WorkflowApplication.Idle%2A> ハンドラーに渡される <xref:System.Activities.WorkflowApplication> を調べるコード サンプルを次に示します。 この例では、アイドル状態になるワークフローに、<xref:System.Activities.Bookmark> という名前で `EnterGuess` というアクティビティによって所有されている 1 つの `ReadInt` があります。 このコード例は、の一部基づいて [する方法: ワークフローを実行する](http://msdn.microsoft.com/ja-jp/f814ff82-fe2b-4614-aebb-b768c3e61179), の一部である、 [チュートリアル入門 &#91;.NET Framework 4.5&#93;](http://msdn.microsoft.com/ja-jp/c2d3585f-6b1a-4d4f-9865-bd7cd31c5d42)します。 この例のコードを含めるようにこの手順の <xref:System.Activities.WorkflowApplication.Idle%2A> ハンドラーを変更すると、次の出力が表示されます。  
  
```Output  
BookmarkName: EnterGuess - OwnerDisplayName: ReadInt  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InstanceStore">
      <MemberSignature Language="C#" Value="public System.Runtime.DurableInstancing.InstanceStore InstanceStore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Runtime.DurableInstancing.InstanceStore InstanceStore" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.InstanceStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.DurableInstancing.InstanceStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ワークフロー アプリケーションの現在のインスタンスの永続化された状態へのアクセスを提供するオブジェクトを取得または設定します。</summary>
        <value>インスタンス ストア。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、WorkflowApplication インスタンスを作成し、次に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を使用して <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore> を設定します。 このコード例の一部である [方法: を作成し、長い実行しているワークフローを実行する](http://msdn.microsoft.com/ja-jp/c0043c89-2192-43c9-986d-3ecec4dd8c9c), の一部である、 [チュートリアル入門 &#91;.NET Framework 4.5&#93;](http://msdn.microsoft.com/ja-jp/c2d3585f-6b1a-4d4f-9865-bd7cd31c5d42)します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#28](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#28)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <summary>指定したインスタンスをインスタンス ストアからワークフロー インスタンスを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Guid instanceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(valuetype System.Guid instanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="instanceId">ワークフロー インスタンスのグローバルに一意な 128 ビットの識別子。</param>
        <summary>指定されたワークフロー インスタンスをインスタンス ストアからメモリにロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、<xref:System.Activities.WorkflowApplication.Load%2A> を呼び出して、永続化されたワークフロー インスタンスを <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore> からロードします。 この例は、 `LoadAndCompleteInstance` メソッドで、 [ワークフロー アプリケーションの永続](http://msdn.microsoft.com/ja-jp/abcff14c-f047-4195-ba26-d27f4a82c24e) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#27](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="updateMap">更新マップします。</param>
        <summary>指定したインスタンスと更新マップを使用した、インスタンス ストアからワークフロー インスタンスを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了の間隔。</param>
        <summary>指定したインスタンスとタイムアウト間隔をインスタンス ストアからワークフロー インスタンスを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (Guid instanceId, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(valuetype System.Guid instanceId, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Guid,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instanceId" Type="System.Guid" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instanceId">ワークフロー インスタンスのグローバルに一意な 128 ビットの識別子。</param>
        <param name="timeout">ロード操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、ロード操作が完了する必要がある間隔。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスをインスタンス ストアからメモリにロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、<xref:System.Activities.WorkflowApplication.Load%2A> を呼び出して、永続化されたワークフロー インスタンスを <xref:System.Activities.DurableInstancing.SqlWorkflowInstanceStore> からロードします。 この例は、 `LoadAndCompleteInstance` メソッドで、 [ワークフロー アプリケーションの永続](http://msdn.microsoft.com/ja-jp/abcff14c-f047-4195-ba26-d27f4a82c24e) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#27](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#27)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public void Load (System.Activities.WorkflowApplicationInstance instance, System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Load(class System.Activities.WorkflowApplicationInstance instance, class System.Activities.DynamicUpdate.DynamicUpdateMap updateMap, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Load(System.Activities.WorkflowApplicationInstance,System.Activities.DynamicUpdate.DynamicUpdateMap,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Activities.WorkflowApplicationInstance" />
        <Parameter Name="updateMap" Type="System.Activities.DynamicUpdate.DynamicUpdateMap" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="instance">インスタンス。</param>
        <param name="updateMap">更新マップします。</param>
        <param name="timeout">操作が取り消されるまでのロード開始操作する必要があります完了の間隔。</param>
        <summary>インスタンス ストアからワークフロー インスタンスを読み込む指定のインスタンスにマップとタイムアウト間隔を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> から実行可能なワークフロー インスタンスをロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void LoadRunnableInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadRunnableInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.LoadRunnableInstance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> から実行可能なワークフロー インスタンスをロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 既定では、ロード操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRunnableInstance">
      <MemberSignature Language="C#" Value="public void LoadRunnableInstance (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadRunnableInstance(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.LoadRunnableInstance(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">ロード操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <summary>指定されたタイムアウト期間を使用して、実行可能なワークフロー インスタンスを <see cref="P:System.Activities.WorkflowApplication.InstanceStore" /> からロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実行可能なインスタンスとは、タイマーまたはインスタンス ロックの期限が切れたインスタンスのことです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginAssociateKeys">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginAssociateKeys (System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt; keys, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginAssociateKeys(class System.Collections.Generic.ICollection`1&lt;class System.Runtime.DurableInstancing.InstanceKey&gt; keys, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginAssociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey},System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="keys">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginPersist">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginPersist (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginPersist(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginPersist(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBeginResumeBookmark">
      <MemberSignature Language="C#" Value="protected override IAsyncResult OnBeginResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.IAsyncResult OnBeginResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnBeginResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">To be added.</param>
        <param name="value">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="callback">To be added.</param>
        <param name="state">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisassociateKeys">
      <MemberSignature Language="C#" Value="protected override void OnDisassociateKeys (System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt; keys);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnDisassociateKeys(class System.Collections.Generic.ICollection`1&lt;class System.Runtime.DurableInstancing.InstanceKey&gt; keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnDisassociateKeys(System.Collections.Generic.ICollection{System.Runtime.DurableInstancing.InstanceKey})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.Generic.ICollection&lt;System.Runtime.DurableInstancing.InstanceKey&gt;" />
      </Parameters>
      <Docs>
        <param name="keys">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndAssociateKeys">
      <MemberSignature Language="C#" Value="protected override void OnEndAssociateKeys (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnEndAssociateKeys(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndAssociateKeys(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndPersist">
      <MemberSignature Language="C#" Value="protected override void OnEndPersist (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnEndPersist(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndPersist(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndResumeBookmark">
      <MemberSignature Language="C#" Value="protected override System.Activities.BookmarkResumptionResult OnEndResumeBookmark (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance valuetype System.Activities.BookmarkResumptionResult OnEndResumeBookmark(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnEndResumeBookmark(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNotifyPaused">
      <MemberSignature Language="C#" Value="protected override void OnNotifyPaused ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnNotifyPaused() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnNotifyPaused" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnNotifyUnhandledException">
      <MemberSignature Language="C#" Value="protected override void OnNotifyUnhandledException (Exception exception, System.Activities.Activity exceptionSource, string exceptionSourceInstanceId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnNotifyUnhandledException(class System.Exception exception, class System.Activities.Activity exceptionSource, string exceptionSourceInstanceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnNotifyUnhandledException(System.Exception,System.Activities.Activity,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exception" Type="System.Exception" />
        <Parameter Name="exceptionSource" Type="System.Activities.Activity" />
        <Parameter Name="exceptionSourceInstanceId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="exception">To be added.</param>
        <param name="exceptionSource">To be added.</param>
        <param name="exceptionSourceInstanceId">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRequestAbort">
      <MemberSignature Language="C#" Value="protected override void OnRequestAbort (Exception reason);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnRequestAbort(class System.Exception reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.OnRequestAbort(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="reason">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="public Func&lt;System.Activities.WorkflowApplicationUnhandledExceptionEventArgs,System.Activities.UnhandledExceptionAction&gt; OnUnhandledException { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Activities.WorkflowApplicationUnhandledExceptionEventArgs, valuetype System.Activities.UnhandledExceptionAction&gt; OnUnhandledException" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.OnUnhandledException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Activities.WorkflowApplicationUnhandledExceptionEventArgs,System.Activities.UnhandledExceptionAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフロー インスタンスが未処理の例外を検出すると呼び出される <see cref="T:System.Func`2" /> を取得または設定します。</summary>
        <value>ワークフロー インスタンスが未処理の例外を検出すると呼び出されるデリゲート。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> も <xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior> も、例外がワークフロー内で処理されない場合にランタイムの動作を決定しますが、<xref:System.ServiceModel.Activities.Description.WorkflowUnhandledExceptionBehavior> には、中断されたワークフローを永続化ストアに残すオプションがあり、<xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> にはこのオプションがありません。 このような相違があるのは、中断されたワークフローの扱いがホスト固有であるのに対し、<xref:System.Activities.WorkflowApplication> の扱いはホスト固有でないためです。<xref:System.Activities.WorkflowApplication> を使用してこの機能を実装するには、この動作を備えたカスタムの <xref:System.Activities.Persistence.PersistenceParticipant> を作成します。  
  
   
  
## 例  
 次の例では、例外をスローするワークフローを呼び出しています。 ワークフローで例外が処理されないため、<xref:System.Activities.WorkflowApplication.OnUnhandledException%2A> ハンドラーが呼び出されます。 例外に関する情報を提供するために <xref:System.Activities.WorkflowApplicationUnhandledExceptionEventArgs> が調査され、ワークフローは終了します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Persist">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスをインスタンス ストアに永続化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="public void Persist ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Persist() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Persist" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー インスタンスをインスタンス ストアに永続化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 永続化操作が 30 秒以内に完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
   
  
## 例  
 次の例では、ワークフローの開始前に <xref:System.Activities.WorkflowApplication.Persist%2A> を呼び出して、ワークフロー インスタンスを永続化します。 この例は、 `StartAndUnloadInstance` メソッドで、 [ワークフロー アプリケーションの永続](http://msdn.microsoft.com/ja-jp/abcff14c-f047-4195-ba26-d27f4a82c24e) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Persist">
      <MemberSignature Language="C#" Value="public void Persist (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Persist(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Persist(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">操作が取り消され <see cref="T:System.TimeoutException" /> がスローされるまでの時間の長さ。永続化操作は、この時間内に完了する必要があります。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスをインスタンス ストアに永続化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
   
  
## 例  
 次の例では、ワークフローの開始前に <xref:System.Activities.WorkflowApplication.Persist%2A> を呼び出して、ワークフロー インスタンスを永続化します。 この例は、 `StartAndUnloadInstance` メソッドで、 [ワークフロー アプリケーションの永続](http://msdn.microsoft.com/ja-jp/abcff14c-f047-4195-ba26-d27f4a82c24e) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PersistableIdle">
      <MemberSignature Language="C#" Value="public Func&lt;System.Activities.WorkflowApplicationIdleEventArgs,System.Activities.PersistableIdleAction&gt; PersistableIdle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`2&lt;class System.Activities.WorkflowApplicationIdleEventArgs, valuetype System.Activities.PersistableIdleAction&gt; PersistableIdle" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.PersistableIdle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;System.Activities.WorkflowApplicationIdleEventArgs,System.Activities.PersistableIdleAction&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフロー インスタンスがアイドル状態になり、永続化できるようになると呼び出される <see cref="T:System.Activities.ActivityFunc" /> を取得または設定します。</summary>
        <value>現在のワークフロー インスタンスがアイドル状態になり、永続化できるようになると呼び出される <see cref="T:System.Activities.ActivityFunc" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローがアイドル状態になり、永続化できるようになると、<xref:System.Activities.WorkflowApplication.Idle%2A> と <xref:System.Activities.WorkflowApplication.PersistableIdle%2A> の両方がこの順序で呼び出されます。<xref:System.Activities.WorkflowApplication.PersistableIdle%2A> ハンドラーは、<xref:System.Activities.PersistableIdleAction>、<xref:System.Activities.PersistableIdleAction.None>、<xref:System.Activities.PersistableIdleAction.Persist> の <xref:System.Activities.PersistableIdleAction.Unload> 列挙値のいずれかを返します。  
  
   
  
## 例  
 次の例は、<xref:System.Activities.WorkflowApplication.PersistableIdle%2A> ハンドラーを処理し、ワークフローを永続化してアンロードするようランタイムに指示します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#26](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#26)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (System.Activities.Bookmark bookmark, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(class System.Activities.Bookmark bookmark, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmark">再開するブックマーク。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <summary>指定された値を使用して、指定されたブックマークを再開する操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、ユーザーの入力が収集されてブックマークが再開されます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#24](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (string bookmarkName, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">再開するブックマークの名前。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <summary>指定された値を使用して、指定された名前を持つブックマークを再開する操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、ユーザーの入力が収集されてブックマークが再開されます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (System.Activities.Bookmark bookmark, object value, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(class System.Activities.Bookmark bookmark, object value, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.Activities.Bookmark,System.Object,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmark" Type="System.Activities.Bookmark" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="bookmark">再開するブックマーク。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="timeout">ブックマークが再開される必要がある時間間隔。</param>
        <summary>指定された値およびタイムアウト期間を使用して、指定されたブックマークを再開する操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、ユーザーの入力が収集されてブックマークが再開されます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#25](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResumeBookmark">
      <MemberSignature Language="C#" Value="public System.Activities.BookmarkResumptionResult ResumeBookmark (string bookmarkName, object value, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Activities.BookmarkResumptionResult ResumeBookmark(string bookmarkName, object value, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.ResumeBookmark(System.String,System.Object,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.BookmarkResumptionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bookmarkName" Type="System.String" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="bookmarkName">再開するブックマークの名前。</param>
        <param name="value">ブックマークが再開されると呼び出されるメソッドにパラメーターとして渡されるオブジェクト。</param>
        <param name="timeout">ブックマークが再開される必要がある時間間隔。</param>
        <summary>指定された値およびタイムアウト期間を使用して、指定された名前を持つブックマークを再開する操作を開始します。 再開するブックマークは、ワークフロー インスタンス内のアクティビティによって以前に作成されたものです。</summary>
        <returns>ブックマーク再開操作の結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ブックマークの結果は、再開操作に成功したのかそれとも失敗したのかを示します。  
  
   
  
## 例  
 次の例は、`ReadLine` を作成する <xref:System.Activities.Bookmark> アクティビティを使用するワークフローを作成します。 ワークフローが開始され、<xref:System.Activities.Bookmark> が作成されてワークフローがアイドル状態になると、ユーザーの入力が収集されてブックマークが再開されます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#15](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#15)]  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスの実行を開始または再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新規作成したワークフロー インスタンスの実行を開始するには、このメソッドを呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー インスタンスの実行を開始または再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新規作成したワークフロー インスタンスの実行を開始するには、このメソッドを呼び出します。  
  
 実行操作が 30 秒以内に完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
593976e8-558d-4989-94d6-50a14b34fd7b のワークフローがアイドル状態です。  
ワークフローを終了します。  
完了したワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b  
ワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b アンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Run(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Run(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">新規作成したワークフロー インスタンスの実行を開始するには、このメソッドを呼び出します。  
  
 操作が取り消され <see cref="T:System.TimeoutException" /> がスローされるまでの時間の長さ。実行操作は、この時間内に完了する必要があります。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスの実行を開始または再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowInvoker.Invoke%2A> とは異なり、このメソッドがタイムアウトするのは、指定時間内に完了しなかった場合ではなく、指定時間内にワークフローが開始しなかった場合のみです。 これは、<xref:System.Activities.WorkflowInvoker.Invoke%2A> ではワークフローが同期的に \(ホスト スレッドをブロックして\) 実行されるためです。<xref:System.Activities.WorkflowApplication.Run%2A> は、ワークフローの開始にかかる時間分のみホスト スレッドをブロックして、非同期的に実行されます。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 このワークフローが完了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
593976e8-558d-4989-94d6-50a14b34fd7b のワークフローがアイドル状態です。  
ワークフローを終了します。  
完了したワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b  
ワークフロー 593976e8-558d-4989-94d6-50a14b34fd7b アンロードします。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#9](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsInstanceKeys">
      <MemberSignature Language="C#" Value="protected override bool SupportsInstanceKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsInstanceKeys" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.SupportsInstanceKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (Exception reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(class System.Exception reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <summary>指定された例外を使用して、ワークフロー インスタンスを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 既定では、<xref:System.Activities.WorkflowApplication.Terminate%2A> 操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Terminate%2A> が呼び出されます。 このワークフローが終了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー e6b33409-f010-49f1-82ce-56f8baabe5e5 が終了します。  
例外: System.ApplicationException  
ワークフローを終了します。  
ワークフロー e6b33409-f010-49f1-82ce-56f8baabe5e5 がアンロードされます。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#16](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#16)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <summary>指定されたエラー メッセージを使用して、ワークフロー インスタンスを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
 既定では、<xref:System.Activities.WorkflowApplication.Terminate%2A> 操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Terminate%2A> が呼び出されます。 このワークフローが終了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー f87c6f91-4fe4-40b9-b7cb-4f1bd071bf84 が終了します。  
例外: System.Activities.WorkflowApplicationTerminatedException  
ワークフローを終了します。  
ワークフロー f87c6f91-4fe4-40b9-b7cb-4f1bd071bf84 がアンロードされます。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#18](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (Exception reason, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(class System.Exception reason, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.Exception" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <param name="timeout">
          <see cref="M:System.Activities.WorkflowApplication.Terminate(System.Exception,System.TimeSpan)" /> 操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <summary>指定された例外およびタイムアウト期間を使用して、ワークフロー インスタンスを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフローの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Terminate%2A> が呼び出されます。 このワークフローが終了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー de28efe5-9057-472b-8d95-899c249893c5 が終了します。  
例外: System.ApplicationException  
ワークフローを終了します。  
ワークフロー de28efe5-9057-472b-8d95-899c249893c5 がアンロードされます。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#17](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Terminate">
      <MemberSignature Language="C#" Value="public void Terminate (string reason, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Terminate(string reason, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reason" Type="System.String" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="reason">ワークフロー インスタンスを終了する理由。</param>
        <param name="timeout">
          <see cref="M:System.Activities.WorkflowApplication.Terminate(System.String,System.TimeSpan)" /> 操作が取り消されて <see cref="T:System.TimeoutException" /> がスローされるまでに、操作が完了する必要がある間隔。</param>
        <summary>指定されたエラー メッセージおよびタイムアウト期間を使用して、ワークフロー インスタンスを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ワークフロー インスタンスの終了をスケジュールします。 終了操作が完了したら通知されるようにするには、<xref:System.Activities.WorkflowApplication.OnCompleted%2A> ハンドルを使用します。  
  
   
  
## 例  
 次の例では、<xref:System.Activities.WorkflowApplication> を使用してワークフローをホストしています。 指定のワークフロー定義を使用して <xref:System.Activities.WorkflowApplication> インスタンスが構築され、必要なワークフローのライフサイクル イベントが処理され、<xref:System.Activities.WorkflowApplication.Run%2A> の呼び出しを使用してワークフローが呼び出されます。 ワークフローの開始後に、<xref:System.Activities.WorkflowApplication.Terminate%2A> が呼び出されます。 このワークフローが終了すると、次の出力がコンソールに表示されます。  
  
```Output  
ワークフローを開始します。  
ワークフロー 2897d2ef-377e-4224-ae93-5c19b38f487c が終了します。  
例外: System.Activities.WorkflowApplicationTerminatedException  
ワークフローを終了します。  
ワークフロー 2897d2ef-377e-4224-ae93-5c19b38f487c がアンロードされます。  
  
```  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#19](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#19)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unload">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスを永続化しアンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、アンロード操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Unload" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフロー インスタンスを永続化しアンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、アンロード操作は 30 秒以内に完了する必要があります。完了しない場合、<xref:System.TimeoutException> がスローされます。  
  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
   
  
## 例  
 次のコード例の一部である、 [NoPersistScope アクティビティ](http://msdn.microsoft.com/ja-jp/9a0baeb7-a05c-4fac-b905-252758cb71bb) サンプルです。 この例では、ワークフローがアイドル状態で、ホスト アプリケーションがユーザー入力を待っています。 ユーザーがアンロードを選択すると、<xref:System.Activities.WorkflowApplication.Unload%2A> が呼び出されます。 成功すると、ワークフローは永続化され、メモリからアンロードされます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public void Unload (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unload(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowApplication.Unload(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">操作が取り消され <see cref="T:System.TimeoutException" /> がスローされるまでの時間の長さ。アンロード操作は、この時間内に完了する必要があります。</param>
        <summary>指定されたタイムアウト期間を使用して、ワークフロー インスタンスを永続化しアンロードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフロー インスタンスが永続化ストアから読み込まれたものである場合は、ワークフローの読み込みに使用された同じ <xref:System.Runtime.DurableInstancing.InstanceStore> が、永続化に使用されます。 ワークフローが作成されたものであり、まだ永続化されていない場合は、このメソッドを呼び出す前に <xref:System.Activities.WorkflowApplication.InstanceStore%2A> を構成する必要があります。この操作を行わないと、このメソッドを呼び出したときに <xref:System.InvalidOperationException> がスローされます。  
  
   
  
## 例  
 次のコード例の一部である、 [NoPersistScope アクティビティ](http://msdn.microsoft.com/ja-jp/9a0baeb7-a05c-4fac-b905-252758cb71bb) サンプルです。 この例では、ワークフローがアイドル状態で、ホスト アプリケーションがユーザー入力を待っています。 ユーザーがアンロードを選択すると、<xref:System.Activities.WorkflowApplication.Unload%2A> が呼び出されます。 成功すると、ワークフローは永続化され、メモリからアンロードされます。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Unloaded">
      <MemberSignature Language="C#" Value="public Action&lt;System.Activities.WorkflowApplicationEventArgs&gt; Unloaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;class System.Activities.WorkflowApplicationEventArgs&gt; Unloaded" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowApplication.Unloaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Activities.WorkflowApplicationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のワークフローがアンロードされると呼び出される <see cref="T:System.Action`1" /> を取得または設定します。</summary>
        <value>ワークフロー インスタンスがアンロードされると呼び出されるアクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 <xref:System.Activities.WorkflowApplicationEventArgs> インスタンスの <xref:System.Activities.WorkflowApplication.Unloaded%2A> ハンドラーに渡される <xref:System.Activities.WorkflowApplication> を調べ、アンロードされたワークフローの <xref:System.Activities.WorkflowApplicationEventArgs.InstanceId%2A> を表示するコード サンプルを次に示します。  
  
 [!code-csharp[CFX\_WorkflowApplicationExample\#3](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowapplicationexample/cs/program.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Terminate">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="CreateDefaultInstanceOwner">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフローの既定のインスタンス所有者を作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフローの実行可能なインスタンスを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetBookmarks">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスのブックマークのコレクションを返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Activities.WorkflowApplication" /> クラスの新しいインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ResumeBookmark">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブックマークを再開する操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginResumeBookmark">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ブックマークを再開する非同期操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginGetInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用して非同期的にインスタンスの所有者を取得、<see cref="T:System.IAsyncResult" />非同期デザイン パターンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>インスタンス ストアからワークフロー インスタンスを読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DeleteDefaultInstanceOwner">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフローの既定のインスタンス所有者を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginDeleteDefaultInstanceOwner">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用して非同期的に既定のインスタンス所有者を削除、<see cref="T:System.IAsyncResult" />非同期デザイン パターンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフロー インスタンスを取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginCreateDefaultInstanceOwner">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用して非同期的に既定のインスタンス所有者を作成、<see cref="T:System.IAsyncResult" />非同期デザイン パターンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="BeginGetRunnableInstance">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>使用して非同期的に実行可能なインスタンス所有者を取得、<see cref="T:System.IAsyncResult" />非同期デザイン パターンです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>