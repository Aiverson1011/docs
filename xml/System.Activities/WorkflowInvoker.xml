<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>ワークフローをメソッド呼び出しであるかのように呼び出す手段を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。  
  
 <xref:System.Activities.WorkflowInvoker> では、インスタンス コントロール \(ブックマークの保持、アンロード、再開など\) は許可されません。 インスタンス コントロールが必要な場合には、代わりに <xref:System.Activities.WorkflowApplication> を使用します。  
  
 インスタンス コントロールなしで複数のワークフローを同期的に実行するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> メソッドを呼び出します。 インスタンス コントロールなしで複数のワークフローを非同期的に実行するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> メソッドと <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドのペア、または <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> メソッドを使用します。  
  
   
  
## 例  
 次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを <xref:System.Activities.WorkflowInvoker> を使用して同期的に呼び出します。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <see cref="T:System.Activities.WorkflowInvoker" /> クラスのこのインスタンスによって呼び出されるワークフローのワークフロー定義。</param>
        <summary>
          <see cref="T:System.Activities.WorkflowInvoker" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Activities.WorkflowInvoker> には、複数のワークフローを同期的に呼び出すためのインスタンス メソッドと静的メソッドの両方、および複数のワークフローを非同期的に呼び出すためのインスタンス メソッドが含まれています。  
  
   
  
## 例  
 次の例は、1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IAsyncResult" /> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [!INCLUDE[crdefault](~/includes/crdefault-md.md)] [Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定された <see cref="T:System.AsyncCallback" /> およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。  ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>指定されたタイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> メソッドが呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="callback">ワークフローが完了した時点で呼び出されるメソッド。</param>
        <param name="state">非同期操作についての情報を格納するオプションのアプリケーション固有オブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、タイムアウト時間、<see cref="T:System.AsyncCallback" />、およびユーザー指定状態を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <returns>非同期呼び出し操作への参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知を受け、ワークフローの出力パラメーターを取得できるようにするには、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> メソッドから `callback` を呼び出します。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> は、呼び出されたときにワークフローが完了していなかった場合、ワークフローが完了するまでブロックします。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されます。そして、<xref:System.TimeoutException> が呼び出されると、<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、<xref:System.IAsyncResult> 非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 これらは <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> を呼び出すことによって取得されます。<xref:System.Activities.WorkflowInvoker.EndInvoke%2A> への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">ワークフローを取り消すためのトークン。</param>
        <summary>指定された <paramref name="userState" /> によって呼び出されたワークフローを取り消そうとします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取り消すことができるのは、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> パラメーターを受け取る、`userState` オーバーロードのいずれかによって呼び出されるワークフローだけです。  
  
 取り消し操作が成功した場合、<xref:System.ComponentModel.Cancelled%2A>のプロパティ、<xref:System.Activities.InvokeCompletedEventArgs>に渡される、<xref:System.Activities.WorkflowInvoker.InvokeCompleted>設定されているハンドラー `true`、それ以外に設定されている`false`です。  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが呼び出されると、ホストはワークフローを取り消そうとします。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">ワークフローを開始した <see cref="T:System.IAsyncResult" /> 操作を参照する <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />。</param>
        <summary>
          <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> オーバーロードのいずれかを使用して呼び出されたワークフローの結果を返します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the **parameterReference tag is not supported!!!!**  
 method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>. If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.  
  
 This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern. [!INCLUDE[crdefault](~/includes/crdefault-md.md)][Asynchronous Programming Overview](http://go.microsoft.com/fwlink/?LinkId=141764).  
  
   
  
## 例  
 The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity. The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation. These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>. When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" /> を取得します。</summary>
        <value>
          <see cref="T:System.Collections.ObjectModel.Collection`1" /> インスタンスによって呼び出されるワークフローが使用できる拡張機能の <see cref="T:System.Activities.WorkflowInvoker" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.  
  
   
  
## 例  
 The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance. This code example is part of the [Custom Tracking](http://msdn.microsoft.com/ja-jp/2d191c9f-62f4-4c63-92dd-cda917fcf254) sample.  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ワークフローを同期的に呼び出して、引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリを返します。これらの値は、ワークフローの出力を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## 例  
 次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。`DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。`Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。 ワークフローが 2 回呼び出されるに渡されたワークフロー定義を使用して、 `WorkflowInvoker` コンス トラクターです。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。 次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <summary>指定されたワークフロー定義を使用してワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## 例  
 次の例は、1 つの `DiceRoll` アクティビティで構成されるワークフローを呼び出します。`DiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。`Invoke` への呼び出しが返されると、引数名によってキー指定された各出力引数が出力ディレクトリに返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 ワークフローのルート アクティビティに出力引数がない、またはホストで出力引数が必要でない場合は、無視されます。 次の例は、出力引数を持たない 1 つの <xref:System.Activities.Statements.WriteLine> アクティビティで構成されるワークフローを呼び出します。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>
          <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## 例  
 次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。`Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 ワークフローから派生している場合 <xref:System.Activities.ActivityWithResult>, など `CodeActivity<TResult>` または `Activity<TResult>`, 、明確に定義されただけでなく、出力引数があると <xref:System.Activities.Activity%601.Result%2A> 出力引数の非ジェネリック オーバー ロード `Invoke`, 、このよう、追加の引数を取得するために使用する必要があります。 そのために渡されるワークフロー定義、 `WorkflowInvoker` のコンス トラクターは、型でなければなりません <xref:System.Activities.Activity>します。 この例では、 `Divide` から派生したアクティビティ `CodeActivity<int>`, 、として宣言されていますが、 <xref:System.Activities.Activity> のこのオーバー ロードできるように `Invoke`, 、使用は単一の戻り値ではなく引数のディクショナリが返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたタイムアウト時間を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。  
  
```Output  
割り当てられたタイムアウト時間 00:00:30 内に、この操作は完了しませんでした。  
この操作に割り当てられる時間より長いタイムアウトの一部であった可能性があります。  
```  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 For an example of using **languageKeyword tag is not supported!!!!**  
 with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time\-out interval.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## 例  
 次の例は、2 つの入力引数と 2 つの出力引数を持つ 1 つの `Divide` アクティビティで構成されるワークフローを呼び出します。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。`Invoke` の呼び出しから制御が戻るときに、同様に引数名でキー指定された各出力引数が、`outputs` 辞書で返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 ワークフローから派生している場合 <xref:System.Activities.ActivityWithResult>, など `CodeActivity<TResult>` または `Activity<TResult>`, 、明確に定義されただけでなく、出力引数があると <xref:System.Activities.Activity%601.Result%2A> 出力引数の非ジェネリック オーバー ロード `Invoke`, 、このよう、追加の引数を取得するために使用する必要があります。 これを行うには、`Invoke` に渡されるワークフロー定義は <xref:System.Activities.Activity> 型である必要があります。 この例では、 `Divide` から派生したアクティビティ `CodeActivity<int>`, 、として宣言されていますが、 <xref:System.Activities.Activity> のこのオーバー ロードできるように `Invoke`, 、使用は単一の戻り値ではなく引数のディクショナリが返されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 For an example of using **languageKeyword tag is not supported!!!!**  
 with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time\-out interval.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>
          <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに同期的に渡されるアクティビティを入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および指定されたタイムアウト時間を使用して呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされて次のメッセージが表示されます。  
  
```Output  
割り当てられたタイムアウト時間 00:00:30 内に、この操作は完了しませんでした。  
この操作に割り当てられる時間より長いタイムアウトの一部であった可能性があります。  
```  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 For an example of using **languageKeyword tag is not supported!!!!**  
 with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time\-out interval.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>引数名によってキー指定されるルート アクティビティの <see cref="T:System.Activities.OutArgument" /> 値および <see cref="T:System.Activities.InOutArgument" /> 値のディクショナリ。これらの値は、ワークフローの出力を表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、2 つの <xref:System.Activities.Statements.WriteLine> アクティビティと <xref:System.Activities.Statements.Delay> を 1 分として設定した 1 つの <xref:System.Activities.Statements.Delay.Duration%2A> アクティビティを持つワークフローを呼び出します。 このワークフローは、1 回目は 2 分のタイムアウト時間、2 回目は 30 秒のタイムアウト時間で 2 回呼び出されます。 最初のワークフローは正常に完了しますが、2 回目は正常に完了せず、<xref:System.TimeoutException> がスローされます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 For an example of using **languageKeyword tag is not supported!!!!**  
 with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time\-out interval.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。 ワークフロー定義は、<see cref="T:System.Activities.ActivityWithResult" /> から派生する必要があります。</param>
        <summary>
          <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> コンストラクターに渡されたワークフロー定義を使用して、ワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
   
  
## 例  
 次の例は、1 つので構成されるワークフローを呼び出して `Add` を 2 つの入力引数を持つアクティビティから派生するため `CodeActivity<int>` がいずれかの適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 ときにへの呼び出し `Invoke` の値が返される、 <xref:System.Activities.Activity%601.Result%2A> 出力引数が返されます。 このコード例は、の一部に基づいて、 [WorkflowInvoker クラスを使用して](http://msdn.microsoft.com/ja-jp/0a966164-3990-4e78-8aa2-c6797ebbee94) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>指定されたワークフロー定義、および入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.Invoke%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、1 つので構成されるワークフローを呼び出して `Add` を 2 つの入力引数を持つアクティビティから派生するため `CodeActivity<int>` がいずれかの適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 ときにへの呼び出し `Invoke` の値が返される、 <xref:System.Activities.Activity%601.Result%2A> 出力引数が返されます。 このコード例は、の一部に基づいて、 [WorkflowInvoker クラスを使用して](http://msdn.microsoft.com/ja-jp/0a966164-3990-4e78-8aa2-c6797ebbee94) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、1 つので構成されるワークフローを呼び出して `Add` を 2 つの入力引数を持つアクティビティから派生するため `CodeActivity<int>` がいずれかの適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 ときにへの呼び出し `Invoke` の値が返される、 <xref:System.Activities.Activity%601.Result%2A> 出力引数が返されます。 このコード例は、の一部に基づいて、 [WorkflowInvoker クラスを使用して](http://msdn.microsoft.com/ja-jp/0a966164-3990-4e78-8aa2-c6797ebbee94) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&amp;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">ワークフローの型。</typeparam>
        <param name="workflow">呼び出すワークフローのワークフロー定義。</param>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="additionalOutputs">ワークフローの追加出力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定されたワークフロー定義、入力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、追加の出力パラメーターの <see cref="T:System.Collections.Generic.IDictionary`2" />、およびタイムアウト時間を使用して、1 つのワークフローを同期的に呼び出します。</summary>
        <returns>型 TResult の値およびアクティビティの実行結果。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、アイドル時間も含めてワークフローが完了するまでブロックします。 ワークフローの実行はすべて、呼び出し元スレッド上で実行されることが保証されています。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
   
  
## 例  
 次の例は、1 つので構成されるワークフローを呼び出して `Add` を 2 つの入力引数を持つアクティビティから派生するため `CodeActivity<int>` がいずれかの適切に定義された <xref:System.Activities.Activity%601.Result%2A> 出力引数。 ワークフローを呼び出すと、`arguments` 辞書が渡されます。ここには引数名でキー指定された各入力引数の値が含まれています。 ときにへの呼び出し `Invoke` の値が返される、 <xref:System.Activities.Activity%601.Result%2A> 出力引数が返されます。 このコード例は、の一部に基づいて、 [WorkflowInvoker クラスを使用して](http://msdn.microsoft.com/ja-jp/0a966164-3990-4e78-8aa2-c6797ebbee94) サンプルです。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>指定された一意の識別子を使用してワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。`userState` パラメーターが一意でない場合、<xref:System.ArgumentException> がスローされます。`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>指定タイムアウト時間を使用して、ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" /> および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 ワークフローを完了しなければならないタイムアウト時間を構成するには、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> を受け取る <xref:System.TimeSpan> オーバーロードのいずれかを使用します。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、および指定されたタイムアウト時間を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>指定タイムアウト時間および一意の識別子を使用して、ワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">ワークフローに渡す入力パラメーターのディクショナリであり、引数名によってキー指定されます。</param>
        <param name="timeout">ワークフローが完了する必要がある期間。これを超えると、中止されて <see cref="T:System.TimeoutException" /> がスローされます。</param>
        <param name="userState">この特定の非同期呼び出し操作を他の現在の非同期呼び出し操作と区別するために使用されるユーザー指定のオブジェクト。</param>
        <summary>入力パラメーターの指定された <see cref="T:System.Collections.Generic.IDictionary`2" />、指定されたタイムアウト時間、および一意の識別子を使用して、1 つのワークフローを非同期的に呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `userState` パラメーターは、現在のアクティビティに関して現在実行中の <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> 操作すべてにおいて一意である必要があります。`userState` が一意でない場合には、<xref:System.ArgumentException> がスローされます。`userState` は、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> におけるワークフローを識別するために使用されます。さらに、<xref:System.Activities.WorkflowInvoker.CancelAsync%2A> を使用してワークフローを取り消すためにも使用されます。  
  
 ワークフローが完了したら通知されるようにするには、<xref:System.Activities.WorkflowInvoker.InvokeCompleted> を処理します。 指定されたタイムアウト期間内にワークフローが完了しない場合は中止されて <xref:System.TimeoutException> がスローされます。  
  
> [!NOTE]
>  <xref:System.TimeoutException> がスローされるのは、タイムアウト期間が経過してワークフローが実行中にアイドル状態になった場合だけです。 指定されたタイムアウト時間内には完了しないワークフローが正常に完了するのは、アイドル状態にならない場合です。  
  
 このメソッドは、イベントベースの非同期デザイン パターンを使用して、1 つのワークフローを非同期的に呼び出します。[!INCLUDE[crdefault](~/includes/crdefault-md.md)][Event\-based Asynchronous Pattern Overview](http://go.microsoft.com/fwlink/?LinkId=141765).  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> オーバーロードのいずれかによって呼び出されるワークフローが完了するか取り消されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これを処理して、<xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> オーバーロードの 1 つを使用して呼び出したワークフローが正常に完了したかどうかを判断し、完了したワークフローの出力引数を取得します。  
  
   
  
## 例  
 次の例は、`LongRunningDiceRoll` アクティビティで構成されるワークフローを呼び出します。`LongRunningDiceRoll` アクティビティには、サイコロ振り操作の結果を表す 2 つの出力引数があります。 ワークフローが完了すると、これらの値が <xref:System.Activities.WorkflowInvoker.InvokeCompleted> ハンドラーで取得されます。  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX\_WorkflowInvokerExample\#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>