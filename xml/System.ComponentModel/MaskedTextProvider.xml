<Type Name="MaskedTextProvider" FullName="System.ComponentModel.MaskedTextProvider">
  <TypeSignature Language="C#" Value="public class MaskedTextProvider : ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextProvider extends System.Object implements class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.MaskedTextProvider" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>任意の数のマスキングなどをサポートするコントロールを使ってマスク解析のサービスを表す、 <see cref="T:System.Windows.Forms.MaskedTextBox" /> コントロールです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.MaskedTextBox> コントロールには、マスク、リテラル文字で構成され、すべてのユーザーの入力をテストする要素の書式設定が含まれています。 特定のマスク解析エンジンを完全に関連付ける代わりに <xref:System.Windows.Forms.MaskedTextBox>, 、Windows フォームはによって表される別個のサービスとして提供、 <xref:System.ComponentModel.MaskedTextProvider> のドキュメントで説明したマスク言語の構文を定義するクラス、 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> プロパティです。  
  
 メンバーの多くは、 <xref:System.Windows.Forms.MaskedTextBox> クラスは、関連する類似した名前のメンバーには、その実装を参照してください <xref:System.ComponentModel.MaskedTextProvider>します。 たとえば、 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A?displayProperty=fullName> のプロパティ、 <xref:System.Windows.Forms.MaskedTextBox> クラスにアクセスするは、 <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> の <xref:System.ComponentModel.MaskedTextProvider> クラスです。  
  
 によって使用されるマスク解析エンジン <xref:System.ComponentModel.MaskedTextProvider> Microsoft Visual Basic バージョン 6 に含まれるマスク エディット コントロールの後ろにモデル化します。 マスク言語がのドキュメントに記載されている、 <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> プロパティです。  
  
 次の 3 つの異なる文字列があります、 <xref:System.ComponentModel.MaskedTextProvider> クラスです。  
  
|文字列名|説明|  
|----------|--------|  
|入力文字または文字列|に対してマスクを適用する入力として使用される文字を表します。 実際には、入力文字列で構成できるなど、複数の入力操作の <xref:System.ComponentModel.MaskedTextProvider.Add%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Replace%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A>, 、および <xref:System.ComponentModel.MaskedTextProvider.Remove%2A>です。 したがって、入力文字列に直接アクセスすることはできません。 ただし、入力文字列の処理の機能がただしで使用できる、 <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> と <xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.ResetOnPrompt%2A>, 、および <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> プロパティです。|  
|マスク|入力マスクを使用する入力文字列を書式設定された文字列に変換を書式設定を表します。 この文字列が設定されて、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> は主にアクセスし、 <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> プロパティです。 マスクの特性は、使用、その他のメンバーなど、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>, 、および <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> プロパティです。|  
|書式設定された文字列|フル マスクは、入力文字列に適用するときに結果文字列を表します。 書式指定文字列は、クラスの多くのメンバーで照会できますなど <xref:System.ComponentModel.MaskedTextProvider.Item%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Length%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.MaskFull%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.MaskCompleted%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom%2A>, 、という具合です。 書式設定された文字列の完全な値は、 <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> と <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドです。|  
  
> [!NOTE]
>  入力文字列の場合のように、ユーザーが直接の入力を表すことがあります、 <xref:System.Windows.Forms.MaskedTextBox>, 、または直接ではなく、ユーザー入力\/出力操作に関連付けられている他のプロセスによって生成される可能性があります。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MaskedTextBox" />
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
    <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスクを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , null, true, '_', '\0', false)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, bool restrictToAscii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="restrictToAscii">
          <see langword="true" /> ASCII と互換性のある文字への入力を制限するにはそれ以外の場合 <see langword="false" /> Unicode セット全体を許可するようにします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスクと ASCII 制限値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , null, true, '_', '\0', restrictToASCII)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 地域によって異なる区切り記号を設定するために使用されます。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスクとカルチャを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , culture, true, '_', '\0', false)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Culture" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, char passwordChar, bool allowPromptAsInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, char passwordChar, bool allowPromptAsInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="passwordChar">A <see cref="T:System.Char" /> 、パスワードの文字列に入力された文字を表示することです。</param>
        <param name="allowPromptAsInput">
          <see langword="true" /> 入力としてプロンプト文字を許可するにはそれ以外の場合 <see langword="false" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスク、パスワードの文字およびプロンプトの使用法の値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , null, allowPromptAsInput, '_', passwordChar, false)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, bool restrictToAscii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 地域によって異なる区切り記号を設定するために使用されます。</param>
        <param name="restrictToAscii">
          <see langword="true" /> ASCII と互換性のある文字への入力を制限するにはそれ以外の場合 <see langword="false" /> Unicode セット全体を許可するようにします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスク、カルチャ、および ASCII 制限値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , culture, true, '_', '\0', restrictToAscii)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Culture" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, char passwordChar, bool allowPromptAsInput) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 地域によって異なる区切り記号を設定するために使用されます。</param>
        <param name="passwordChar">A <see cref="T:System.Char" /> 、パスワードの文字列に入力された文字を表示することです。</param>
        <param name="allowPromptAsInput">
          <see langword="true" /> 入力としてプロンプト文字を許可するにはそれ以外の場合 <see langword="false" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスク、カルチャ、パスワードの文字とプロンプトの使用法の値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの使用は、次の呼び出しにまったく同じ、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%28System.String%2CSystem.Globalization.CultureInfo%2CSystem.Boolean%2CSystem.Char%2CSystem.Char%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクター。  
  
 `MaskedTextProvider(mask , culture, allowPromptAsInput, '_', passwordChar, false)`  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Culture" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextProvider (string mask, System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask, class System.Globalization.CultureInfo culture, bool allowPromptAsInput, char promptChar, char passwordChar, bool restrictToAscii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="allowPromptAsInput" Type="System.Boolean" />
        <Parameter Name="promptChar" Type="System.Char" />
        <Parameter Name="passwordChar" Type="System.Char" />
        <Parameter Name="restrictToAscii" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> 入力マスクを表します。</param>
        <param name="culture">A <see cref="T:System.Globalization.CultureInfo" /> 地域によって異なる区切り記号を設定するために使用されます。</param>
        <param name="allowPromptAsInput">A <see cref="T:System.Boolean" /> プロンプト文字が有効な入力文字として許可するかどうかを指定する値。</param>
        <param name="promptChar">A <see cref="T:System.Char" /> をユーザー入力のプレース ホルダーとして表示されます。</param>
        <param name="passwordChar">A <see cref="T:System.Char" /> 、パスワードの文字列に入力された文字を表示することです。</param>
        <param name="restrictToAscii">
          <see langword="true" /> ASCII と互換性のある文字への入力を制限するにはそれ以外の場合 <see langword="false" /> Unicode セット全体を許可するようにします。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの指定したマスク、カルチャ、プロンプトの使用法の値、プロンプト文字、パスワードの文字と ASCII 制限値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、最も一般的なオーバー ロードされた形式を表します。`mask` パラメーターによって定義されたマスク言語に従い、 <xref:System.ComponentModel.MaskedTextProvider> の詳細については、クラス、 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A?displayProperty=fullName> のプロパティ、 <xref:System.Windows.Forms.MaskedTextBox> クラスです。  
  
 ニュートラル カルチャのカルチャに固有の情報を照会できませんので、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> コンス トラクターを使用して、 <xref:System.Globalization.CultureInfo.GetCultures%2A> メソッドを使用して適切な区切り文字を決定する最初の非ニュートラル カルチャを検索します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">マスク パラメーター <see langword="null" /> または <see cref="F:System.String.Empty" />です。  
  
 または  
  
 マスクには、1 つ以上の印刷不可能な文字が含まれています。</exception>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.Clone" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Culture" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (char input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(char input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="input">A <see cref="T:System.Char" /> 書式設定された文字列に追加する値。</param>
        <summary>指定した入力文字を書式設定された文字列の末尾に追加します。</summary>
        <returns>
          <see langword="true" /> 入力文字が正常に追加された場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.Char%29> メソッドは、追加、 `input` 位置の後に、最後に割り当てられた、によって表される文字の値を書式設定された文字列で使用可能な最初の位置、 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> プロパティです。 このメソッドは、次の理由のいずれにも失敗します。  
  
-   入力値 `input`, が印刷可能なまたはマスクの対応する要素は一致しません。  
  
-   書式設定された文字列にゼロ使用できる編集位置があるか、最後の位置を割り当てられた後、使用できる編集位置がありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Add(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">A <see cref="T:System.String" /> 書式設定された文字列に追加される文字値を格納します。</param>
        <summary>書式設定された文字列の末尾に指定した入力文字列内の文字を追加します。</summary>
        <returns>
          <see langword="true" /> 入力文字列からすべての文字が正常に追加された場合それ以外の場合 <see langword="false" /> 追加された文字がないことを示すためにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.String%29> メソッドから文字を追加する、 `input` の文字列を書式設定された文字列の後に利用可能な最初の位置から開始 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>します。 このメソッドは、次の理由のいずれにも失敗します。  
  
-   入力値の文字のいずれかの `input`, は、印刷できませんまたは入力の値がマスクの対応する要素と一致しません。  
  
-   書式設定された文字列に十分な使用できる編集位置後、割り当てられた最後の位置。  
  
 このメソッドは失敗し、追加機能は加えられませんメソッドが返された場合 `false`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" input" /> パラメーターは <see langword="null" />です。</exception>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (char input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(char input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A <see cref="T:System.Char" /> 書式設定された文字列に追加する値。</param>
        <param name="testPosition">文字を追加する試行が行われる場所の書式設定された文字列の 0 から始まる位置。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>書式設定された文字列の末尾に指定した入力文字を追加し、位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 入力文字が正常に追加された場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.Char%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> メソッドを追加しようとしました。、 `input` 位置の後に、最後に割り当てられた、によって表される文字の値を書式設定された文字列で使用可能な最初の位置、 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> プロパティです。 このメソッドは、使用可能なすべての位置が割り当てられている最後の位置の前にいる場合は失敗します。 このメソッドは、次の理由のいずれにも失敗します。  
  
-   入力値 `input`, が印刷可能なまたはマスクの対応する要素は一致しません。  
  
-   書式設定された文字列にゼロ使用できる編集位置があるか、最後の位置を割り当てられた後、使用できる編集位置がありません。  
  
 このメソッドの機能を 1 つのオーバーライド バージョンと同じ <xref:System.Char> パラメーター、 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.Char%29>, 、追加の情報を出力する点が異なります。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public bool Add (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Add(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">A <see cref="T:System.String" /> 書式設定された文字列に追加される文字値を格納します。</param>
        <param name="testPosition">文字を追加する試行が行われる場所の書式設定された文字列の 0 から始まる位置。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>書式設定された文字列の末尾に指定した入力文字列内の文字を追加し、位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 入力文字列からすべての文字が正常に追加された場合それ以外の場合 <see langword="false" /> 追加された文字がないことを示すためにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.String%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> メソッドから文字を追加する、 `input` の文字列を書式設定された文字列の後に利用可能な最初の位置から開始 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A>します。 このメソッドは、次の理由のいずれにも失敗します。  
  
-   入力値の文字のいずれかの `input`, は、印刷できませんまたは入力の値がマスクの対応する要素と一致しません。  
  
-   書式設定された文字列に十分な使用できる編集位置後、割り当てられた最後の位置。  
  
 このメソッドは失敗し、追加機能は加えられませんメソッドが返された場合 `false`します。  
  
 このメソッドの機能を 1 つのオーバーライド バージョンと同じ <xref:System.String> パラメーター、 <xref:System.ComponentModel.MaskedTextProvider.Add%28System.String%29>, 、追加の情報を出力する点が異なります。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>か、プロンプト文字を有効な入力文字として扱う必要があるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ユーザーが入力できる場合 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> コントロールにそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> でプロパティの値を設定、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> コンス トラクターです。  
  
 いなくて <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> は `true`, 、プロンプト文字は使用するために、マスク内の現在の場所に対して有効である必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マスクが、ASCII 文字セット以外の文字を受け入れるかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> ASCII が受け入れられるだけの場合 <see langword="false" /> 場合 <see cref="T:System.ComponentModel.MaskedTextProvider" /> 任意の Unicode 文字を受け入れることができます。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A> でプロパティの値を設定、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> コンス トラクターです。  
  
 場合 `true`, 、<xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A> ASCII 文字セットにユーザー入力を制限します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
      </Docs>
    </Member>
    <Member MemberName="AssignedEditPositionCount">
      <MemberSignature Language="C#" Value="public int AssignedEditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AssignedEditPositionCount" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既に正常に割り当てられて、入力値の編集可能な文字位置の数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 書式設定された文字列の文字の値が既に割り当てられている入力マスク内の位置を編集可能な文字数を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって表される、編集可能な文字の位置の合計数、 <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> の合計と同じプロパティを <xref:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount%2A> と <xref:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="AvailableEditPositionCount">
      <MemberSignature Language="C#" Value="public int AvailableEditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AvailableEditPositionCount" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力値がまだ割り当てられていない入力マスクの編集可能な文字の位置の数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> を編集可能な文字数を表す位置の文字値が割り当てられていません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって表される、編集可能な文字の位置の合計数、 <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> の合計と同じプロパティを <xref:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount%2A> と <xref:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プロンプト文字と置き換えて、書式設定された文字列の編集可能なすべての入力文字をクリアします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Clear> メソッドが編集可能なすべての位置にプロンプト文字を挿入する、書式設定された文字列を再初期化します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear (out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear(valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>プロンプト文字と置き換えて、書式設定された文字列の編集可能なすべての入力文字をクリアし、わかりやすい情報を出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Clear%28System.ComponentModel.MaskedTextResultHint%40%29> メソッドが編集可能なすべての位置にプロンプト文字を挿入する、書式設定された文字列を再初期化します。 オーバーライドされたバージョン パラメーターを受け取らずに同等に機能して <xref:System.ComponentModel.MaskedTextProvider.Clear>, を除き、その他の情報を出力します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.ComponentModel.MaskedTextProvider" /> のコピーを作成します。</summary>
        <returns>
          <see cref="T:System.ComponentModel.MaskedTextProvider" /> このメソッドを作成するオブジェクトをオブジェクトとしてキャストします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Clone%2A> メソッドは、現在の新しいコピーを返します <xref:System.ComponentModel.MaskedTextProvider>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" />
        <altmember cref="T:System.ICloneable" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ローカライズ可能な区切り記号と、入力マスクのプレース ホルダーの値を決定するカルチャを取得します。</summary>
        <value>A <see cref="T:System.Globalization.CultureInfo" /> 入力マスクに関連付けられているカルチャ情報を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Culture%2A> プロパティで設定されて、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> コンス トラクターです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPasswordChar">
      <MemberSignature Language="C#" Value="public static char DefaultPasswordChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property char DefaultPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定のパスワードに使用する文字不可解なユーザー入力を取得します。</summary>
        <value>A <see cref="T:System.Char" /> 既定のパスワードの文字を表します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar%2A> でプロパティが定義されている、 <xref:System.ComponentModel.MaskedTextProvider> クラスをアスタリスク \(\*\) を使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IsPassword" />
      </Docs>
    </Member>
    <Member MemberName="EditPositionCount">
      <MemberSignature Language="C#" Value="public int EditPositionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditPositionCount" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書式設定された文字列の編集可能な位置の数を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> 書式設定された文字列の編集可能な位置の数を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって表される、編集可能な文字の位置の合計数、 <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> プロパティの合計に等しくなければなりません、 <xref:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount%2A> と <xref:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount%2A> プロパティです。 この値には、必須および省略可能な編集可能な文字の両方が含まれています。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="EditPositions">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator EditPositions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IEnumerator EditPositions" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書式設定された文字列の編集可能な位置の新しく作成した列挙子を取得します。</summary>
        <value>
          <see cref="T:System.Collections.IEnumerator" /> 書式設定された文字列の編集可能な位置に列挙をサポートします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセスのたびに、 <xref:System.ComponentModel.MaskedTextProvider.EditPositions%2A> プロパティには、編集可能な位置の一時コレクションが作成、取得した <xref:System.Collections.IEnumerator> で動作します。  
  
 このコレクションは読み取り専用です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindAssignedEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindAssignedEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindAssignedEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">検索を開始する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の後に編集可能な位置を割り当てられた最初の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が見つかりました。 編集可能な位置を割り当て、最初の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された文字列が編集可能な文字で構成してからコピーされたリテラル マスクします。 プロンプト文字の入力が割り当てられている場合は、割り当てが解除される場合は、マスクと有効な入力文字をコピーして編集可能な文字の位置を占めますです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom%2A> 後、指定した位置と検索の方向に割り当てられた最初の文字を検索するメソッドを使用します。 結果をへのパラメーターとして渡すことが、その後、 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> この位置にある割り当てられた値を取得するためのインデクサーです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> と <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom%2A> メソッドは、このメソッドを補完します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindAssignedEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindAssignedEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindAssignedEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPosition">検索を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">検索を終了する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して、指定した位置の間での編集可能な位置を割り当てられた最初の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が見つかりました。 編集可能な位置を割り当て、最初の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された文字列が編集可能な文字で構成してからコピーされたリテラル マスクします。 プロンプト文字の入力が割り当てられている場合は、割り当てが解除される場合は、マスクと有効な入力文字をコピーして編集可能な文字の位置を占めますです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange%2A> 含んでいるため、指定した検索の方向を使用して、2 つの指定した位置の間で割り当てられた最初の文字を検索するメソッドを使用します。 結果をへのパラメーターとして渡すことが、その後、 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> この位置にある割り当てられた値を取得するためのインデクサーです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> と <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange%2A> メソッドは、このメソッドを補完します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">検索を開始する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の後に、最初の編集可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が発生しました。 最初の編集可能な位置の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom%2A> メソッドを使用して、次の割り当てまたは指定した位置にある未割り当ての書式設定された文字列の編集可能な位置を検索します。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> メソッドは、このメソッドの補数です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPosition">検索を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">検索を終了する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の間には、最初の編集可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が発生しました。 最初の編集可能な位置の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange%2A> 含んでいるため、指定した検索の方向を使用して、2 つの指定した位置の間での最初の編集可能な文字を検索するメソッドを使用します。 結果をへのパラメーターとして渡すことが、その後、 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> この位置にある割り当てられた値を取得するためのインデクサーです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> メソッドは、このメソッドの補数です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindNonEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindNonEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindNonEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">検索を開始する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の後に、最初の編集不可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が見つかりました。 リテラルの先頭の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> 指定した位置にある書式設定された文字列の次のリテラル文字を検索するメソッドを使用します。 結果をへのパラメーターとして渡すことが、その後、 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> この位置でリテラル値を取得するためのインデクサーです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom%2A> メソッドは、このメソッドの補数です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindNonEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindNonEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindNonEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPosition">検索を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">検索を終了する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の間には、最初の編集不可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が見つかりました。 リテラルの先頭の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> 含んでいるため、指定した検索の方向を使用して、2 つの指定した位置の間での最初のリテラル文字を検索するメソッドを使用します。 結果をへのパラメーターとして渡すことが、その後、 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> この位置でリテラル値を取得するためのインデクサーです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange%2A> メソッドは、このメソッドの補数です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindUnassignedEditPositionFrom">
      <MemberSignature Language="C#" Value="public int FindUnassignedEditPositionFrom (int position, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindUnassignedEditPositionFrom(int32 position, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="position">検索を開始する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の後に、割り当てられていない最初の編集可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が発生しました。 最初に割り当てられていない編集可能な位置の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された文字列が編集可能な文字で構成してからコピーされたリテラル マスクします。 プロンプト文字の入力が割り当てられている場合は、割り当てが解除される場合は、マスクと有効な入力文字をコピーして編集可能な文字の位置を占めますです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom%2A> 指定した位置と検索の方向の後の最初の \[割り当てられていない文字を検索するメソッドを使用します。 プロンプト文字は、この位置を占有する必要があります。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom%2A> と <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom%2A> メソッドは、このメソッドを補完します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="FindUnassignedEditPositionInRange">
      <MemberSignature Language="C#" Value="public int FindUnassignedEditPositionInRange (int startPosition, int endPosition, bool direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindUnassignedEditPositionInRange(int32 startPosition, int32 endPosition, bool direction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="direction" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startPosition">検索を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">検索を終了する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="direction">A <see cref="T:System.Boolean" /> 検索を示す方向; いずれかの <see langword="true" /> 前方に検索するか、 <see langword="false" /> 後方に検索します。</param>
        <summary>指定した検索の方向を使用して指定した位置の間には、割り当てられていない最初の編集可能な位置の位置を返します。</summary>
        <returns>成功した場合、 <see cref="T:System.Int32" /> が発生しました。 最初に割り当てられていない編集可能な位置の 0 から始まる位置を表すそれ以外の場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式設定された文字列が編集可能な文字で構成してからコピーされたリテラル マスクします。 プロンプト文字の入力が割り当てられている場合は、割り当てが解除される場合は、マスクと有効な入力文字をコピーして編集可能な文字の位置を占めますです。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange%2A> 含んでいるため、指定した検索の方向を使用して、2 つの指定した位置の間で割り当てられていない最初の文字を検索するメソッドを使用します。 プロンプト文字は、この位置を占有する必要があります。  
  
 <xref:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange%2A> と <xref:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange%2A> メソッドは、このメソッドを補完します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetOperationResultFromHint">
      <MemberSignature Language="C#" Value="public static bool GetOperationResultFromHint (System.ComponentModel.MaskedTextResultHint hint);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetOperationResultFromHint(valuetype System.ComponentModel.MaskedTextResultHint hint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hint" Type="System.ComponentModel.MaskedTextResultHint" />
      </Parameters>
      <Docs>
        <param name="hint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値は通常、以前の操作からの出力パラメーターとして取得します。</param>
        <summary>決定するかどうか、指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 成功または失敗を表します。</summary>
        <returns>
          <see langword="true" /> 場合、指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値は成功を表します。 そうしないと、 <see langword="false" /> 場合はエラーを表します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次のメソッド、 <xref:System.ComponentModel.MaskedTextProvider> クラス型のパラメーターに含める <xref:System.ComponentModel.MaskedTextResultHint> メソッドの操作に関する情報を出力に使用される: <xref:System.ComponentModel.MaskedTextProvider.Add%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Clear%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Remove%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Replace%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.Set%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.VerifyChar%2A>, 、および <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A>です。<xref:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint%2A> メソッドがこの値を解釈し、示すブール値を返す、かどうか、 <xref:System.ComponentModel.MaskedTextResultHint> 操作が成功または失敗したことがシグナル状態です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextResultHint" />
      </Docs>
    </Member>
    <Member MemberName="IncludeLiterals">
      <MemberSignature Language="C#" Value="public bool IncludeLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeLiterals" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または書式設定された文字列に、入力マスクのリテラル文字を含める必要があるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 場合は、リテラルが含まれています。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティを呼び出すときに文字列が表示されるかどうかによって決まりますが、 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドです。 これらのプロパティの両方を設定して `false`, 、解析された文字列は、ユーザーが入力した文字だけを表します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
      </Docs>
    </Member>
    <Member MemberName="IncludePrompt">
      <MemberSignature Language="C#" Value="public bool IncludePrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludePrompt" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> ユーザーの書式設定された文字列を表示するときに入力が存在しないことを表すために使用します。</summary>
        <value>
          <see langword="true" /> ここでユーザー入力が指定されませんでした。 位置を表すプロンプト文字を使用する場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティを呼び出すときに文字列が表示されるかどうかによって決まりますが、 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドです。 これらのプロパティの両方を設定して `false`, 、解析された文字列は、ユーザーが入力した文字だけを表します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(char input, int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">挿入する <see cref="T:System.Char" />。</param>
        <param name="position">文字を挿入する書式設定された文字列内の 0 から始まる位置。</param>
        <summary>書式設定された文字列内の指定位置にある指定した文字を挿入します。</summary>
        <returns>
          <see langword="true" /> 挿入が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A> メソッドは、以降のによって指定されている最初の編集位置に文字を挿入、 `pos` パラメーター。 このメソッドは、挿入ポイントを確保するために、挿入された位置を 1 つを使って後に、既存のすべての文字にシフトする `input` 文字です。 次のエラーのいずれかと、挿入を実行しないと、および、メソッドが戻る `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定した位置以降には、書式設定された文字列に編集可能な文字が見つからなかった `pos`します。  
  
-   挿入文字 `input`, 、印刷可能でないか、マスクの対応する要素と一致しないために、有効な入力文字ではありません。  
  
-   既存の文字をシフトできないように、カーソルの右側に使用できる位置はありません。  
  
-   既存の文字をシフトすると、マスクの違反が発生します。  
  
 空 `input` 文字列を引き起こさない変更で、書式設定された文字列しますが、返されますが `true`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (string input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(string input, int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">挿入する <see cref="T:System.String" />。</param>
        <param name="position">入力文字列を挿入する書式設定された文字列内の 0 から始まる位置。</param>
        <summary>書式設定された文字列内で指定した位置にある、指定した文字列を挿入します。</summary>
        <returns>
          <see langword="true" /> 挿入が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A> から各文字を挿入、 `input` 位置にある編集位置に文字列が格納されている `pos` 以降。 ごとに 1 つの位置を使って挿入ポイントの文字が挿入された後、このメソッドは既存のすべての文字をシフトします。 次のエラーのいずれかと、挿入は実行されず、およびメソッドを返します `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   書式設定された文字列で指定した位置の以降に十分な編集可能な文字が存在 `pos`, から文字をすべての挿入、 `input` 文字列。  
  
-   挿入文字の 1 つ以上はない有効な入力文字できないか、対応するマスク要素と一致しないためです。  
  
-   ありません、カーソルの右側に十分な位置を既存の文字をシフトすることはできません。  
  
-   既存の文字をシフトすると、マスクの違反が発生します。 このシフトは、個々 の各文字の挿入中に発生することに注意してください。  
  
 空 `input` 文字列を引き起こさない変更で、書式設定された文字列しますが、返されますが `true`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(char input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">挿入する <see cref="T:System.Char" />。</param>
        <param name="position">文字を挿入する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="testPosition">最後の位置の文字の挿入位置。 メソッドが成功した場合は、それ以外の場合、挿入が失敗した最初の位置します。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 挿入操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>最後の挿入位置と操作の状態を返す、書式設定された文字列内の指定位置にある指定した文字を挿入します。</summary>
        <returns>
          <see langword="true" /> 挿入が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A> メソッドは、以降のによって指定されている最初の編集位置に文字を挿入、 `pos` パラメーター。 このメソッドは、挿入ポイントを確保するために、挿入された位置を 1 つを使って後に、既存のすべての文字にシフトする `input` 文字です。 次のエラーのいずれかと、挿入を実行しないと、および、メソッドが戻る `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定した位置以降には、書式設定された文字列に編集可能な文字が見つからなかった `pos`します。  
  
-   挿入文字 `input`, 、印刷可能でないか、マスクの対応する要素と一致しないために、有効な入力文字ではありません。  
  
-   既存の文字をシフトできないように、カーソルの右側に使用できる位置はありません。  
  
-   既存の文字をシフトすると、マスクの違反が発生します。  
  
 空 `input` 文字列を引き起こさない変更で、書式設定された文字列しますが、返されますが `true`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public bool InsertAt (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool InsertAt(string input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">挿入する <see cref="T:System.String" />。</param>
        <param name="position">入力文字列を挿入する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="testPosition">最後の位置の文字の挿入位置。 メソッドが成功した場合は、それ以外の場合、挿入が失敗した最初の位置します。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 挿入操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>最後の挿入位置と操作の状態を返す、書式設定された文字列内で指定した位置にある、指定した文字列を挿入します。</summary>
        <returns>
          <see langword="true" /> 挿入が成功した場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.InsertAt%2A> から各文字を挿入、 `input` 位置にある編集位置に文字列が格納されている `pos` 以降。 ごとに 1 つの位置を使って挿入ポイントの文字が挿入された後、このメソッドは既存のすべての文字をシフトします。 次のエラーのいずれかと、挿入は実行されず、およびメソッドを返します `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   書式設定された文字列で指定した位置の以降に十分な編集可能な文字が存在 `pos`, から文字をすべての挿入、 `input` 文字列。  
  
-   挿入文字の 1 つ以上はない有効な入力文字できないか、対応するマスク要素と一致しないためです。  
  
-   ありません、カーソルの右側に十分な位置を既存の文字をシフトすることはできません。  
  
-   既存の文字をシフトすると、マスクの違反が発生します。 このシフトは、個々 の各文字の挿入中に発生することに注意してください。  
  
 空 `input` 文字列を引き起こさない変更で、書式設定された文字列しますが、返されますが `true`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="InvalidIndex">
      <MemberSignature Language="C#" Value="public static int InvalidIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 InvalidIndex" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>無効なインデックスの範囲の上限値を取得します。</summary>
        <value>プロバイダーの実装によって決定される無効な最大のインデックスを表す値。 たとえば、有効な最小のインデックスが 0 の場合、このプロパティは\-1 を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.InvalidIndex%2A> プロパティを使用するなど、インデックス操作は、無効な結果を表す、 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> メソッドです。  
  
 プロバイダーを使用して独自に実装すると、このプロパティを使用してインデックスが無効ではなく、ハード コーディングの知識、無効な値であるかを判断する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsAvailablePosition">
      <MemberSignature Language="C#" Value="public bool IsAvailablePosition (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAvailablePosition(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">テストするマスク内の 0 から始まる位置。</param>
        <summary>指定した位置が割り当て可能かどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 書式設定された文字列の指定位置が編集可能が、まだ割り当てられていない場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.IsAvailablePosition%2A> メソッドが返す `true` の次の条件がすべて当てはまる場合にのみ。  
  
-   `pos` パラメーター書式設定された文字列の範囲内では、その値は 0 より大きいと小さいよりも、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定された位置は、編集可能な文字です。  
  
-   文字が割り当てられていないこの位置にします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsEditPosition">
      <MemberSignature Language="C#" Value="public bool IsEditPosition (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsEditPosition(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">テストするマスク内の 0 から始まる位置。</param>
        <summary>指定した位置が編集可能かどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 書式設定された文字列の指定位置が編集できる場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.IsEditPosition%2A> メソッドが返す `true` の両方の次の条件に該当する場合にのみ。  
  
-   `pos` パラメーター書式設定された文字列の範囲内では、その値は 0 より大きいと小さいよりも、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定された位置は、編集可能な文字です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="IsPassword">
      <MemberSignature Language="C#" Value="public bool IsPassword { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPassword" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.IsPassword" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または書式設定された文字列にパスワード保護を適用するかどうかを決定する値を設定します。</summary>
        <value>
          <see langword="true" /> 入力文字列が、パスワードの文字列として処理される場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パスワード保護を開始するには、2 つの方法を使用して、次のいずれか。  
  
-   設定、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティ以外に`null` 値。  
  
-   設定、 <xref:System.ComponentModel.MaskedTextProvider.IsPassword%2A> プロパティを `true`.、設定も、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティを <xref:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar%2A> 値。  
  
 <xref:System.ComponentModel.MaskedTextProvider.IsPassword%2A> によって使用される、 <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> と <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> でそれらを隠れてしまったり、実際の入力文字を表示するかどうかを決定するメソッド <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
      </Docs>
    </Member>
    <Member MemberName="IsValidInputChar">
      <MemberSignature Language="C#" Value="public static bool IsValidInputChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidInputChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
        <summary>指定した文字が有効な入力文字かどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 指定した文字には、有効な入力値が含まれている場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な入力文字には、英字、数字、句読点を記号および空白文字を含めることが、すべての印刷可能な文字が含まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AsciiOnly" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidMaskChar">
      <MemberSignature Language="C#" Value="public static bool IsValidMaskChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidMaskChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
        <summary>指定した文字が有効なマスク文字であるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 指定した文字には、有効なマスク値が含まれている場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効なマスク文字には、英字、数字、句読点を記号および空白文字を含めることが、すべての印刷可能な文字が含まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
      </Docs>
    </Member>
    <Member MemberName="IsValidPasswordChar">
      <MemberSignature Language="C#" Value="public static bool IsValidPasswordChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsValidPasswordChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">テストする <see cref="T:System.Char" /> 値。</param>
        <summary>指定した文字が有効なパスワードの文字であるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 指定した文字には、パスワードの有効な値が含まれている場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効なパスワードの文字には、すべての印刷可能な文字とパスワードの機能を無効にするための null 文字が含まれます。 印刷可能な文字には、英字、数字、句読点を記号および空白文字が含まれます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IsPassword" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public char this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">取得する要素の 0 から始まるインデックス。</param>
        <summary>書式設定された文字列の指定した位置にある要素を取得します。</summary>
        <value>
          <see cref="T:System.Char" /> 書式設定された文字列の指定した位置にあります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Item%2A> プロパティは標準の <xref:System.ComponentModel.MaskedTextProvider> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">
          <paramref name="index" /> 0 未満またはより大きいか等しい、 <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> のマスク。</exception>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositions" />
      </Docs>
    </Member>
    <Member MemberName="LastAssignedPosition">
      <MemberSignature Language="C#" Value="public int LastAssignedPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastAssignedPosition" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マスクに割り当てられている右端の入力文字のマスク内のインデックスを取得します。</summary>
        <value>マスクするには、少なくとも 1 つの入力文字が割り当てられている場合、 <see cref="T:System.Int32" /> 右端のインデックスを含む、割り当てられた位置です。 それ以外の場合、位置が割り当てられていない場合 <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.LastAssignedPosition%2A> プロパティは、入力文字が割り当てられていると、原点に対する、マスクで最も遠い編集位置を表します。 英語など、左から右 \(LTR\) を読む言語の場合これは最も右にある割り当てられた位置です。右から左 \(RTL\) に読む言語の場合、左端の位置になります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>不在であれば、マスクのマスクの長さの修飾子文字を取得します。</summary>
        <value>
          <see cref="T:System.Int32" /> マスクの入力を変更する文字を除く、マスク内の位置の数を格納しています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> プロパティはリテラルと編集可能な文字の両方を含むマスク内の文字の合計数を表します。 値を減算してリテラル文字の数を決定することができます、 <xref:System.ComponentModel.MaskedTextProvider.EditPositionCount%2A> から、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A>です。  
  
 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> また、入力文字、リテラル、およびプロンプト文字を含む書式設定された文字列の長さを説明します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力マスクを取得します。</summary>
        <value>A <see cref="T:System.String" /> フル マスクを含みます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> プロパティで設定されて、 <xref:System.ComponentModel.MaskedTextProvider.%23ctor%2A> コンス トラクターです。 このマスクは、マスク言語によって定義されている唯一の有効な文字を含める必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.#ctor" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.MaskFull" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.Clone" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての必要な入力が書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> 必要なすべての入力がマスクに入力されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.MaskCompleted%2A> プロパティは、必要な入力要素のみをチェックします。 必須およびオプションの入力要素をすべてが入力されているかどうかを確認するのには、使用、 <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A?displayProperty=fullName> のプロパティ、 <xref:System.Windows.Forms.MaskedTextBox> クラスの代わりにします。  
  
 現在の値、 <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> プロパティを判断する書式要素は必須とオプションです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.MaskFull" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての必須およびオプションの入力が書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> すべての必須および省略可能な入力を入力されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力要素が入力されているために必要な場合のみを確認するため、 <xref:System.ComponentModel.MaskedTextProvider.MaskCompleted%2A> プロパティ代わりにします。 現在の値、 <xref:System.ComponentModel.MaskedTextProvider.Mask%2A> プロパティを判断する書式要素は必須とオプションです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.MaskCompleted" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.EditPositionCount" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または実際の入力文字の代わりに使用する文字を設定します。</summary>
        <value>
          <see cref="T:System.Char" /> パスワード文字として使用される値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 機密性の高いユーザー入力、出力操作中に、ユーザーが入力した実際の情報を非表示をとったを勧めします。 場合、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティ以外に設定されて`null` 文字の場合、出力メソッドのなど <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> と <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> に指定したパスワードの文字の入力文字の邪魔になります。 このプロパティを設定 `null` パスワード保護機能を無効になります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ときにこのプロパティの設定は現在のプロンプト文字と同じパスワードの文字が指定されている <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />します。 2 つは、異なる必要があります。</exception>
        <exception cref="T:System.ArgumentException">指定された文字のときにこのプロパティの設定は有効なパスワードの文字によって決定される、 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドです。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IsPassword" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定がないと使用できる編集位置のすべてのユーザー入力を表すために使用する文字。</summary>
        <value>ユーザーに入力を要求するために使用される文字。 既定値はアンダースコア \(\_\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> プロパティで使用されるプロンプト文字を表す、 <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> と <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> を書式設定された入力文字列の現在の状態を表す方法です。 プロンプト文字は、入力値がまだ割り当てられていない編集可能な位置に配置されます。 一部のバージョンの <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドは、の値にも依存、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ときにこのプロパティの設定は、現在のパスワードの文字と同じプロンプト文字が指定されている <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />します。 2 つは、異なる必要があります。</exception>
        <exception cref="T:System.ArgumentException">指定された文字のときにこのプロパティの設定は有効なパスワードの文字によって決定される、 <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドです。</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Remove" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>書式設定された文字列から割り当てられた最後の文字を削除します。</summary>
        <returns>
          <see langword="true" /> 文字が正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Remove%2A> メソッドも何も起こりませんマスクにまだ割り当てられている文字がない場合。  
  
 最後に割り当てられた文字が書式設定された文字列から削除されると、編集可能なマスク文字以降の入力を許可する、その位置はリセットされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="testPosition">文字が実際に削除される書式設定された文字列内の 0 から始まる位置。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>書式設定された文字列から割り当てられた最後の文字を削除し、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 文字が正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Remove%2A> メソッドも何も起こりませんマスクにまだ割り当てられている文字がない場合。  
  
 最後に割り当てられた文字が書式設定された文字列から削除されると、編集可能なマスク文字以降の入力を許可する、その位置はリセットされます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="position">削除する割り当てられた文字の 0 から始まる位置。</param>
        <summary>書式設定された文字列から指定した位置にある割り当てられた文字を削除します。</summary>
        <returns>
          <see langword="true" /> 文字が正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> メソッドも何も起こりません指定削除位置にある割り当てられた文字がない場合。 リテラル文字は、このメソッドの影響を受けません。  
  
 文字が削除されると、マスク内の残り上位の位置の文字が削除によって生成されたギャップを埋めるために左にシフトされます。 入力用には、空いた位置をリセットします。 場合は、文字の移動は、マスクの定義によって妨げられて、削除が発生しないと <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> 返します `false`します。  
  
 このメソッドの呼び出しは、オーバー ロードされた次の呼び出しにまったく同じ <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%28System.Int32%2CSystem.Int32%29> バージョン。  
  
 `RemoveAt(pos, pos);`  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int startPosition, int endPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 startPosition, int32 endPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startPosition">削除する割り当てられた最初の文字の 0 から始まるインデックス。</param>
        <param name="endPosition">削除する割り当てられた最後の文字の 0 から始まるインデックス。</param>
        <summary>書式設定された文字列から指定した位置の間で割り当てられた文字を削除します。</summary>
        <returns>
          <see langword="true" /> 文字が正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> メソッドも何も起こりません指定された削除位置にある割り当てられた文字がない場合。  
  
 文字が削除されると、マスク内の残り上位の位置の文字が削除によって生成されたギャップを埋めるために左にシフトされます。 入力用には、空いた位置をリセットします。 場合は、文字の移動は、マスクの定義によって妨げられて、削除が発生しないと <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> 返します `false`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public bool RemoveAt (int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RemoveAt(int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startPosition">削除する割り当てられた最初の文字の 0 から始まるインデックス。</param>
        <param name="endPosition">削除する割り当てられた最後の文字の 0 から始まるインデックス。</param>
        <param name="testPosition">成功した場合、0 から始まる位置の書式設定された文字列の文字が実際に削除場所です。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>書式設定された文字列から指定した位置の間で割り当てられた文字を削除し、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 文字が正常に削除された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> メソッドも何も起こりません指定された削除位置にある割り当てられた文字がない場合。  
  
 文字が削除されると、マスク内の残り上位の位置の文字が削除によって生成されたギャップを埋めるために左にシフトされます。 入力用には、空いた位置をリセットします。 場合は、文字の移動は、マスクの定義によって妨げられて、削除が発生しないと <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> 返します `false`します。  
  
 このバージョンの <xref:System.ComponentModel.MaskedTextProvider.RemoveAt%2A> メソッドの操作に関する詳細を伝えるために 2 つの追加出力パラメーターを提供します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Char" /> を既存の値を置き換える値。</param>
        <param name="position">置換する最初の編集可能な文字を検索する 0 から始まる位置。</param>
        <summary>指定した位置以降に単一の文字を指定した文字値に置き換えます。</summary>
        <returns>
          <see langword="true" /> 場合は、文字が正常に置き換えられました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.Char%2CSystem.Int32%29> メソッドで指定した位置以降には、書式設定された文字列内の最初の編集可能な位置を探して `pos`します。 編集可能な位置の値が指定した文字に変更がいずれかが見つかった場合 `input`します。 置換は実行しない原因となったエラーの値で、次の条件のいずれかになります `false` を指定します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定した位置以降には、書式設定された文字列に編集可能な文字が見つからなかった `pos`します。  
  
-   置換文字 `input`, 、印刷可能でないか、マスクの対応する要素と一致しないために、有効な入力文字ではありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.String" /> 値が既存の編集可能な文字を置き換えるために使用します。</param>
        <param name="position">置換する最初の編集可能な文字を検索する 0 から始まる位置。</param>
        <summary>指定した文字列で指定された位置で始まる編集可能な文字の範囲を置き換えます。</summary>
        <returns>
          <see langword="true" /> すべての文字が正常に置き換えられている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.String%2CSystem.Int32%29> メソッドで指定した位置以降には、最初の編集可能な位置を探して `pos`します。 この時点より後編集可能な位置があることを前提として機能すると、既存の文字の値は、置換文字列パラメーターの内容に 1 によって置き換えられた `input`します。  
  
 次の条件は、エラーと見なされます。 ときにエラーが発生した、置換は行われませんと <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.String%2CSystem.Int32%29> 返します `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   置換文字列の内容を保持する書式設定された文字列の編集可能な位置がありません。  
  
-   置換文字値のいずれかが無効印刷可能でないか、マスクの対応する要素と一致しないためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Char" /> を既存の値を置き換える値。</param>
        <param name="position">置換する最初の編集可能な文字を検索する 0 から始まる位置。</param>
        <param name="testPosition">成功した場合、0 から始まる位置書式設定された文字列で、最後の文字は実際に置き換えられます。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 置換操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した位置以降に単一の文字を指定した文字値に置き換え、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 場合は、文字が正常に置き換えられました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.Char%2CSystem.Int32%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> メソッドで指定した位置以降には、書式設定された文字列内の最初の編集可能な位置を探して `pos`します。 編集可能な位置の値が指定した文字に変更がいずれかが見つかった場合 `input`します。 次の条件のいずれかの結果、置換は実行しても、なし、エラー状態と値の `false` を指定します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   指定した位置以降には、書式設定された文字列に編集可能な文字が見つからなかった `pos`します。  
  
-   置換文字 `input`, 、印刷可能でないか、マスクの対応する要素と一致しないために、有効な入力文字ではありません。  
  
 だけでなく、戻り値は、このメソッドは、置換操作に関する追加情報を提供する 2 つの出力パラメーターをあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int position, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 position, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.String" /> 値が既存の編集可能な文字を置き換えるために使用します。</param>
        <param name="position">置換する最初の編集可能な文字を検索する 0 から始まる位置。</param>
        <param name="testPosition">成功した場合、0 から始まる位置書式設定された文字列で、最後の文字は実際に置き換えられます。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 置換操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した文字列で指定された位置で始まる編集可能な文字の範囲を置き換え、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> すべての文字が正常に置き換えられている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.String%2CSystem.Int32%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> メソッドで指定した位置以降には、最初の編集可能な位置を探して `pos`します。 この時点より後に、十分な編集可能な位置があることを前提として運用、既存の文字の値は、置換文字列パラメーターの内容に 1 によって置き換えられた `input`します。  
  
 次の条件は、エラーと見なされます。 ときにエラーが発生した、置換は行われませんと <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.String%2CSystem.Int32%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> 返します `false`します。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の書式設定された文字列。  
  
-   置換文字列の内容を保持する書式設定された文字列の編集可能な位置がありません。  
  
-   置換文字値のいずれかが無効印刷可能でないか、マスクの対応する要素と一致しないためです。  
  
 だけでなく、戻り値は、このメソッドは、置換操作に関する追加情報を提供する 2 つの出力パラメーターをあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (char input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(char input, int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.Char" /> を既存の値を置き換える値。</param>
        <param name="startPosition">置換を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">交換が終了する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="testPosition">成功した場合、0 から始まる位置書式設定された文字列で、最後の文字は実際に置き換えられます。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 置換操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した開始位置と終了位置で指定した文字値間の単一の文字を置換し、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> 場合は、文字が正常に置き換えられました。それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%28System.Char%2CSystem.Int32%2CSystem.Int32%2CSystem.Int32%40%2CSystem.ComponentModel.MaskedTextResultHint%40%29> メソッドは、指定した開始日と終了位置間の書式設定された文字列内の最初の編集可能な位置を検索します。 編集可能な位置の値が指定した文字に変更がいずれかが見つかった場合 `input`します。 次の条件のいずれかの結果、置換は実行しても、なし、エラー状態と値の `false` を指定します。  
  
-   `startPos` または `endPos` または書式設定された文字列の開始前にパラメーターがポイントです。  
  
-   編集可能な文字が指定した間隔内に見つかりませんでした。  
  
-   置換文字 `input`, 、印刷可能でないか、マスクの対応する要素と一致しないために、有効な入力文字ではありません。  
  
 だけでなく、戻り値は、このメソッドは、置換操作に関する追加情報を提供する 2 つの出力パラメーターをあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public bool Replace (string input, int startPosition, int endPosition, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Replace(string input, int32 startPosition, int32 endPosition, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="endPosition" Type="System.Int32" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.String" /> 値が既存の編集可能な文字を置き換えるために使用します。</param>
        <param name="startPosition">置換を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="endPosition">交換が終了する書式設定された文字列内の 0 から始まる位置。</param>
        <param name="testPosition">成功した場合、0 から始まる位置書式設定された文字列で、最後の文字は実際に置き換えられます。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 置換操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した開始と終了位置を指定した文字列の編集可能な文字の範囲を置き換え、その後削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> すべての文字が正常に置き換えられている場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Replace%2A> メソッドは、指定した開始日と終了位置間の書式設定された文字列内の最初の編集可能な位置を検索します。 この時点より後に、十分な編集可能な位置があることを前提として運用、既存の文字の値は、置換文字列パラメーターの内容に 1 によって置き換えられた `input`します。  
  
 次の条件は、エラーと見なされます。 ときにエラーが発生した、置換は行われませんと <xref:System.ComponentModel.MaskedTextProvider.Replace%2A> 返します `false`します。  
  
-   `startPos` または `endPos` または書式設定された文字列の開始前にパラメーターがポイントです。  
  
-   置換文字列の内容を保持する書式設定された文字列の編集可能な位置がありません。  
  
-   置換文字値のいずれかが無効印刷可能でないか、マスクの対応する要素と一致しないためです。  
  
 だけでなく、戻り値は、このメソッドは、置換操作に関する追加情報を提供する 2 つの出力パラメーターをあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>プロンプト文字と一致する入力文字を処理する方法を決定する値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 入力されたプロンプト文字をリセットするには、マスク内の現在の編集可能な位置が発生した場合それ以外の場合、 <see langword="false" /> プロンプト文字を通常の入力文字として処理することが示されます。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider> 特殊な方法では、2 つのカテゴリの文字、試すおよびプロンプト文字を扱うことができます。 各入力文字がテストして、マスクに対して通常は、承諾または拒否します。 前提に動作を <xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> プロパティが以外の値に設定されて `null`, 、設定、 <xref:System.ComponentModel.MaskedTextProvider.ResetOnPrompt%2A> プロパティを `true` プロンプト文字の特殊な処理が発生します。 プロンプト文字を追加すると、現在のマスク文字位置をクリアして次の編集可能な文字を進めるには、現在の位置が行われます。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ResetOnPrompt%2A> も優先、 <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> プロパティを次の表に示すようにします。  
  
|<xref:System.ComponentModel.MaskedTextProvider.ResetOnPrompt%2A>|<xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A>|結果の動作|  
|---------------------------------------------------------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|  
|`true`|`true`|プロンプト文字を追加してをリセットするのには、現在のマスク位置になります。 これが既定値です。|  
|`true`|`false`|プロンプト文字を追加してをリセットするのには、現在のマスク位置になります。|  
|`false`|`true`|プロンプト文字は、通常の入力文字として処理されます。|  
|`false`|`false`|プロンプト文字が正しくない、文字を追加しようとしています。 メソッドが失敗します。|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白の入力文字の処理方法を決定する値を取得または設定します。</summary>
        <value>
          <see langword="true" /> リセットするマスク内の現在の編集可能な位置を空白の入力文字が発生した場合それ以外の場合、 <see langword="false" /> に通常の入力文字として処理されるためであることを示します。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider> 特殊な方法では、2 つのカテゴリの文字、スペースおよびプロンプト文字を扱うことができます。 各入力文字がテストして、マスクに対して通常は、承諾または拒否します。 設定、 <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> プロパティを `true` を消去している現在のマスク文字位置と次の編集可能な文字を高度なされている現在の位置になります。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> 役に立ちます、プロンプトの除外を保存したテキストを割り当てるとき、プロンプトが空白で置換されます。 このような文字列の設定を復元する前に <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> に `true` 、入力文字列内のスペースによって占有されている位置にあるプロンプト文字をリセットします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Set(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.String" /> 値の書式設定された文字列を設定するために使用します。</param>
        <summary>指定した入力文字列に書式設定された文字列を設定します。</summary>
        <returns>
          <see langword="true" /> すべての文字が正常に設定された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> メソッドは、書式設定された文字列の既存の内容をクリアし、に対してマスクを適用、 `input` 文字列書式設定された文字列の内容を更新します。  
  
 次の条件は、エラーと見なされます。 エラーが発生したときに書式設定された文字列はそのまま続行し、 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> 返します `false`します。  
  
-   置換文字列の内容を保持する書式設定された文字列の編集可能な位置がありません。  
  
-   置換文字値のいずれかが無効印刷可能でないか、マスクの対応する要素と一致しないためです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" input" /> パラメーターは <see langword="null" />です。</exception>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">
          <see cref="T:System.String" /> 値の書式設定された文字列を設定するために使用します。</param>
        <param name="testPosition">成功した場合、最後の文字が実際に設定されている書式設定された文字列の 0 から始まる位置。それ以外の場合、最初の位置、操作が失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 設定操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した入力文字列に書式設定された文字列を設定し、削除位置とわかりやすい情報を出力します。</summary>
        <returns>
          <see langword="true" /> すべての文字が正常に設定された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> メソッドは、書式設定された文字列の既存の内容をクリアし、に対してマスクを適用、 `input` 文字列書式設定された文字列の内容を更新します。  
  
 次の条件は、エラーと見なされます。 エラーが発生したときに書式設定された文字列はそのまま続行し、 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> 返します `false`します。  
  
-   置換文字列の内容を保持する書式設定された文字列の編集可能な位置がありません。  
  
-   置換文字値のいずれかが無効印刷可能でないか、マスクの対応する要素と一致しないためです。  
  
 このバージョンの <xref:System.ComponentModel.MaskedTextProvider.Set%2A> メソッドの操作に関する詳細を伝えるために 2 つの追加出力パラメーターを提供します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name=" input" /> パラメーターは <see langword="null" />です。</exception>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Add" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Clear" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.InsertAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Remove" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Replace" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはマスク内のリテラル文字の位置を同じ値で上書きできるかどうかを示す値を設定します。</summary>
        <value>
          <see langword="true" /> リテラルを再び追加を許可するにはそれ以外の場合、 <see langword="false" /> リテラル文字を上書きするユーザーを許可しないようにします。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力マスクには、リテラルと編集可能な文字を含めることができます。 しましたが、リテラルの値によって占有されていたマスク内の位置を入力文字を追加しようとしているかどうか、 <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> プロパティは、結果を決定します。  
  
-   このプロパティは、する場合 `true`, 、入力文字を追加するときに、同じ値を持つリテラルを上書きすることはできます。 スラッシュ文字値、たとえば、 `'/'`, 、マスクの 3 番目の位置に追加できる `"00/00/000"`です。  
  
-   このプロパティは、する場合 `false`, 、リテラル文字が占めるマスク位置に任意の値を割り当てることはできません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ToDisplayString">
      <MemberSignature Language="C#" Value="public string ToDisplayString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToDisplayString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>表示可能な形式で書式設定された文字列を返します。</summary>
        <returns>書式設定され <see cref="T:System.String" /> プロンプトとマスク リテラルが含まれます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> メソッドでは、値に関係なく、戻り値では、文字列は必ず、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> または <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティです。 このメソッドは常に表示パスワード文字場合、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティが以外の文字の値に設定されて `null`します。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ToDisplayString%2A> など、関連するユーザー インターフェイス要素を表示する文字列の取得に使用される一般的 <xref:System.Windows.Forms.MaskedTextBox>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.ToString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>割り当てられた文字のすべての値を含む書式設定された文字列を返します。</summary>
        <returns>書式設定され <see cref="T:System.String" /> 割り当てられた文字のすべての値が含まれます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドには、画面の指示との現在の値に従ってリテラルが含まれています、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティそれぞれします。 値を無視して、元の入力文字は常に返す、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。  
  
> [!IMPORTANT]
>  このメソッドでは、通常、パスワードの文字でユーザー インターフェイスで保護されている情報が公開するのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ignorePasswordChar">
          <see langword="true" /> 実際の編集可能な文字を返すそれ以外の場合、 <see langword="false" /> ことを示すために、 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であります。</param>
        <summary>パスワードの文字を含めることも、書式設定された文字列を返します。</summary>
        <returns>書式設定され <see cref="T:System.String" /> リテラル値、プロンプト、および必要に応じてパスワードの文字が含まれます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドには、画面の指示との現在の値に従ってリテラルが含まれています、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティそれぞれします。 場合、 `ignorePasswordChar` パラメーターは `true`, の値を無視して、元の入力文字が返されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。 このパラメーターがある場合 `false`, 、編集可能なユーザー入力を隠す場合にパスワードの文字が使用されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティが以外の値に設定されて `null`します。  
  
> [!IMPORTANT]
>  このメソッドは、パスワードの文字を通常ユーザー インターフェイスで保護されている情報の公開可能性があるためにするのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool includePrompt, bool includeLiterals);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool includePrompt, bool includeLiterals) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="includePrompt">
          <see langword="true" /> 戻り値の文字列にプロンプト文字を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="includeLiterals">
          <see langword="true" /> 戻り値の文字列にリテラル文字を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <summary>文字列を含めることも、書式設定された文字列を返します。</summary>
        <returns>書式設定され <see cref="T:System.String" /> 割り当てられた文字の値のリテラルを含むすべての操作を含む入力が求められます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> メソッドは、画面の指示とリテラルの値に基づいて含まれています。、 `IncludePrompt` と `IncludeLiterals` パラメーターをそれぞれします。 これらのパラメーターがの値をオーバーライドすることに注意してください、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A><xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティです。 このメソッドは常の値を無視して、元の入力文字を返す、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。  
  
> [!IMPORTANT]
>  このメソッドでは、通常、パスワードの文字でユーザー インターフェイスで保護されている情報が公開するのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(int32 startPosition, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="startPosition">出力を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="length">返される文字数。</param>
        <summary>書式設定された文字列の部分文字列を返します。</summary>
        <returns>成功した場合、書式付きの部分文字列 <see cref="T:System.String" />, 、割り当てられた文字のすべての値を含む以外の場合、 <see cref="F:System.String.Empty" /> 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 位置から始まり、書式設定された文字列の部分文字列を返します `startPos` し、その後で指定された文字数など、 `length` パラメーター。 返される文字列には、画面の指示との現在の値に従ってリテラルが含まれています、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティそれぞれします。 返される文字列は、元の入力文字を含む <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティは常に無視されます。  
  
> [!IMPORTANT]
>  このメソッドでは、通常、パスワードの文字でユーザー インターフェイスで保護されている情報が公開するのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 入力パラメーター内に不一致が存在する場合は、次の操作を実行します。  
  
-   場合 `startPos` が小さい以上では、開始位置は 0 に設定します。  
  
-   場合 `startPos` 実際以上 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> 書式設定された文字列の <xref:System.String.Empty> 文字列が返されます。  
  
-   場合 `length` が超える場合、残りの文字数過去残りのみの開始位置の文字が返されます。  
  
-   場合 `length` が 0 未満、 <xref:System.String.Empty> 文字列が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar, int32 startPosition, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ignorePasswordChar">
          <see langword="true" /> 実際の編集可能な文字を返すそれ以外の場合、 <see langword="false" /> ことを示すために、 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であります。</param>
        <param name="startPosition">出力を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="length">返される文字数。</param>
        <summary>パスワードの文字を含めることも、書式設定された文字列の部分文字列を返します。</summary>
        <returns>成功した場合、書式付きの部分文字列 <see cref="T:System.String" />, 、リテラル、プロンプト、および必要に応じてパスワードの文字を含むそれ以外の場合、 <see cref="F:System.String.Empty" /> 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 位置から始まり、書式設定された文字列の部分文字列を返します `startPos` し、その後で指定された文字数など、 `length` パラメーター。 返される文字列には、画面の指示との現在の値に従ってリテラルが含まれています、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティそれぞれします。 場合、 `ignorePasswordChar` パラメーターは `true`, の値を無視して、元の入力文字が返されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。 このパラメーターがある場合 `false`, 、編集可能なユーザー入力を隠す場合にパスワードの文字が使用されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティが以外の値に設定されて `null`します。  
  
> [!IMPORTANT]
>  このメソッドは、パスワードの文字を通常ユーザー インターフェイスで保護されている情報の公開可能性があるためにするのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 入力パラメーター内に不一致が存在する場合は、次の操作を実行します。  
  
-   場合 `startPos` が小さい以上では、開始位置は 0 に設定します。  
  
-   場合 `startPos` 実際以上 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> 書式設定された文字列の <xref:System.String.Empty> 文字列が返されます。  
  
-   場合 `length` が超える場合、残りの文字数過去残りのみの開始位置の文字が返されます。  
  
-   場合 `length` が 0 未満、 <xref:System.String.Empty> 文字列が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool includePrompt, bool includeLiterals, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool includePrompt, bool includeLiterals, int32 startPosition, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="includePrompt">
          <see langword="true" /> 戻り値の文字列にプロンプト文字を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="includeLiterals">
          <see langword="true" /> 戻り値の文字列にリテラル文字を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="startPosition">出力を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="length">返される文字数。</param>
        <summary>文字列を含めることも、書式設定された文字列の部分文字列を返します。</summary>
        <returns>成功した場合、書式付きの部分文字列 <see cref="T:System.String" />, 、割り当てられた文字の値のリテラルおよびプロンプトを含むすべての操作を含むそれ以外の場合、 <see cref="F:System.String.Empty" /> 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 位置から始まり、書式設定された文字列の部分文字列を返します `startPos` し、その後で指定された文字数など、 `length` パラメーター。 返される文字列は、画面の指示とリテラルの値に基づいて含まれています。、 `IncludePrompt` と `IncludeLiterals` パラメーターをそれぞれします。 これらのパラメーターがの値をオーバーライドすることに注意してください、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A><xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティです。 このメソッドは常の値を無視して、元の入力文字を返す、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。  
  
> [!IMPORTANT]
>  このメソッドでは、通常、パスワードの文字でユーザー インターフェイスで保護されている情報が公開するのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 入力パラメーター内に不一致が存在する場合は、次の操作を実行します。  
  
-   場合 `startPos` が小さい以上では、開始位置は 0 に設定します。  
  
-   場合 `startPos` 実際以上 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> 書式設定された文字列の <xref:System.String.Empty> 文字列が返されます。  
  
-   場合 `length` が超える場合、残りの文字数過去残りのみの開始位置の文字が返されます。  
  
-   場合 `length` が 0 未満、 <xref:System.String.Empty> 文字列が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int startPosition, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToString(bool ignorePasswordChar, bool includePrompt, bool includeLiterals, int32 startPosition, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ignorePasswordChar" Type="System.Boolean" />
        <Parameter Name="includePrompt" Type="System.Boolean" />
        <Parameter Name="includeLiterals" Type="System.Boolean" />
        <Parameter Name="startPosition" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ignorePasswordChar">
          <see langword="true" /> 実際の編集可能な文字を返すそれ以外の場合、 <see langword="false" /> ことを示すために、 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であります。</param>
        <param name="includePrompt">
          <see langword="true" /> 戻り値の文字列にプロンプト文字を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <param name="includeLiterals">
          <see langword="true" /> 戻り値の文字列にリテラル文字を返すそれ以外の場合、 <see langword="false" />です。</param>
        <param name="startPosition">出力を開始する、書式設定された文字列内の 0 から始まる位置。</param>
        <param name="length">返される文字数。</param>
        <summary>プロンプト、リテラル、およびパスワードの文字を含めることも、書式設定された文字列の部分文字列を返します。</summary>
        <returns>成功した場合、書式付きの部分文字列 <see cref="T:System.String" />, 、割り当てられた文字の値をリテラル値、プロンプト、およびパスワードの文字を含むすべての操作を含むそれ以外の場合、 <see cref="F:System.String.Empty" /> 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このバージョンのオーバー ロードされた <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 位置から始まり、書式設定された文字列の部分文字列を返します `startPos` し、その後で指定された文字数など、 `length` パラメーター。 返される文字列は、画面の指示とリテラルの値に基づいて含まれています。、 `IncludePrompt` と `IncludeLiterals` パラメーターをそれぞれします。 これらのパラメーターがの値をオーバーライドすることに注意してください、 <xref:System.ComponentModel.MaskedTextProvider.IncludePrompt%2A> と  <xref:System.ComponentModel.MaskedTextProvider.IncludeLiterals%2A> プロパティです。 場合、 `ignorePasswordChar` パラメーターは `true`, の値を無視して、元の入力文字が返されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティです。 このパラメーターがある場合 `false`, 、編集可能なユーザー入力を隠す場合にパスワードの文字が使用されます、 <xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A> プロパティが以外の値に設定されて `null`します。  
  
> [!IMPORTANT]
>  このメソッドは、パスワードの文字を通常ユーザー インターフェイスで保護されている情報の公開可能性があるためにするのには使用は十分注意機密ユーザー データが誤って公開されないようにします。  
  
 <xref:System.ComponentModel.MaskedTextProvider.ToString%2A> 入力パラメーター内に不一致が存在する場合は、次の操作を実行します。  
  
-   場合 `startPos` が小さい以上では、開始位置は 0 に設定します。  
  
-   場合 `startPos` 実際以上 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> 書式設定された文字列の <xref:System.String.Empty> 文字列が返されます。  
  
-   場合 `length` が超える場合、残りの文字数過去残りのみの開始位置の文字が返されます。  
  
-   場合 `length` が 0 未満、 <xref:System.String.Empty> 文字列が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.ToDisplayString" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludePrompt" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="VerifyChar">
      <MemberSignature Language="C#" Value="public bool VerifyChar (char input, int position, out System.ComponentModel.MaskedTextResultHint hint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyChar(char input, int32 position, valuetype System.ComponentModel.MaskedTextResultHint hint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
        <Parameter Name="hint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">テストする <see cref="T:System.Char" /> 値。</param>
        <param name="position">入力文字をテストするマスク内の位置。</param>
        <param name="hint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 操作の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した位置にある指定した文字を正常に設定できなかったかどうかをテストします。</summary>
        <returns>
          <see langword="true" /> 指定した文字が指定した位置の有効な場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.VerifyChar%2A> メソッドは、単一の文字値が書式設定された文字列の指定した位置にある有効な入力を表すかどうかをテストします。 このメソッドは `false` は次の理由。  
  
-   `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の <xref:System.ComponentModel.MaskedTextProvider.Mask%2A>です。  
  
-   文字 `input` によって決定される、有効な入力の文字ではない、 <xref:System.ComponentModel.MaskedTextProvider.IsValidInputChar%2A> メソッドです。  
  
-   `input` 指定位置にあるマスク要素と互換性がない `pos`します。  
  
 現在の値に最後の条件によって異なります、 <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.AsciiOnly%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.PasswordChar%2A>, 、<xref:System.ComponentModel.MaskedTextProvider.PromptChar%2A> と <xref:System.ComponentModel.MaskedTextProvider.SkipLiterals%2A> プロパティです。  
  
 マスクの入力文字列全体をテストするには、いずれかを使用、 <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> メソッド代わりにします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
      </Docs>
    </Member>
    <Member MemberName="VerifyEscapeChar">
      <MemberSignature Language="C#" Value="public bool VerifyEscapeChar (char input, int position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyEscapeChar(char input, int32 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Char" />
        <Parameter Name="position" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="input">テストする <see cref="T:System.Char" /> 値。</param>
        <param name="position">入力文字をテストするマスク内の位置。</param>
        <summary>指定した位置にある指定した文字をエスケープはかどうかをテストします。</summary>
        <returns>
          <see langword="true" /> 指定した位置に指定した文字をエスケープすると場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字があると言われます *エスケープ* 有効な入力は、これが、書式設定された文字列内の位置に割り当てられていないかどうか。 次の 3 つのカテゴリに年秋の文字をエスケープします。  
  
-   場合に、プロンプト文字をエスケープ、 <xref:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput%2A> プロパティは `true`です。  
  
-   マスクで、そのリテラルと同じ値がある場合、入力文字はエスケープ、 <xref:System.ComponentModel.MaskedTextProvider.SkipLiterals%2A> プロパティは `true`です。  
  
-   場合に、空白文字をエスケープ、 <xref:System.ComponentModel.MaskedTextProvider.ResetOnSpace%2A> プロパティは `true`です。  
  
 <xref:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar%2A> メソッドが返すことも `false` 場合、 `pos` パラメーターが 0 より大きいか小さい、 <xref:System.ComponentModel.MaskedTextProvider.Length%2A> の <xref:System.ComponentModel.MaskedTextProvider.Mask%2A>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.VerifyString" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.SkipLiterals" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public bool VerifyString (string input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyString(string input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">テストする <see cref="T:System.String" /> 値。</param>
        <summary>指定した文字列が正常に設定できるかどうかをテストします。</summary>
        <returns>
          <see langword="true" /> 指定した文字列が有効な入力を表している場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> 適用、 `input` 実際にテストする、書式設定された文字列を変更せず、マスク文字列かどうか `input` で、対応する有効 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> 操作します。 このメソッドが戻るも `true` 入力が場合 `null` または長さ 0 です。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
      </Docs>
    </Member>
    <Member MemberName="VerifyString">
      <MemberSignature Language="C#" Value="public bool VerifyString (string input, out int testPosition, out System.ComponentModel.MaskedTextResultHint resultHint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VerifyString(string input, int32 testPosition, valuetype System.ComponentModel.MaskedTextResultHint resultHint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.TypeConverter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.String" />
        <Parameter Name="testPosition" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="resultHint" Type="System.ComponentModel.MaskedTextResultHint&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">テストする <see cref="T:System.String" /> 値。</param>
        <param name="testPosition">成功した場合、最後の文字の 0 から始まる位置が実際にテストします。それ以外の場合、最初の位置、テストが失敗しました。 出力パラメーター。</param>
        <param name="resultHint">A <see cref="T:System.ComponentModel.MaskedTextResultHint" /> テスト演算の結果を簡潔に説明します。 出力パラメーター。</param>
        <summary>指定した文字列が正常に設定することが、位置とわかりやすい情報を出力かどうかをテストします。</summary>
        <returns>
          <see langword="true" /> 指定した文字列が有効な入力を表している場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> 適用、 `input` 実際にテストする、書式設定された文字列を変更せず、マスク文字列かどうか `input` で、対応する有効 <xref:System.ComponentModel.MaskedTextProvider.Set%2A> 操作します。 このメソッドが戻るも `true` 入力が場合 `null` または長さ 0 です。  
  
 このバージョンの <xref:System.ComponentModel.MaskedTextProvider.VerifyString%2A> メソッドの操作に関する詳細を伝えるために 2 つの追加出力パラメーターを提供します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.ComponentModel.MaskedTextProvider.Set" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Mask" />
        <altmember cref="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)" />
        <altmember cref="P:System.ComponentModel.MaskedTextProvider.Length" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>入力文字または入力文字列を書式設定された文字列に追加します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Set">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した入力文字列に書式設定された文字列を設定します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="InsertAt">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字または文字列を書式設定された文字列内の特定の位置に挿入します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書式設定された文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="VerifyString">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列が正常に設定できるかどうかをテストします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Clear">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書式設定された文字列からすべての入力文字をクリアします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RemoveAt">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書式設定された文字列から 1 つまたは複数の割り当てられた文字を削除します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Replace">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書式設定された文字列内の 1 つまたは複数の編集可能な文字を指定した文字に置き換えます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>書式設定された文字列から割り当てられた最後の文字を削除します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>