<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>非同期メソッドの呼び出しをサポートするクラスの同時実行の管理を提供します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 クラスが」の手順に従って、非同期動作を提供する必要があるかどうか、 [Event\-based Asynchronous Pattern](http://msdn.microsoft.com/ja-jp/792aa8da-918b-458e-b154-9836b97735f3), 、さまざまな同時実行管理の問題が発生します。 これは特に、スレッドまたはアプリケーション モデルに適切なコンテキストでイベント ハンドラーは呼び出されることを確認するための要件 \(たとえば、Windows フォーム アプリケーション、 [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] アプリケーションやコンソール アプリケーション\)。<xref:System.ComponentModel.AsyncOperationManager> でサポートされているすべてのアプリケーション モデルを正しく実行しているクラスを作成する便利な手段を提供、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]です。  
  
 <xref:System.ComponentModel.AsyncOperationManager> クラスに 1 つのメソッド <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, 、これによって、 <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> 特定の非同期タスクの期間の追跡に使用できます。<xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> タスクが完了すると、クライアントに通知するタスクを使用することができます。 操作を終了せず、進行状況の更新およびインクリメンタル結果を投稿することにも使用できます。  
  
 非同期クラスの実装の詳細については、次を参照してください。 [Implementing the Event\-based Asynchronous Pattern](http://msdn.microsoft.com/ja-jp/43402d19-8d30-426d-8785-1a4478233bfa)します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.ComponentModel.AsyncOperationManager> を任意のアプリケーション モデルに対して非同期操作をサポートするクラスを作成するクラス。 素数であるかどうかを決定する数値をテストするクラスを実装する方法を示します。 別のスレッド上で実行するため、この計算は時間がかかり、できます。 進行状況レポート、インクリメンタル結果、完了通知は処理によって、 <xref:System.ComponentModel.AsyncOperation> クラスにより、クライアントのイベント ハンドラーが適切なスレッドまたはコンテキストで呼び出されます。  
  
 完全なコードの一覧については、次を参照してください。 [How to: Implement a Component that Supports the Event\-based Asynchronous Pattern](http://msdn.microsoft.com/ja-jp/3c1aa4d4-da87-4a03-b812-3d167b8c57cf)します。 クライアントの完全なコード一覧については、次を参照してください。 [How to: Implement a Client of the Event\-based Asynchronous Pattern](http://msdn.microsoft.com/ja-jp/21a858c1-3c99-4904-86ee-0d17b49804fa)します。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">特定の非同期操作で、タスク ID などのクライアントの状態の一部を関連付けるために使用するオブジェクト。</param>
        <summary>返します。、 <see cref="T:System.ComponentModel.AsyncOperation" /> の特定の非同期操作の期間を追跡します。</summary>
        <returns>
          <see cref="T:System.ComponentModel.AsyncOperation" /> 非同期メソッド呼び出しの期間の追跡に使用することできます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> メソッドが返される、 <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> 特定の非同期操作の期間を追跡し、操作が完了するときにアラートが、アプリケーション モデルを使用することができます。 また、進行状況の更新およびインクリメンタル結果を post 操作を終了せずに使用することができます。<xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> 適切なスレッドまたはアプリケーション モデルのコンテキストにこれらの呼び出しを正しくマーシャ リングされます。  
  
 イベント ベースの非同期パターンをサポートするクラスを実装する場合、クラスを呼び出す必要があります <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> たびに、 *MethodName*`Async` メソッドが呼び出されます。 メソッドを呼び出すクライアント アプリケーションを使用できる、 `userSuppliedState` 非同期操作の実行中に発生するイベントを区別するために各呼び出しを一意に識別するパラメーターです。  
  
> [!CAUTION]
>  クライアント コードは、一意の値を提供する必要があります、 `userSuppliedState` パラメーター。 タスク Id が一意ではないが、この実装の進行状況とその他のイベントを正しくレポートをあります。 コードが一意でないタスク id をチェックし、スロー、 <xref:System.ArgumentException?displayProperty=fullName> いずれかが検出された場合。  
  
 コードを追跡するすべて <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> によって返される <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> 対応する基になる非同期操作でオブジェクトを使用して更新プログラムを公開し、操作を終了します。 この追跡を渡すことと同じくらい簡単にすることができます、 <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> デリゲートの間でパラメーターとして。 クラスのより高度なデザインのコレクションを維持できます <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> オブジェクト、タスクが開始されると、オブジェクトを追加し、タスクが完了したか取り消されたときに削除します。 このアプローチを使用すると確認する一意な `userSuppliedState` パラメーター数値を使用して、複数の同時呼び出しをサポートするクラスを使用する場合に使用する必要がある方法です。  
  
 非同期クラスの実装の詳細については、次を参照してください。 [Implementing the Event\-based Asynchronous Pattern](http://msdn.microsoft.com/ja-jp/43402d19-8d30-426d-8785-1a4478233bfa)します。  
  
   
  
## 例  
 次のコード例では、使用方法を示します、 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> を作成する方法、 <xref:System.ComponentModel.AsyncOperation?displayProperty=fullName> の非同期操作の継続時間を追跡します。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.AsyncOperationManager> クラスです。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または非同期操作の同期コンテキストを設定します。</summary>
        <value>非同期操作の同期コンテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定の実装は、フリー スレッドの実装です。  
  
 スレッドを設定する必要があります、 <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> プロパティを `null` オブジェクトをフリー スレッドのファクトリを解放が完了したら、そうしないと、ファクトリが破棄されることはありません。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">for setting the synchronization context. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Associated state:</permission>
      </Docs>
    </Member>
  </Members>
</Type>