<Type Name="BackgroundWorker" FullName="System.ComponentModel.BackgroundWorker">
  <TypeSignature Language="C#" Value="public class BackgroundWorker : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BackgroundWorker extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.BackgroundWorker" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("DoWork")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>別個のスレッドに対する操作を実行します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.BackgroundWorker> クラスでは、別の専用スレッドで操作を実行することができます。 ダウンロードやデータベースのトランザクションのように時間のかかる操作には、ユーザー インターフェイス \(UI\) するように見えますが、実行中に応答を停止した可能性があります。 レスポンシブ UI と、このような操作に関連付けられている長時間の遅延に直面した場合に、 <xref:System.ComponentModel.BackgroundWorker> クラスには、便利なソリューションが用意されています。  
  
 バック グラウンドで時間のかかる操作を実行するには作成、 <xref:System.ComponentModel.BackgroundWorker> し、操作が完了すると、操作と信号の進行状況を報告するイベントをリッスンします。 作成することができます、 <xref:System.ComponentModel.BackgroundWorker> プログラムを使用してからフォームにドラッグすることができますか、 **コンポーネント** のタブ、 **ツールボックス**します。 作成する場合、 <xref:System.ComponentModel.BackgroundWorker> Windows フォーム デザイナーでコンポーネント トレイに表示され、そのプロパティがプロパティ ウィンドウに表示されます。  
  
 バック グラウンド操作を設定するに追加のイベント ハンドラー、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベントです。 このイベント ハンドラーで、時間のかかる操作を呼び出します。 操作を開始するには、呼び出す <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>します。 更新の進行状況の通知を受信するには、処理、 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントです。 操作が完了したときに、通知を受信、処理、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントです。  
  
> [!NOTE]
>  すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーです。 代わりに、ユーザー インターフェイスを介しての通信、 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> と <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベントです。  
>   
>  <xref:System.ComponentModel.BackgroundWorker> イベント間でマーシャ リングされない <xref:System.AppDomain> 境界です。 使用しないでください、 <xref:System.ComponentModel.BackgroundWorker> コンポーネントを 1 つ以上のマルチ スレッド操作を実行 <xref:System.AppDomain>します。  
  
 バック グラウンド操作では、パラメーターが必要とする場合は、呼び出す <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> 、パラメーターを使用します。 内部、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーから渡されるパラメーターを抽出する、 <xref:System.ComponentModel.DoWorkEventArgs.Argument%2A?displayProperty=fullName> プロパティです。  
  
 <xref:System.ComponentModel.BackgroundWorker> の詳細については、「[How to: Run an Operation in the Background](http://msdn.microsoft.com/ja-jp/5b56e2aa-dc05-444f-930c-2d7b23f9ad5b)」を参照してください。  
  
   
  
## 例  
 次のコード例に示しますの基本、 <xref:System.ComponentModel.BackgroundWorker> 時間のかかる操作を非同期的に実行するためのクラスです。 次の図は、出力の例を示します。  
  
 7bf6cd81-46ad-484e-8f0b-f80ad722a8a1  
  
 このコードを実行するには、Windows フォーム アプリケーションを作成します。 追加、 <xref:System.Windows.Forms.Label> コントロールという名前 `resultLabel` し、2 つ追加 <xref:System.Windows.Forms.Button> コントロール `startAsyncButton` と `cancelAsyncButton`です。 作成 <xref:System.Windows.Forms.Control.Click> 両方のボタンのイベント ハンドラーです。**コンポーネント** \] タブ、ツールボックスの追加、 <xref:System.ComponentModel.BackgroundWorker> という名前のコンポーネント `backgroundWorker1`します。 作成 <xref:System.ComponentModel.BackgroundWorker.DoWork>, 、<xref:System.ComponentModel.BackgroundWorker.ProgressChanged>, 、および <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> のイベント ハンドラー、 <xref:System.ComponentModel.BackgroundWorker>です。 フォームのコードで、既存のコードを次のコードに置き換えます。  
  
 [!code-csharp[System.ComponentModel.BackgroundWorkerSimple\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/cs/form1.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorkerSimple\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.componentmodel.backgroundworkersimple/vb/form1.vb#1)]  
  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker> 時間のかかる操作を非同期的に実行するためのクラスです。 次の図は、出力の例を示します。  
  
 ed939910-ee2b-40ad-a94b-767fd78afec5  
  
 操作は、選択のフィボナッチ数を計算し、計算処理の進行の更新の進行状況を報告をキャンセルする保留中の計算を許可します。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#1)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#1)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BackgroundWorker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.ComponentModel.BackgroundWorker" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクター、 <xref:System.ComponentModel.BackgroundWorker>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中のバック グラウンド操作のキャンセルを要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> 保留中のバック グラウンド操作を終了する要求を送信し、設定、 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティを `true`します。  
  
 呼び出すと <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A>, 、ワーカー メソッドは、営業案件を停止してその実行を終了します。 Worker のコードを定期的にチェック、 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティに設定されているかどうかを `true`します。  
  
> [!CAUTION]
>  注意してくださいをで自分のコード、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 取り消し要求が出されていると、ポーリング ループを検出できない場合、イベント ハンドラーがその作業を完了可能性があります <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> に設定されている `true`します。 ここで、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグ <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> で、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベント ハンドラーは設定されません `true`, キャンセル要求が行われた場合でも、します。 このような状況と呼ばれる、 *競合状態* マルチ スレッド プログラミングの一般的な問題になるとします。 マルチ スレッド デザインの詳細については、問題を参照してください [Managed Threading Best Practices](http://msdn.microsoft.com/ja-jp/e51988e7-7f4b-4646-a06d-1416cee8d557)します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> メソッドを非同期の \(「バック グラウンド」\) 操作をキャンセルします。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#4)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#4)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" /> は <see langword="false" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="CancellationPending">
      <MemberSignature Language="C#" Value="public bool CancellationPending { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancellationPending" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.CancellationPending" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションがバック グラウンド操作のキャンセルを要求したかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> アプリケーションがバック グラウンド操作のキャンセルを要求した場合それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> は `true`, 、 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> でメソッドが呼び出されて、 <xref:System.ComponentModel.BackgroundWorker>です。  
  
 このプロパティは、ワーカー スレッド、定期的に確認する必要がありますが使用するためもの <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> に設定されているときに、バック グラウンド操作を中止し、 `true`します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> プロパティ クエリを <xref:System.ComponentModel.BackgroundWorker> のキャンセル状態です。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoWork">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.DoWorkEventHandler DoWork;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.DoWorkEventHandler DoWork" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.DoWork" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.DoWorkEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" /> が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出したときに、このイベントが発生した、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドです。 これは、可能性のある時間のかかる操作を実行する操作を開始する場所です。  
  
 は、コード、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーを定期的に確認する必要があります、 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> とプロパティ値の場合は、操作の中止 `true`します。 これが発生したときに設定できます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> フラグ <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> に `true`, 、および <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> のフラグを設定 <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> で、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベント ハンドラーに設定されます `true`します。  
  
> [!CAUTION]
>  注意してくださいをで自分のコード、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 取り消し要求が出されていると、ポーリング ループを検出できない場合、イベント ハンドラーがその作業を完了可能性があります <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> に設定されている `true`します。 ここで、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグ <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> で、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベント ハンドラーは設定されません `true`, キャンセル要求が行われた場合でも、します。 このような状況と呼ばれる、 *競合状態* マルチ スレッド プログラミングの一般的な問題になるとします。 マルチ スレッド デザインの詳細については、問題を参照してください [Managed Threading Best Practices](http://msdn.microsoft.com/ja-jp/e51988e7-7f4b-4646-a06d-1416cee8d557)します。  
  
 操作は、結果を生成する結果を割り当てることができます、 <xref:System.ComponentModel.DoWorkEventArgs.Result%2A?displayProperty=fullName> プロパティです。 これが使用できる、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 内のイベント ハンドラー、 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティです。  
  
 操作が、コードが処理しない例外が発生した場合、 <xref:System.ComponentModel.BackgroundWorker> 、例外をキャッチし、これに、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> として公開されているイベント ハンドラー、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> の <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName>です。 内の位置にデバッガーが中断 Visual Studio デバッガーの下で実行している場合、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 未処理の例外が発生したイベント ハンドラーです。 1 つ以上にしていれば <xref:System.ComponentModel.BackgroundWorker>, は参照しないでこれらはいずれも、直接この結合は、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーの特定のインスタンスを <xref:System.ComponentModel.BackgroundWorker>します。 代わりに、アクセスするには、 <xref:System.ComponentModel.BackgroundWorker> キャストして、 `sender` 内のパラメーター、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーです。  
  
 すべてのユーザー インターフェイス オブジェクトを操作しないように注意する必要があります、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーです。 代わりに、ユーザー インターフェイスを介しての通信、 <xref:System.ComponentModel.BackgroundWorker> イベントです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 非同期操作を開始するイベントです。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#5)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#5)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.ComponentModel.BackgroundWorker" /> 非同期操作を実行しています。</summary>
        <value>
          <see langword="true" />, 、場合、 <see cref="T:System.ComponentModel.BackgroundWorker" /> 非同期操作を実行している。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.BackgroundWorker> を呼び出すときに、非同期操作を開始する <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>です。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.ComponentModel.BackgroundWorker.IsBusy%2A> の完了を待つプロパティ、 <xref:System.ComponentModel.BackgroundWorker> 操作します。 このコード例で説明されている例の一部である [How to: Download a File in the Background](http://msdn.microsoft.com/ja-jp/9b7bc5ae-051c-4904-9720-18f6667388bd)です。  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
        <altmember cref="T:System.EventArgs" />
        <altmember cref="Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      </Docs>
    </Member>
    <Member MemberName="OnDoWork">
      <MemberSignature Language="C#" Value="protected virtual void OnDoWork (System.ComponentModel.DoWorkEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoWork(class System.ComponentModel.DoWorkEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.DoWorkEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnProgressChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnProgressChanged (System.ComponentModel.ProgressChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnProgressChanged(class System.ComponentModel.ProgressChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.ProgressChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.OnProgressChanged%2A> メソッドを非同期操作の進行状況を報告します。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.AsyncOperationManager> クラスです。  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager\#24](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#24)]
 [!code-vb[System.ComponentModel.AsyncOperationManager\#24](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#24)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnRunWorkerCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnRunWorkerCompleted (System.ComponentModel.RunWorkerCompletedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRunWorkerCompleted(class System.ComponentModel.RunWorkerCompletedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.RunWorkerCompletedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。 [NIB: イベントを発生させる](http://msdn.microsoft.com/ja-jp/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)します。  
  
 <xref:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>When overriding <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)" /> method so that registered delegates receive the event.</para>
        </block>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      </Docs>
    </Member>
    <Member MemberName="ProgressChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ProgressChangedEventHandler ProgressChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ProgressChangedEventHandler ProgressChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.ProgressChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ProgressChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>発生したときに <see cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" /> が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出したときに、このイベントが発生した、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドです。  
  
 イベント処理の詳細については、次を参照してください。 [NIB: イベントの利用](http://msdn.microsoft.com/ja-jp/01e4f1bc-e55e-413f-98c7-6588493e5f67)します。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> をユーザーに非同期操作の進行状況を報告するイベントです。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#7)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#7)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="percentProgress">0 ~ 100 が完了したら、バック グラウンド操作の割合です。</param>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バック グラウンド操作が、進行状況を報告する場合を呼び出すことができます、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントです。<xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティの値である必要があります `true`, 、または <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> をスローする <xref:System.InvalidOperationException>です。  
  
 合計のタスクが完了した割合としてバック グラウンド操作の進行状況を測定するための適切な方法を実装することの責任です。  
  
 呼び出し、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドは非同期でありすぐに戻ります。<xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベント ハンドラーが作成されたスレッドで実行、 <xref:System.ComponentModel.BackgroundWorker>です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> ユーザーする非同期操作の進行状況を報告するメソッドです。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#8)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#8)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが <see langword="false" /> に設定されている。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReportProgress">
      <MemberSignature Language="C#" Value="public void ReportProgress (int percentProgress, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReportProgress(int32 percentProgress, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentProgress" Type="System.Int32" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="percentProgress">0 ~ 100 が完了したら、バック グラウンド操作の割合です。</param>
        <param name="userState">渡される状態オブジェクト <see cref="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />します。</param>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バック グラウンド操作が、進行状況を報告する場合を呼び出すことができます、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントです。<xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティの値にする必要があります `true`, 、または <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> をスローする <xref:System.InvalidOperationException>です。  
  
 合計のタスクが完了した割合としてバック グラウンド操作の進行状況を測定するための適切な方法を実装することの責任です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> ユーザーする非同期操作の進行状況を報告するメソッドです。 このコード例が示されている例の一部は、 <xref:System.Windows.Forms.ToolStripProgressBar> クラスです。  
  
 [!code-csharp[System.Windows.Forms.ToolStripProgressBar\#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/CS/form1.cs#10)]
 [!code-vb[System.Windows.Forms.ToolStripProgressBar\#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ToolStripProgressBar/VB/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" /> プロパティが <see langword="false" /> に設定されている。</exception>
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バック グラウンド操作の実行を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> を非同期的に実行する操作を開始する要求を送信します。 要求が処理されるときに、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 、さらに、バック グラウンド操作の実行を開始するイベントが発生します。  
  
 バック グラウンド操作が既に実行されている場合は、呼び出す <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> は、 <xref:System.InvalidOperationException>です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドを非同期操作を開始します。 説明されている例の一部である [How to: Download a File in the Background](http://msdn.microsoft.com/ja-jp/9b7bc5ae-051c-4904-9720-18f6667388bd)です。  
  
 [!code-csharp[System.ComponentModel.BackgroundWorker.IsBusy\#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/CS/Form1.cs#2)]
 [!code-vb[System.ComponentModel.BackgroundWorker.IsBusy\#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker.IsBusy/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" /> です。</exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerAsync">
      <MemberSignature Language="C#" Value="public void RunWorkerAsync (object argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RunWorkerAsync(object argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="argument" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="argument">実行されるバック グラウンド操作で使用するためのパラメーター、 <see cref="E:System.ComponentModel.BackgroundWorker.DoWork" /> イベント ハンドラーです。</param>
        <summary>バック グラウンド操作の実行を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> を非同期的に実行する操作を開始する要求を送信します。 要求が処理されるときに、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 、さらに、バック グラウンド操作の実行を開始するイベントが発生します。  
  
 操作は、パラメーターを必要とする場合、としてを指定できます、 `argument` パラメーターを <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A>します。  
  
 バック グラウンド操作が既に実行されている場合は、呼び出す <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> は、 <xref:System.InvalidOperationException>です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerAsync%2A> メソッドを非同期操作を開始します。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#3)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#3)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.ComponentModel.BackgroundWorker.IsBusy" /> は <see langword="true" /> です。</exception>
        <altmember cref="E:System.ComponentModel.BackgroundWorker.DoWork" />
      </Docs>
    </Member>
    <Member MemberName="RunWorkerCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.RunWorkerCompletedEventHandler RunWorkerCompleted" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.RunWorkerCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バック グラウンド操作が完了したが取り消された、または例外が発生したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このイベントが発生したときに、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーを返します。  
  
 操作が正常に完了してでその結果が割り当てられているかどうか、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーを通じて結果にアクセスすることができます、 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティです。  
  
 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A> の <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> 操作によって例外がスローされたことを示します。  
  
 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> の <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> バック グラウンド操作によってキャンセル要求が処理するかどうかを示します。 場合では、コード、 <xref:System.ComponentModel.BackgroundWorker.DoWork> イベント ハンドラーをチェックして、キャンセル要求を検出した、 <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> フラグと設定、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のフラグを設定 <xref:System.ComponentModel.DoWorkEventArgs?displayProperty=fullName> に `true`, 、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグ <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> に設定されます `true`します。  
  
> [!CAUTION]
>  注意してくださいをで自分のコード、 <xref:System.ComponentModel.BackgroundWorker.DoWork> 取り消し要求が出されていると、ポーリング ループを検出できない場合、イベント ハンドラーがその作業を完了可能性があります <xref:System.ComponentModel.BackgroundWorker.CancellationPending%2A> に設定されている `true`します。 ここで、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> フラグ <xref:System.ComponentModel.RunWorkerCompletedEventArgs?displayProperty=fullName> で、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベント ハンドラーは設定されません `true`, キャンセル要求が行われた場合でも、します。 このような状況と呼ばれる、 *競合状態* マルチ スレッド プログラミングの一般的な問題になるとします。 マルチ スレッド デザインの詳細については、問題を参照してください [Managed Threading Best Practices](http://msdn.microsoft.com/ja-jp/e51988e7-7f4b-4646-a06d-1416cee8d557)します。  
  
 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> イベント ハンドラーは常に確認する必要があります、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Error%2A?displayProperty=fullName> と <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A?displayProperty=fullName> プロパティにアクセスする前に、 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティです。 例外が発生した場合、または操作が取り消された場合へのアクセス、 <xref:System.ComponentModel.RunWorkerCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティは例外を発生させます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.ComponentModel.BackgroundWorker.RunWorkerCompleted> 非同期操作の結果を処理するイベントです。 このコード例が示されている例の一部は、 <xref:System.ComponentModel.BackgroundWorker> クラスです。  
  
 [!code-cpp[System.ComponentModel.BackgroundWorker\#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CPP/fibonacciform.cpp#6)]
 [!code-csharp[System.ComponentModel.BackgroundWorker\#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/CS/fibonacciform.cs#6)]
 [!code-vb[System.ComponentModel.BackgroundWorker\#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.BackgroundWorker/VB/fibonacciform.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkerReportsProgress">
      <MemberSignature Language="C#" Value="public bool WorkerReportsProgress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerReportsProgress" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.ComponentModel.BackgroundWorker" /> 進行状況を報告することができます。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.ComponentModel.BackgroundWorker" /> 進行状況の更新をサポートしています。 そうしないと <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.ComponentModel.BackgroundWorker.WorkerReportsProgress%2A> プロパティを `true` する場合は、 <xref:System.ComponentModel.BackgroundWorker> 進行状況の更新をサポートするためにします。 このプロパティが `true`, 、ユーザー コードを呼び出すことができます、 <xref:System.ComponentModel.BackgroundWorker.ReportProgress%2A> メソッドを <xref:System.ComponentModel.BackgroundWorker.ProgressChanged> イベントです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WorkerSupportsCancellation">
      <MemberSignature Language="C#" Value="public bool WorkerSupportsCancellation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WorkerSupportsCancellation" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.ComponentModel.BackgroundWorker" /> 非同期のキャンセルをサポートします。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.ComponentModel.BackgroundWorker" /> キャンセルをサポートしています。 そうしないと <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 設定、 <xref:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation%2A> プロパティを `true` する場合は、 <xref:System.ComponentModel.BackgroundWorker> 、取り消しをサポートします。 このプロパティが `true`, 、呼び出すことができます、 <xref:System.ComponentModel.BackgroundWorker.CancelAsync%2A> バック グラウンド操作を中断するメソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ComponentModel.BackgroundWorker.CancelAsync" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReportProgress">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="E:System.ComponentModel.BackgroundWorker.ProgressChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RunWorkerAsync">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バック グラウンド操作の実行を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>