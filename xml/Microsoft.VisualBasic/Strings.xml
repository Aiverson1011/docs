<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Strings" /> モジュールには、文字列操作を実行するための手順が含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、Visual Basic 言語のキーワードと文字列操作のランタイム ライブラリ メンバーをサポートします。  
  
   
  
## 例  
 次の例は、空白で文字列を分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な<see langword="Char" />または<see langword="String" />式。 場合<c>String</c>は、<see langword="String" />式、文字列の最初の文字のみが入力として使用されます。 場合<c>String</c>は<see langword="Nothing" />文字が含まれていないか、<see cref="T:System.ArgumentException" />エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット \(SBCS\) の値の 255\-32768 ~ 32767 の 2 バイト文字セット \(DBCS\) の値を指定できます。  
  
 `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット \(DBCS\) アプリケーションの文字列に変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な<see langword="Char" />または<see langword="String" />式。 場合<c>String</c>は、<see langword="String" />式、文字列の最初の文字のみが入力として使用されます。 場合<c>String</c>は<see langword="Nothing" />文字が含まれていないか、<see cref="T:System.ArgumentException" />エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット \(SBCS\) の値の 255\-32768 ~ 32767 の 2 バイト文字セット \(DBCS\) の値を指定できます。  
  
 `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット \(DBCS\) アプリケーションの文字列に変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な<see langword="Char" />または<see langword="String" />式。 場合<c>String</c>は、<see langword="String" />式、文字列の最初の文字のみが入力として使用されます。 場合<c>String</c>は<see langword="Nothing" />文字が含まれていないか、<see cref="T:System.ArgumentException" />エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット \(SBCS\) の値の 255\-32768 ~ 32767 の 2 バイト文字セット \(DBCS\) の値を指定できます。  
  
 `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット \(DBCS\) アプリケーションの文字列に変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">必須です。 任意の有効な<see langword="Char" />または<see langword="String" />式。 場合<c>String</c>は、<see langword="String" />式、文字列の最初の文字のみが入力として使用されます。 場合<c>String</c>は<see langword="Nothing" />、文字が含まれていないか、<see cref="T:System.ArgumentException" />エラーが発生します。</param>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <returns>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Asc`返します、*コード ポイントが*、または、入力文字の文字コード。 0 ~ 1 バイト文字セット \(SBCS\) の値の 255\-32768 ~ 32767 の 2 バイト文字セット \(DBCS\) の値を指定できます。  
  
 `AscW`入力文字の Unicode コード ポイントを返します。 これは、0 ~ 65535 です。 返される値は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。  
  
> [!NOTE]
>  `AscB`以前のバージョンの Visual Basic の関数が文字ではなく、1 バイトのコードを返します。 2 バイト文字セット \(DBCS\) のアプリケーションの文字列に変換するため、主に使用されます。 Visual Basic 2005 のすべての文字列は Unicode では、および`AscB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Asc`を返す関数を`Integer`文字の各文字列の最初の文字に対応するコードです。  
  
 [!code-vb[VbVbalrFunctions\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須です。<see langword="Integer" />式を表す、 <c>code point</c>、または文字の文字コード。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、\-29183 は、 `Short` \+36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr`使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=fullName>セット \(DBCS\) の現在のスレッドが 1 バイト文字セット \(SBCS\) または 2 バイト文字を使用してかどうかを決定する名前空間。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字\-32768 から 65535 までの DBCS 文字を指定できます。  
  
 返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。  
  
 `ChrW`受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 \-32768 ~\-1 の値では、\+32768 \+65535 ~ の範囲内の値として扱われる同じです。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット \(DBCS\) アプリケーションの文字列に変換するため、主に使用されます。 Visual Basic と .NET Framework のすべての文字列は Unicode では、および`ChrB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Chr`関数を指定した文字コードに関連付けられている文字を返します。  
  
 [!code-vb[VbVbalrStrings\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" />&lt; 0\="" or\=""&gt; 255 for <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">必須です。<see langword="Integer" />式を表す、 <c>code point</c>、または文字の文字コード。</param>
        <summary>指定された文字コードに対応する文字を返します。</summary>
        <returns>指定された文字コードに対応する文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 受け入れられるように非対称範囲`CharCode`記憶域の違いを補正、`Short`と`Integer`です。 たとえば、\-29183 は、 `Short` \+36353 が、`Integer`です。 これには、Visual Basic 6.0 との互換性も容易になります。  
  
 `Chr`使用して、<xref:System.Text.Encoding>クラス内で、<xref:System.Text?displayProperty=fullName>セット \(DBCS\) の名前空間を現在のスレッドが 1 バイト文字セット \(SBCS\) または 2 バイト文字を使用するかどうかを判断します。 その`CharCode`コードとして、適切な一連のポイントします。 範囲は 0 ~ 255 の SBCS 文字\-32768 から 65535 までの DBCS 文字を指定できます。  
  
 返される値に含まれている現在のスレッドのコード ページによって異なります、<xref:System.Globalization.TextInfo.ANSICodePage%2A>のプロパティ、<xref:System.Globalization.TextInfo>クラス内で、<xref:System.Globalization>名前空間。 取得することができます<xref:System.Globalization.TextInfo.ANSICodePage%2A>を指定して`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`です。  
  
 `ChrW`受け取る`CharCode`unicode コード ポイント。 範囲は、現在のスレッドのカルチャおよびコード ページの設定に依存しません。 \-32768 ~\-1 の値には、\+32768 \+65535 ~ の範囲内の値として同じが扱われます。  
  
 0 ~ 31 の数値では、標準の ASCII コードと同じです。 たとえば、`Chr(10)`ライン フィード文字を返します。  
  
> [!NOTE]
>  `ChrB`以前のバージョンの Visual Basic での関数は、1 バイトを返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列を変換するため、主に使用されます。 Visual Basic と .NET Framework でのすべての文字列が Unicode がおよび`ChrB`は現在サポートされていません。  
  
   
  
## 例  
 次の例では、`Chr`指定された文字コードに関連付けられている文字を返す関数。  
  
 [!code-vb[VbVbalrStrings\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" />&lt; \-32768\="" or\=""&gt;の 65535<see langword="ChrW" />です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須です。 検索する文字列の 1 次元の配列。</param>
        <param name="Match">必須です。 検索する文字列。</param>
        <param name="Include">省略可能です。<see langword="Boolean" /> 追加または除外する部分文字列を返すかどうかを示す値 <c>Match</c>です。 場合 <c>Include</c> は <see langword="True" />, 、 <see langword="Filter" /> 関数を含む配列のサブセットを返します <c>Match</c> 、部分文字列とします。 場合 <c>Include</c> は <see langword="False" />, 、 <see langword="Filter" /> 関数が含まれない配列のサブセットを返します <c>Match</c> 、部分文字列とします。</param>
        <param name="Compare">省略可能です。 使用する文字列比較の種類を表す数値を指定します。 値は、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 \(<see langword="String" />\) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 \(<see langword="String" />\) 配列のサブセットを含むゼロ ベースの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 該当しない文字の場合 `Match` 内で見つかった `Source`, 、 `Filter` 関数は、空の配列を返します。 エラーが発生 `Source` に設定されている `Nothing` か、1 次元配列ではありません。  
  
 によって返される配列、 `Filter` 関数には、一致した項目のみの要素が含まれています。  
  
 `Compare` 引数は、次の値を持つことができます。  
  
|||  
|-|-|  
|定数|説明|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|  
|`CompareMethod.Text`|テキストの比較を実行します。|  
  
   
  
## 例  
 この例では、使用、 `Filter` 関数です。  
  
 [!code-vb[VbVbalrStrings\#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> <see langword="Nothing" /> か、1 次元配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">必須です。 検索する文字列の 1 次元の配列。</param>
        <param name="Match">必須です。 検索する文字列。</param>
        <param name="Include">省略可能です。<see langword="Boolean" /> 追加または除外する部分文字列を返すかどうかを示す値 <c>Match</c>です。 場合 <c>Include</c> は <see langword="True" />, 、 <see langword="Filter" /> 関数を含む配列のサブセットを返します <c>Match</c> 、部分文字列とします。 場合 <c>Include</c> は <see langword="False" />, 、 <see langword="Filter" /> 関数が含まれない配列のサブセットを返します <c>Match</c> 、部分文字列とします。</param>
        <param name="Compare">省略可能です。 使用する文字列比較の種類を表す数値を指定します。 値は、「設定」を参照してください。</param>
        <summary>指定されたフィルター条件に基づいた文字列 \(<see langword="String" />\) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <returns>指定されたフィルター条件に基づいた文字列 \(<see langword="String" />\) 配列のサブセットを含むゼロ ベースの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 該当しない文字の場合 `Match` 内で見つかった `Source`, 、 `Filter` 関数は、空の配列を返します。 エラーが発生 `Source` に設定されている `Nothing` か、1 次元配列ではありません。  
  
 によって返される配列、 `Filter` 関数には、一致した項目のみの要素が含まれています。  
  
 `Compare` 引数は、次の値を持つことができます。  
  
|||  
|-|-|  
|定数|説明|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|  
|`CompareMethod.Text`|テキストの比較を実行します。|  
  
   
  
## 例  
 この例では、使用、 `Filter` 関数です。  
  
 [!code-vb[VbVbalrStrings\#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> <see langword="Nothing" /> か、1 次元配列ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 任意の有効な式。</param>
        <param name="Style">省略可能です。 有効な名前付き、またはユーザー定義形式 <see langword="String" /> 式です。</param>
        <summary>書式指定文字列 \(<see langword="String" />\) 式に含まれる指示に従って書式設定された文字列を返します。</summary>
        <returns>書式指定文字列 \(<see langword="String" />\) 式に含まれる指示に従って書式設定された文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.String.Format%2A?displayProperty=fullName> メソッドには、同様の機能も用意されています。  
  
 ローカライズされていない数値文字列の書式を設定する場合は、希望どおりの外観が得られるようにするユーザー定義の数値書式を使用する必要があります。  
  
 指定せず、数値の書式設定しようとすると `Style`, 、 `Format` 関数と同様の機能を提供する、 `Str` 機能することは、国際的に注意してください。 ただし、正の数値を使用して文字列として書式設定された、 `Format` 関数値の符号用に予約された先頭にスペースを含めないで; を使用して、変換、 `Str` 関数は、先頭のスペースを保持します。  
  
## 別の数値にそれぞれ別の形式  
 数値の書式のユーザー定義の式は、セミコロン \(;\) で区切られた 3 つのセクションを 1 つからができます。 場合、 `Style` の引数、 `Format` が含まれている定義済み数値書式のいずれか、1 つだけのセクションを使用します。  
  
|||  
|-|-|  
|使用する場合|これは、結果です。|  
|1 つのセクションのみ|書式指定式は、すべての値に適用されます。|  
|2 つ|最初のセクションが正の値とゼロに適用されます。2 つ目は、負の値に適用されます。|  
|3 つ|最初のセクションが正の値に適用、負の値に適用される 2 つ目および 3 つ目がゼロに適用されます。|  
  
 次の例は 2 つのセクション: 1 つ目は、正の値とゼロの形式を定義2 番目のセクションでは、負の値の形式を定義します。 以降、 `Style` の引数、 `Format` 関数は文字列を受け取り、引用符で囲まれています。  
  
 [!code-vb[VbVbalrStrings\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 連続した間にセミコロンを含める場合は、正の値の形式を使用して、欠落したセクションが印刷されます。 たとえば、次の形式が正の値が表示され、負の値の最初のセクションで、形式を使用および表示 `Zero` 値が 0 の場合。  
  
 [!code-vb[VbVbalrStrings\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## 定義済み数値書式  
 次の表に、定義済みの数値書式の名前を示します。 これらと名前で使用できます、 `Style` の引数、 `Format` 関数。  
  
|||  
|-|-|  
|形式名|説明|  
|`General Number`、`G`、または `g`|桁区切り記号なしに数値を表示します。<br /><br /> たとえば、 `Format(&H3FA, "g")` 返します `1018`します。|  
|`Currency`、`C`、または `c`|必要であれば、数値を桁区切り記号を表示します。桁区切り記号の右側に 2 桁の数字を表示します。 出力は、システムのロケール設定に基づきます。<br /><br /> たとえば、 `Format(1234567, "c")` 返します `$1,234,567.00`します。|  
|`Fixed`、`F`、または `f`|桁区切り記号の右側に少なくとも 1 つの数値を左および 2 桁の数字を表示します。<br /><br /> たとえば、 `Format(1234567, "f")` 返します `1234567.00`します。|  
|`Standard`、`N`、または `n`|桁区切り記号の右側には、番号で桁区切り記号、左側に 1 つ以上の桁、2 桁の数字を表示します。<br /><br /> たとえば、 `Format(1234567, "n")` 返します `1,234,567.00`します。|  
|`Percent`|右側にすぐに追加されたパーセント記号 \(%\) の 100 倍して番号が表示されます。 桁区切り記号の右側に 2 桁の数字を常に表示されます。<br /><br /> たとえば、 `Format(0.4744, "Percent")` 返します `47.44%`します。|  
|`P`, 、または `p`|右側に 1 つのスペースにより追加されたパーセント記号 \(%\) の 100 倍して桁区切り記号と番号が表示されます。 桁区切り記号の右側に 2 桁の数字を常に表示されます。<br /><br /> たとえば、 `Format(0.80345, "p")` 返します `80.35 %`します。|  
|`Scientific`|2 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、 `Format(1234567, "Scientific")` 返します `1.23E+06`します。|  
|`E`, 、または `e`|6 つの有効桁数を提供する標準の科学的表記法を使用します。<br /><br /> たとえば、 `Format(1234567, "e")` 返します `1.234567e+006`します。|  
|`D`, 、または `d`|数値を 10 進数 \(基数 10\) の書式による数値の値を含む文字列として表示します。 このオプションは整数型のサポート \(`Byte`, 、`Short`, 、`Integer`, 、`Long`\) のみです。<br /><br /> たとえば、 `Format(&H7F, "d")` 返します `127`します。|  
|`X`, 、または `x`|数値を 16 進数 \(基数 16\) の書式による数値の値を含む文字列として表示します。 このオプションは整数型のサポート \(`Byte`, 、`Short`, 、`Integer`, 、`Long`\) のみです。<br /><br /> たとえば、 `Format(127, "x")` 返します `7f`します。|  
|`Yes/No`|表示 `No` 番号が 0、それ以外の場合は、表示 `Yes`します。<br /><br /> たとえば、 `Format(0, "Yes/No")` 返します `No`します。|  
|`True/False`|表示 `False` 番号が 0、それ以外の場合は、表示 `True`します。<br /><br /> たとえば、 `Format(1, "True/False")` 返します `True`します。|  
|`On/Off`|表示 `Off` 番号が 0、それ以外の場合は、表示 `On`します。<br /><br /> たとえば、 `Format(1, "On/Off")` 返します `On`します。|  
  
### スマート デバイス開発者用メモ  
 `Yes/No`, 、`True/False`, 、および `On/Off` 形式はサポートされません。  
  
## ユーザー定義の数値書式  
 次の表に、ユーザー定義の数値書式の作成に使用できる文字を示します。 これらは、ビルドに使用することがあります、 `Style` の引数、 `Format` 関数。  
  
|||  
|-|-|  
|文字|説明|  
|なし|書式なしで数値を表示します。|  
|\(`0`\)|桁プレース ホルダーです。 1 桁の数字または 0 が表示されます。 式では、書式指定文字列での 0 に対応する位置に数字が含まれる場合を表示します。それ以外の場合、その位置に 0 が表示されます。<br /><br /> 数値が桁数がよりも少ない中のゼロ \(小数点のどちらかの側\) のフォーマット式の先頭または末尾のゼロは表示されます。 数値の小数点区切り文字の右側に多くの桁数がフォーマット式の中で小数点の右側に 0 であり、ラウンドに数値の小数点以下桁数が 0 に多い。 数値の小数点区切り文字の左側の桁数がフォーマット式の中で小数点の左側に 0 であり、変更せずに追加の数字が表示されます。|  
|\(`#`\)|桁プレース ホルダーです。 1 桁の数字または何も表示されます。 式の位置に数字がある場合に、 `#` 書式指定文字列に文字が表示されます。 それ以外の場合、その位置に何も表示されます。<br /><br /> この記号のような機能、 `0` 桁プレース ホルダー、数値の桁数がよりは少ないが先頭と末尾のゼロが表示されていない点を除いて `#` 書式指定式の中で小数点の両側の文字。|  
|\(`.`\)|小数点のプレース ホルダーです。 小数点のプレース ホルダーは、桁区切り記号の右側と左側に表示する桁数を決定します。 フォーマット式にのみ含まれている場合 `#` この記号の左側に文字; 1 は、小数点区切り文字で始まるよりも小さい数値です。 小数部の先頭にゼロを表示するには、桁区切り記号の左側に最初の桁プレース ホルダーとして 0 を使用します。 一部のロケールでは、コンマは、小数点区切り文字として使用されます。 書式付き出力で小数点のプレース ホルダーとして使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、小数点のプレース ホルダーとしてコンマを使用するロケールを使用している場合でもはの形式で小数点のプレース ホルダーとして、期間を使用する必要があります。 書式指定文字列は、ロケールに適した書式で表示されます。|  
|\(`%`\)|パーセント プレース ホルダーです。 式は、100 を乗算します。 パーセント記号 \(`%`\) 書式指定文字列の表示位置に挿入されます。|  
|\(`,`\)|桁区切り記号。 桁区切り記号は、4 桁以上、小数点区切り文字の左側にある数値の中で数百から数千ものを区切ります。 桁区切り記号の標準的な使用が指定されているかどうか、形式に桁プレース ホルダーで囲まれた、桁区切り記号が含まれます \(`0` または `#`\)。<br /><br /> \(10 進数を指定するかどうか\)、小数点区切り文字のまたは一番左にすぐに、桁区切り記号文字の文字列で「して拡張する数を 1000 で除算して必要に応じて丸める.」 500 以上 1,000 より小さい数として表示されます `1`, 、および番号として 500 が表示されるよりも小さい `0`します。 1 個の要素ごとに 1,000 の他の要素で 2 つ隣接する桁区切り記号の位置がこのをスケールします。<br /><br /> 桁区切り記号の左側にすぐに以外の任意の位置または文字列の右端の位置に複数の区切り記号は、桁区切り記号の使用を指定するものとして扱われます。 一部のロケールでは、一定期間は、桁区切り記号として使用されます。 書式付き出力で桁区切り記号として使用される実際の文字は、システムによって認識される数値書式によって異なります。 したがって、場合でも、桁区切り記号としてピリオドを使用するロケールでは、書式で桁区切り記号としてコンマを使用する必要があります。 書式指定文字列は、ロケールに適した書式で表示されます。<br /><br /> たとえば、次の 3 つの次の書式指定文字列があるとします。<br /><br /> -   `"#,0."`, 、文字列「100,000, 000」として数値の 1億の書式を設定する桁区切り記号。<br />-   `"#0,."`, 、を使用して 1,000 分の 1 の因子倍する数値の 1億を「100000」文字列として書式設定します。<br />-   `"#,0,."`, 、どの桁区切り記号と文字列「100,000」として数値の 1億を書式設定を 1,000 分の 1。|  
|\(`:`\)|時刻の区切り記号。 一部のロケールで時刻の区切り記号を表すその他の文字を使用ことがあります。 時刻の区切り記号は、時間、分、および時刻の値が書式設定されるときの秒を区切ります。 書式付き出力の時刻の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|\(`/`\)|日付の区切り記号。 一部のロケールで日付の区切り記号を表すその他の文字を使用ことがあります。 日付の区切り記号は、日付の書式設定の日、月、および年を区切ります。 書式付き出力の日付の区切り記号として使用される実際の文字は、システム設定によって決まります。|  
|\(`E-``E+``e-``e+`\)|指数書式。 フォーマット式に、少なくとも 1 つの桁プレース ホルダーが含まれているかどうか \(`0` または `#`\) の左側に `E-`, 、`E+`, 、`e-`, 、または `e+`, 、指数形式、番号が表示されると `E` または `e` 、数値と指数の間に挿入します。 左側の桁プレース ホルダーの数は、指数部の桁数を決定します。 使用 `E-` または `e-` 負の指数の横にマイナス記号を挿入します。 使用 `E+` または `e+` を負の指数の横にマイナス記号、正の指数の横にあるプラス記号を配置します。 正しく書式設定をこの記号の右側の桁プレース ホルダーを追加することもあります。|  
|`-` `+` `$` \( \)|リテラル文字です。 これらの文字が書式指定文字列で入力したとおりに表示されます。 挙げられているのいずれかの以外の文字を表示するには、先頭に円記号 \(`\`\) または二重引用符で囲みます \(""\) です。|  
|\(`\`\)|書式指定文字列では、次の文字を表示します。 リテラル文字として特別な意味を持つ文字を表示するには、先頭に円記号 \(`\`\)。 円記号自体は表示されません。 円記号の使用は、次の文字を二重引用符で囲むことと同じです。 円記号を表示するには、2 つの円記号を使用 \(`\\`\)。<br /><br /> リテラル文字が日付の書式設定と、時刻の形式の文字として表示できない文字の例 \(`a`, 、`c`, 、`d`, 、`h`, 、`m`, 、`n`, 、`p`, 、`q`, 、`s`, 、`t`, 、`w`, 、`y`, 、`/`, と `:`\)、数値の書式設定文字 \(`#`, 、`0`, 、`%`, 、`E`, 、`e`, 、コンマ、および期間\)、および文字列の書式設定文字 \(`@`, 、`&`, 、`<`, 、`>`, と `!`\)。|  
|\(`"``ABC``"`\)|二重引用符内の文字列が表示されます \(""\) です。 コード内からスタイル引数に文字列を含める、使用する必要があります `Chr(34)` テキストを囲みます \(`34` 引用符 \("\) の文字コードに示します\)。|  
  
### 古いコードの例  
 次の表には、数値のフォーマット式サンプルにはが含まれています。 \(これらの例は、システムのロケール設定が英語 \(米国\) であるとします\)最初の列には書式指定文字列が含まれています、 `Style` の引数、 `Format` 関数は、他の列を書式設定されたデータに列見出しで指定された値がある場合、結果の出力が含まれています。  
  
|||||  
|-|-|-|-|  
|書式設定 \(`Style`\)|「5」パーセント形|「\-5」として書式設定|「0.5」パーセント形|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## 定義済み日付\/時刻書式  
 次の表に、定義済みの日付\/時刻書式名を示します。 これらの名前でのスタイル引数として使用することがあります、 `Format` 関数。  
  
|||  
|-|-|  
|形式名|説明|  
|`General Date`, 、または `G`|日付\/時刻が表示されます。 たとえば、`3/12/2008 11:07:31 AM` のようにします。 日付の表示は、アプリケーションの現在のカルチャ値によって決定されます。|  
|`Long Date`、`Medium Date`、または `D`|現在のカルチャの長い日付形式に従って日付を表示します。 たとえば、`Wednesday, March 12, 2008` のようにします。|  
|`Short Date`, 、または `d`|現在のカルチャの短い日付形式を使用して日付を表示します。 たとえば、`3/12/2008` のようにします。<br /><br /> `d` 文字は、ユーザー定義の日付形式で日付を表示します。|  
|`Long Time`、`Medium Time`、または `T`|現在のカルチャの長い日付の書式は時間が表示されます。通常、時間、分、秒数が含まれます。 たとえば、`11:07:31 AM` のようにします。|  
|`Short Time` または `t`|現在のカルチャの短い形式の時刻の形式を使用して時間を表示します。 たとえば、`11:07 AM` のようにします。<br /><br /> `t` 文字表示 `AM` または `PM` 値ユーザー定義の時刻形式で 12 時間制を使用するロケール。|  
|`f`|長い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示されます。 たとえば、`Wednesday, March 12, 2008 11:07 AM` のようにします。|  
|`F`|長い日付と現在のカルチャの書式に従って長い時間が表示されます。 たとえば、`Wednesday, March 12, 2008 11:07:31 AM` のようにします。|  
|`g`|短い形式の日付と短い形式の時刻を現在のカルチャの書式に従って表示されます。 たとえば、`3/12/2008 11:07 AM` のようにします。|  
|`M`, `m`|月と日付の日を表示します。 たとえば、`March 12` のようにします。<br /><br /> `M` 文字は、ユーザー定義の日付書式で月を表示します。`m` 文字は、ユーザー定義の時刻書式で分を表示します。|  
|`R`, `r`|に従って日付の書式を <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> プロパティです。 たとえば、`Wed, 12 Mar 2008 11:07:31 GMT` のようにします。 書式設定された日付は、日付と時刻の値を調整できません。 呼び出しの前に GMT に日付\/時刻値を調整する必要があります、 `Format` 関数です。|  
|`s`|日付と時刻を並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12T11:07:31` のようにします。<br /><br /> `s` 文字は、ユーザー定義の時刻書式で秒を表示します。|  
|`u`|日付と時刻を GMT 並べ替え可能なインデックスとして書式設定します。 たとえば、`2008-03-12 11:07:31Z` のようにします。|  
|`U`|日付と時間の長い日付と長い時刻 GMT で書式設定します。 たとえば、`Wednesday, March 12, 2008 6:07:31 PM` のようにします。|  
|`Y`, `y`|年と月と日付の書式を設定します。 たとえば、`March, 2008` のようにします。<br /><br /> `Y` と `y` 文字は、ユーザー定義の日付書式で年を表示します。|  
  
 アプリケーションの現在のカルチャ情報の詳細については、次を参照してください。 [How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)します。  
  
## ユーザー定義の日付\/時刻書式  
 次の表では、ユーザー定義の日付\/時刻書式の作成に使用できる文字を示します。 異なり以前のバージョンの [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)], 、これらの形式の文字は大文字小文字を区別します。  
  
|||  
|-|-|  
|文字|説明|  
|\(`:`\)|時刻の区切り記号。 一部のロケールで時刻の区切り記号を表すその他の文字を使用ことがあります。 時刻の区切り記号は、時間、分、および時刻の値が書式設定されるときの秒を区切ります。 書式付き出力の時刻の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャ値によって決まります。|  
|\(`/`\)|日付の区切り記号。 一部のロケールで日付の区切り記号を表すその他の文字を使用ことがあります。 日付の区切り記号は、日付の書式設定の日、月、および年を区切ります。 書式付き出力の日付の区切り記号として使用される実際の文字は、アプリケーションの現在のカルチャによって決まります。|  
|\(`%`\)|次の文字が後続の文字を小文字に関係なく 1 文字書式として読み込まれることを示すために使用されます。 ユーザー定義の書式として 1 文字書式を読み取ることを示すためにも使用されます。 その他の詳細については、下記を参照してください。|  
|`d`|0 を付けない数値で日が表示されます \(たとえば、 `1`\)。 使用 `%d` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`dd`|数値に先行ゼロで日付が表示されます \(たとえば、 `01`\)。|  
|`ddd`|省略形として、曜日を表示します \(たとえば、 `Sun`\)。|  
|`dddd`|完全な名前の日付を表示します \(たとえば、 `Sunday`\)。|  
|`M`|0 を付けない数値で月を表示 \(たとえば、年 1 月は、として表されます。 `1`\)。 使用 `%M` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`MM`|数値に先行ゼロで、月が表示されます \(たとえば、 `01/12/01`\)。|  
|`MMM`|省略形として、月が表示されます \(たとえば、 `Jan`\)。|  
|`MMMM`|完全な月名として月を表示します \(たとえば、 `January`\)。|  
|`gg`|期間\/時代 \(年号\) の文字列が表示されます \(たとえば、 `A.D.`\)。|  
|`h`|12 時間制を使用して 0 を付けない数値で時間を表示します \(たとえば、 `1:15:15 PM`\)。 使用 `%h` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`hh`|数値に先行するゼロを 12 時間制を使用して時間を表示します \(たとえば、 `01:15:15 PM`\)。|  
|`H`|24 時間制を使用して 0 を付けない数値で時間を表示します \(たとえば、 `1:15:15`\)。 使用 `%H` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`HH`|24 時間制を使用してゼロで始まる数値で時間を表示します \(たとえば、 `01:15:15`\)。|  
|`m`|0 を付けない数値で分を表示します \(たとえば、 `12:1:15`\)。 使用 `%m` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`mm`|数値に先行ゼロとして分を表示します \(たとえば、 `12:01:15`\)。|  
|`s`|0 を付けない数値で秒を表示します \(たとえば、 `12:15:5`\)。 使用 `%s` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`ss`|ゼロで始まる数値で秒を表示します \(たとえば、 `12:15:05`\)。|  
|`f`|秒の小数部を表示します。 たとえば `ff` が表示されますが 1\/100 秒、 `ffff` 秒の部分の 1\/10000 を表示します。 最大 7 を使用することが `f` ユーザー定義の書式シンボルです。 使用 `%f` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`t`|12 時間制を使用し、表示、大文字 `A` 正午前に、の時間に大文字が表示されます `P` 正午と午後 11 時 59 分の間の時間の使用 `%t` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`tt`|12 時間制を使用するロケールでは、表示、大文字 `AM` 正午前に、の時間を表示、大文字 `PM` 正午と午後 11 時 59 分間正午<br /><br /> 24 時間制を使用するロケールでは、何も表示されません。|  
|`y`|0 を付けない年数 \(0 ~ 9\) を表示します。 使用 `%y` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`yy`|該当する場合は、先行ゼロ付きの 2 桁の数値書式で年を表示します。|  
|`yyy`|4 桁の数値書式で年を表示します。|  
|`yyyy`|4 桁の数値書式で年を表示します。|  
|`z`|先行ゼロなしのタイム ゾーン オフセットを表示します \(たとえば、 `-8`\)。 使用 `%z` 場合、これは、ユーザー定義の数値書式で唯一の文字。|  
|`zz`|先行ゼロ付きのタイム ゾーン オフセットを表示します \(たとえば、 `-08`\)|  
|`zzz`|完全なタイムゾーン オフセットが表示されます \(たとえば、 `-08:00`\)|  
  
### 古いコードの例  
 ユーザー定義の日付と時刻の形式の例を次に `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|||  
|-|-|  
|形式|表示|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### スマート デバイス開発者用メモ  
 デバイスの最小時間精度は、デバイスの製造元によって決定されます。 時間の分解能が十分に粗い場合、 `f` 書式指定文字がそのデバイス上で実行するときは 0 を返します。  
  
   
  
## 例  
 `Format` の書式指定とユーザー定義の書式指定の両方を使って値の書式を指定する、`String` 関数のさまざまな使用例を次に示します。 日付の区切り記号 \(`/`\)、時刻の区切り記号 \(`:`\)、および午前\/午後を示す文字 \(`t` および `tt`\) について、システムで実際に表示される書式は、コードが使用するロケール設定によって決まります。 時刻と日付を開発環境で表示する場合は、コード ロケールの短い時刻書式と短い日付書式が使用されます。  
  
> [!NOTE]
>  24 時間制を使用するロケールでは、午前\/午後を示す記号 \(`t` および `tt`\) では何も表示されません。  
  
 [!code-vb[VbVbalrStrings\#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式設定する式。</param>
        <param name="NumDigitsAfterDecimal">省略可能です。 小数点の右側に表示する桁数を示す数値。 既定値は、\-1 で、コンピューターの地域設定を使用することを示します。</param>
        <param name="IncludeLeadingDigit">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> 小数の値の先行ゼロが表示されるかどうかを示す列挙体です。 値は、「解説」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> かっこで囲まれた値が負の値を配置するかどうかを示す列挙体です。 値は、「解説」を参照してください。</param>
        <param name="GroupDigits">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> コンピューターの地域設定で指定された区切り記号を使用して数値をグループ化するかどうかどうかを示す列挙体です。 値は、「解説」を参照してください。</param>
        <summary>システムの \[コントロール パネル\] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>システムの \[コントロール パネル\] で定義されている通貨記号を使って通貨形式の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つまたは複数の省略可能な引数を省略すると、コンピューターの地域設定と一致する値が代わりに使用されます。  
  
 通貨値を基準として通貨記号の位置については、システムの地域設定によって決まります。  
  
> [!NOTE]
>  すべての設定については、アプリケーションのロケールから取得されます。 既定では、コントロール パネルで設定されているロケールなります。 ただし、そのプログラムを使用してによって変更によってもたらされるゼロ以外の .NET Framework を使用して、 `Number` \] タブをクリックします。  
  
 `IncludeLeadingDigit`, 、`UseParensForNegativeNumbers`, 、および `GroupDigits` 引数が小数点の左側の次の列挙値を取得します。  
  
|||  
|-|-|  
|値|説明|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## 例  
 `FormatCurrency` 関数の使用例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">小数部後の桁数は 99 を超えています。</exception>
        <exception cref="T:System.InvalidCastException">型が数値ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Date" /> 書式設定する式。</param>
        <param name="NamedFormat">省略可能です。 日付\/時刻書式を示す数値が使用されます。 省略した場合、 <see langword="DateFormat.GeneralDate" /> を使用します。</param>
        <summary>日時の値を表す文字列式を返します。</summary>
        <returns>日時の値を表す文字列式を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Date` データ型には常に日付と時刻の両方の情報が含まれています。 型変換のために、Visual Basic と見なされる 1\/1\/1 \(1 月 1 日 1 年\) を日付、および 00時 00分: 00 \(午前 0 時\) を時間の中立的な値のニュートラル値。 書式を設定する場合、 `Date` 日付\/時刻の文字列として値 `FormatDateTime` は基準値を結果の文字列に含まれません。 たとえば、\#1\/1\/0001 を変換する 9時 30分: 00 \# を文字列、結果は、"9時 30分: 00 AM"とします。日付情報は表示されません。 ただし、日付情報は、元に存在しています `Date` 値し、関数など、回復可能 `DatePart`します。  
  
> [!NOTE]
>  渡した場合、 `Expression` 引数として、 `String` リテラル、 `FormatDateTime` 」の手順に従って解釈、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> 、アプリケーションの設定です。 ただし、として渡した場合、 `Date` リテラル、形式 \#mm\/dd\/yyyy \# ため `FormatDateTime` は常に解釈、 `Date` 英語 \(米国\) カルチャに基づくリテラルです。 これは、必要なため、アプリケーションを開発しを使用してコード化された場合 `Date` リテラルを 1 つのカルチャを別のカルチャのプラットフォームで実行して、 `Date` リテラルが正しく解析するされない可能性があります。  
  
 `NamedFormat` 引数は、次の設定です。  
  
|||  
|-|-|  
|定数|説明|  
|`DateFormat.GeneralDate`|日付\/時刻を表示します。 短い形式の日付として、日付部分を表示します。 時刻部分がある場合は、長い時間として表示します。 存在する場合、両方の部分を表示します。|  
|`DateFormat.LongDate`|コンピューターの地域設定で指定されている長い日付形式を使用して日付を表示します。|  
|`DateFormat.ShortDate`|コンピューターの地域設定で指定した短い形式の日付形式を使用して日付を表示します。|  
|`DateFormat.LongTime`|コンピューターの地域設定で指定した時刻の形式を使用して時刻を表示します。|  
|`DateFormat.ShortTime`|24 時間形式 \(hh:mm\) を使用して時間を表示します。|  
  
   
  
## 例  
 この例では、使用、 `FormatDateTime` 関数です。  
  
 [!code-vb[VbVbalrStrings\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NamedFormat" /> 設定が正しくありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式設定する式。</param>
        <param name="NumDigitsAfterDecimal">省略可能です。 小数点の右側に表示する桁数を示す数値。 既定値は、\-1 で、コンピューターの地域設定を使用することを示します。</param>
        <param name="IncludeLeadingDigit">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> 小数部の値に、先頭に 0 を表示するかどうかを示す定数。 値は、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> かっこで囲まれた値が負の値を配置するかどうかを示す定数。 値は、「設定」を参照してください。</param>
        <param name="GroupDigits">省略可能です。<see cref="T:Microsoft.VisualBasic.TriState" /> ロケール設定で指定された区切り記号を使用して数値をグループ化するかどうかどうかを示す定数。 値は、「設定」を参照してください。</param>
        <summary>数値形式の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>数値形式の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つまたは複数の省略可能な引数を省略すると、省略する引数の値はロケール設定によって提供されます。  
  
> [!NOTE]
>  すべての設定については、アプリケーションのロケールから取得されます。 既定では、コントロール パネルで設定されているロケールなります。 ただし、これは変更プログラムを使用して .NET Framework を使用しています。  
  
 `IncludeLeadingDigit`, 、`UseParensForNegativeNumbers`, 、および `GroupDigits` 引数には、次の設定があります。  
  
|||  
|-|-|  
|定数|説明|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.UseDefault`|コンピューターの地域の設定|  
  
   
  
## 例  
 次の例で、 `FormatNumber` 関数です。  
  
 [!code-vb[VbVbalrStrings\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数値ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 書式指定される式。</param>
        <param name="NumDigitsAfterDecimal">省略可能です。 小数点以下に表示する桁数を表す数値を指定します。 既定値は \-1 で、ロケール設定を使用します。</param>
        <param name="IncludeLeadingDigit">省略可能です。 小数点の左側のゼロを表示するかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="UseParensForNegativeNumbers">省略可能です。 負の値をかっこで囲むかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <param name="GroupDigits">省略可能です。 ロケール設定で指定されている桁区切り記号を使用して、数値を区切るかどうかを表す <see cref="T:Microsoft.VisualBasic.TriState" /> 定数を指定します。 値については、「設定」を参照してください。</param>
        <summary>パーセント記号 \(%\) が付加されたパーセント形式 \(100 で乗算した\) の文字列に書式設定して返す文字列処理関数です。</summary>
        <returns>パーセント記号 \(%\) が付加されたパーセント形式 \(100 で乗算した\) の文字列に書式設定して返す文字列処理関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When one or more optional arguments are omitted, the values for omitted arguments are provided by the locale settings.  
  
> [!NOTE]
>  All settings information comes from the locale of the application. By default, that will be the locale set in the control panel. However, it may be changed programmatically by using the .NET Framework.  
  
 The **parameterReference tag is not supported!!!!**  
, **parameterReference tag is not supported!!!!**  
, and **parameterReference tag is not supported!!!!**  
 arguments have the following settings.  
  
|||  
|-|-|  
|Constant|Description|  
|`TriState.True`|True|  
|`TriState.False`|False|  
|`TriState.Default`|The computer's regional settings|  
  
   
  
## 例  
 This example illustrates the use of the **languageKeyword tag is not supported!!!!**  
 function.  
  
 [!code-vb[VbVbalrStrings\#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">型が数字ではありません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="Index">必須です。<see langword="Integer" /> 式。 内の文字の \(1 から始まる\) インデックス <c>str</c> を指定します。</param>
        <summary>返します。、 <see langword="Char" /> 指定した文字列で指定したインデックスからの文字を表す値。</summary>
        <returns>
          <see langword="Char" /> 指定した文字列で指定したインデックスからの文字を表す値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `Index` が 1 より小さいか、最後の文字のインデックスよりも大きい `str`, 、 `ArgumentException` がスローされます。  
  
   
  
## 例  
 この例では、使用して、 `GetChar` で指定したインデックスから文字を取得する関数、 `String`です。  
  
 [!code-vb[VbVbalrStrings\#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="str" /> <see langword="Nothing" />, 、<paramref name="Index" /> &lt; 1、または <paramref name="Index" /> の最後の文字のインデックスよりも大きい <paramref name="str" />します。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須です。<see langword="String" /> 検索対象となる式を指定します。</param>
        <param name="String2">必須です。<see langword="String" /> 式が検索されます。</param>
        <param name="Compare">省略可能です。 文字列比較の種類を指定します。 場合 <c>Compare</c> を省略すると、 <see langword="Option Compare" /> 比較の種類を指定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns>
          <list type="table">  
<item>  
<term> If  
  
 </term>  
<description> 戻り値  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String1" /> 長さがゼロまたは <see langword="Nothing" />  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 長さがゼロまたは <see langword="Nothing" />  
  
 </term>  
<description> 既定値は最初の文字位置検索の開始位置。  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 見つからない  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 内で見つかった <paramref name="String1" />  
  
 </term>  
<description> 一致の先頭からの位置  
  
 </description>  
</item>  
<item>  
<term> </term>  
<description> </description>  
</item>  
</list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、 `InStr` 文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB` 以前のバージョンの Visual Basic の関数の文字位置ではなくバイト単位の数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode と `InStrB` 現在サポートされていません。  
  
 `Compare` 引数の設定が。  
  
||||  
|-|-|-|  
|定数|値|説明|  
|`Binary`|0|バイナリ比較を実行します。|  
|`Text`|1|テキストの比較を実行します。|  
  
   
  
## 例  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">省略可能です。 各検索の開始位置を設定する数値式です。 省略した場合は、最初の文字位置から検索が開始されます。 開始インデックスでは、1 から始まります。</param>
        <param name="String1">必須です。<see langword="String" /> 検索対象となる式を指定します。</param>
        <param name="String2">必須です。<see langword="String" /> 式が検索されます。</param>
        <param name="Compare">省略可能です。 文字列比較の種類を指定します。 場合 <c>Compare</c> を省略すると、 <see langword="Option Compare" /> 比較の種類を指定します。</param>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。</summary>
        <returns>
          <list type="table">  
<item>  
<term> If  
  
 </term>  
<description> 戻り値  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String1" /> 長さがゼロまたは <see langword="Nothing" />  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 長さがゼロまたは <see langword="Nothing" />  
  
 </term>  
<description> <paramref name="start" />  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 見つからない  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String2" /> 内で見つかった <paramref name="String1" />  
  
 </term>  
<description> 一致の先頭からの位置  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Start" /> &gt; の長さ <paramref name="String1" />  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
</list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常、 `InStr` 文字列を解析するときに関数を使用します。  
  
> [!NOTE]
>  `InStrB` 以前のバージョンの Visual Basic の関数の文字位置ではなくバイト単位の数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic 2005 のすべての文字列が Unicode と `InStrB` 現在サポートされていません。  
  
 `Compare` 引数の設定が。  
  
||||  
|-|-|-|  
|定数|値|説明|  
|`Binary`|0|バイナリ比較を実行します。|  
|`Text`|1|テキストの比較を実行します。|  
  
   
  
## 例  
 `InStr` 関数を使って、ある文字列の中から指定された文字列を検索し、最初に見つかった文字位置を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">必須です。 検索対象となる文字列式です。</param>
        <param name="StringMatch">必須です。 検索対象の文字列式です。</param>
        <param name="Start">省略可能です。 数値式が 1 から始まる文字列の左端の開始点として、各検索の開始位置を設定します。 場合 <c>Start</c> を省略すると、– 1 を使用すると、最後の文字位置から検索を開始します。 検索は、右から左へ進みます。</param>
        <param name="Compare">省略可能です。 部分文字列を評価するときに使用する比較の種類を表す数値を指定します。 省略した場合は、バイナリの比較が行われます。 値の設定を参照してください。</param>
        <summary>ある文字列の中から指定された文字列を最後の文字位置から検索を開始し、最初に見つかった文字位置 \(先頭からその位置までの文字数\) を返します。</summary>
        <returns>
          <list type="table">  
<item>  
<term> If  
  
 </term>  
<description> 戻り値します。  
  
 </description>  
</item>  
<item>  
<term> <paramref name="StringCheck" /> 長さ 0 を文字列します。  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="StringMatch" /> 長さ 0 を文字列します。  
  
 </term>  
<description> <paramref name="Start" />  
  
 </description>  
</item>  
<item>  
<term> <paramref name="StringMatch" /> 見つからない  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="StringMatch" /> 内で見つかった <paramref name="StringCheck" />  
  
 </term>  
<description> 最初の一致が見つかった文字列の右側から始まる位置。  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Start" /> 長さより大きい <paramref name="StringMatch" />  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
</list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 なおの構文、 `InStrRev` 関数の構文と同じではありません、 `InStr` 関数です。  
  
 `Compare` 引数は、次の値を持つことができます。  
  
|||  
|-|-|  
|定数|説明|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキストの比較を実行します。|  
  
   
  
## 例  
 この例では、使用、 `InStrRev` 関数です。  
  
 [!code-vb[VbVbalrStrings\#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> \= 0 または <paramref name="Start" /> &lt;\-1 です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">省略可能です。 任意の文字列、返される文字列内の部分文字列を区切るために使用します。 省略した場合は、空白文字 \(""\) を使用します。 場合<c>Delimiter</c>は長さ 0 の文字列 \(""\) または<see langword="Nothing" />リスト内のすべての項目が区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 間のパリティがある、`Join`と`Split`関数。`Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。`Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## 例  
 次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" />1 次元です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">必須です。 結合する部分文字列を含む 1 次元配列。</param>
        <param name="Delimiter">省略可能です。 任意の文字列、返される文字列内の部分文字列を区切るために使用します。 省略した場合は、空白文字 \(""\) を使用します。 場合<c>Delimiter</c>は長さ 0 の文字列 \(""\) または<see langword="Nothing" />リスト内のすべての項目が区切り文字なしで連結されます。</param>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <returns>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 間のパリティがある、`Join`と`Split`関数。`Join`関数は文字列の配列を使用し、区切り文字列を使用して、1 つの文字列を取得するで結合します。`Split`関数の文字列を受け取り、文字列の配列を返すため、区切り記号で区切ります。 主な違いが、その`Join`文字列を区切り記号の文字列と連結できる`Split`単一の文字の区切り記号を使用して文字列を区切ることができますのみです。  
  
   
  
## 例  
 次の例で使用する方法、`Join`いくつかの文字列からリストを作成する関数。  
  
 [!code-vb[VbVbalrStrings\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" />1 次元です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> または <see langword="Char" /> 式です。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字だけが変換を小文字にするとします。すべての小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算または大文字の演算の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、およびパス <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> の `comparisonType` 引数。 詳細については、「[How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)」を参照してください。  
  
   
  
## 例  
 この例では、 `LCase` 文字列の小文字のバージョンを返す関数。  
  
 [!code-vb[VbVbalrStrings\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> または <see langword="Char" /> 式です。</param>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <returns>小文字に変換した文字列または文字を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 大文字だけが変換を小文字にするとします。すべての小文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算または大文字の演算の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、およびパス <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> の `comparisonType` 引数。 詳細については、「[How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)」を参照してください。  
  
   
  
## 例  
 この例では、 `LCase` 文字列の小文字のバージョンを返す関数。  
  
 [!code-vb[VbVbalrStrings\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。<see langword="String" /> 左端の文字が返される式です。</param>
        <param name="Length">必須です。<see langword="Integer" /> 式。 取得する文字の数を示す数値式です。 0 の場合、長さ 0 の文字列 \(""\) が返されます。 文字数以上場合 <c>str</c>, 、文字列全体が返されます。</param>
        <summary>指定された文字数を含む文字列を返します。</summary>
        <returns>指定された文字数を含む文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の文字の数を決定する `str`, を使用して、 `Len` 関数です。 Windows フォーム アプリケーションの場合、またはがあるその他のクラスで使用する場合、 `Left` プロパティには、関数を完全に修飾する必要があります `Microsoft.VisualBasic.Left`します。  
  
> [!NOTE]
>  `LeftB` 以前のバージョンの Visual Basic の関数が文字ではなく、バイトの文字列を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LeftB` 現在サポートされていません。  
  
   
  
## 例  
 この例では、使用、 `Left` の部分文字列を返す関数を指定した `String`します。 持つクラスで、 `Left` プロパティには、必要があります完全に修飾するために、 `Left` 関数です。  
  
 [!code-vb[VbVbalrStrings\#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">任意の有効な <see langword="String" /> 式または変数の名前。 場合 <c>Expression</c> のデータ型 <see langword="Object" />, 、 <see langword="Len" /> 関数を返します。 サイズでファイルに記述されている、 <see langword="FilePut" /> 関数です。</param>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <returns>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型と `Object` 、変数、 `Len` 関数でファイルに記述されているサイズを返します、 `FilePut` 関数です。 場合、 `Object` を含む、 `String`, 、文字列の長さを返します。 場合、 `Object` 、その他の種類を含むでファイルに記述されているオブジェクトのサイズを返すには、 `FilePut` 関数です。  
  
 `VBFixedString` 書き込まれるときに、\(バイト単位\) の文字列のサイズを示すためにオブジェクトの文字列フィールドに属性を適用できるディスクにします。`Len` 関数は、 `VBFixedString` 属性が、使用可能な場合のサイズを決定するときに `Object` 変数です。  
  
> [!NOTE]
>  `Len` 関数は、実際のユーザー定義データ型の可変長の文字列で使用する場合に必要なストレージのバイト数を特定できない場合があります。  
  
> [!NOTE]
>  `LenB` 以前のバージョンの Visual Basic の関数が文字ではなく、文字列のバイト数を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `LenB` 現在サポートされていません。  
  
## スマート デバイス開発者用メモ  
 `Len` 関数だけを受け入れる `String` と `Object` 変数をパラメーターとして。 場合、 `Object` が含まれています、 `String`, の長さを返しますが、 `String`です。 パラメーターが NULL の場合 `Object` 参照、0 が返されます。 場合、 `Object` 、その他の種類を含む、例外がスローされます。  
  
   
  
## 例  
 `Len` 関数を使って文字列の文字数を返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必須です。<see langword="String" /> 式。 文字列変数の名前。</param>
        <param name="Length">必須です。<see langword="Integer" /> 式。 返される文字列の長さです。</param>
        <summary>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</summary>
        <returns>指定の文字列が含まれている文字列を左寄せで指定の長さに調整して返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定した文字列が指定した時間より長い場合は、指定の長さに返される文字列が詰められます。 指定した文字列が指定した時間より短い場合は、適切な長さに返される文字列の右端に空白が追加されます。  
  
   
  
## 例  
 この例では、使用、 `LSet` 関数です。  
  
 [!code-vb[VbVbalrStrings\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</summary>
        <returns>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `LTrim`, 、`RTrim`, 、および `Trim` 関数は、文字列の末尾からスペースを削除します。  
  
   
  
## 例  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。<see langword="String" /> 式の文字が返されます。</param>
        <param name="Start">必須です。<see langword="Integer" /> 式。 返される文字の位置を開始しています。 場合 <c>Start</c> 内の文字数よりも大きい <c>str</c>, 、 <see langword="Mid" /> 関数は長さ 0 の文字列を返します \(""\) です。<c>Start</c> 1 から始まります。</param>
        <summary>文字列内の指定位置から始まるすべての文字を含む文字列を返します。</summary>
        <returns>文字列で指定した位置から始まるすべての文字で構成される文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の文字の数を決定する `str`, を使用して、 `Len` 関数です。  
  
 Visual Basic には、 `Mid` 関数と `Mid` ステートメントです。 この要素はどちらも、文字列内の文字の指定の数が、 `Mid` 関数の中に文字を返します、 `Mid` 文字をステートメントに置き換えます。 詳細については、「[Mid Statement](http://msdn.microsoft.com/ja-jp/2b82d7a8-9646-4cb0-bec5-80abc98297bf)」を参照してください。  
  
> [!NOTE]
>  `MidB` 以前のバージョンの Visual Basic の関数が文字ではなく、バイトの文字列を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic のすべての文字列が Unicode と `MidB` 現在サポートされていません。  
  
   
  
## 例  
 この例では、最後の行のこのオーバー ロードを使用して、 `Mid` を文字列から 5 番目以降の文字を返す関数。  
  
 [!code-vb[VbVbalrStrings\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; \= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。<see langword="String" /> 式の文字が返されます。</param>
        <param name="Start">必須です。<see langword="Integer" /> 式。 返される文字の位置を開始しています。 場合 <c>Start</c> 内の文字数よりも大きい <c>str</c>, 、 <see langword="Mid" /> 関数は長さ 0 の文字列を返します \(""\) です。<c>Start</c> 1 つは基づきます。</param>
        <param name="Length">省略可能です。<see langword="Integer" /> 式。 返される文字の数。 省略した場合、またはより少ない場合 <c>Length</c> テキストの文字 \(位置にある文字を含む <c>Start</c>\)、文字列の末尾を開始位置からのすべての文字が返されます。</param>
        <summary>指定した文字列の指定した位置から始まる文字数を表す文字列を返します。</summary>
        <returns>文字列の指定位置から始まる文字の指定された数で構成される文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の文字の数を決定する `str`, を使用して、 `Len` 関数です。  
  
 Visual Basic には、 `Mid` 関数と `Mid` ステートメントです。 この要素はどちらも、文字列内の文字の指定の数が、 `Mid` 関数の中に文字を返します、 `Mid` 文字をステートメントに置き換えます。 詳細については、「[Mid Statement](http://msdn.microsoft.com/ja-jp/2b82d7a8-9646-4cb0-bec5-80abc98297bf)」を参照してください。  
  
> [!NOTE]
>  `MidB` 以前のバージョンの Visual Basic の関数が文字ではなく、バイトの文字列を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 Visual Basic のすべての文字列が Unicode と `MidB` 現在サポートされていません。  
  
   
  
## 例  
 最初の 2 つ `Mid` この例では関数では、指定した位置から開始し、文字列から指定された文字数を返します。 \(最後の関数を示しています、 <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> オーバー ロードして、文字列抽出の開始点をのみを指定します\)。  
  
 [!code-vb[VbVbalrStrings\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; \= 0 または <paramref name="Length" /> &lt; 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 文字列を置換する部分文字列を含む式。</param>
        <param name="Find">必須です。 検索対象の文字列を指定します。</param>
        <param name="Replacement">必須です。 置換する部分文字列。</param>
        <param name="Start">省略可能です。 内の位置に <c>Expression</c> が始まる部分文字列の置換に使用します。 戻り値 <see langword="Replace" /> で始まる文字列 <c>Start</c>, 、適宜置き換えします。 省略した場合は、1 が使用されます。</param>
        <param name="Count">省略可能です。 置換を実行する部分文字列の数です。 既定値は\-1 で、「すべての候補が置換してください」で省略すると、</param>
        <param name="Compare">省略可能です。 部分文字列を評価するときに使用する比較の種類を表す数値を指定します。 値の設定を参照してください。</param>
        <summary>指定された文字列の一部を指定された回数分別の部分文字列で置換した文字列を返します。</summary>
        <returns>
          <see langword="Replace" /> 次の値を返します。  
  
 <list type="table">  
<item>  
<term> If  
  
 </term>  
<description> 置換を返します  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Find" /> 長さ 0 の文字列または <see langword="Nothing" />  
  
 </term>  
<description> コピー <paramref name="Expression" />  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Replace" /> 長さ 0 を文字列します。  
  
 </term>  
<description> コピー <paramref name="Expression" /> ない文字列を含む <paramref name="Find" />  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Expression" /> 長さ 0 の文字列または <see langword="Nothing" />, 、または <paramref name="Start" /> の長さより大きい <paramref name="Expression" />  
  
 </term>  
<description> <see langword="Nothing" />  
  
 </description>  
</item>  
<item>  
<term> <paramref name="Count" /> 0 は、します。  
  
 </term>  
<description> コピー <paramref name="Expression" />  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値、 `Replace` 関数は、指定した位置から始まる文字列 `Start` し、最後の最後に、 `Expression` で行われた置換文字列に指定されたとおり、 `Find` と `Replace` 値。  
  
 `Compare` 引数は、次の値を持つことができます。  
  
|||  
|-|-|  
|定数|説明|  
|`Binary`|バイナリ比較を実行します。|  
|`Text`|テキストの比較を実行します。|  
  
   
  
## 例  
 次の例で、 `Replace` 関数です。  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt;\-1 または <paramref name="Start" /> &lt; \= 0。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。<see langword="String" /> 右端の文字が返される式です。</param>
        <param name="Length">必須です。<see langword="Integer" />。 取得する文字の数を示す数値式です。 0 の場合、長さ 0 の文字列 \(""\) が返されます。 文字数以上場合 <c>str</c>, 、文字列全体が返されます。</param>
        <summary>文字列の右端から指定された文字数分の文字列を返します。</summary>
        <returns>文字列の右端から指定された文字数分の文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内の文字の数を決定する `str`, を使用して、 `Len` 関数です。 Windows フォーム、またはがあるその他のクラスで使用されている場合、 `Right` プロパティには、関数を完全に修飾する必要があります `Microsoft.VisualBasic.Strings.Right`します。  
  
> [!NOTE]
>  `RightB` 以前のバージョンの Visual Basic の関数が文字ではなく、\(バイト単位\) の文字列を返します。 2 バイト文字セット \(DBCS\) のアプリケーションで文字列に変換するためには、主に使用されます。 現在 Visual Basic のすべての文字列が Unicode と `RightB` 現在サポートされていません。  
  
   
  
## 例  
 この例では、使用、 `Right` の部分文字列を返す関数を指定した `String`します。 持つクラスで、 `Right` プロパティには、必要があります完全に修飾するために、 `Right` 関数です。  
  
 [!code-vb[VbVbalrStrings\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">必須です。<see langword="String" /> 式。 文字列変数の名前。</param>
        <param name="Length">必須です。<see langword="Integer" /> 式。 返される文字列の長さです。</param>
        <summary>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</summary>
        <returns>文字列と長さが指定され、その長さに調整された文字列右揃えにして文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `Source` よりも長い `Length`, 、`RSet` の長さまで、左端の文字のみを配置 `Source`, 、返される文字列。 指定した文字列が指定した時間より短い場合は、適切な長さの文字列の左端に空白が追加されます。 指定した文字列が指定した時間より長い場合は、指定の長さに部分は切り捨てられます。  
  
   
  
## 例  
 この例では、使用、 `RSet` 関数です。  
  
 [!code-vb[VbVbalrStrings\#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</summary>
        <returns>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `LTrim`, 、`RTrim`, 、および `Trim` 関数は、文字列の末尾からスペースを削除します。  
  
   
  
## 例  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。<see langword="Integer" /> 式。 空白の数を指定します。</param>
        <summary>指定された数のスペースから成る文字列を返します。</summary>
        <returns>指定された数のスペースから成る文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Space` 関数の出力を書式設定と固定長文字列内のデータをオフにすると便利です。  
  
   
  
## 例  
 この例では、 `Space` を指定した数のスペースから成る文字列を返す関数。  
  
 [!code-vb[VbVbalrStrings\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="String" /> 部分文字列と区切り記号を含む式です。</param>
        <param name="Delimiter">省略可能です。 任意の 1 文字の部分文字列の区切りを識別するために使用します。 場合 <c>Delimiter</c> を省略すると、空白文字 \(""\)、区切り記号と見なされます。</param>
        <param name="Limit">省略可能です。 入力文字列を分割する部分文字列の最大数。 既定値の\-1 に一致するすべての入力文字列が分割されることを示す、 <c>Delimiter</c> 文字列。</param>
        <param name="Compare">省略可能です。 部分文字列を評価するときに使用する比較を表す数値を指定します。 値は、「設定」を参照してください。</param>
        <summary>部分文字列ごとに区切られた文字列からゼロ ベースの 1 次元配列を作成し、返します。</summary>
        <returns>
          <see langword="String" /> 配列 場合 <paramref name="Expression" /> が長さ 0 の文字列 \(""\)、 <see langword="Split" /> 長さ 0 の文字列を含む 1 つの要素の配列を返します。 場合 <paramref name="Delimiter" /> 長さ 0 の文字列には、任意の場所にない場合、または <paramref name="Expression" />, 、<see langword="Split" /> 全体を含む単一要素の配列を返します <paramref name="Expression" /> 文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、または `Limit` \-1 に等しい、 `Split` 関数は区切り記号文字列の出現がすべてで、入力文字列を分割し、配列内の部分文字列を返します。 ときに、 `Limit` パラメーターが 0 より大きい、 `Split` 関数は、最初に文字列を分割 `Limit`\-1 出現する、区切り記号の後の部分文字列の配列を返すとします。 たとえば、 `Split("a:b:c", ":")` 配列が返されます `{"a", "b", "c"}`, 、中に `Split("a:b:c", ":", 2)` 配列が返されます `{"a", "b:c"}`します。  
  
 ときに、 `Split` 関数には、行の 2 つの区切り記号または先頭と文字列の末尾の区切り記号が検出すると、空の文字列を囲んでいると解釈して \(""\) です。 たとえば、 `Split("xx", "x")` 3 つの空の文字列を含む配列を返します。 つ文字列は、"x"、"x"文字列、2 つの間からいずれか 1 つ目の最初と最後の"x"と文字列の末尾の 1 つです。  
  
 次の表に示す方法、省略可能な `Delimiter`, 、`Limit`, 、および `Compare` パラメーターの動作を変更することができます、 `Split` 関数です。  
  
|||  
|-|-|  
|呼び出しを分割します。|戻り値|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{「Alice と Bob」}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{"Alice"、"Bob"}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{"someone"、"example.com"}|  
  
 `Compare` 引数は、次の値を持つことができます。  
  
||||  
|-|-|-|  
|定数|説明|値|  
|`CompareMethod.Binary`|バイナリ比較を実行します。|0|  
|`CompareMethod.Text`|テキストの比較を実行します。|1|  
  
   
  
## 例  
 次の例は、空白で文字列を分割する方法を示します。  
  
 [!code-vb[VbVbalrStrings\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 次の例では、行の複数の区切り記号の文字列を分割し、空の文字列をフィルタ リングする方法を示します。  
  
 [!code-vb[VbVbalrStrings\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="String2">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <param name="Compare">省略可能です。 文字列比較の種類を指定します。 場合 <c>Compare</c> を省略すると、 <see langword="Option Compare" /> 比較の種類を指定します。</param>
        <summary>文字列比較の結果により、\-1、0、または 1 のいずれかを返します。</summary>
        <returns>
          <see langword="StrComp" /> 関数には、次の戻り値。  
  
 <list type="table">  
<item>  
<term> If  
  
 </term>  
<description> StrComp を返します。  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String1" /> 並べ替え <paramref name="String2" />  
  
 </term>  
<description> \-1  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String1" /> 等しい <paramref name="String2" />  
  
 </term>  
<description> 0  
  
 </description>  
</item>  
<item>  
<term> <paramref name="String1" /> 後に <paramref name="String2" />  
  
 </term>  
<description> 1  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列は、最初の文字で始まり、英数字の並べ替え値によって比較されます。 バイナリの比較、テキストの比較および並べ替え順序の詳細については、次を参照してください。 [Option Compare Statement](http://msdn.microsoft.com/ja-jp/54e8eeeb-3b0d-4fb9-acce-fbfbd5975f6e)します。  
  
 `Compare` 引数の設定が。  
  
|||  
|-|-|  
|定数|説明|  
|`Binary`|文字の内部バイナリ表現から派生した並べ替え順序に基づいて、バイナリの比較を実行します。|  
|`Text`|システムによって決定される小文字を区別しないテキスト並べ替え順序に基づいて、文字列比較を行います `LocaleID` 値。|  
  
   
  
## 例  
 この例では、 `StrComp` 文字列比較の結果を返す関数。  
  
 [!code-vb[VbVbalrStrings\#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Compare" /> の値が無効です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">必須です。<see langword="String" /> 変換する式。</param>
        <param name="Conversion">必須です。<see cref="T:Microsoft.VisualBasic.VbStrConv" /> メンバー。 実行する変換の種類を指定する列挙値。</param>
        <param name="LocaleID">省略可能です。<see langword="LocaleID" /> システムと異なる場合は、値 <see langword="LocaleID" /> 値。 \(システム <see langword="LocaleID" /> 既定値です\)。</param>
        <summary>指定に従って変換された文字列型の値を返します。</summary>
        <returns>指定に従って変換された文字列型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 定数 `VbStrConv.Wide`, 、`VbStrConv.Narrow`, 、`VbStrConv.SimplifiedChinese`, 、`VbStrConv.TraditionalChinese`, 、`VbStrConv.Katakana`, 、および `VbStrConv.Hiragana` ここでは適用されません、ロケールで使用する場合に、実行時エラーが発生することができます常にではなく: 定数 `VbStrConv.Katakana` と `VbStrConv.Hiragana` 日本語言語パックがインストールされて、日本語以外のシステムで使用できます。 さらに、定数の使用 `VbStrConv.Wide` と `VbStrConv.Narrow` では、東アジア言語がインストールされている任意のシステムはサポートされています。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算または大文字の演算の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、およびパス <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> の `comparisonType` 引数。 詳細については、「[How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)」を参照してください。  
  
 `Conversion` 引数の設定が。  
  
|||  
|-|-|  
|列挙体のメンバー|説明|  
|`VbStrConv.None`|変換は行われません|  
|`VbStrConv.LinguisticCasing`|ファイル システム \(既定値\) ではなく、大文字と小文字、言語の規則を使用します。 有効であり `VbStrConv.UpperCase` と `VbStrConv.LowerCase` のみです。|  
|`VbStrConv.UpperCase`|文字列を大文字に変換します。|  
|`VbStrConv.LowerCase`|文字列を小文字に変換します。|  
|`VbStrConv.ProperCase`|文字列を大文字に内の各単語の最初の文字に変換します。|  
|`VbStrConv.Wide` <sup>*</sup>|半角、全角文字 \(全角\) に文字列の \(半角\) 文字に変換します。|  
|`VbStrConv.Narrow` <sup>*</sup>|全体 \(全角\) 文字 \(半角\) の文字を文字列に変換します。|  
|`VbStrConv.Katakana` <sup>**</sup>|文字列内のひらがなをカタカナに変換します。|  
|`VbStrConv.Hiragana` <sup>**</sup>|文字列内のカタカナをひらがなに変換します。|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|簡体字中国語繁体字中国語文字に変換します。|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|簡体字中国語の文字を繁体中国語に変換します。|  
  
 <sup>*</sup> アジアのロケールに適用されます。  
  
 <sup>* *</sup> 日本にのみ適用されます。  
  
> [!NOTE]
>  これらの定数は、.NET Framework 共通言語ランタイムで指定されます。 結果として、使用できます任意の場所の実際の値の代わりに、コード内。 ほとんどを組み合わせることができます \(たとえば、 `UpperCase + Wide`\)、相互に排他的な場合以外 \(たとえば、 `VbStrConv.Wide + VbStrConv.Narrow`\)。  
  
 次に、適切な大文字と小文字の有効な単語の区切り文字: Null \(`Chr$(0)`\)、水平タブ \(`Chr$(9)`\)、ライン フィード \(`Chr$(10)`\)、垂直タブ \(`Chr$(11)`\)、フォーム フィード \(`Chr$(12)`\)、キャリッジ リターン \(`Chr$(13)`\)、スペース \(1 バイト文字セット\) \(`Chr$(32)`\)。 完全または幅の半分であることができます、空白の実際の値は、東アジア言語のカルチャの国または地域によって異なります。  
  
   
  
## 例  
 この例は、テキストをすべて小文字に変換します。  
  
 [!code-vb[VbVbalrStrings\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">サポートされていない <paramref name="LocaleID" />, 、<paramref name="Conversion" /> &lt; 0 または &gt; 2048、または指定されたロケールの変換がサポートされていません。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。<see langword="Integer" /> 式。 返される文字列の長さ。</param>
        <param name="Character">必須です。 任意の有効な <see langword="Char" />, 、<see langword="String" />, 、または <see langword="Object" /> 式です。 式の最初の文字のみが使用されます。 文字が型の場合 <see langword="Object" />, 、いずれかを指定する必要があります、 <see langword="Char" /> または <see langword="String " />値。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数が返す、 `String` の文字の繰り返しで構成されています。 文字列を構成する文字は、最初の文字、 `Character` 引数、およびそれが重複して `Number` 回数。  
  
   
  
## 例  
 この例では、 `StrDup` の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings\#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 0 未満または <paramref name="Character" /> の種類が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。<see langword="Integer" /> 式。 返される文字列の長さ。</param>
        <param name="Character">必須です。 任意の有効な <see langword="Char" />, 、<see langword="String" />, 、または <see langword="Object" /> 式です。 式の最初の文字のみが使用されます。 文字が型の場合 <see langword="Object" />, 、いずれかを指定する必要があります、 <see langword="Char" /> または <see langword="String " />値。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数が返す、 `String` の文字の繰り返しで構成されています。 文字列を構成する文字は、最初の文字、 `Character` 引数、およびそれが重複して `Number` 回数。  
  
   
  
## 例  
 この例では、 `StrDup` の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings\#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 0 未満または <paramref name="Character" /> の種類が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。<see langword="Integer" /> 式。 返される文字列の長さ。</param>
        <param name="Character">必須です。 任意の有効な <see langword="Char" />, 、<see langword="String" />, 、または <see langword="Object" /> 式です。 式の最初の文字のみが使用されます。 文字が型の場合 <see langword="Object" />, 、いずれかを指定する必要があります、 <see langword="Char" /> または <see langword="String " />値。</param>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <returns>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この関数が返す、 `String` の文字の繰り返しで構成されています。 文字列を構成する文字は、最初の文字、 `Character` 引数、およびそれが重複して `Number` 回数。  
  
   
  
## 例  
 この例では、 `StrDup` の文字列を返す関数には、文字が重複しています。  
  
 [!code-vb[VbVbalrStrings\#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 0 未満または <paramref name="Character" /> の種類が無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Character" /> は <see langword="Nothing" /> です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。 文字が元に戻すには文字列式です。 場合 <c>Expression</c> が長さ 0 の文字列 \(""\)、長さ 0 の文字列が返されます。</param>
        <summary>指定された文字列の文字の並び順を逆にした文字列を返します。</summary>
        <returns>指定された文字列の文字の並び順を逆にした文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `StrReverse` 関数と同じ文字を含む文字列を返します `Expression`, 、その逆の順序で。  
  
   
  
## 例  
 [!code-vb[VbVbalrStrings\#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">必須です。 任意の有効な <see langword="String" /> 式。</param>
        <summary>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</summary>
        <returns>文字列の先頭に指定した文字列のコピーを含む文字列を返します \(<see langword="LTrim" />\)、末尾のスペース \(<see langword="RTrim" />\)、なし先頭または末尾のスペース \(<see langword="Trim" />\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `LTrim`, 、`RTrim`, 、および `Trim` 関数は、文字列の末尾からスペースを削除します。  
  
   
  
## 例  
 この例では、文字列変数から、`LTrim` 関数を使って先頭の空白を除去し、`RTrim` 関数を使って後続の空白を除去しています。 また、`Trim` 関数を使って両方のタイプの空白を除去しています。  
  
 [!code-vb[VbVbalrStrings\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> または <see langword="Char" /> 式です。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小文字だけが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算または大文字の演算の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、およびパス <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> の `comparisonType` 引数。 詳細については、「[How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)」を参照してください。  
  
   
  
## 例  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">必須です。 任意の有効な <see langword="String" /> または <see langword="Char" /> 式です。</param>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <returns>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 小文字だけが変換を大文字です。すべてのアルファベットの大文字とアルファベット以外の文字は変更されません。  
  
 この関数は、大文字小文字の変更は、アプリケーションが使用されているロケールに対応できるように、文字列を操作するときに、アプリケーションのカルチャ情報を使用します。  
  
> [!IMPORTANT]
>  アプリケーションが、比較演算または大文字の演算の結果に基づいてセキュリティ上の決定を行うかどうかは、操作を使用する必要があります、 <xref:System.String.Compare%2A?displayProperty=fullName> メソッド、およびパス <xref:System.StringComparison.Ordinal> または <xref:System.StringComparison.OrdinalIgnoreCase> の `comparisonType` 引数。 詳細については、「[How Culture Affects Strings in Visual Basic](http://msdn.microsoft.com/ja-jp/c4664444-ee0d-47bf-bef1-eaa3c54bdd7f)」を参照してください。  
  
   
  
## 例  
 `UCase` 関数を使って文字列を大文字に変換して返す例を次に示します。  
  
 [!code-vb[VbVbalrStrings\#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した文字列から文字を含む文字列を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列の文字数または名義変数の格納に必要なバイト数を表す整数を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>小文字に変換した文字列または文字を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたフィルター条件に基づいた文字列 \(<see langword="String" />\) 配列のサブセットを含むゼロ ベースの配列を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ある文字列の中から指定した文字列を検索し、最初に見つかった文字列の開始位置を示す整数型の値を返します。  整数は、一致が見つかった場合、1 から始まるインデックスです。  一致が検出されない場合は、0 を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>配列に含まれる多数の部分文字列を結合して作成される文字列を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字に対応する文字コードを表す <see langword="Integer" /> 値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字が指定された回数繰り返されている文字列型またはオブジェクト型の値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された文字列を大文字に変換して文字列型または char 型の値を返します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>