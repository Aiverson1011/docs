<Type Name="DateAndTime" FullName="Microsoft.VisualBasic.DateAndTime">
  <TypeSignature Language="C#" Value="public sealed class DateAndTime" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DateAndTime extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.DateAndTime" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="DateAndTime" /> モジュールには、プロシージャ、および日付と時刻の演算で使用されるプロパティが含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、Visual Basic 言語のキーワードとランタイム ライブラリ メンバーを現在の日付または時刻の取得、日付計算の実行、日付または時刻を返す、日付または時刻の設定など、プロセスにかかる時間を時間をサポートします。  
  
   
  
## 例  
 この例では、 `Today` を現在のシステム日付を返すプロパティ。  
  
```  
Dim thisDate As Date  
thisDate = Today   
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(valuetype Microsoft.VisualBasic.DateInterval Interval, float64 Number, valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> を追加する時間間隔を表す式。</param>
        <param name="Number">必須です。<see langword="Double" />。 追加する間隔の数を表す浮動小数点式です。<c>Number</c> 正の値、将来の日付\/時刻値を取得\) または負の値 \(過去の日付\/時刻値を取得\) を指定できます。 小数部を含めることできるときにパーツ <c>Interval</c> 時間、分、または秒を指定します。 他の値 <c>Interval</c>, 、小数の一部では <c>Number</c> は無視されます。</param>
        <param name="DateValue">必須です。<see langword="Date" />。 間隔を追加するときの日時を表す式です。<c>DateValue</c> 呼び出し元のプログラムでそれ自体は変更されません。</param>
        <summary>返します。、 <see langword="Date" /> 指定した時間間隔が追加された日付と時刻の値を含む値。</summary>
        <returns>返します。、 <see langword="Date" /> 指定した時間間隔が追加された日付と時刻の値を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DateAdd` 加算または日付から指定した時間間隔を減算します。 たとえば、時間 45 分前に、や、今日から 30 日後の日付を計算できます。  
  
 日数を加算する `DateValue`, 、使用する `DateInterval.Day`, 、`DateInterval.DayOfYear`, 、または `DateInterval.Weekday`です。 の同等のものとして処理 `DayOfYear` と `Weekday` 意味のある時間間隔ではありません。  
  
 `DateAdd` 関数が無効な日付を返すことはありません。 必要に応じて、その年の月の最終日に、返される日付の日の部分が下方向調整されます。 次の例では、1 月 31 日に 1 か月を追加します。  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 この例では `DateAdd` 返します `#2/28/1995#`, ではなく、 `#2/31/1995#`です。 場合 `DateValue` は `#1/31/1996#`, 、返す `#2/29/1996#` 1996年が閏年であるためです。  
  
> [!NOTE]
>  `DateAdd` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、そのメソッドを提供する時間間隔を加算する追加のオプションです。 小数の値をミリ秒単位に丸められた、曜日を追加するなど、 `Date` 変数として次のとおりです。  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|String|追加する時間間隔の単位|  
|---------|------------|-----------------|  
|`DateInterval.Day`|日|デーです。整数値に切り捨てられます|  
|`DateInterval.DayOfYear`|Y|デーです。整数値に切り捨てられます|  
|`DateInterval.Hour`|時|時間です。ミリ秒単位に丸められます|  
|`DateInterval.Minute`|n|1 分です。ミリ秒単位に丸められます|  
|`DateInterval.Month`|分|月です。整数値に切り捨てられます|  
|`DateInterval.Quarter`|q|四半期です。整数値に切り捨てられます|  
|`DateInterval.Second`|秒|秒です。ミリ秒単位に丸められます|  
|`DateInterval.Weekday`|週|デーです。整数値に切り捨てられます|  
|`DateInterval.WeekOfYear`|ww|1 週間です。整数値に切り捨てられます|  
|`DateInterval.Year`|yyyy|年。整数値に切り捨てられます|  
  
   
  
## 例  
 この例は、日を取得しを使用して、 `DateAdd` 関数の指定した数か月間、将来の日付を表示します。  
  
 [!code-vb[VbVbalrFunctions\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> 強制変換は <see langword="Date" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算された日付では、9999 年 12 月 31 日 23時 59分: 59 よりも 1 の場合、以降の年 1 月 1 日 00時 00分: 00 以前です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DateAdd">
      <MemberSignature Language="C#" Value="public static DateTime DateAdd (string Interval, double Number, object DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateAdd(string Interval, float64 Number, object DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Number" Type="System.Double" />
        <Parameter Name="DateValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> を追加する時間間隔を表す式。</param>
        <param name="Number">必須です。<see langword="Double" />。 追加する間隔の数を表す浮動小数点式です。<c>Number</c> 正の値、将来の日付\/時刻値を取得\) または負の値 \(過去の日付\/時刻値を取得\) を指定できます。 小数部を含めることできるときにパーツ <c>Interval</c> 時間、分、または秒を指定します。 他の値 <c>Interval</c>, 、小数の一部では <c>Number</c> は無視されます。</param>
        <param name="DateValue">必須です。<see langword="Date" />。 間隔を追加するときの日時を表す式です。<c>DateValue</c> 呼び出し元のプログラムでそれ自体は変更されません。</param>
        <summary>返します。、 <see langword="Date" /> 指定した時間間隔が追加された日付と時刻の値を含む値。</summary>
        <returns>返します。、 <see langword="Date" /> 指定した時間間隔が追加された日付と時刻の値を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DateAdd` 加算または日付から指定した時間間隔を減算します。 たとえば、時間 45 分前に、や、今日から 30 日後の日付を計算できます。  
  
 日数を加算する `DateValue`, 、使用する `DateInterval.Day`, 、`DateInterval.DayOfYear`, 、または `DateInterval.Weekday`です。 の同等のものとして処理 `DayOfYear` と `Weekday` 意味のある時間間隔ではありません。  
  
 `DateAdd` 関数が無効な日付を返すことはありません。 必要に応じて、その年の月の最終日に、返される日付の日の部分が下方向調整されます。 次の例では、1 月 31 日に 1 か月を追加します。  
  
```vb  
Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)  
```  
  
 この例では `DateAdd` 返します `#2/28/1995#`, ではなく、 `#2/31/1995#`です。 場合 `DateValue` は `#1/31/1996#`, 、返す `#2/29/1996#` 1996年が閏年であるためです。  
  
> [!NOTE]
>  `DateAdd` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、そのメソッドを提供する時間間隔を加算する追加のオプションです。 小数の値をミリ秒単位に丸められた、曜日を追加するなど、 `Date` 変数として次のとおりです。  
  
```vb  
Dim NextTime As Date = Now        ' Current date and time.  
NextTime = NextTime.AddDays(3.4)  ' Increment by 3 2/5 days.  
```  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|String|追加する時間間隔の単位|  
|---------|------------|-----------------|  
|`DateInterval.Day`|日|デーです。整数値に切り捨てられます|  
|`DateInterval.DayOfYear`|Y|デーです。整数値に切り捨てられます|  
|`DateInterval.Hour`|時|時間です。ミリ秒単位に丸められます|  
|`DateInterval.Minute`|n|1 分です。ミリ秒単位に丸められます|  
|`DateInterval.Month`|分|月です。整数値に切り捨てられます|  
|`DateInterval.Quarter`|q|四半期です。整数値に切り捨てられます|  
|`DateInterval.Second`|秒|秒です。ミリ秒単位に丸められます|  
|`DateInterval.Weekday`|週|デーです。整数値に切り捨てられます|  
|`DateInterval.WeekOfYear`|ww|1 週間です。整数値に切り捨てられます|  
|`DateInterval.Year`|yyyy|年。整数値に切り捨てられます|  
  
   
  
## 例  
 この例は、日を取得しを使用して、 `DateAdd` 関数の指定した数か月間、将来の日付を表示します。  
  
 [!code-vb[VbVbalrFunctions\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> 強制変換は <see langword="Date" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算された日付は、9999 を 1 の場合、または年 12 月 31 日 23時 59分: 59 よりも後の年 1 月 1 日 00時 00分: 00 より前に、です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime Date1, valuetype System.DateTime Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="Date1" Type="System.DateTime" />
        <Parameter Name="Date2" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> の相違点の単位として使用する時間間隔を表す式 <c>Date1</c> と <c>Date2</c>です。</param>
        <param name="Date1">必須です。<see langword="Date" />。 計算に使用する最初の日付\/時刻値。</param>
        <param name="Date2">必須です。<see langword="Date" />。 計算に使用する 2 番目の日付\/時刻値。</param>
        <param name="DayOfWeek">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">省略可能です。 選択した値、 <see langword="FirstWeekOfYear" /> 年の最初の週を指定する列挙体です。 指定しない場合は、<see langword="FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>返します。、 <see langword="Long" /> 2 つまでの時間間隔の数を指定する値 <see langword="Date" /> 値。</summary>
        <returns>返します。、 <see langword="Long" /> 2 つまでの時間間隔の数を指定する値 <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DateDiff` 関数を指定した時間間隔の数が 2 つの日付\/時刻値の存在を確認します。 たとえば、使用する場合があります `DateDiff` の 2 つの日付、または現在の年の終わりまでの週の数の間の日数を計算します。  
  
## 動作  
  
-   **パラメーターの扱い** `DateDiff` の値を減算 `Date1` の値から `Date2` の違いを生成します。 どちらの値は、呼び出し元のプログラムで変更されます。  
  
-   **値を返します。** `Date1` と `Date2` は、 `Date` データ型、日付と時刻の値が格納精度は 100 ナノ秒タイマー刻みシステム タイマーです。 ただし、 `DateDiff` 常として、時間間隔の数、 `Long` 値。  
  
     場合 `Date1` 後の日付とよりも時間を表す `Date2`, 、`DateDiff` 、負数を返します。  
  
-   **日の間隔。**場合 `Interval` に設定されている `DateInterval.DayOfYear`, は処理と同じ `DateInterval.Day`, ので、 `DayOfYear` の時間間隔の意味のある単体ではありません。  
  
-   **週の間隔。**場合 `Interval` に設定されている `DateInterval.WeekOfYear`, 、戻り値を含んでいる週の最初の日までの週の数を表す `Date1` を含んでいる週の初日と `Date2`です。 次の例は、異なる結果がどのように生成 `DateInterval.Weekday`します。  
  
     [!code-vb[VbVbalrFunctions\#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     前の例で `DateDiff` に 0 を返します `wD` 2 つの日付の差は 7 日より少ないですに 1 を返すため `wY` それぞれのカレンダーの週の最初の日の間で 7 日間の相違があるためです。  
  
-   **それ以上の間隔**場合 `Interval` に設定されている `DateInterval.Year`, 、戻り値の計算の年の部分から純粋な `Date1` と `Date2`です。 同様に、戻り値 `DateInterval.Month` 、および引数の年と月の部分から純粋な計算 `DateInterval.Quarter` 四半期の 2 つの日付を格納しているからです。  
  
     たとえば、次の年の 1 月 1 日に 12 月 31 日を比較するときに `DateDiff` に対して 1 を返します `DateInterval.Year`, 、`DateInterval.Quarter`, 、または `DateInterval.Month`, 最大で 1 日が経過した場合でも、します。  
  
     持つ複数時代 \(年号\)、日本語などのカルチャ、 `DateDiff` 違いは、2 つまたは複数の時代 \(年号\) にまたがる場合に、メソッドで年の差分が返されません。 によって返される値の差を計算する代わりに、 <xref:System.DateTime.Year%2A> プロパティ、次の例のように: `date2.Year - date1.Year`です。  
  
-   **その他の間隔。**すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、メソッドを提供する時間間隔を検索する追加のオプションです。 たとえば、使用することができます、 `Subtract` メソッド オーバー ロードされた形式のいずれかで: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> 減算、 <xref:System.TimeSpan> から、 `Date` を返す別の変数 `Date` 値、および <xref:System.DateTime.Subtract%2A?displayProperty=fullName> 減算、 `Date` に返される値、 <xref:System.TimeSpan>です。 次のようにかかる時間をミリ秒数を確認する処理時間の計測することができます。  
  
     [!code-vb[VbVbalrFunctions\#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|文字列値|時間間隔の単位|  
|---------|----------|-------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月|  
|`DateInterval.Quarter`|"q"|四半期|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|週|  
|`DateInterval.WeekOfYear`|"ww"|カレンダーの週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システム設定で指定した最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 \(既定値\)|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `WeekOfYear` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstWeekOfYear.System`|0|システムの設定で指定された年の第 1 週|  
|`FirstWeekOfYear.Jan1`|1|週を月 1 日 \(既定値\)|  
|`FirstWeekOfYear.FirstFourDays`|2|\(ISO 8601 の標準的な 3.17 に準拠して\) 新しい年に、少なくとも 4 日間にある最初の週|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週|  
  
   
  
## 例  
 この例では、 `DateDiff` に指定した日から今日までの日数を表示するためです。  
  
 [!code-vb[VbVbalrFunctions\#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, 、<paramref name="Date2" />, 、または <paramref name="DayofWeek" /> が範囲外です。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="DateDiff">
      <MemberSignature Language="C#" Value="public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 DateDiff(string Interval, object Date1, object Date2, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="Date1" Type="System.Object" />
        <Parameter Name="Date2" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> の相違点の単位として使用する時間間隔を表す式 <c>Date1</c> と <c>Date2</c>です。</param>
        <param name="Date1">必須です。<see langword="Date" />。 計算に使用する最初の日付\/時刻値。</param>
        <param name="Date2">必須です。<see langword="Date" />。 計算に使用する 2 番目の日付\/時刻値。</param>
        <param name="DayOfWeek">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">省略可能です。 選択した値、 <see langword="FirstWeekOfYear" /> 年の最初の週を指定する列挙体です。 指定しない場合は、<see langword="FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>返します。、 <see langword="Long" /> 2 つまでの時間間隔の数を指定する値 <see langword="Date" /> 値。</summary>
        <returns>返します。、 <see langword="Long" /> 2 つまでの時間間隔の数を指定する値 <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DateDiff` 関数を指定した時間間隔の数が 2 つの日付\/時刻値の存在を確認します。 たとえば、使用する場合があります `DateDiff` の 2 つの日付、または現在の年の終わりまでの週の数の間の日数を計算します。  
  
## 動作  
  
-   **パラメーターの扱い** `DateDiff` の値を減算 `Date1` の値から `Date2` の違いを生成します。 どちらの値は、呼び出し元のプログラムで変更されます。  
  
-   **値を返します。** `Date1` と `Date2` は、 `Date` データ型、日付と時刻の値が格納精度は 100 ナノ秒タイマー刻みシステム タイマーです。 ただし、 `DateDiff` 常として、時間間隔の数、 `Long` 値。  
  
     場合 `Date1` 後の日付とよりも時間を表す `Date2`, 、`DateDiff` 、負数を返します。  
  
-   **日の間隔。**場合 `Interval` に設定されている `DateInterval.DayOfYear`, は処理と同じ `DateInterval.Day`, ので、 `DayOfYear` の時間間隔の意味のある単体ではありません。  
  
-   **週の間隔。**場合 `Interval` に設定されている `DateInterval.WeekOfYear`, 、戻り値を含んでいる週の最初の日までの週の数を表す `Date1` を含んでいる週の初日と `Date2`です。 次の例は、異なる結果がどのように生成 `DateInterval.Weekday`します。  
  
     [!code-vb[VbVbalrFunctions\#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#60)]  
  
     前の例で `DateDiff` に 0 を返します `wD` 2 つの日付の差は 7 日より少ないですに 1 を返すため `wY` それぞれのカレンダーの週の最初の日の間で 7 日間の相違があるためです。  
  
-   **それ以上の間隔**場合 `Interval` に設定されている `DateInterval.Year`, 、戻り値の計算の年の部分から純粋な `Date1` と `Date2`です。 同様に、戻り値 `DateInterval.Month` 、および引数の年と月の部分から純粋な計算 `DateInterval.Quarter` 四半期の 2 つの日付を格納しているからです。  
  
     たとえば、次の年の 1 月 1 日に 12 月 31 日を比較するときに `DateDiff` に対して 1 を返します `DateInterval.Year`, 、`DateInterval.Quarter`, 、または `DateInterval.Month`, 最大で 1 日が経過した場合でも、します。  
  
     持つ複数時代 \(年号\)、日本語などのカルチャ、 `DateDiff` 違いは、2 つまたは複数の時代 \(年号\) にまたがる場合に、メソッドで年の差分が返されません。 によって返される値の差を計算する代わりに、 <xref:System.DateTime.Year%2A> プロパティ、次の例のように: `date2.Year - date1.Year`です。  
  
-   **その他の間隔。**すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、メソッドを提供する時間間隔を検索する追加のオプションです。 たとえば、使用することができます、 `Subtract` メソッド オーバー ロードされた形式のいずれかで: <xref:System.DateTime.Subtract%2A?displayProperty=fullName> 減算、 <xref:System.TimeSpan> から、 `Date` を返す別の変数 `Date` 値、および <xref:System.DateTime.Subtract%2A?displayProperty=fullName> 減算、 `Date` に返される値、 <xref:System.TimeSpan>です。 次のようにかかる時間をミリ秒数を確認する処理時間の計測することができます。  
  
     [!code-vb[VbVbalrFunctions\#61](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#61)]  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|文字列値|時間間隔の単位|  
|---------|----------|-------------|  
|`DateInterval.Day`|"d"|Day|  
|`DateInterval.DayOfYear`|"y"|Day|  
|`DateInterval.Hour`|"h"|Hour|  
|`DateInterval.Minute`|"n"|Minute|  
|`DateInterval.Month`|"m"|月|  
|`DateInterval.Quarter`|"q"|四半期|  
|`DateInterval.Second`|"s"|Second|  
|`DateInterval.Weekday`|"w"|週|  
|`DateInterval.WeekOfYear`|"ww"|カレンダーの週|  
|`DateInterval.Year`|"yyyy"|Year|  
  
 `DayOfWeek` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システム設定で指定した最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 \(既定値\)|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `WeekOfYear` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstWeekOfYear.System`|0|システムの設定で指定された年の第 1 週|  
|`FirstWeekOfYear.Jan1`|1|週を月 1 日 \(既定値\)|  
|`FirstWeekOfYear.FirstFourDays`|2|\(ISO 8601 の標準的な 3.17 に準拠して\) 新しい年に、少なくとも 4 日間にある最初の週|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週|  
  
   
  
## 例  
 この例では、 `DateDiff` に指定した日から今日までの日数を表示するためです。  
  
 [!code-vb[VbVbalrFunctions\#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Date1" />, 、<paramref name="Date2" />, 、または <paramref name="DayofWeek" /> が範囲外です。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="Date1" /> または <paramref name="Date2" /> が無効な型です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.TimeSpan" />
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(valuetype Microsoft.VisualBasic.DateInterval Interval, valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue, valuetype Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="Microsoft.VisualBasic.DateInterval" />
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="FirstWeekOfYearValue" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> を取得する日付\/時刻値の一部を表す式。</param>
        <param name="DateValue">必須です。<see langword="Date" /> 評価する値。</param>
        <param name="FirstDayOfWeekValue">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="FirstWeekOfYearValue">省略可能です。 選択した値、 <see langword="FirstWeekOfYear" /> 年の最初の週を指定する列挙体です。 指定しない場合は、<see langword="FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>返します。、 <see langword="Integer" /> 値の指定したコンポーネントを含む、指定された <see langword="Date" /> 値。</summary>
        <returns>返します。、 <see langword="Integer" /> 値の指定したコンポーネントを含む、指定された <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DatePart` 関数を日付\/時刻値を評価し、特定の部分を返します。 たとえば、使用する場合があります `DatePart` 曜日や現在の時刻の日を計算します。  
  
 選択した場合 `DateInterval.Weekday` の `Interval` 引数は、返される値です。 の値と矛盾して、 `FirstDayOfWeek` 列挙します。 選択した場合 `DateInterval.WeekOfYear`, 、`DatePart` を使用して、 <xref:System.Globalization.Calendar> と <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization> 名前空間を現在の設定を確認します。  
  
 `FirstDayOfWeekValue` 引数を使用する計算に影響を与えます、 `DateInterval.Weekday` と `DateInterval.WeekOfYear` `Interval` 設定します。 `FirstWeekOfYearValue` 引数を指定するための計算に影響を与えます `DateInterval.WeekOfYear` の `Interval`です。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、そのメソッドを提供する日付\/時刻の部分を取得する追加のオプションです。 たとえばの全体の日付の値を取得できます、 `Date` な時刻値の変数が次のように日午前 0 時に設定します。  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|String|返す日付\/時刻値の一部|  
|---------|------------|------------------|  
|`DateInterval.Day`|日|日 \(1 ～ 31\)|  
|`DateInterval.DayOfYear`|Y|年間通算日 \(1 ～ 366\)|  
|`DateInterval.Hour`|時|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|分|月|  
|`DateInterval.Quarter`|q|四半期|  
|`DateInterval.Second`|秒|Second|  
|`DateInterval.Weekday`|週|曜日 \(1 ～ 7\)|  
|`DateInterval.WeekOfYear`|ww|週 \(1 ～ 53\)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システム設定で指定した最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 \(既定値\)|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `FirstWeekOfYearValue` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstWeekOfYear.System`|0|システムの設定で指定された年の第 1 週|  
|`FirstWeekOfYear.Jan1`|1|週を月 1 日 \(既定値\)|  
|`FirstWeekOfYear.FirstFourDays`|2|\(ISO 8601 の標準的な 3.17 に準拠して\) 新しい年に、少なくとも 4 日間にある最初の週|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週|  
  
   
  
## 例  
 この例では、日付を使用して、 `DatePart` 関数が発生する年の四半期が表示されます。  
  
 [!code-vb[VbVbalrFunctions\#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> が無効です。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> 強制変換は <see langword="Date" />です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DatePart">
      <MemberSignature Language="C#" Value="public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 DatePart(string Interval, object DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek, valuetype Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Interval" Type="System.String" />
        <Parameter Name="DateValue" Type="System.Object" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
        <Parameter Name="WeekOfYear" Type="Microsoft.VisualBasic.FirstWeekOfYear" />
      </Parameters>
      <Docs>
        <param name="Interval">必須です。<see langword="DateInterval" /> 列挙値または <see langword="String" /> を取得する日付\/時刻値の一部を表す式。</param>
        <param name="DateValue">必須です。<see langword="Date" /> 評価する値。</param>
        <param name="DayOfWeek">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <param name="WeekOfYear">省略可能です。 選択した値、 <see langword="FirstWeekOfYear" /> 年の最初の週を指定する列挙体です。 指定しない場合は、<see langword="FirstWeekOfYear.Jan1" /> が使用されます。</param>
        <summary>返します。、 <see langword="Integer" /> 値の指定したコンポーネントを含む、指定された <see langword="Date" /> 値。</summary>
        <returns>返します。、 <see langword="Integer" /> 値の指定したコンポーネントを含む、指定された <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、 `DatePart` 関数を日付\/時刻値を評価し、特定の部分を返します。 たとえば、使用する場合があります `DatePart` 曜日や現在の時刻の日を計算します。  
  
 選択した場合 `DateInterval.Weekday` の `Interval` 引数は、返される値です。 の値と矛盾して、 `FirstDayOfWeek` 列挙します。 選択した場合 `DateInterval.WeekOfYear`, 、`DatePart` を使用して、 <xref:System.Globalization.Calendar> と <xref:System.Globalization.CultureInfo> クラスの <xref:System.Globalization> 名前空間を現在の設定を確認します。  
  
 `FirstDayOfWeekValue` 引数を使用する計算に影響を与えます、 `DateInterval.Weekday` と `DateInterval.WeekOfYear` `Interval` 設定します。 `FirstWeekOfYearValue` 引数を指定するための計算に影響を与えます `DateInterval.WeekOfYear` の `Interval`です。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、そのメソッドを提供する日付\/時刻の部分を取得する追加のオプションです。 たとえばの全体の日付の値を取得できます、 `Date` な時刻値の変数が次のように日午前 0 時に設定します。  
  
```vb  
Dim CurrDatTim As Date = Now   ' Current date and time.  
Dim LastMidnight As Date = CurrDatTim.Date   ' At midnight.  
```  
  
 `Interval` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|String|返す日付\/時刻値の一部|  
|---------|------------|------------------|  
|`DateInterval.Day`|日|日 \(1 ～ 31\)|  
|`DateInterval.DayOfYear`|Y|年間通算日 \(1 ～ 366\)|  
|`DateInterval.Hour`|時|Hour|  
|`DateInterval.Minute`|n|Minute|  
|`DateInterval.Month`|分|月|  
|`DateInterval.Quarter`|q|四半期|  
|`DateInterval.Second`|秒|Second|  
|`DateInterval.Weekday`|週|曜日 \(1 ～ 7\)|  
|`DateInterval.WeekOfYear`|ww|週 \(1 ～ 53\)|  
|`DateInterval.Year`|yyyy|Year|  
  
 `FirstDayOfWeekValue` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システム設定で指定した最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 \(既定値\)|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
 `FirstWeekOfYearValue` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstWeekOfYear.System`|0|システムの設定で指定された年の第 1 週|  
|`FirstWeekOfYear.Jan1`|1|週を月 1 日 \(既定値\)|  
|`FirstWeekOfYear.FirstFourDays`|2|\(ISO 8601 の標準的な 3.17 に準拠して\) 新しい年に、少なくとも 4 日間にある最初の週|  
|`FirstWeekOfYear.FirstFullWeek`|3|新しい年の第 1 週|  
  
   
  
## 例  
 この例では、日付を使用して、 `DatePart` 関数が発生する年の四半期が表示されます。  
  
 [!code-vb[VbVbalrFunctions\#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Interval" /> が正しくありません。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="DateValue" /> 強制変換は <see langword="Date" />です。</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateAdd" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DateDiff" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateSerial">
      <MemberSignature Language="C#" Value="public static DateTime DateSerial (int Year, int Month, int Day);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateSerial(int32 Year, int32 Month, int32 Day) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Year" Type="System.Int32" />
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Day" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Year">必須です。<see langword="Integer" /> 1 9999 からまでの式です。 ただし、この範囲を下回る値も指定します。 場合 <c>Year</c> 0 ~ 99 は、以下の「解説」セクションで説明したよう 1930 と 2029 間するものとして解釈されます。 場合 <c>Year</c> 1 より小さい値は、現在の年から差し引かれます。</param>
        <param name="Month">必須です。<see langword="Integer" /> 1 ~ 12 の式です。 ただし、この範囲外の値も指定します。 値 <c>Month</c> は 1 だけオフセットされ、計算された年の 1 月に適用します。 つまり、\(<c>Month</c> \- 1\) が 1 月に追加します。 年は、必要な場合に再計算されます。 次の結果は、この効果を示しています。  
  
 場合 <c>Month</c> は 1 ですが、計算された年の 1 月になります。  
  
 場合 <c>Month</c> が 0 の結果は前の年の 12 月場合、。  
  
 場合 <c>Month</c> \-1 で、前の年の 11 月になります。  
  
 場合 <c>Month</c> 13 は、次の年の 1 月になります。</param>
        <param name="Day">必須です。<see langword="Integer" /> 1 ~ 31 の式です。 ただし、この範囲外の値も指定します。 値 <c>Day</c> は 1 だけオフセットされ、計算された月の最初の日に適用します。 つまり、\(<c>Day</c> \- 1\) に追加の月の最初です。 必要に応じて、月と年が再計算されます。 次の結果は、この効果を示しています。  
  
 場合 <c>Day</c> は 1 ですが、計算された月の最初の日になります。  
  
 場合 <c>Day</c> が 0 の結果は、前の月の最終日場合、。  
  
 場合 <c>Day</c> \-1 で、前の月の最後から 2 番目の日になります。  
  
 場合 <c>Day</c> 結果、現在の月の最後は、次の月の適切な日付を過ぎています。 たとえば場合、 <c>Month</c> は 4 と <c>Day</c> 31 の場合、結果は 5 月 1日です。</param>
        <summary>返します。、 <see langword="Date" /> 午前 0 時に設定された時刻情報と共に、指定した年、月、および日を表す値 \(00: 00:00\)。</summary>
        <returns>返します。、 <see langword="Date" /> 午前 0 時に設定された時刻情報と共に、指定した年、月、および日を表す値 \(00: 00:00\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Windows 98 または Windows 2000 では、下 2 桁の年、 `Year` 引数は、コンピューターのユーザー定義の設定に基づいて解釈されます。 既定の設定では 0 から 29 までの値は 2000年 ~ 2029 年 30 ~ 99 の値は 1930年 ~ 1999 年として解釈されます。 他のすべての `Year` 引数を使用する 4 桁の年。 たとえば、1924 します。  
  
 以前のバージョンの Windows には、2 桁の年が前に説明した既定値に基づきますが解釈されます。 関数が正しい値を返すことを確認、4 桁を使用して `Year`します。  
  
 次の例は、負の値は 0、および引数の正の値。 ここでは、 `DateSerial` 関数が返される、 `Date` 、10 年前、現在の年に、の 3 月の最初の日の前日を表す 10 年前の 2 月の末日言い換えれば、します。  
  
```vb  
Dim EndFeb As Date = DateSerial(-10, 3, 0)  
```  
  
 いずれか `Month` または `Day` 正常な範囲を超える場合、単位に適切に適用されます。 たとえば、32 日を指定すると、評価されますとして 1 か月と 1 ~ 4 日間の値に応じて `Month`します。 場合 `Year` が 9999 より大きい、またはいずれかの引数が\-2,147, 483,648 ~ 2,147, 483,647、範囲外にある場合、 <xref:System.ArgumentException> エラーが発生します。 次の 3 つの引数で指定した日付よりも前か 1 の場合、または年 12 月 31 日 23時 59分: 59 よりも後の年 1 月 1 日 00時 00分: 00 から 9999 場合、 <xref:System.ArgumentOutOfRangeException> エラーが発生します。  
  
 `Date` データ型には、時間のコンポーネントが用意されています。`DateSerial` 返される値が計算された日の開始を表しますようは、0 にこれらすべてを設定します。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime> 構造体、そのメソッドを提供する追加のオプションをまとめること、 `Date` 値。 オーバー ロードされたいずれかを使用するなど、 <xref:System.DateTime.%23ctor%2A> を設定するコンス トラクター、 `Date` コンポーネントの目的の組み合わせを使用して変数です。 設定を次に例 `NewDateTime` 1978 年 5 月 6日 8:30 の前に 1 秒あたりの 10 分の 1 つにします。  
  
```vb  
Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## 例  
 この例では、 `DateSerial` を指定した年、月、および日の日付を返す関数。  
  
 [!code-vb[VbVbalrFunctions\#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="N:System" />
      </Docs>
    </Member>
    <Member MemberName="DateString">
      <MemberSignature Language="C#" Value="public static string DateString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DateString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.DateString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="String" /> 、システムによって現在の日付を表す値。</summary>
        <value>返すか設定、 <see langword="String" /> 、システムによって現在の日付を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `DateString` システム日付を月の省略名を使用して年\-月\-日形式で返します。 日付の許容される形式は、M\-d yyyy, M\-y d、m\/d\/yyyy、および M\/d 前年比です。 これは、2 バイト文字セット \(DBCS\) を使用するものを除くすべてのシステム ロケールの場合は true です。 システム ロケールは、2 バイト文字セットを使用している場合 `DateString` yyyy\-mm\-dd の形式で、システムの日付を返します。 使用して、システムのロケールを設定、 **時計、言語および地域** で **コントロール パネルの \[**します。  
  
 **注** 、 `DateString` プロパティは、システムの日付を yyyy\-mm\-dd の形式でのみを返します、 `zh` \(中国語簡体字\)、 `ko` \(韓国語\)、および `ja` Silverlight で Visual Basic を実行している場合 \(日本語版\) システム ロケールです。  
  
 取得またはとして現在のシステム時刻を設定する、 `String`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> プロパティです。  
  
 現在のロケールの形式でまたはカスタム形式では、現在のシステム日付または時刻を取得、次のように指定します。、 <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> プロパティを、 <xref:Microsoft.VisualBasic.Strings.Format%2A> 関数のいずれか、定義済みまたはユーザー定義の日付\/時刻書式を指定します。 次に例を示します。  
  
```  
MsgBox("The formatted date is " & Format(Now, "dddd, d MMM yyyy"))  
```  
  
 現在のシステム日付にアクセスする、 `Date`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティです。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。 <xref:System.Security.Permissions.SecurityPermission> と [コード アクセス許可](http://msdn.microsoft.com/ja-jp/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## 例  
 次の例では、 `DateString` プロパティを現在のシステム日付を表示します。  
  
 [!code-vb[VbVbalrDateProperties\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">値を設定するため、無効な形式 <see langword="DateString" />します。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="DateValue">
      <MemberSignature Language="C#" Value="public static DateTime DateValue (string StringDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime DateValue(string StringDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringDate" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringDate">必須です。<see langword="String" /> 9999 年 12 月 31 日の 23時 59分: 59 まで 1 年 1 月 1 日 00:00:00 から日付\/時刻値を表す式です。</param>
        <summary>返します。、 <see langword="Date" /> 時間情報が午前 0 時に設定された文字列で表される日付情報を含む値 \(00: 00:00\)。</summary>
        <returns>
          <see langword="Date" /> 時間の情報が午前 0 時に設定された文字列で表される日付情報を含む値 \(00: 00:00\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `StringDate` 1 ~ 12 の有効な日付の区切り記号で区切られた数字だけを含む `DateValue` は月、日、およびシステムで指定した短い形式の日付形式に従って年の順序を認識します。`DateValue` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。 短い日付形式を設定して上書きできます、 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> のプロパティ、 <xref:System.Globalization.DateTimeFormatInfo> クラス、 <xref:System.Globalization> 名前空間。  
  
 `DateValue` 長、省略形、および数値の形式で月の名前を認識します。 12\/30\/1991年\/12\/30\/91 を認識するだけでなく、 `DateValue` 1991 年 12 月 30 日と 1991 年 12 月 30 日にも認識します。  
  
 場合の年の部分 `StringDate` を省略すると、 `DateValue` は現在の年、コンピューターのシステム日付を使用します。  
  
 場合、 `StringDate` 引数には、時刻の情報が含まれています。 `DateValue` 、返される値には含まれません。 ただし場合、 `StringDate` 「89: 98」などの無効な時刻の情報が含まれた、 <xref:System.InvalidCastException> エラーが発生します。  
  
   
  
## 例  
 この例では、 `DateValue` 文字列を日付に変換する関数。 日付を直接割り当てるため、日付リテラルを使用することも、 `Object` または `Date` 変数、たとえば、 `oldDate = #2/12/69#`です。  
  
 [!code-vb[VbVbalrFunctions\#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringDate" /> 無効な時刻情報が含まれます。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static int Day (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Day(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。<see langword="Date" /> 日を抽出する値。</param>
        <summary>返します。、 <see langword="Integer" /> 1 ~ 31 の月の日付を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 1 ~ 31 の月の日付を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する場合、 `Day` 関数で修飾する必要があります、 `Microsoft.VisualBasic` 名前空間、ため、 <xref:System.Windows.Forms> 名前空間を定義 <xref:System.Windows.Forms.Day> 列挙体として。 例を次にどのように適合 `Day` このあいまいさを解決します。  
  
```vb  
Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)  
```  
  
 呼び出して、月の日を取得することも `DatePart` を指定して `DateInterval.Day` の *間隔* 引数。  
  
   
  
## 例  
 次の例では、 `Day` 指定された日付の月の日を取得します。 開発環境では、日付リテラルは、コードのロケール設定を使用して標準の短い形式 \(「02\/12\/1969」\) などで表示されます。  
  
 [!code-vb[VbVbalrFunctions\#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#30)]  
  
 `Day` 修飾から区別するためには、 <xref:System.Windows.Forms.Day?displayProperty=fullName> 列挙します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static int Hour (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Hour(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。<see langword="Date" />時間を抽出する値。</param>
        <summary>返します、 <see langword="Integer" /> 0 ~ 23、日の時間を表す値です。</summary>
        <returns>返します、 <see langword="Integer" /> 0 ~ 23、日の時間を表す値です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して、1 日の時間を取得することも`DatePart`を指定して`DateInterval.Hour`用、`Interval`引数。  
  
   
  
## 例  
 この例では、`Hour`指定された時間から 1 時間を取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions\#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static int Minute (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Minute(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。<see langword="Date" /> 分を抽出する値。</param>
        <summary>返します。、 <see langword="Integer" /> 0 ~ 59 分、時間を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 0 ~ 59 分、時間を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して、分を取得することも `DatePart` を指定して `DateInterval.Minute` の `Interval` 引数。  
  
   
  
## 例  
 この例では、 `Minute` 、指定された時間から、分を取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions\#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="Month">
      <MemberSignature Language="C#" Value="public static int Month (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Month(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。<see langword="Date" /> 月を抽出する値。</param>
        <summary>返します。、 <see langword="Integer" /> 1 ~ 12 年の月を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 1 ~ 12 年の月を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して、年の月を取得することも `DatePart` を指定して `DateInterval.Month` の `Interval` 引数。  
  
   
  
## 例  
 この例では、 `Month` 指定された日付の月を取得します。 開発環境で、日付リテラルの表示短い日付形式で、コードのロケール設定を使用します。  
  
 [!code-vb[VbVbalrFunctions\#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#43)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="MonthName">
      <MemberSignature Language="C#" Value="public static string MonthName (int Month, bool Abbreviate = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static string MonthName(int32 Month, bool Abbreviate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Month" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Month">必須です。<see langword="Integer" />。 数値で指定した、月、1 ~ 13 です。1 年 1 月、12 月 12 月を示します。 13 か月カレンダーでは、値 13 を使用できます。 システムが 12 か月カレンダーを使用していると <c>Month</c> 13、 <see langword="MonthName" /> 、空の文字列を返します。</param>
        <param name="Abbreviate">省略可能です。<see langword="Boolean" /> 月の名前を省略するかどうかを示す値です。 省略した場合、既定値は <see langword="False" />, 、つまり月の名前は省略されません。</param>
        <summary>返します。、 <see langword="String" /> 指定した月の名前を格納します。</summary>
        <returns>返します。、 <see langword="String" /> 指定した月の名前を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される文字列 `MonthName` 上だけでなく、入力引数にも依存して、 **地域のオプション** 、Windows で指定された設定 **コントロール パネルの \[**します。  
  
> [!NOTE]
>  `MonthName` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。  
  
   
  
## 例  
 この例では、 `MonthName` を指定された整数の月の名前を調べます。 ブール値が決定されるかどうか、完全な名前 \(`False`\) または省略名 \(`True`\) が表示されます。  
  
 [!code-vb[VbVbalrFunctions\#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Month" /> 1 より小さいか、13 を超えるです。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="Now">
      <MemberSignature Language="C#" Value="public static DateTime Now { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Now" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Now" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返します。、 <see langword="Date" /> 現在の日付とシステム時刻を表す値。</summary>
        <value>返します。、 <see langword="Date" /> 現在の日付とシステム時刻を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 システムの日付を設定するには、使用、 <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティです。 システム時刻を設定するには、使用、 <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティです。  
  
   
  
## 例  
 次の例では、 `Now` プロパティを現在のシステム日付と時刻を取得します。  
  
 [!code-vb[VbVbalrDateProperties\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static int Second (DateTime TimeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Second(valuetype System.DateTime TimeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="TimeValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="TimeValue">必須です。<see langword="Date" /> 2 番目を抽出する値。</param>
        <summary>返します。、 <see langword="Integer" /> 0 ~ 59 分、秒を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 0 ~ 59 分、秒を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 番目の分を入手して `DatePart` を指定して `DateInterval.Second` の `Interval` 引数。  
  
   
  
## 例  
 次の例では、 `Second` 、指定された時間から分の 1 秒を取得します。 開発環境では、時刻リテラルは、コードのロケール設定を使用して短い時刻形式で表示されます。  
  
 [!code-vb[VbVbalrFunctions\#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="N:System" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeOfDay">
      <MemberSignature Language="C#" Value="public static DateTime TimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime TimeOfDay" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="Date" /> システムの現在の時刻を含む値。</summary>
        <value>返すか設定、 <see langword="Date" /> システムの現在の時刻を含む値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Date` データ型には、日付のコンポーネントが用意されています。 システム時刻を返す場合 `TimeOfDay` を 1 に、これらはすべてを設定するため、返される値は、1 年の最初の日を表します。 システム時刻を設定するときに `TimeOfDay` 日付の構成要素は無視されます。  
  
 として現在のシステム時刻にアクセスする、 `String`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A> プロパティです。  
  
 を取得または現在のシステム日付を設定するには、使用、 <xref:Microsoft.VisualBasic.DateAndTime.Today%2A> プロパティです。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。 <xref:System.Security.Permissions.SecurityPermission> と [コード アクセス許可](http://msdn.microsoft.com/ja-jp/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## 例  
 この例では、 `TimeOfDay` を現在のシステム時刻を返すプロパティ。  
  
 [!code-vb[VbVbalrDateProperties\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Timer" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Timer">
      <MemberSignature Language="C#" Value="public static double Timer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property float64 Timer" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Timer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返します。、 <see langword="Double" /> 午前 0 時から経過した秒数を表す値。</summary>
        <value>返します。、 <see langword="Double" /> 午前 0 時から経過した秒数を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Timer` プロパティは、最新の午前 0 時から秒とミリ秒数の両方を返します。 戻り値の整数部分が、秒、ミリ秒数に小数部あります。  
  
   
  
## 例  
 この例では、 `Timer` プロパティをアプリケーションを一時停止します。 一時停止中には、他の処理を実行できます。  
  
 [!code-vb[VbVbalrTimerProperty\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTimerProperty/VB/Form1.vb#1)]  
  
 修飾する必要があります、 `Timer` プロパティを <xref:Microsoft.VisualBasic?displayProperty=fullName> 名前空間、ため `Timer` はで定義されたクラスでも、 <xref:System.Threading?displayProperty=fullName>, 、<xref:System.Timers?displayProperty=fullName>, 、および <xref:System.Windows.Forms?displayProperty=fullName> 名前空間。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.VBMath.Randomize" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Today" />
        <altmember cref="N:System" />
        <altmember cref="N:System.Windows.Forms" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <Member MemberName="TimeSerial">
      <MemberSignature Language="C#" Value="public static DateTime TimeSerial (int Hour, int Minute, int Second);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeSerial(int32 Hour, int32 Minute, int32 Second) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Hour" Type="System.Int32" />
        <Parameter Name="Minute" Type="System.Int32" />
        <Parameter Name="Second" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Hour">必須です。<see langword="Integer" /> 0 ~ 23 の式です。 ただし、この範囲外の値も指定します。</param>
        <param name="Minute">必須です。<see langword="Integer" /> 0 ~ 59 の式です。 ただし、この範囲外の値も指定します。 値 <c>Minute</c> 計算された時刻に追加されるので、負の値は、その時刻より前に、の分を指定します。</param>
        <param name="Second">必須です。<see langword="Integer" /> 0 ~ 59 の式です。 ただし、この範囲外の値も指定します。 値 <c>Second</c> は計算される分単位で追加されるので、負の値は、その分までの秒を指定します。</param>
        <summary>返します。、 <see langword="Date" /> 1 年 1 月 1 日を基準に設定する日付情報を含む指定された時間、分、および秒を表す値。</summary>
        <returns>返します。、 <see langword="Date" /> 1 年 1 月 1 日を基準に設定する日付情報を含む指定された時間、分、および秒を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の例は、負の値は 0、および引数の正の値。`TimeSerial` 関数は、15 分、午後の時刻または 8時 45分: 00 AM の 3 時間前に、の時刻を返します。  
  
```vb  
Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)  
```  
  
 いずれか `Minute` または `Second` 正常な範囲を超える場合、単位に適切に適用されます。 たとえば、75 分を指定する場合は 1 時間 15 分として評価されます。  
  
 `TimeSerial` 1 日の秒数である 86,400、剰余合計秒数が減少します。 したがって、返される時刻は 00時 00分: 00 と 23時 59分: 59 の間で常にです。  
  
 `Date` データ型には、日付のコンポーネントが用意されています。`TimeSerial` 返される値は 1 年の最初の日を表すためすべてを 1 に、これらのオプションを設定します。 ただし、引数の値によって計算された時刻が 24 時間を超える場合、1 日は、必要に応じてが増加します。 次の例の値で `Hour` と `Minute` 24 時間以上の結合時に発生します。  
  
```vb  
MsgBox(TimeSerial(23, 75, 0))   
' The preceding statement displays "1/2/0001 12:15:00 AM".  
```  
  
 引数の値は、負の値の計算時間になる、日付情報は 1\/1\/0001 を設定し、時刻情報は、00時 00分: 00 ~ 23時 59分: 59 でなければに調整します。 ただし、計算される時間が負の値 24 時間未満である場合、 <xref:System.ArgumentOutOfRangeException> エラーが発生します。  
  
 すべて `Date` 値でサポートされて、 <xref:System.DateTime?displayProperty=fullName> 構造体、そのメソッドを提供する追加のオプションをまとめること、 `Date` 値。 オーバー ロードされたいずれかを使用するなど、 <xref:System.DateTime.%23ctor%2A> を設定するコンス トラクター、 `Date` コンポーネントの目的の組み合わせを使用して変数です。 設定を次に例 `newDateTime` 1978 年 5 月 6日 8:30 の前に 1 秒あたりの 10 分の 1 つにします。  
  
```vb  
Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)  
```  
  
   
  
## 例  
 次の例では、 `TimeSerial` 関数を指定された時間、分、および秒の時刻を返します。  
  
 [!code-vb[VbVbalrFunctions\#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">引数は、\-2,147, 483,648 ~ 2,147, 483,647 の範囲外</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">計算は負の値の 24 時間未満です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TimeString">
      <MemberSignature Language="C#" Value="public static string TimeString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string TimeString" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.TimeString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="String" /> 、システムの現在の時刻を表す値。</summary>
        <value>返すか設定、 <see langword="String" /> 、システムの現在の時刻を表す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `TimeString` 常に 24 時間形式は"HH:mm:ss"としてのシステム時刻を返します。 この形式はカルチャに依存しない、変更した場合でも変わらないことを意味する、 **地域のオプション** で **コントロール パネルの \[**します。  
  
 取得またはとして現在のシステム日付を設定する、 `String`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> プロパティです。  
  
 現在のロケールの形式でまたはカスタム形式では、現在のシステム日付または時刻を取得、次のように指定します。、 <xref:Microsoft.VisualBasic.DateAndTime.Now%2A> プロパティを、 <xref:Microsoft.VisualBasic.Strings.Format%2A> 関数のいずれか、定義済みまたはユーザー定義の日付\/時刻書式を指定します。 次に例を示します。  
  
```  
MsgBox("The formatted time is " & Format(Now, "hh.mm.ss.fff tt"))  
```  
  
 として現在のシステム時刻にアクセスする、 `Date`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティです。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定すると、部分的な信頼された状況では、その実行を与える可能性があるアンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。 <xref:System.Security.Permissions.SecurityPermission> と [コード アクセス許可](http://msdn.microsoft.com/ja-jp/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## 例  
 この例では、 `TimeString` プロパティを現在のシステム時刻を表示します。  
  
 [!code-vb[VbVbalrDateProperties\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">値を設定するため、無効な形式 <see langword="TimeString" />します。</exception>
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.DateString" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.TimeOfDay" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="TimeValue">
      <MemberSignature Language="C#" Value="public static DateTime TimeValue (string StringTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime TimeValue(string StringTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringTime" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="StringTime">必須です。<see langword="String" /> 9999 年 12 月 31 日の 23時 59分: 59 まで 1 年 1 月 1 日 00:00:00 から日付\/時刻値を表す式です。</param>
        <summary>返します。、 <see langword="Date" /> 日付情報が 1 年 1 月 1 日に設定された文字列で表される時刻情報を含む値。</summary>
        <returns>返します。、 <see langword="Date" /> 日付情報が 1 年 1 月 1 日に設定された文字列で表される時刻情報を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な時刻を入力する 12 時間制または 24 時間制を使用しています。 たとえば、 `"2:24 P.M."` と `"14:24"` が両方とも有効な `StringTime` 引数。  
  
 場合、 `StringTime` 引数には、日付情報が含まれています。 `TimeValue` 、返される値には含まれません。 ただし場合、 `StringTime` "年 32年 1 月"など、無効な日付情報が含まれた、 <xref:System.InvalidCastException> エラーが発生します。  
  
   
  
## 例  
 次の例では、 `TimeValue` 時刻を文字列に変換する関数。 時間を直接割り当てるため、日付リテラルを使用することも、 `Date` 変数です。  
  
 [!code-vb[VbVbalrFunctions\#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="StringTime" /> 無効な日付が含まれます。</exception>
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateValue(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Today">
      <MemberSignature Language="C#" Value="public static DateTime Today { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.DateTime Today" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.DateAndTime.Today" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="Date" /> 、システムによって現在の日付を含む値。</summary>
        <value>返すか設定、 <see langword="Date" /> 、システムによって現在の日付を含む値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Date` データ型には、時間のコンポーネントが用意されています。 システム日付を返す場合 `Today` を 0 にこれらのすべて設定するため、返される値は、午前 0 時を表します \(00: 00:00\)。 システムの日付を設定するときに `Today` 時コンポーネントは無視されます。  
  
 現在のシステム日付にアクセスする、 `String`, を使用して、 <xref:Microsoft.VisualBasic.DateAndTime.DateString%2A> プロパティです。  
  
 を取得または現在のシステム時刻を設定するには、使用、 <xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A> プロパティです。  
  
> [!IMPORTANT]
>  システムの日付または時刻を設定するには、アンマネージ コード アクセス許可が必要です。 詳細については、次を参照してください。 <xref:System.Security.Permissions.SecurityPermission> と [コード アクセス許可](http://msdn.microsoft.com/ja-jp/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
   
  
## 例  
 この例では、 `Today` を現在のシステム日付を返すプロパティ。  
  
 [!code-vb[VbVbalrDateProperties\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrDateProperties/VB/Module1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Weekday">
      <MemberSignature Language="C#" Value="public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Weekday(valuetype System.DateTime DateValue, valuetype Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
        <Parameter Name="DayOfWeek" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。<see langword="Date" /> 週の曜日を決定する値。</param>
        <param name="DayOfWeek">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.Sunday" /> が使用されます。</param>
        <summary>返します。、 <see langword="Integer" /> 週の曜日を表す数値を含む。</summary>
        <returns>返します。、 <see langword="Integer" /> 週の曜日を表す数値を含む。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される値、 `Weekday` の値に対応する関数、 `FirstDayOfWeek` 列挙型。 つまり、1 は日曜日を示す、7 は土曜日を表します。  
  
> [!NOTE]
>  `Weekday` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。  
  
 `DayOfWeek` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システム設定で指定した最初の曜日|  
|`FirstDayOfWeek.Sunday`|1|日曜日 \(既定値\)|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
   
  
## 例  
 次の例では、 `Weekday` 、指定された日付、週の曜日を取得します。  
  
 [!code-vb[VbVbalrFunctions\#57](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="DayOfWeek" /> 0 より小さいか、7 よりも詳細です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="WeekdayName">
      <MemberSignature Language="C#" Value="public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);" />
      <MemberSignature Language="ILAsm" Value=".method public static string WeekdayName(int32 Weekday, bool Abbreviate, valuetype Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Weekday" Type="System.Int32" />
        <Parameter Name="Abbreviate" Type="System.Boolean" />
        <Parameter Name="FirstDayOfWeekValue" Type="Microsoft.VisualBasic.FirstDayOfWeek" />
      </Parameters>
      <Docs>
        <param name="Weekday">必須です。<see langword="Integer" />。 1 ~ 7 は、曜日の数値の指定1 は週の最初の日、7 は週の最終日を示します。 最初と最後の日の id は、の設定によって異なります。 <c>FirstDayOfWeekValue</c>します。</param>
        <param name="Abbreviate">省略可能です。<see langword="Boolean" /> 曜日名を省略するかどうかを示す値です。 省略した場合、既定値は <see langword="False" />, 、つまり、曜日名は省略されません。</param>
        <param name="FirstDayOfWeekValue">省略可能です。 選択した値、 <see langword="FirstDayOfWeek" /> 週の最初の日を指定する列挙体です。 指定しない場合は、<see langword="FirstDayOfWeek.System" /> が使用されます。</param>
        <summary>返します。、 <see langword="String" /> 指定した曜日の名前を格納します。</summary>
        <returns>返します。、 <see langword="String" /> 指定した曜日の名前を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される文字列 `WeekdayName` 上だけでなく、入力引数にも依存して、 **地域のオプション** 、Windows で指定された設定 **コントロール パネルの \[**します。  
  
> [!NOTE]
>  `WeekdayName` 現在の予定表の設定を使用して、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> クラス、 <xref:System.Globalization> 名前空間。 既定値 <xref:System.Globalization.CultureInfo.CurrentCulture%2A> によって値が決まる **コントロール パネルの \[** 設定します。  
  
 `FirstDayOfWeekValue` 引数は、次の設定のいずれかを設定できます。  
  
|列挙値|値|説明|  
|---------|-------|--------|  
|`FirstDayOfWeek.System`|0|システムで指定された週の最初の日 \(既定値\) の設定|  
|`FirstDayOfWeek.Sunday`|1|日曜日|  
|`FirstDayOfWeek.Monday`|2|月曜日 \(ISO 8601 の標準的な 3.17 に準拠しています\)|  
|`FirstDayOfWeek.Tuesday`|3|火曜日|  
|`FirstDayOfWeek.Wednesday`|4|水曜日|  
|`FirstDayOfWeek.Thursday`|5|木曜日|  
|`FirstDayOfWeek.Friday`|6|金曜日|  
|`FirstDayOfWeek.Saturday`|7|土曜日|  
  
   
  
## 例  
 次の例で、 `Weekday` 関数を指定された日付、週の曜日を取得し、 `WeekDayName` がその数を曜日の名前を取得します。  
  
 [!code-vb[VbVbalrFunctions\#58](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Weekday" /> 1 より小さいか、7 より大きいまたは <paramref name="FirstDayOfWeekValue" /> が 0 未満か、7 以上の場合。</exception>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
      </Docs>
    </Member>
    <Member MemberName="Year">
      <MemberSignature Language="C#" Value="public static int Year (DateTime DateValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Year(valuetype System.DateTime DateValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="DateValue" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="DateValue">必須です。<see langword="Date" /> 年を抽出する値。</param>
        <summary>返します。、 <see langword="Integer" /> 1 ~ 9999 年を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 1 ~ 9999 年を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出して、年を取得することも `DatePart` を指定して `DateInterval.Year` の `Interval` 引数。  
  
   
  
## 例  
 次の例では、 `Year` 指定された日付の年を取得します。 開発環境で、日付リテラルの表示短い日付形式で、コードのロケール設定を使用します。  
  
 [!code-vb[VbVbalrFunctions\#59](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#59)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)" />
        <altmember cref="P:Microsoft.VisualBasic.DateAndTime.Now" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
        <altmember cref="Overload:Microsoft.VisualBasic.DateAndTime.DatePart" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="T:System.ArgumentOutOfRangeException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DatePart">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返します。、 <see langword="Integer" /> 値の指定したコンポーネントを含む、指定された <see langword="Date" /> 値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DateAdd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返します。、 <see langword="Date" /> 指定した時間間隔が追加された日付と時刻の値を含む値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="DateDiff">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>返します。、 <see langword="Long" /> 2 つまでの時間間隔の数を指定する値 <see langword="Date" /> 値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>