<Type Name="Constants" FullName="Microsoft.VisualBasic.Constants">
  <TypeSignature Language="C#" Value="public sealed class Constants" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Constants extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Constants" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Constants" />モジュールには、その他の定数が含まれています。 これらの定数は、コード内の任意の場所で使用できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、多くの Visual Basic 列挙型のメンバーに対応する Visual Basic 言語の定数をサポートします。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="vbAbort">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbAbort = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbAbort = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbAbort" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Abort" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbAbortRetryIgnore">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbAbortRetryIgnore = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbAbortRetryIgnore = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbAbortRetryIgnore" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>示します、 <see langword="Abort" />, 、<see langword="Retry" />, 、および <see langword="Ignore" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbApplicationModal">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbApplicationModal = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbApplicationModal = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbApplicationModal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>メッセージ ボックスはモーダル ダイアログ ボックスとして表示されることを示す際にボックス、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbArchive">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbArchive = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbArchive = (32)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbArchive" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>ファイル アクセスの関数の最後のバックアップ操作、ファイルが変更されたことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbArray">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbArray = 8192;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbArray = (8192)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbArray" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>8192</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの型が配列であることを示します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbBack">
      <MemberSignature Language="C#" Value="public const string vbBack;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbBack" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbBack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バック スペースおよび文字を表します印刷用の関数を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbBinaryCompare">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CompareMethod vbBinaryCompare = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CompareMethod vbBinaryCompare = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbBinaryCompare" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CompareMethod</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>比較関数が呼び出されたときにバイナリ比較を実行することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較関数を呼び出すときに使用できます、 <xref:Microsoft.VisualBasic.CompareMethod> 実際の値の代わりに、コード内の列挙型。`Compare` 引数は、 `CompareMethod` 列挙型のメンバーです。  
  
 バイナリおよびテキストの比較では、次を参照してください。 [Option Compare Statement](http://msdn.microsoft.com/ja-jp/54e8eeeb-3b0d-4fb9-acce-fbfbd5975f6e)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="vbBoolean">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbBoolean = 11;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbBoolean = (11)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbBoolean" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>11</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Boolean" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbByte">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbByte = 17;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbByte = (17)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbByte" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>17</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Byte" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbCancel">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbCancel = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbCancel = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbCancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Cancel" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbCr">
      <MemberSignature Language="C#" Value="public const string vbCr;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbCr" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbCr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キャリッジ リターン、および文字を表します印刷用表示機能です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbCritical">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbCritical = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbCritical = (16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbCritical" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>メッセージの重要なアイコンになることを示す場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbCrLf">
      <MemberSignature Language="C#" Value="public const string vbCrLf;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbCrLf" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbCrLf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷用のライン フィード文字とその表示機能と組み合わせてキャリッジ リターン文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbCurrency">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbCurrency = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbCurrency = (6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbCurrency" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Currency" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDate">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbDate = 7;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbDate = (7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Date" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDecimal">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbDecimal = 14;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbDecimal = (14)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDecimal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>14</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Decimal" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDefaultButton1">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton1 = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton1 = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDefaultButton1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>メッセージ ボックスが表示されたら、左端のボタンが既定のボタンとして選択されていることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
   
  
## 例  
 [!code-vb[VbVbalrConstants\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDefaultButton2">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton2 = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton2 = (256)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDefaultButton2" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>メッセージ ボックスが表示されたら、既定のボタンと左から 2 番目のボタンが選択されていることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
   
  
## 例  
 [!code-vb[VbVbalrConstants\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDefaultButton3">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton3 = 512;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbDefaultButton3 = (512)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDefaultButton3" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary>メッセージ ボックスが表示されたら、既定のボタンと左から 3 番目のボタンが選択されていることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
   
  
## 例  
 [!code-vb[VbVbalrConstants\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrConstants/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbDirectory">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbDirectory = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbDirectory = (16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDirectory" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>ファイルがディレクトリまたはファイルへのアクセス関数用のフォルダーであることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbDouble">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbDouble = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbDouble = (5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbDouble" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Double" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbEmpty">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbEmpty = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbEmpty = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbEmpty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Empty" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbExclamation">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbExclamation = 48;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbExclamation = (48)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbExclamation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>48</MemberValue>
      <Docs>
        <summary>感嘆符のアイコンになることを示す場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbFalse">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.TriState vbFalse = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.TriState vbFalse = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFalse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TriState</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Boolean" /> の値 <see langword="False" /> 数値書式指定の関数が呼び出される場合に使用する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 関数の呼び出しの数の書式設定を使用する場合は、実際の値の代わりに、コードでは、次の列挙メンバー。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      </Docs>
    </Member>
    <Member MemberName="vbFirstFourDays">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstWeekOfYear vbFirstFourDays = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstWeekOfYear vbFirstFourDays = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFirstFourDays" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstWeekOfYear</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>少なくとも 4 日間の年の最初の週です日付関連の関数が呼び出されたときを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstWeekOfYear` 列挙体の有効な値を指定する、 `WeekOfYear` 、引数として関数の戻り値。  
  
 `WeekOfYear` 引数は、 `FirstWeekOfYear` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbFirstFullWeek">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstWeekOfYear vbFirstFullWeek = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstWeekOfYear vbFirstFullWeek = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFirstFullWeek" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstWeekOfYear</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>年の最初の週を日付関連の関数が呼び出されたときに使用することを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstWeekOfYear` 列挙体の有効な値を指定する、 `WeekOfYear` 、引数として関数の戻り値。  
  
 `WeekOfYear` 引数は、 `FirstWeekOfYear` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbFirstJan1">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstWeekOfYear vbFirstJan1 = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstWeekOfYear vbFirstJan1 = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFirstJan1" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstWeekOfYear</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>1 月 1 日が使用される日付に関連する関数が呼び出されるときに使用する年の通算週で次のことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstWeekOfYear` 列挙体の有効な値を指定する、 `WeekOfYear` 、引数として関数の戻り値。  
  
 `WeekOfYear` 引数は、 `FirstWeekOfYear` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbFormFeed">
      <MemberSignature Language="C#" Value="public const string vbFormFeed;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbFormFeed" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFormFeed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷機能のためのフォーム フィード文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbFriday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbFriday = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbFriday = (6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbFriday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>金曜日を日付関連の関数が呼び出されたときの週の最初の曜日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbGeneralDate">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.DateFormat vbGeneralDate = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.DateFormat vbGeneralDate = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbGeneralDate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.DateFormat</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>現在のカルチャの一般的な日付形式であることを示す際に使用される、 <see langword="FormatDateTime" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `FormatDateTime` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
> [!NOTE]
>  ダブルクリックして、コンピューターの地域設定にアクセスすることができます、 **地域のオプション** アイコン **コントロール パネルの \[**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      </Docs>
    </Member>
    <Member MemberName="vbGet">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CallType vbGet = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CallType vbGet = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbGet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CallType</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>プロパティの値があることを示します取得したときに、 <see langword="CallByName" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `CallByName` 関数の場合、以下を使用する `CallType` 実際の値の代わりに、コード内の列挙体メンバーです。`UseCallType` 引数は、 `CallType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbHidden">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbHidden = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbHidden = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbHidden" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>ファイルがファイル アクセスの関数の隠しファイルであることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbHide">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbHide = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbHide = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbHide" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>ウィンドウ スタイルが非表示であることを示します。 プログラムの呼び出されたときに、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbHiragana">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbHiragana = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbHiragana = (32)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbHiragana" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>ひらがなをカタカナに変換するかを示す文字に、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbIgnore">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbIgnore = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbIgnore = (5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbIgnore" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Ignore" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbInformation">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbInformation = 64;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbInformation = (64)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbInformation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>64</MemberValue>
      <Docs>
        <summary>情報アイコンは表示するタイミングを示します、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbInteger">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbInteger = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbInteger = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbInteger" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Integer" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbKatakana">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbKatakana = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbKatakana = (16)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbKatakana" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>カタカナをひらがなに変換する文字は文字ときに、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbLet">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CallType vbLet = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CallType vbLet = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CallType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>オブジェクトにプロパティ値を設定する必要があることを示します。 インスタンスの場合、 <see langword="CallByName" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `CallByName` 関数の場合、以下を使用する `CallType` 実際の値の代わりに、コード内の列挙体メンバーです。`UseCallType` 引数は、 `CallType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbLf">
      <MemberSignature Language="C#" Value="public const string vbLf;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbLf" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLf" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ライン フィードおよび文字を表します印刷用の関数を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbLinguisticCasing">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbLinguisticCasing = 1024;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbLinguisticCasing = (1024)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLinguisticCasing" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>1024</MemberValue>
      <Docs>
        <summary>ときに大文字と小文字の規則をファイル システムではなく大文字と小文字の言語の規則を使用する文字が変換されることを示す、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbLong">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbLong = 20;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbLong = (20)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLong" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>20</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類を示す <see langword="Long" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbLongDate">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.DateFormat vbLongDate = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.DateFormat vbLongDate = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLongDate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.DateFormat</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>現在のカルチャの長い日付形式であることを示す際に使用される、 <see langword="FormatDateTime" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `FormatDateTime` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
> [!NOTE]
>  ダブルクリックして、コンピューターの地域設定にアクセスすることができます、 **地域のオプション** アイコン **コントロール パネルの \[**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      </Docs>
    </Member>
    <Member MemberName="vbLongTime">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.DateFormat vbLongTime = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.DateFormat vbLongTime = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLongTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.DateFormat</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>現在のカルチャの長い時刻形式であることを示す際に使用される、 <see langword="FormatDateTime" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `FormatDateTime` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
> [!NOTE]
>  ダブルクリックして、コンピューターの地域設定にアクセスすることができます、 **地域のオプション** アイコン **コントロール パネルの \[**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      </Docs>
    </Member>
    <Member MemberName="vbLowerCase">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbLowerCase = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbLowerCase = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbLowerCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>文字が小文字に変換されることを示す、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbMaximizedFocus">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbMaximizedFocus = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbMaximizedFocus = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMaximizedFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>呼び出されたのフォーカスのあるウィンドウのスタイルを最大限活用できることを示します。 プログラムの場合、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbMethod">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CallType vbMethod = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CallType vbMethod = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMethod" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CallType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>指定する、メソッドを呼び出すときに、 <see langword="CallByName" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `CallByName` 関数の場合、以下を使用する `CallType` 実際の値の代わりに、コード内の列挙体メンバーです。`UseCallType` 引数は、 `CallType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbMinimizedFocus">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbMinimizedFocus = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbMinimizedFocus = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMinimizedFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>呼び出されたのフォーカスのあるウィンドウのスタイルを最小限に抑えることを示すプログラムの場合、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbMinimizedNoFocus">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbMinimizedNoFocus = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbMinimizedNoFocus = (6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMinimizedNoFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>呼び出されたのフォーカスのないウィンドウのスタイルを最小限に抑えることを示すプログラムの場合、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbMonday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbMonday = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbMonday = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMonday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>月曜日を週の日付に関連する関数が呼び出されたときの最初の日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbMsgBoxHelp">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxHelp = 16384;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxHelp = (16384)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMsgBoxHelp" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>16384</MemberValue>
      <Docs>
        <summary>示します、 <see langword="Help" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbMsgBoxRight">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxRight = 524288;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxRight = (524288)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMsgBoxRight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>524288</MemberValue>
      <Docs>
        <summary>テキストが右揃えタイミングを示す、<see langword="MsgBox" />関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、`MsgBox`関数を使用できます、`MsgBoxStyle`実際の値の代わりに、コード内で列挙します。`Buttons`引数は、`MsgBoxStyle`列挙型メンバー。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbMsgBoxRtlReading">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxRtlReading = 1048576;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxRtlReading = (1048576)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMsgBoxRtlReading" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary>右から左へのテキストを読む \(ヘブライ語やアラビア語のシステム\) となるを示す場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbMsgBoxSetForeground">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxSetForeground = 65536;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbMsgBoxSetForeground = (65536)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbMsgBoxSetForeground" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary>フォア グラウンドでメッセージ ボックスを表示することを示すときに、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbNarrow">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbNarrow = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbNarrow = (8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNarrow" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>ワイド \(2 バイト\) 文字に変換することを示す文字を \(1 バイト\) を絞り込む、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbNewLine">
      <MemberSignature Language="C#" Value="public const string vbNewLine;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbNewLine" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNewLine" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>改行文字および文字を表します印刷用の関数を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbNo">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbNo = 7;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbNo = (7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>示して、 <see langword="No" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbNormal">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbNormal = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbNormal = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNormal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>ファイルがファイル アクセスの関数の通常のファイルであることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbNormalFocus">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbNormalFocus = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbNormalFocus = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNormalFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>ウィンドウ スタイルが呼び出されたのフォーカスを持つ標準であることを示しますプログラムの場合、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbNormalNoFocus">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.AppWinStyle vbNormalNoFocus = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.AppWinStyle vbNormalNoFocus = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNormalNoFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.AppWinStyle</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>ウィンドウ スタイルが呼び出されたのフォーカスのない標準であることを示しますプログラムの場合、 <see langword="Shell" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発行すると `Shell` コマンドを実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
 `Style` 引数は、 `AppWinStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.AppWinStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.Shell(System.String,Microsoft.VisualBasic.AppWinStyle,System.Boolean,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbNull">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbNull = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbNull = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNull" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類があることを示します<see langword="Nothing" />です。 によって返される、<see langword="VarType" />関数。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、`VarType`関数の場合、実際の値の代わりに、コードで列挙型のメンバーを使用することができます。  
  
 `VariantType`列挙可能な限りの識別に使用する定数を定義する`Variant`型です。 次の表、`VariantType`列挙型メンバー。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbNullChar">
      <MemberSignature Language="C#" Value="public const string vbNullChar;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbNullChar" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNullChar" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Null および文字を表します印刷用の関数を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbNullString">
      <MemberSignature Language="C#" Value="public const string vbNullString = null;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbNullString = null" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbNullString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <MemberValue>null</MemberValue>
      <Docs>
        <summary>印刷用文字列および表示機能、長さ 0 を表しますと外部プロシージャを呼び出すためです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbObject">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbObject = 9;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbObject = (9)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbObject" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>9</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Object" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbObjectError">
      <MemberSignature Language="C#" Value="public const int vbObjectError = -2147221504;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 vbObjectError = (-2147221504)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbObjectError" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-2147221504</MemberValue>
      <Docs>
        <summary>オブジェクトのエラー番号を表します。 ユーザー定義のエラー番号は、この値よりも大きくする必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbOK">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbOK = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbOK = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbOK" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>示して、 <see langword="OK" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbOKCancel">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbOKCancel = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbOKCancel = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbOKCancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>示します、 <see langword="OK" /> と <see langword="Cancel" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbOKOnly">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbOKOnly = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbOKOnly = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbOKOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>だけであることを示します、 <see langword="OK" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbProperCase">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbProperCase = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbProperCase = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbProperCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>文字列内の各単語の最初の文字を大文字に変換する必要があり、残りの文字が小文字のことを示します、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbQuestion">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbQuestion = 32;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbQuestion = (32)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbQuestion" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>疑問符アイコンになることを示す場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbReadOnly">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbReadOnly = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbReadOnly = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbReadOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>ファイルがファイル アクセスの関数の読み取り専用ファイルであることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbRetry">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbRetry = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbRetry = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbRetry" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Retry" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbRetryCancel">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbRetryCancel = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbRetryCancel = (5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbRetryCancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>示します、 <see langword="Retry" /> と <see langword="Cancel" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbSaturday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbSaturday = 7;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbSaturday = (7)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSaturday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>7</MemberValue>
      <Docs>
        <summary>土曜日を日付関連の関数が呼び出されたときの週の最初の曜日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbSet">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CallType vbSet = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CallType vbSet = (8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CallType</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>プロパティの値に設定するよう時期を示す、 <see langword="CallByName" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `CallByName` 関数の場合、以下を使用する `CallType` 実際の値の代わりに、コード内の列挙体メンバーです。`UseCallType` 引数は、 `CallType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CallType" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.CallByName(System.Object,System.String,Microsoft.VisualBasic.CallType,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbShortDate">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.DateFormat vbShortDate = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.DateFormat vbShortDate = (2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbShortDate" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.DateFormat</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>現在のカルチャの短い日付形式であることを示す際に使用される、 <see langword="FormatDateTime" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `FormatDateTime` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
> [!NOTE]
>  ダブルクリックして、コンピューターの地域設定にアクセスすることができます、 **地域のオプション** アイコン **コントロール パネルの \[**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      </Docs>
    </Member>
    <Member MemberName="vbShortTime">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.DateFormat vbShortTime = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.DateFormat vbShortTime = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbShortTime" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.DateFormat</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>現在のカルチャの短い時刻形式であることを示す際に使用される、 <see langword="FormatDateTime" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `FormatDateTime` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。  
  
> [!NOTE]
>  ダブルクリックして、コンピューターの地域設定にアクセスすることができます、 **地域のオプション** アイコン **コントロール パネルの \[**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      </Docs>
    </Member>
    <Member MemberName="vbSimplifiedChinese">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbSimplifiedChinese = 256;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbSimplifiedChinese = (256)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSimplifiedChinese" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary>簡体字中国語文字が変換されることを示すときに、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbSingle">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbSingle = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbSingle = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSingle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Single" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbString">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbString = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbString = (8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbString" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="String" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbSunday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbSunday = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbSunday = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSunday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>日曜日を週の日付に関連する関数が呼び出されたときの最初の日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbSystem">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbSystem = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbSystem = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSystem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>ファイルがファイル アクセス関数用のシステム ファイルであることを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbSystemModal">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbSystemModal = 4096;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbSystemModal = (4096)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbSystemModal" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary>メッセージ ボックスはモーダル ダイアログ ボックスとして表示されることを示す際にボックス、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbTab">
      <MemberSignature Language="C#" Value="public const string vbTab;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbTab" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbTab" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タブおよび文字を表します印刷用の関数を表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbTextCompare">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.CompareMethod vbTextCompare = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.CompareMethod vbTextCompare = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbTextCompare" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.CompareMethod</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>比較関数が呼び出されたときに、文字比較を実行することを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 比較関数を呼び出すときに使用できます、 <xref:Microsoft.VisualBasic.CompareMethod> 実際の値の代わりに、コード内の列挙型。`Compare` 引数は、 `CompareMethod` 列挙型のメンバーです。  
  
 詳細については、バイナリ、およびテキストの比較の詳細については、次を参照してください。 [Option Compare Statement](http://msdn.microsoft.com/ja-jp/54e8eeeb-3b0d-4fb9-acce-fbfbd5975f6e)します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="vbThursday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbThursday = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbThursday = (5)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbThursday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>日付関連の関数が呼び出されたときの週の開始日 \(木\) を使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbTraditionalChinese">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbTraditionalChinese = 512;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbTraditionalChinese = (512)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbTraditionalChinese" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>512</MemberValue>
      <Docs>
        <summary>文字を繁体字中国語に変換することを示す、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbTrue">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.TriState vbTrue = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.TriState vbTrue = (-1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbTrue" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TriState</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Boolean" /> の値 <see langword="True" /> 数値書式指定の関数が呼び出される場合に使用する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 関数の呼び出しの数の書式設定を使用する場合は、実際の値の代わりに、コードでは、次の列挙メンバー。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      </Docs>
    </Member>
    <Member MemberName="vbTuesday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbTuesday = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbTuesday = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbTuesday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>火曜日を日付関連の関数が呼び出されたときの週の最初の曜日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbUpperCase">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbUpperCase = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbUpperCase = (1)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbUpperCase" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>文字は時に、大文字に変換することを示す、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbUseDefault">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.TriState vbUseDefault = -2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.TriState vbUseDefault = (-2)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbUseDefault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TriState</ReturnType>
      </ReturnValue>
      <MemberValue>-2</MemberValue>
      <Docs>
        <summary>示します既定 <see langword="Boolean" /> 数値書式指定の関数が呼び出される場合、値を使用する必要があります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 関数の呼び出しの数の書式設定を使用する場合は、実際の値の代わりに、コードでは、次の列挙メンバー。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      </Docs>
    </Member>
    <Member MemberName="vbUserDefinedType">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbUserDefinedType = 36;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbUserDefinedType = (36)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbUserDefinedType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>36</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類が、ユーザー定義型であることを示します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbUseSystem">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstWeekOfYear vbUseSystem = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstWeekOfYear vbUseSystem = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbUseSystem" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstWeekOfYear</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>指定することを示す、週、システムで年の最初の週を使用する必要があります日付関連の関数が呼び出されたとき。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstWeekOfYear` 列挙体の有効な値を指定する、 `WeekOfYear` 、引数として関数の戻り値。  
  
 `WeekOfYear` 引数は、 `FirstWeekOfYear` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbUseSystemDayOfWeek">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbUseSystemDayOfWeek = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbUseSystemDayOfWeek = (0)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbUseSystemDayOfWeek" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>指定することを示す、日、システムで週の最初の日を使用する必要があります日付関連の関数が呼び出されたとき。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbVariant">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VariantType vbVariant = 12;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VariantType vbVariant = (12)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbVariant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <MemberValue>12</MemberValue>
      <Docs>
        <summary>Variant オブジェクトの種類がであることを示します <see langword="Variant" />します。 によって返される、 <see langword="VarType" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `VarType` 関数の場合、実際の値の代わりに、コード内の列挙体メンバーを使用することができます。  
  
 `VariantType` 列挙可能な限りを識別するために使用する定数を定義する `Variant` 型です。 次の表に、 `VariantType` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbVerticalTab">
      <MemberSignature Language="C#" Value="public const string vbVerticalTab;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string vbVerticalTab" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbVerticalTab" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>印刷機能のためのキャリッジ リターン文字を表します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="vbVolume">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FileAttribute vbVolume = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FileAttribute vbVolume = (8)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbVolume" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>ファイル アクセス関数用のボリューム ラベル ファイル属性を示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この属性は無効、 `SetAttr` 関数です。  
  
 呼び出すと、 `Dir`, 、`GetAttr`, 、または `SetAttr` 使用する関数の場合、 `FileAttribute` 実際の値の代わりに、コード内の列挙型。  
  
 `Attributes` 引数は、 `FileAttribute` 列挙型のメンバーです。  
  
 ファイル I\/O 操作を実行するときに、 `My.Computer.FileSystem` オブジェクトが、I\/O のメソッドのパフォーマンスとレガシ ファイルよりも使いやすさの向上を提供します。 詳細については、次を参照してください。 <xref:Microsoft.VisualBasic.FileSystem> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="vbWednesday">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.FirstDayOfWeek vbWednesday = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.FirstDayOfWeek vbWednesday = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbWednesday" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FirstDayOfWeek</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>水曜日を日付関連の関数が呼び出されたときの週の最初の曜日として使用することを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 日付関連の関数を呼び出すときに、実際の値の代わりに、コードで次の列挙メンバーを使用することができます。  
  
 一部の日付に関連する関数、 `DayOfWeek` 、引数、 `WeekOfYear` 引数、または両方です。`FirstDayOfWeek` 列挙体の有効な値を指定する、 `DayOfWeek` 、引数として関数の戻り値。  
  
 `DayOfWeek` 引数は、 `FirstDayOfWeek` 列挙型のメンバーです。  
  
 日付関連の関数を返すことも `FirstDayOfWeek` 値 \(を除く `System`\)。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.FirstDayOfWeek" />
        <altmember cref="T:Microsoft.VisualBasic.FirstWeekOfYear" />
        <altmember cref="T:Microsoft.VisualBasic.DateFormat" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="vbWide">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.VbStrConv vbWide = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.VbStrConv vbWide = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbWide" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VbStrConv</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>限られているので \(1 バイト\) 文字が変換されることを示す文字にワイド \(2 バイト\)、 <see langword="StrConv" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `StrConv` 関数の場合、実際の値の代わりに、コードで、次の列挙体メンバーを使用することができます。`Conversion` 引数は、 `VbStrConv` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.VbStrConv" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="vbYes">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxResult vbYes = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxResult vbYes = (6)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbYes" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxResult</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>示して、 <see langword="Yes" /> メッセージ ボックスにボタンがクリックされました。 によって返される、 <see langword="MsgBox" /> 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxResult` 実際の値の代わりに、コード内の列挙型。  
  
 `MsgBox` 関数が返される、 `MsgBoxResult` 列挙値。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbYesNo">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbYesNo = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbYesNo = (4)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbYesNo" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>示します、 <see langword="Yes" /> と <see langword="No" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="vbYesNoCancel">
      <MemberSignature Language="C#" Value="public const Microsoft.VisualBasic.MsgBoxStyle vbYesNoCancel = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Microsoft.VisualBasic.MsgBoxStyle vbYesNoCancel = (3)" />
      <MemberSignature Language="DocId" Value="F:Microsoft.VisualBasic.Constants.vbYesNoCancel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.MsgBoxStyle</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>示します、 <see langword="Yes" />, 、<see langword="No" />, 、および <see langword="Cancel" /> ボタンがある場合に表示される、 <see langword="MsgBox" /> 関数が呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出すと、 `MsgBox` 関数を使用できます、 `MsgBoxStyle` 実際の値の代わりに、コード内の列挙型。`Buttons` 引数は、 `MsgBoxStyle` 列挙型のメンバーです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxResult" />
        <altmember cref="T:Microsoft.VisualBasic.MsgBoxStyle" />
        <altmember cref="M:Microsoft.VisualBasic.Interaction.MsgBox(System.Object,Microsoft.VisualBasic.MsgBoxStyle,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>