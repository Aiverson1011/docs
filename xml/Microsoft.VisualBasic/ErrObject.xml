<Type Name="ErrObject" FullName="Microsoft.VisualBasic.ErrObject">
  <TypeSignature Language="C#" Value="public sealed class ErrObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ErrObject extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ErrObject" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see langword="ErrObject" /> モジュールは、プロパティとを識別およびを使用して実行時エラーを処理するための手順を含む、 <see langword="Err" /> オブジェクトです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ErrObject` モジュールは、サポート、 `Err` オブジェクトです。 詳細については、「<xref:Microsoft.VisualBasic.Information.Err%2A>」を参照してください。  
  
   
  
## 例  
 この例のプロパティを使用して、 `Err` エラー メッセージ\] ダイアログ ボックスを作成するオブジェクト。 使用するときの動作に注意してください、 `Clear` メソッド最初: と Visual Basic エラーを生成すると、 `Raise` メソッドでは、Visual Basic の既定値になりますのプロパティ、 `Err` オブジェクトです。  
  
```  
Dim Msg As String  
' If an error occurs, construct an error message.  
On Error Resume Next   ' Defer error handling.  
Err.Clear  
Err.Raise(6)   ' Generate an "Overflow" error.  
' Check for error, then show message.  
If Err.Number <> 0 Then  
    Msg = "Error # " & Str(Err.Number) & " was generated by " _  
        & Err.Source & ControlChars.CrLf & Err.Description  
    MsgBox(Msg, MsgBoxStyle.Information, "Error")  
End If  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
  </Docs>
  <Members>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Clear" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてのプロパティ設定を消去、<see langword="Err" />オブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して`Clear`を明示的にオフに、`Err`遅延によるエラー処理を使用する場合など、エラーが処理された後にオブジェクト`On Error Resume Next`です。`Clear`メソッドが自動的には、次のステートメントのいずれかを実行するたびに。  
  
-   任意の種類の`Resume`ステートメント  
  
-   `Exit Sub`、`Exit Function`、または `Exit Property`  
  
-   どの`On Error`ステートメント  
  
-   どの`Try...Catch...Finally`ステートメント  
  
    > [!NOTE]
    >  `On Error Resume Next`コンストラクトことをお勧めする`On Error GoTo`他のオブジェクトへのアクセス中にエラーを処理するときにします。 チェック`Err`オブジェクトと対話をコードによってアクセスされたオブジェクトがあいまいさを削除した後: を確認するオブジェクトのエラー コードを配置する`Err.Number`、どのオブジェクトが最初に、エラーを生成および \(で指定されたオブジェクト`Err.Source`\)。  
  
   
  
## 例  
 この例では、`Err`オブジェクトの`Clear`の数値プロパティをリセットする方法、 `Err` 0 や長さ 0 の文字列にその文字列プロパティをオブジェクト。 呼び出さずに`Clear`、2 番目の呼び出し`MsgBox`同じエラー メッセージが表示されます。  
  
 [!code-vb[VbVbalrErrorHandling\#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="String" /> エラーに関連付けられているわかりやすい文字列を含む式を指定します。 読み取り\/書き込み。</summary>
        <value>返すか設定、 <see langword="String" /> エラーに関連付けられているわかりやすい文字列を含む式を指定します。 読み取り\/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Description` プロパティの設定は、エラーの簡単な説明で構成されます。 このプロパティを使用して、エラーを処理したくないもできないユーザーに警告します。 ユーザー定義のエラーを生成するときにすると、エラーの簡単な説明を割り当てる、 `Description` プロパティです。 場合、 `Description` で、プロパティが入力されていないとの値、 <xref:Microsoft.VisualBasic.ErrObject.Number%2A> プロパティは、Visual Basic ランタイム エラーに対応し、によって文字列が返される、 <xref:Microsoft.VisualBasic.Conversion.ErrorToString%2A> 設定されている関数、 `Description` プロパティ エラーが生成されたときにします。  
  
   
  
## 例  
 この例では、ユーザー定義のメッセージを `Description` のプロパティ、 `Err` オブジェクトです。  
  
 [!code-vb[VbVbalrErrorHandling\#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public int Erl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Erl" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Erl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。</summary>
        <value>最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Visual Basic に行番号がない場合は、0 を返します。  
  
   
  
## 例  
 この例では、 `Erl` プロパティに行番号を指定します。  
  
```  
10:     On Error Resume Next  
20:     Err.Raise(60000)  
' Returns 20.  
30:     MsgBox(Erl())  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="GetException">
      <MemberSignature Language="C#" Value="public Exception GetException ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Exception GetException() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.GetException" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生したエラーを表す例外を返します。</summary>
        <returns>発生したエラーを表す例外を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `GetException` 関数からのみ使用可能な `Err` オブジェクト クラス。 認証は、 `Exception` のプロパティ、 `Err` が発生したエラーを表示するオブジェクト。  
  
   
  
## 例  
 次のコードで例外に割り当てられているメッセージを表示、 `Err` オブジェクト。  
  
 [!code-vb[VbVbalrCatRef\#66](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#66)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpContext">
      <MemberSignature Language="C#" Value="public int HelpContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HelpContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、<see langword="Integer" />ヘルプ ファイルのトピックのコンテキスト ID を含むです。 読み取り\/書き込み。</summary>
        <value>返すか設定、<see langword="Integer" />ヘルプ ファイルのトピックのコンテキスト ID を含むです。 読み取り\/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `HelpContext`アプリケーションの状況依存のヘルプを表示するプロパティを使用します。 ヘルプ ファイルがで指定されている場合`HelpFile`、`HelpContext`プロパティの使用に自動的に指定されたヘルプ ファイルを表示します。 場合は、両方、`HelpFile`と`HelpContext`が空です。 プロパティの値、<xref:Microsoft.VisualBasic.ErrObject.Number%2A>プロパティがチェックします。 場合の値、`Number`プロパティは、Visual Basic ランタイム エラーの値に対応し、エラーの Visual Basic のヘルプ コンテキスト ID を使用します。 場合の値、`Number`プロパティは、Visual Basic エラーに対応するいないと、Visual Basic のヘルプ ファイルの内容の画面が表示されます。  
  
> [!NOTE]
>  アプリケーション内に、一般的なエラーを処理するルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるか、エラーは回復できない場合、ユーザーに意味のあるメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。  
  
   
  
## 例  
 この例では、`HelpContext`のプロパティ、 `Err` 、Visual Basic のヘルプ トピックを表示するオブジェクト、`Overflow`エラーです。  
  
 [!code-vb[VbVbalrErrorHandling\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="HelpFile">
      <MemberSignature Language="C#" Value="public string HelpFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string HelpFile" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.HelpFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、<see langword="String" />ヘルプ ファイルへの完全修飾パスを含む式を指定します。 読み取り\/書き込み。</summary>
        <value>返すか設定、<see langword="String" />ヘルプ ファイルへの完全修飾パスを含む式を指定します。 読み取り\/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ヘルプ ファイルを指定する場合、`HelpFile`プロパティ、自動的に呼び出されてヘルプ キー \(または、F1 キー\) を押すエラー メッセージ ダイアログ ボックス。 場合、`HelpContext`プロパティには、このトピックで、指定されたファイルの ID が自動的に表示されている有効なコンテキストが含まれています。 ない場合は`HelpFile`指定すると、Visual Basic のヘルプ ファイルが表示されます。  
  
> [!NOTE]
>  一般的なエラーを処理するアプリケーションでは、ルーチンを記述する必要があります。 オブジェクトを使用したプログラミング、ときに、エラー処理の品質を向上させるか、エラーは回復できない場合、ユーザーに意味のあるメッセージを表示するオブジェクトのヘルプ ファイルを使用することができます。  
  
   
  
## 例  
 この例では、`HelpFile`のプロパティ、`Err`ヘルプ システムを起動するオブジェクト。 既定では、`HelpFile`プロパティには、Visual Basic のヘルプ ファイルの名前が含まれています。  
  
 [!code-vb[VbVbalrErrorHandling\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="LastDllError">
      <MemberSignature Language="C#" Value="public int LastDllError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LastDllError" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.LastDllError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ダイナミック リンク ライブラリ \(DLL\) への呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用です。</summary>
        <value>ダイナミック リンク ライブラリ \(DLL\) への呼び出しによって生成されたシステム エラー コードを返します。 読み取り専用です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティ \[Visual Basic コードから DLL の呼び出しにのみ適用されます。 呼び出された関数が通常、成功または失敗を示すコードを返しますこのような呼び出しが行われたときに、 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティを設定します。 成功または失敗を示す戻り値を決定する DLL の関数のドキュメントを確認してください。 Visual Basic アプリケーションを直ちに確認する必要がありますエラー コードが返されるたびに、 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティです。 例外が発生しなかった場合、 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティを設定します。  
  
> [!NOTE]
>  <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> プロパティは保護されて <xref:System.Security.Permissions.SecurityAction.LinkDemand>, 、信頼できないコードからアクセスできないようにするのに役立ちます。 ただし、 <xref:System.Security.Permissions.SecurityAction.LinkDemand> が直前の呼び出し元だけが必要です <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A> 権限です。 値を公開する場合は、コードは、部分信頼コードから呼び出すことができる、 <xref:Microsoft.VisualBasic.ErrObject.LastDllError%2A> を含まない検証は、セキュリティ上のリスクです。  
>   
>  使用方法に関する重要な制限事項、 <xref:System.Security.Permissions.SecurityAction.LinkDemand> 、メンバーを参照してください [と要求LinkDemand](http://msdn.microsoft.com/ja-jp/1ab877f2-70f4-4e0d-8116-943999dfe8f5)します。 アクセス許可の詳細については、次を参照してください。 <xref:System.Security.Permissions.SecurityPermission> と [コード アクセス許可](http://msdn.microsoft.com/ja-jp/e5ae402f-6dda-4732-bbe8-77296630f675)します。  
  
 スマート デバイス用にこのプロパティは常に 0 を返します注意してください。  
  
   
  
## 例  
 次の例を使用する方法、 `LastDllError` Windows api 関数を呼び出した後のプロパティです。`PrintWindowCoordinates` プロシージャは、ハンドル、ウィンドウと呼び出しには、 `GetWindowRect` 関数です。`GetWindowRect` ウィンドウを構成する四角形の辺の長さな RECT データ構造体を設定します。 エラーが発生して、エラー番号は無効なハンドルを渡す場合、 `LastDllError` プロパティです。  
  
 [!code-vb[VbVbalrErrorHandling#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#8)]  
[!code-vb[VbVbalrErrorHandling#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#9)]  
[!code-vb[VbVbalrErrorHandling#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#10)]  
  
 [!code-vb[VbVbalrErrorHandling\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Number">
      <MemberSignature Language="C#" Value="public int Number { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Number" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Number" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか、エラーを示す数値を設定します。 読み取り\/書き込み。</summary>
        <value>返すか、エラーを示す数値を設定します。 読み取り\/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての `Raise` 以外の引数 `Number` は省略可能です。 省略可能な引数と、プロパティの設定を省略した場合、 `Err` オブジェクトがクリアされていない値を含む、その値、エラーの値として使用します。  
  
 `Err` オブジェクトでエラーが発生する場合よりも豊富な情報を使用する、 `Error` ステートメント、 `Raise` はクラス モジュールを作成するときにエラーを生成するために役立ちます。 たとえば、 `Raise` メソッド、エラーが発生したソースがで指定することができます、 `Source` プロパティには、エラーは、オンライン ヘルプは、参照できるし、具合です。  
  
 オブジェクトから、ユーザー定義のエラーを返すときに設定 `Err.Number` エラー コードとして選択した数を加算して、 `VbObjectError` 定数です。 たとえば、エラー コードとして 1051年数を取得するのに次のコードを使用します。  
  
 [!code-vb[VbVbalrErrorHandling\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#13)]  
  
   
  
## 例  
 この例での一般的な使用、 `Number` エラー処理ルーチンにします。  
  
 [!code-vb[VbVbalrErrorHandling\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#12)]  
  
 この例では、 `Err` オブジェクトの `Raise` Visual Basic で記述された関数内で元のエラーを生成します。 呼び出し元の関数は、エラーをキャッチし、ユーザーに報告します。 その手順に注意してください `CallingProcedure` から派生できる情報の種類の比較、 `Err` から派生できる情報を持つオブジェクト、 `Exception` オブジェクトです。  
  
 [!code-vb[VbVbalrErrorHandling\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> 65535 を超えています。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Raise">
      <MemberSignature Language="C#" Value="public void Raise (int Number, object Source = null, object Description = null, object HelpFile = null, object HelpContext = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Raise(int32 Number, object Source, object Description, object HelpFile, object HelpContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ErrObject.Raise(System.Int32,System.Object,System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Source" Type="System.Object" />
        <Parameter Name="Description" Type="System.Object" />
        <Parameter Name="HelpFile" Type="System.Object" />
        <Parameter Name="HelpContext" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">必須です。<see langword="Long" /> エラーの性質を識別する整数。 Visual Basic のエラーは、範囲 0 ~ 65535 です。0 ~ 512 予約されてシステム エラーが発生します。513 ~ 65535 の範囲は、ユーザー定義のエラーに対して利用可能です。 設定するときに、 <see langword="Number" /> にエラー コード番号を追加するプロパティをクラス モジュールに独自のエラー コードは、 <see langword="vbObjectError" /> 定数です。 たとえば、エラー番号 513 を生成するに割り当てる <c>vbObjectError + 513</c> に、 <see langword="Number" /> プロパティです。</param>
        <param name="Source">省略可能です。<see langword="String" /> オブジェクトまたはエラーが発生したアプリケーションの名前付けの式。 オブジェクトには、このプロパティを設定する場合は、フォームを使用して <c>project</c>.<c>class</c>します。 場合 <c>Source</c> が指定されていない、現在の Visual Basic プロジェクトのプロセス ID を使用します。</param>
        <param name="Description">省略可能です。<see langword="String" /> エラーを説明する式です。 値を指定しない場合、 <see langword="Number" /> プロパティが検査されます。 Visual Basic ランタイム エラーにマップできる場合のコード、によって返される文字列、 <see langword="Error" /> として関数を使用、 <see langword="Description" /> プロパティです。 対応する Visual Basic エラーがない場合、 <see langword="Number" /> プロパティには、「アプリケーション定義またはオブジェクト定義のエラー」メッセージを使用します。</param>
        <param name="HelpFile">省略可能です。 このエラーのヘルプを参照できるヘルプ ファイルへの完全修飾パス。 指定しない場合、Visual Basic は、完全修飾ドライブ、パス、および Visual Basic のヘルプ ファイルのファイル名を使用します。</param>
        <param name="HelpContext">省略可能です。 内のトピックを区別するためのコンテキスト ID <c>HelpFile</c> エラーのヘルプを提供します。 省略すると、Visual Basic のヘルプ ファイルのコンテキスト ID に対応するエラーの場合、 <see langword="Number" /> が存在する場合、プロパティが使用されます。</param>
        <summary>実行時エラーが発生します。代わりに使用できる、 <see langword="Error" /> ステートメントです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての `Raise` 以外の引数 `Number` は省略可能です。 省略可能な引数と、プロパティの設定を省略した場合、 `Err` オブジェクトがクリアされていない値を含む、その値、エラーの値として使用します。  
  
 `Err` オブジェクトでエラーが発生する場合よりも豊富な情報を使用する、 `Error` ステートメント、 `Raise` はクラス モジュールを作成するときにエラーを生成するために役立ちます。 たとえば、 `Raise` メソッド、エラーが発生したソースがで指定することができます、 `Source` プロパティには、エラーは、オンライン ヘルプは、参照できるし、具合です。  
  
   
  
## 例  
 この例では、 `Err` オブジェクトの `Raise` Visual Basic で記述された関数内でエラーを生成します。 呼び出し元の関数は、エラーをキャッチし、メッセージ ボックスを持つユーザーに報告します。  
  
 [!code-vb[VbVbalrErrorHandling\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ErrObject.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返すか設定、 <see langword="String" /> オブジェクトまたはエラーの発生源アプリケーションの名前を指定する式。 読み取り\/書き込み。</summary>
        <value>返すか設定、 <see langword="String" /> オブジェクトまたはエラーの発生源アプリケーションの名前を指定する式。 読み取り\/書き込み。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Source` プロパティを指定する `String` オブジェクトを表す式をエラーが発生しました; 式は、通常、オブジェクトのクラス名またはプロセス id。 使用して、 `Source` プロパティにアクセスされるオブジェクトで生成されたエラーを処理できなくなった場合に、情報を提供します。 たとえば、Microsoft Excel にアクセスして、生成される場合、 `Division by zero` エラー、Microsoft Excel を設定 `Err.Number` エラーとセットの場合は、そのエラー コードを `Source` "Excel.Application"にします。  
  
 アプリケーションが、コードからエラーを生成するときに `Source` は、アプリケーションのプログラム id です。 クラス内 `Source` フォーム名を含める必要があります *プロジェクト*.*クラス*します。 コードでは、予期しないエラーが発生したときに、 `Source` プロパティが自動的に入力します。 モジュールの場合、エラー `Source` プロジェクト名が含まれています。  
  
   
  
## 例  
 この例では、使用、 `Source` 一般的なエラー処理ルーチンにします。 エラーが発生すると `Class1`, 、文字列 `"Class1"` に割り当てられている、 `Source` のプロパティ、 `Err` オブジェクトです。 ソースと、エラーの数を示す情報メッセージでは、この文字列が表示されます。  
  
 [!code-vb[VbVbalrErrorHandling\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.Err" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
  </Members>
</Type>