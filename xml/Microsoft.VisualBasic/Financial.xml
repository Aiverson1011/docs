<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Financial" /> モジュールには、財務関連の操作を実行するための手順が含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、減価償却、現在および将来の値、金利、return、および支払いの速度などの金融の計算を実行する Visual Basic ランタイム ライブラリ メンバーをサポートします。  
  
   
  
## 例  
 この例では、 `Rate` 支払の合計数を指定した、ローンの金利を計算する関数 \(`TotPmts`\)、ローン支払の量 \(`Payment`\)、現在の値またはローンのプリンシパル \(`PVal`\)、ローンの将来の値 \(`FVal`\)、支払いが先頭またはお支払い期間の終了の原因かどうかを示す数値 \(`PayType`\) と予想される利率の概算値 \(`Guess`\)。  
  
 [!code-vb[VbVbalrMath\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須です。<see langword="Double" /> 資産の初期コストを指定します。</param>
        <param name="Salvage">必須です。<see langword="Double" /> その有効期間の終了時点での資産の値を指定します。</param>
        <param name="Life">必須です。<see langword="Double" /> 資産の有効期間の長さを指定します。</param>
        <param name="Period">必須です。<see langword="Double" /> どの資産の減価償却を計算する期間を指定します。</param>
        <param name="Factor">省略可能です。<see langword="Double" /> 償却率を指定します。 省略すると、2 \(倍率逓減法\) が使用されます。</param>
        <summary>返します。、 <see langword="Double" /> 倍率逓減法または指定したその他の方法を使用して、特定の期間の資産の減価償却を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 倍率逓減法または指定したその他の方法を使用して、特定の期間の資産の減価償却を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 倍率逓減法がより短期間で減価償却費を計算します。 減価償却では、最初の期間が最も高く、連続する期間に低下となります。  
  
 `Life` と `Period` 引数は、同じ単位で表す必要があります。 たとえば場合、 `Life` 月単位で指定された `Period` か月間にも許可できる必要があります。 すべての引数は正の数値である必要があります。  
  
 `DDB` 関数は、次の式を使用して、特定の期間の減価償却を計算します。  
  
 Depreciation \/ Period \= \(\(Cost – Salvage\) \* Factor\) \/ Life  
  
   
  
## 例  
 この例では、 `DDB` を指定した期間の初期コストを指定した資産の減価償却を返す関数 \(`InitCost`\)、資産の有効期間の最後で \(`SalvageVal`\)、年間での資産の定額 \(`LifeTime`\)、および年間の減価償却費を計算する期間 \(`Depr`\)。  
  
 [!code-vb[VbVbalrMath\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt; \= 0、 <paramref name="Salvage" /> &lt; 0、 <paramref name="Period" /> &lt; \= 0、または <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、合計で 4 x 12 の \(または 48\) の支払い期間があることにします。</param>
        <param name="Pmt">必須です。<see langword="Double" /> 各期間に支払いを指定します。 通常、支払いには、プリンシパルと、年金の存続期間を変更しない関心が含まれます。</param>
        <param name="PV">省略可能です。<see langword="Double" /> 将来行われる一連の現在の値 \(または一括\) を指定します。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <see langword="DueDate.EndOfPeriod" /> 支払い期間の最後に支払う場合または <see langword="DueDate.BegOfPeriod" /> 期間の先頭に支払う場合。 省略した場合、 <see langword="DueDate.EndOfPeriod" /> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて、年金の将来の値を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて、年金の将来の値を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを行う時間の経過と共にです。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 `Rate` と `NPer` 引数は、同じ単位で表される期間を使用して計算する必要があります。 たとえば場合、 `Rate` か月間を使用して計算されます `NPer` 数か月を使用して計算する必要があります。  
  
 すべての引数 \(預金\) など配当は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `FV` する率は、割合投資の将来の値を返す関数毎期を計上する \(`APR / 12`\)、支払の合計数 \(`TotPmts`\)、支払 \(`Payment`\)、投資の現在の値 \(`PVal`\)、および先頭または末尾の支払い期間で支払いが行われたかどうかを示す数値 \(`PayType`\)。 ため `Payment` 、支払額を表す負の数値であります。  
  
 [!code-vb[VbVbalrMath\#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="Per">必須です。<see langword="Double" /> 1 からの範囲で指定することの支払い期間 <c>NPer</c>します。</param>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、合計で 4 x 12 の \(または 48\) の支払い期間があることにします。</param>
        <param name="PV">必須です。<see langword="Double" /> 存在を指定する値、または一連の将来または配信確認メッセージの今日では、値をします。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 将来の値または最後の支払いを行った後に残る現金の収支を指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、18 年以上にわたって、子供の教育に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて一定年金の利払いを指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて一定年金の利払いを指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを行う時間の経過と共にです。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 `Rate` と `NPer` 引数は、同じ単位で表される期間を使用して計算する必要があります。 たとえば場合、 `Rate` か月間を使用して計算されます `NPer` 数か月を使用して計算する必要があります。  
  
 すべての引数 \(預金\) など配当は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `IPmt` の支払の量は関心支払いが同じ値の計算する関数。 一定期間割合金利を指定した場合は \(`APR / 12`\)、関心領域が必要な支払い期間 \(`Period`\)、支払の合計数 \(`TotPmts`\)、現在の値またはローンのプリンシパル \(`PVal`\)、ローンの将来の値 \(`FVal`\) と、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 \(`PayType`\)。  
  
 [!code-vb[VbVbalrMath\#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt; \= 0 または <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[] ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須です。 配列 <see langword="Double" /> キャッシュ フローの値を指定します。 配列には、少なくとも 1 つの負の値 \(支払い\) と 1 つの正の値 \(受信確認\) を含める必要があります。</param>
        <param name="Guess">省略可能です。 推定値を指定するオブジェクトによって返される <see langword="IRR" />です。 省略した場合、 <c>Guess</c> 0.1 \(10%\)。</param>
        <summary>返します。、 <see langword="Double" /> 一連の定期的なキャッシュ フロー \(支払いと受け取り\) の内部利益率を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 一連の定期的なキャッシュ フロー \(支払いと受け取り\) の内部利益率を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内部利益率は、支払いと受け取り一定の間隔で発生するので構成される投資に対する利率です。  
  
 `IRR` 関数は、配列内の値の順序を使用して支払いと受け取りの順序を解釈します。 必ず、正しい順序で支払いと受信確認の値を入力してください。 年金の場合と、各期間の残高は修正するのには必要ありません。  
  
 `IRR` イテレーションによって計算されます。 値で始まる `Guess`, 、`IRR` 結果の精度は 0.00001 パーセントになるまで、計算を切り替えます。 場合 `IRR` 20 後の結果が、失敗した場合に見つけることはできません。  
  
   
  
## 例  
 この例では、 `IRR` 関数は、一連の配列に格納されている 5 つのキャッシュ フローに対する内部利益率を返します。 `Values()`します。 最初の配列要素は、ビジネス資本金を表す負のキャッシュ フローです。 残りの 4 つのキャッシュ フローは、その後 4 年間の正のキャッシュ フローを表します。`Guess` 推定内部利益率です。  
  
 [!code-vb[VbVbalrMath\#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">配列引数の値が無効または <paramref name="Guess" /> &lt; \=\-1 です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[] ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">必須です。 配列 <see langword="Double" /> キャッシュ フローの値を指定します。 配列には、少なくとも 1 つの負の値 \(支払い\) と 1 つの正の値 \(受信確認\) を含める必要があります。</param>
        <param name="FinanceRate">必須です。<see langword="Double" /> 利率を指定する支払額です。</param>
        <param name="ReinvestRate">必須です。<see langword="Double" /> 現金貸付収益に対する金利を指定します。</param>
        <summary>返します。、 <see langword="Double" /> 修正内部一連の定期的なキャッシュ フロー \(支払いと受け取り\) の利益率を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 修正内部一連の定期的なキャッシュ フロー \(支払いと受け取り\) の利益率を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更された内部利益率は、支払いと受け取りを異なるレートで管理する場合、内部利益率です。`MIRR` 関数では、投資のコストの両方を考慮に入れます \(`FinanceRate`\) と収益の利率 \(`ReinvestRate`\)。  
  
 `FinanceRate` と `ReinvestRatearguments` 比率の 10 進値として表されます。 たとえば、12% が 0.12 として表されます。  
  
 `MIRR` 関数は、配列内の値の順序を使用して支払いと受け取りの順序を解釈します。 必ず、正しい順序で支払いと受信確認の値を入力してください。  
  
   
  
## 例  
 この例では、 `MIRR` 関数を変更した内部配列に格納されているキャッシュ フローのデータ系列の利益率を返す `Values()`します。`LoanAPR` 財務の関心を表すと `InvAPR` 貸付で受信した金利を表します。  
  
 [!code-vb[VbVbalrMath\#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ランク <paramref name="ValueArray" /> 1 と等しくない <paramref name="FinanceRate" /> \=\-1 の場合、または <paramref name="ReinvestRate" /> \=\-1</exception>
        <exception cref="T:System.DivideByZeroException">0 による除算が発生しました。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="Pmt">必須です。<see langword="Double" /> 各期間に支払いを指定します。 通常、支払いには、プリンシパルと、年金の存続期間が変化しない関心が含まれます。</param>
        <param name="PV">必須です。<see langword="Double" /> 存在を指定する値、または一連の将来または配信確認メッセージの今日では、値をします。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 将来の値または最後の支払いを行った後にキャッシュのバランスを指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、18 年以上にわたって、子供の教育に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 定期定額払いおよび固定金利を基年金の期間の数を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 定期定額払いおよび固定金利を基年金の期間の数を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを一定期間の時間です。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 すべての引数 \(預金\) など配当は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `NPer` に期間を値を持つローンの支払いに支払いを行う必要があります数を返す関数が含まれて `PVal`します。 また、一定期間割合金利 \(`APR / 12`\)、支払 \(`Payment`\)、ローンの将来の値 \(`FVal`\) と、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 \(`PayType`\)。  
  
 [!code-vb[VbVbalrMath\#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> \= 0 および <paramref name="Pmt" /> \= 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[] ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間の割引率を指定することは、10 進数として表されます。</param>
        <param name="ValueArray">必須です。 配列 <see langword="Double" /> キャッシュ フローの値を指定します。 配列には、少なくとも 1 つの負の値 \(支払い\) と 1 つの正の値 \(受信確認\) を含める必要があります。</param>
        <summary>返します。、 <see langword="Double" /> 、一連の定期的なキャッシュ フロー \(支払いと受け取り\) および公定歩合に基づいて投資の正味現在価値を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 、一連の定期的なキャッシュ フロー \(支払いと受け取り\) および公定歩合に基づいて投資の正味現在価値を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資の正味現在価値は、将来の一連の支払いと配信確認メッセージの現在の値です。  
  
 `NPV` 関数は、配列内の値の順序を使用して支払いと受け取りの順序を解釈します。 必ず、正しい順序で支払いと受信確認の値を入力してください。  
  
 `NPV` 投資は、最初のキャッシュ フローの日付の前に 1 つのピリオドを開始し、配列内の最後のキャッシュ フロー値で終了します。  
  
 正味現在価値の計算は、将来のキャッシュ フローに基づきます。 によって返される値に、最初の値を追加する必要があります最初の期間の先頭にある最初のキャッシュ フローする場合は、 `NPV` され、キャッシュ フローの値に含まれない必要があります `ValueArray`します。  
  
 `NPV` 機能に似ています、 `PV` 関数 \(現在の値\) ことを除いて、 `PV` 関数により、キャッシュ フローのいずれかを一定期間の先頭を開始します。 変数とは異なり `NPV` キャッシュ フロー値 `PV` 投資全体でキャッシュ フローを修正する必要があります。  
  
   
  
## 例  
 この例では、 `NPV` 関数を配列に格納されているキャッシュ フローの一連の正味現在価値を返す `values()`します。 戻り値の値に格納されている `FixedRetRate`, 、固定の内部利益率を表します。  
  
 [!code-vb[VbVbalrMath\#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ValueArray" /> <see langword="Nothing" />, の順位付け、 <paramref name="ValueArray" /> &lt;&gt; 1、または <paramref name="Rate" /> \=\-1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間の金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、合計 4 × 12 \(または 48\) の支払い期間があることにします。</param>
        <param name="PV">必須です。<see langword="Double" /> 現在の値 \(または一括\) を指定、一連の今後の支払いが現在価値があります。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 将来の値または最後の支払いを行った後にキャッシュのバランスを指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、お子様の教育、18 年間に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて、年金の支払いを指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 定期的な定額払いおよび固定金利をに基づいて、年金の支払いを指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを一定期間中に行うです。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 `Rate` と `NPer` 引数は、同じ単位で表される期間を使用して計算する必要があります。 たとえば場合、 `Rate` か月間を使用して計算されます `NPer` 数か月を使用して計算する必要があります。  
  
 すべての引数 \(預金\) などの支払額は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `Pmt` を一定の期間中に、ローンの毎月の支払い額を返す関数。 一定期間割合金利を指定した場合は \(`APR / 12`\)、支払の合計数 \(`TotPmts`\)、現在の値またはローンのプリンシパル \(`PVal`\)、ローンの将来の値 \(`FVal`\)、および、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 `(PayType).`  
  
 [!code-vb[VbVbalrMath\#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> \= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間の金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="Per">必須です。<see langword="Double" /> 支払い期間を 1 からの範囲で指定 <c>NPer</c>します。</param>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、合計で 4 x 12 の \(または 48\) の支払い期間があることにします。</param>
        <param name="PV">必須です。<see langword="Double" /> 一連の将来または配信確認メッセージの現在の値を指定します。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 将来の値または最後の支払いを行った後にキャッシュのバランスを指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、18 年以上にわたって、子供の教育に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 一定の期間の年金の元金を示す定期的な定額払いおよび固定金利に基づいています。</summary>
        <returns>返します。、 <see langword="Double" /> 一定の期間の年金の元金を示す定期的な定額払いおよび固定金利に基づいています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを一定期間の時間です。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 `Rate` と `NPer` 引数は、同じ単位で表される期間を使用して計算する必要があります。 たとえば場合、 `Rate` か月間を使用して計算されます `NPer` 数か月を使用して計算する必要があります。  
  
 すべての引数 \(預金\) などの支払額は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `PPmt` をどの程度の特定の期間はプリンシパル支払いが同じ値の計算する関数。 一定期間割合金利を指定した場合は \(`APR / 12`\)、プリンシパルの部分が必要な支払い期間 \(`Period`\)、支払の合計数 \(`TotPmts`\)、現在の値またはローンのプリンシパル \(`PVal`\)、ローンの将来の値 \(`FVal`\) と、支払いの期限が先頭または末尾の支払い期間がかどうかを示す数値 \(`PayType`\)。  
  
 [!code-vb[VbVbalrMath\#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt; \= 0 または <paramref name="Per" /> &gt; <paramref name="NPer" />します。</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">必須です。<see langword="Double" /> 一定期間の金利を指定します。 たとえば、自動車ローンを 10% の年利 \(4 月\) を取得して毎月の支払いを行う場合期間あたりのレートは 0.1\/12 0.0083 です。</param>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、4 x 12 の \(または 48\) 期間があることにします。</param>
        <param name="Pmt">必須です。<see langword="Double" /> 各期間に支払いを指定します。 通常、支払いには、プリンシパルと投資の有効期間中に変化しない関心が含まれます。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 最後の支払いを行った後に将来の値または現金の残高を指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、18 年以上にわたって、子供の教育に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <summary>返します。、 <see langword="Double" /> 今後支払われる定期的な定額払いおよび固定金利を基年金の現在の値を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 今後支払われる定期的な定額払いおよび固定金利を基年金の現在の値を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを一定期間の時間です。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 `Rate` と `NPer` 引数は、同じ単位で表される期間を使用して計算する必要があります。 たとえば場合、 `Rate` か月間を使用して計算されます `NPer` 数か月を使用して計算する必要があります。  
  
 すべての引数 \(預金\) など配当は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
   
  
## 例  
 この例では、 `PV` 関数は、次の 20 年間には、1 年間に 50,000 ドルを提供する $1,000,000 年金の現在の値を返します。 提供されているが、予想される年率 \(`APR`\)、支払の合計数 \(`TotPmts`\) の各支払金額 \(`YrIncome`\)、投資の価値 \(`FVal`\)、および先頭または末尾の支払い期間で各支払いが行われたかどうかを示す数値 \(`PayType`\)。 なお `YrIncome` 負の値は、配当投資から各年を表すためです。  
  
 [!code-vb[VbVbalrMath\#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">必須です。<see langword="Double" /> 年金の支払い期間の合計数を指定します。 たとえば、4 年間の車のローンの支払いを行う場合、合計 4 \* 12 \(または 48\) の支払い期間があることにします。</param>
        <param name="Pmt">必須です。<see langword="Double" /> 各期間に支払いを指定します。 通常、支払いには、プリンシパルと、年金の存続期間を変更しない関心が含まれます。</param>
        <param name="PV">必須です。<see langword="Double" /> 指定値、または一連の将来または配信確認メッセージの現在の投資額です。 たとえば、車を購入するお金を借用するときにローン金額、毎月の車の支払い額を行うかの金融に存在値です。</param>
        <param name="FV">省略可能です。<see langword="Double" /> 最後の支払いを行った後に将来の値または現金の残高を指定します。 たとえば、ローンの将来の値は、最後の支払い後の値であるために、$0 です。 ただし、18 年以上にわたって、子供の教育に 50,000 ドルを保存する場合は、将来の値は 50,000 米ドルにです。 省略した場合は 0 と見なされます。</param>
        <param name="Due">省略可能です。 型のオブジェクト <see cref="T:Microsoft.VisualBasic.DueDate" /> 支払いが期限を指定します。 この引数には、いずれかでなければなりません <c>DueDate.EndOfPeriod</c> 支払い期間の最後に支払う場合または <c>DueDate.BegOfPeriod</c> 期間の先頭に支払う場合。 省略した場合、 <c>DueDate.EndOfPeriod</c> と見なされます。</param>
        <param name="Guess">省略可能です。<see langword="Double" /> によって返される推定値を示す <see langword="Rate" />します。 省略した場合、 <c>Guess</c> 0.1 \(10%\)。</param>
        <summary>返します。、 <see langword="Double" /> 年金の毎期金利を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 年金の毎期金利を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 投資は、一連の支払いを一定期間の時間です。 投資には、\(住宅ローン\) などのローンまたは \(毎月の貯蓄プラン\) などの投資収益率を指定できます。  
  
 すべての引数 \(預金\) など配当は負の数値で表されます。受信 \(被除数をチェックします\) などは、正の数値で表されます。  
  
 `Rate` イテレーションによって計算されます。 値で始まる `Guess`, 、`Rate` 結果の精度は 0.00001 パーセントになるまで、計算を切り替えます。 場合 `Rate` 20 後の結果が、失敗した場合に見つけることはできません。 推定値が 10% の場合と `Rate` 失敗した場合、再試行の値が異なる `Guess`します。  
  
   
  
## 例  
 この例では、 `Rate` 支払の合計数を指定したローンの金利を計算する関数 \(`TotPmts`\)、ローン支払の量 \(`Payment`\)、現在の値またはローンのプリンシパル \(`PVal`\)、ローンの将来の値 \(`FVal`\)、支払いが先頭またはお支払い期間の終了の原因かどうかを示す数値 \(`PayType`\) と予想される利率の概算値 \(`Guess`\)。  
  
 [!code-vb[VbVbalrMath\#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;\= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須です。<see langword="Double" /> 資産の初期コストを指定します。</param>
        <param name="Salvage">必須です。<see langword="Double" /> その有効期間の終了時点での資産の値を指定します。</param>
        <param name="Life">必須です。<see langword="Double" /> 資産の有効期間の長さを指定します。</param>
        <summary>返します。、 <see langword="Double" /> 単一期間に対する資産の定額償却を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 単一期間に対する資産の定額償却を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 減価償却の期間と同じ単位で表す必要があります、 `Life` 引数。 すべての引数は正の数値である必要があります。  
  
   
  
## 例  
 この例では、 `SLN` をアセットの初期コストを指定した単一期間に対する資産の定額償却を返す関数 \(`InitCost`\)、資産の有効期間の最後に復旧値 \(`SalvageVal`\)、年間での資産の定額 \(`LifeTime`\)。  
  
 [!code-vb[VbVbalrMath\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> \= 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">必須です。<see langword="Double" /> 資産の初期コストを指定します。</param>
        <param name="Salvage">必須です。<see langword="Double" /> その有効期間の終了時点での資産の値を指定します。</param>
        <param name="Life">必須です。<see langword="Double" /> 資産の有効期間の長さを指定します。</param>
        <param name="Period">必須です。<see langword="Double" /> 減価償却の計算される資産の期間を指定します。</param>
        <summary>返します。、 <see langword="Double" /> 、級数合計資産の減価償却、指定した期間を指定します。</summary>
        <returns>返します。、 <see langword="Double" /> 、級数合計資産の減価償却、指定した期間を指定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Life` と `Period` 引数は、同じ単位で表す必要があります。 たとえば場合、 `Life` 月単位で指定された `Period` か月間にも許可できる必要があります。 すべての引数は正の数値である必要があります。  
  
   
  
## 例  
 この例では、 `SYD` をアセットの初期コストを指定した、指定した期間の資産の減価償却費を返す関数 \(`InitCost`\)、資産の有効期間の最後に復旧値 \(`SalvageVal`\)、年間での資産の定額 \(`LifeTime`\)。  
  
 [!code-vb[VbVbalrMath\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0、 <paramref name="Period" /> &gt; <paramref name="Life" />, 、または <paramref name="Period" /> &lt; \= 0。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>