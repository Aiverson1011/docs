<Type Name="VBMath" FullName="Microsoft.VisualBasic.VBMath">
  <TypeSignature Language="C#" Value="public sealed class VBMath" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed VBMath extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.VBMath" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="VbMath" /> モジュールには、算術演算を実行するための手順が含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、乱数を生成するための Visual Basic 言語のキーワードとランタイム ライブラリ メンバーをサポートします。  
  
   
  
## 例  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>乱数ジェネレーターを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロード、 `Randomize` メソッドは、シード値を取りません。 代わりに、システム タイマーによって返される値は、新しいシード値として使用します。  
  
 場合 `Randomize` を使用しない、 `Rnd` 関数を引数なしで\) 使用同数シードとして最初にそれが呼び出され、それ以降はシード値として最後に生成された番号を使用します。  
  
> [!NOTE]
>  ランダムな数のシーケンスを繰り返すを呼び出す `Rnd` を負の値の引数を使用する前に、すぐに `Randomize` 、数値の引数。  
  
> [!IMPORTANT]
>  `Random` ステートメントおよび `Rnd` 、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な場合があります、関数のシード値から開始し、有限の範囲内に含まれる番号を生成します。 その結果、 `Random` ステートメントおよび `Rnd` 暗号化で使用する乱数を生成する関数は使用できません。 詳細については、「<xref:System.Security.Cryptography.RandomNumberGenerator>」を参照してください。  
  
   
  
## 例  
 この例では、 `Randomize` 乱数ジェネレーターを初期化するステートメントです。 数値引数が省略されているため `Randomize` からの戻り値を使用して、 `Timer` 新しいシード値として機能します。  
  
 [!code-vb[VbVbalrMath\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Randomize">
      <MemberSignature Language="C#" Value="public static void Randomize (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Randomize(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Randomize(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">省略可能です。<see langword="Object" /> または有効な数値式です。</param>
        <summary>乱数ジェネレーターを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Randomize` 使用して `Number` 初期化するために、 `Rnd` 関数の乱数ジェネレーター、新しいシード値を提供します。 省略すると `Number`, 、システムのタイマーによって返される値は、新しいシード値として使用します。  
  
 場合 `Randomize` を使用しない、 `Rnd` 関数を引数なしで\) 使用同数シードとして最初にそれが呼び出され、それ以降はシード値として最後に生成された番号を使用します。  
  
> [!NOTE]
>  ランダムな数のシーケンスを繰り返すを呼び出す `Rnd` を負の値の引数を使用する前に、すぐに `Randomize` 、数値の引数。 使用して `Randomize` の同じ値を持つ `Number` 以前のシーケンスを繰り返しません。  
  
> [!IMPORTANT]
>  `Random` ステートメントおよび `Rnd` 、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な場合があります、関数のシード値から開始し、有限の範囲内に含まれる番号を生成します。 その結果、 `Random` ステートメントおよび `Rnd` 暗号化で使用する乱数を生成する関数は使用できません。 詳細については、「<xref:System.Security.Cryptography.RandomNumberGenerator>」を参照してください。  
  
   
  
## 例  
 この例では、 `Randomize` 乱数ジェネレーターを初期化するステートメントです。 数値引数が省略されているため `Randomize` からの戻り値を使用して、 `Timer` 新しいシード値として機能します。  
  
 [!code-vb[VbVbalrMath\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Rnd" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>型の乱数を返します <see langword="Single" />します。</summary>
        <returns>シーケンスの次のランダムな番号です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Rnd` 1 の場合より小さいより大きい、または 0 に等しい値が返されます。  
  
 呼び出しの前に `Rnd`, を使用して、 `Randomize` システム タイマーに基づいて、乱数ジェネレーターのシードを初期化するために引数を指定しないでステートメントです。  
  
 特定の範囲の整数の乱数を生成するには、次の数式を使用します。  
  
 [!code-vb[VbVbalrMath\#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 ここでは、 `upperbound` 、範囲の最大数ですと `lowerbound` は範囲の最小数。  
  
> [!NOTE]
>  ランダムな数のシーケンスを繰り返すを呼び出す `Rnd` を負の値の引数を使用する前に、すぐに `Randomize` 、数値の引数。  
  
> [!IMPORTANT]
>  `Random` ステートメントおよび `Rnd` 、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な場合があります、関数のシード値から開始し、有限の範囲内に含まれる番号を生成します。 その結果、 `Random` ステートメントおよび `Rnd` 暗号化で使用する乱数を生成する関数は使用できません。  
  
   
  
## 例  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <Member MemberName="Rnd">
      <MemberSignature Language="C#" Value="public static float Rnd (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Rnd(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.VBMath.Rnd(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">省略可能です。 A <see langword="Single" /> 値も有効な <see langword="Single" /> 式です。</param>
        <summary>型の乱数を返します <see langword="Single" />します。</summary>
        <returns>Rnd は同じ生成番号が 0 より小さい場合番号を使用するたびに <paramref name="Number" /> シードとして。 数が 0 より大きい場合は、Rnd は、シーケンス内の次の乱数を生成します。 数値が 0 に等しい場合は、Rnd は最後に生成された番号を生成します。 数が指定されていない場合、Rnd はシーケンスの次の乱数を生成します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Rnd` 1 の場合より小さいより大きい、または 0 に等しい値が返されます。  
  
 値 `Number` 決定方法 `Rnd` 乱数を生成します。  
  
 初期シード同じ番号のシーケンスの生成のために後の呼び出し、 `Rnd` 関数は、次のシーケンス番号のシードとして以前に生成された番号を使用します。  
  
 呼び出しの前に `Rnd`, を使用して、 `Randomize` システム タイマーに基づいて、乱数ジェネレーターのシードを初期化するために引数を指定しないでステートメントです。  
  
 特定の範囲の整数の乱数を生成するには、次の数式を使用します。  
  
 [!code-vb[VbVbalrMath\#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#30)]  
  
 ここでは、 `upperbound` 、範囲の最大数ですと `lowerbound` は範囲の最小数。  
  
> [!NOTE]
>  ランダムな数のシーケンスを繰り返すを呼び出す `Rnd` を負の値の引数を使用する前に、すぐに `Randomize` 、数値の引数。 使用して `Randomize` の同じ値を持つ `Number` 以前のシーケンスを繰り返しません。  
  
> [!IMPORTANT]
>  `Random` ステートメントおよび `Rnd` 、結果が生成するために使用されるアルゴリズムを知っている人に予測可能な場合があります、関数のシード値から開始し、有限の範囲内に含まれる番号を生成します。 その結果、 `Random` ステートメントおよび `Rnd` 暗号化で使用する乱数を生成する関数は使用できません。  
  
   
  
## 例  
 この例では、 `Rnd` 1 と 6 の範囲内でランダムな整数値を生成する関数。  
  
 [!code-vb[VbVbalrMath\#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.VBMath.Randomize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Randomize">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>乱数ジェネレーターを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Rnd">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>型の乱数を返します <see langword="Single" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>