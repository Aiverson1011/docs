<Type Name="Information" FullName="Microsoft.VisualBasic.Information">
  <TypeSignature Language="C#" Value="public sealed class Information" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Information extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Information" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Information" /> モジュールには、返す、テスト、または情報を確認するための手順が含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このモジュールは、Visual Basic 言語のキーワードとエラー情報の提供、データを検証する、配列の範囲の決定、およびデータの種類および色の情報を取得するランタイム ライブラリ メンバーをサポートします。  
  
   
  
## 例  
 次の例では、 `VbTypeName` をいくつかの変数のデータ型の名前を返す関数。  
  
```  
Dim sysDateName As String = "System.DateTime"  
Dim sysShortName As String = "Int16"  
Dim sysBadName As String = "Nonsense"  
Dim testVbName As String  
testVbName = VbTypeName(sysDateName)   
' Returns "Date".  
testVbName = VbTypeName(sysShortName)   
' Returns "Short".  
testVbName = VbTypeName(sysBadName)   
' Returns Nothing.  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Erl">
      <MemberSignature Language="C#" Value="public static int Erl ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Erl() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Erl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。</summary>
        <returns>最後に実行されたステートメントの行番号を示す整数を返します。 読み取り専用です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Visual Basic に行番号がない場合は、0 を返します。  
  
   
  
## 例  
 この例では、 `Erl` プロパティに行番号を指定します。  
  
 [!code-vb[VbVbalrErrorHandling\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      </Docs>
    </Member>
    <Member MemberName="Err">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.ErrObject Err ();" />
      <MemberSignature Language="ILAsm" Value=".method public static class Microsoft.VisualBasic.ErrObject Err() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.Err" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ErrObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>実行時エラーに関する情報が含まれています。</summary>
        <returns>実行時エラーに関する情報が含まれています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 プロパティ、 `Err` オブジェクトがエラーの作成者によって設定されます\-Visual Basic、オブジェクト、またはプログラマです。  
  
 ときに、実行時エラーが発生するのプロパティ、 `Err` オブジェクトのエラーを一意に識別する情報を格納して、エラー処理に使用することができます。 コードでは、実行時エラーを生成するには、使用、 `Raise` メソッドです。  
  
 `Err` オブジェクトのプロパティが 0 または長さ 0 の文字列にリセットされます \(""\) した後、 `Exit Sub`, 、`Exit Function`, 、`Exit Property`, 、または `Resume Next` エラー処理ルーチン内のステートメントです。 任意の形式を使用して、 `Resume` エラー処理ルーチンの外側でステートメントの状態はリセットされません、 `Err` オブジェクトのプロパティです。 使用することができます、 `Clear` メソッドを明示的にリセット `Err`します。  
  
 使用して、 `Raise` メソッドではなく、 `Error` およびモジュールのクラスにシステム エラーの実行時エラーを生成するステートメントです。 使用するかどうかの決定、 `Raise` 他のコードでメソッドを取得する情報の量によって異なります。  
  
 `Err` オブジェクトは、グローバル スコープを持つ組み込みオブジェクトです。 そのため、コードで、そのインスタンスを作成する必要はありません。  
  
   
  
## 例  
 この例のプロパティを使用して、 `Err` エラー メッセージ\] ダイアログ ボックスを作成するオブジェクト。 使用する場合、ことに注意して、 `Clear` メソッドと Visual Basic エラーを生成するときに、最初、 `Raise` メソッドでは、Visual Basic の既定値になりますのプロパティ、 `Err` オブジェクトです。  
  
 [!code-vb[VbVbalrErrorHandling\#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrErrorHandling/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public static bool IsArray (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsArray(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。<see langword="Object" /> 変数。</param>
        <summary>返します。、 <see langword="Boolean" /> 変数が配列を参照するかどうかを示す値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 変数が配列を参照するかどうかを示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsArray` 返します `True` 変数が配列であるを指している場合が返された `False`です。`IsArray` オブジェクトの配列を含む可能性があると便利です。  
  
   
  
## 例  
 この例では、 `IsArray` 関数を配列にいくつかの変数が参照しているかを確認します。  
  
 [!code-vb[VbVbalrFunctions\#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDate">
      <MemberSignature Language="C#" Value="public static bool IsDate (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDate(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> 、有効な式を表すかどうかを示す値 <see langword="Date" /> 値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 、有効な式を表すかどうかを示す値 <see langword="Date" /> 値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsDate` 返します `True` 場合 `Expression` は、 <xref:System.DateTime> データを入力するかを返すに変換された以外の場合、指定できます `False`します。  
  
 <xref:System.DateTime> データ型は、日付の値と時刻の値の両方が保持されます。`IsDate` 返します `True` 場合 `Expression` 有効な日付、時刻が正しい有効な日付と時刻を表します。  
  
   
  
## 例  
 次の例では、 `IsDate` いくつかの変数を表す有効なかどうかを判断関数 <xref:System.DateTime> 値。  
  
 [!code-vb[VbVbalrFunctions\#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#35)]  
  
 前の例で `IsDate` 返します `True` の最初の 4 つの呼び出しと `False` 最後の呼び出しです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsDBNull">
      <MemberSignature Language="C#" Value="public static bool IsDBNull (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsDBNull(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> に式を評価するかどうかを示す値、 <see cref="T:System.DBNull" /> クラスです。</summary>
        <returns>返します。、 <see langword="Boolean" /> に式を評価するかどうかを示す値、 <see cref="T:System.DBNull" /> クラスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsDBNull` 返します `True` のデータ型の場合 `Expression` に評価、 <xref:System.DBNull> 入力します。 それ以外の場合、 `IsDBNull` を返します `False`します。  
  
 <xref:System.DBNull?displayProperty=fullName> 値を `Object` または存在しないデータを表します。`DBNull` 同じではありません `Nothing`, 、ある変数がまだ初期化されていないを示します。`DBNull` 同じではありません長さ 0 の文字列 \(`""`\)、null 文字列として呼ばします。  
  
   
  
## 例  
 この例では、 `IsDBNull` に変数が評価されるかどうかを判断します `DBNull`します。  
  
 [!code-vb[VbVbalrFunctions\#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#36)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="T:System.DBNull" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsError">
      <MemberSignature Language="C#" Value="public static bool IsError (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsError(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> 式が例外の型であるかどうかを示す値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 式が例外の型であるかどうかを示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsError` 返します `True` 式を表す場合、 `Object` から派生した変数、 <xref:System.Exception> クラス、 <xref:System> 名前空間。  
  
 派生した例外 <xref:System.Exception?displayProperty=fullName> でキャッチできる、 `Try...Catch...Finally` ステートメントです。  
  
   
  
## 例  
 次の例では、 `IsError` 式がシステム例外を表すかどうかにチェックする関数。  
  
 [!code-vb[VbVbalrFunctions\#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNothing">
      <MemberSignature Language="C#" Value="public static bool IsNothing (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNothing(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> 式に割り当てられたオブジェクトがないかどうかを示す値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 式に割り当てられたオブジェクトがないかどうかを示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsNothing` 返します `True` 返すかどうか、式はなしに割り当てられている、それ以外のオブジェクトを現在持っているオブジェクト変数を表す、 `False`です。  
  
 `IsNothing` 参照型での作業が想定されています。 値型の値を保持することはできず、割り当てる場合は、既定値に戻ります `Nothing` にします。 値型を指定する場合は、 `Expression`, 、`IsNothing` は常に返します `False`します。  
  
   
  
## 例  
 次の例では、 `IsNothing` 関数、オブジェクト変数がオブジェクト インスタンスに関連付けられているかを判断します。  
  
 [!code-vb[VbVbalrFunctions\#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsNumeric">
      <MemberSignature Language="C#" Value="public static bool IsNumeric (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsNumeric(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> 式が数値として評価できるかどうかを示す値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 式が数値として評価できるかどうかを示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsNumeric` returns `True` if the data type of `Expression` is `Boolean`, `Byte`, `Decimal`, `Double`, `Integer`, `Long`, `SByte`, `Short`, `Single`, `UInteger`, `ULong`, or `UShort`. 返します `True` 場合 `Expression` は、 `Char`, 、`String`, 、または `Object` を数値に正常に変換できることができます。`Expression` 数字以外の文字を含めることができます。`IsNumeric` 返します `True` 場合 `Expression` 文字列の有効な 16 進数または 8 進数の数値を含んでいます。`IsNumeric` 返します `True` 場合 `Expression` で始まる有効な数値式が含まれています、\+ または \- の文字します。 またはコンマが含まれています。  
  
 `IsNumeric` 返します `False` 場合 `Expression` データ型の `Date`です。 返す `False` 場合 `Expression` は、 `Char`, 、`String`, 、または `Object` を数値に正常に変換できることはできません。  
  
   
  
## 例  
 次の例では、 `IsNumeric` 変数の内容が数値として評価できるかどうかを判断します。  
  
 [!code-vb[VbVbalrFunctions\#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#39)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReference">
      <MemberSignature Language="C#" Value="public static bool IsReference (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool IsReference(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">必須です。<see langword="Object" /> 式。</param>
        <summary>返します。、 <see langword="Boolean" /> 式が参照型に評価するかどうかを示す値。</summary>
        <returns>返します。、 <see langword="Boolean" /> 式が参照型に評価するかどうかを示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsReference` 返します `True` 場合 `Expression` クラスのインスタンスなどの参照型を表す、 `String` 型、または任意の型の配列を返す場合は、 `False`です。  
  
 参照型には、メモリに他の場所に格納されたデータへのポインターが含まれています。 値の型には、独自のデータが含まれています。  
  
   
  
## 例  
 この例では、 `IsReference` かどうかと、いくつかの変数が参照型を参照して確認します。  
  
 [!code-vb[VbVbalrFunctions\#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#40)]  
  
 この例では、最初の 3 つを呼び出す `IsReference` 返す `True`します。 最後の呼び出し `False`, ので、 `Integer` 参照型ではなく、値型です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="T:System.Object" />
        <altmember cref="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="LBound">
      <MemberSignature Language="C#" Value="public static int LBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 LBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必須です。 任意のデータ型の配列。 ディメンションの最も小さいインデックスを検索する配列。</param>
        <param name="Rank">省略可能です。<see langword="Integer" />。 最も小さいインデックスが返される次元です。 最初の次元は、2 番目の 2 に 1 を使用したりできます。 場合 <c>Rank</c> は省略すると、1 が使用されます。</param>
        <summary>配列の指定されたディメンションに対して使用できる添字の最小値を返します。</summary>
        <returns>
          <see langword="Integer" />。 最小値指定されたディメンションの添字を含めることができます。<see langword="LBound" /> 常に 0 を返しますと同じくらい <paramref name="Array" /> 長さ 0 の文字列である場合の例については、要素が存在しない場合でも、初期化されています。 場合 <paramref name="Array" /> は <see langword="Nothing" />, 、<see langword="LBound" /> スロー、 <see cref="T:System.ArgumentNullException" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列の添字は 0 から始まるため、各次元で使用できる添字の最小値は常に 0 です。  
  
 次の次元の配列の `LBound` 次の表に、値を返します。  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|LBound への呼び出し|戻り値|  
|-------------------|---------|  
|`LBound(a, 1)`|0|  
|`LBound(a, 2)`|0|  
|`LBound(a, 3)`|0|  
  
   
  
## 例  
 次の例では、 `LBound` 関数を配列の指定されたディメンションに対して使用できる添字の最小値を決定します。  
  
 [!code-vb[VbVbalrFunctions\#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> 1 未満または <paramref name="Rank" /> のランクよりも大きい <paramref name="Array" />します。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="QBColor">
      <MemberSignature Language="C#" Value="public static int QBColor (int Color);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 QBColor(int32 Color) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Color" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Color">必須です。 0 ~ 15 の範囲の整数値。</param>
        <summary>返します。、 <see langword="Integer" /> 色番号の指定に対応する RGB 色コードを表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 色番号の指定に対応する RGB 色コードを表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 以降、最下位バイトでは、返される値は、Visual Basic 言語で使用する RGB システムの適切な色を設定するため、赤、緑、および青の値を指定します。  
  
 `Color` 引数がこれらの設定です。  
  
|数値|色|数値|色|  
|--------|-------|--------|-------|  
|0|黒|9|灰色|  
|1|青|9|明るい青|  
|2|緑|10|明るい緑|  
|3|シアン|11|薄いシアン|  
|4|赤|12|明るい赤|  
|5|マゼンタ|13|明るい赤紫|  
|6|黄|14|淡い黄色|  
|7|白|15|明るいホワイト|  
  
   
  
## 例  
 この例では、 `QBColor` で色を変更する関数が示される `colorInteger`です。`QBColor` 0 ~ 15 の範囲の整数値を受け取ります。  
  
 [!code-vb[VbVbalrCatRef\#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Color" /> 0 ~ 15 の包括的な範囲外です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RGB">
      <MemberSignature Language="C#" Value="public static int RGB (int Red, int Green, int Blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 RGB(int32 Red, int32 Green, int32 Blue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.RGB(System.Int32,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Red" Type="System.Int32" />
        <Parameter Name="Green" Type="System.Int32" />
        <Parameter Name="Blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Red">必須です。<see langword="Integer" /> 0 – 255 の範囲では、色の赤の成分の濃度を表します。</param>
        <param name="Green">必須です。<see langword="Integer" /> 0 – 255 の範囲では、色の緑の成分の濃度を表します。</param>
        <param name="Blue">必須です。<see langword="Integer" /> 0 – 255 の範囲では、色の青の成分の濃度を表します。</param>
        <summary>返します。、 <see langword="Integer" /> 赤、緑、青の色要素のセットから RGB 色の値を表す値。</summary>
        <returns>返します。、 <see langword="Integer" /> 赤、緑、青の色要素のセットから RGB 色の値を表す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 色の指定をそのまま使用するアプリケーションのメソッドとプロパティは、カラー値 RGB を表す数値を指定して指定されることを期待します。 RGB 色の値では、赤、緑、および表示する特定の色を青の相対的な度合いを指定します。  
  
 場合に渡す引数の値 `RGB` 255 より大きい 255 を使用します。  
  
 次の表は、一部の標準的な色と含まれる赤、緑、および青の値を示します。  
  
|色|赤の値|緑の値|青の値|  
|-------|---------|---------|---------|  
|黒|0|0|0|  
|青|0|0|255|  
|緑|0|255|0|  
|シアン|0|255|255|  
|赤|255|0|0|  
|マゼンタ|255|0|255|  
|黄|255|255|0|  
|白|255|255|255|  
  
   
  
## 例  
 この例では、どのように `RGB` を表す整数を返す関数を使用、 `RGB` カラー値。  
  
 [!code-vb[VbVbalrCatRef\#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Green" />, 、<paramref name="Blue" />, 、または <paramref name="Red" /> は 0 ~ 255 の範囲外です。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.QBColor(System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SystemTypeName">
      <MemberSignature Language="C#" Value="public static string SystemTypeName (string VbName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string SystemTypeName(string VbName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VbName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="VbName">必須です。 A <see langword="String" /> Visual Basic の型名を含む変数を指定します。</param>
        <summary>返します。、 <see langword="String" /> 変数のシステム データ型名を示す値。</summary>
        <returns>返します。、 <see langword="String" /> 変数のシステム データ型名を示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `SystemTypeName` 完全修飾共通言語ランタイム \(CLR\) 型に対応する名前、Visual Basic の型名を返します。 たとえば場合、 `VbName` 「日」を含む `SystemTypeName` "System.DateTime"を返します。 場合 `SystemTypeName` の値を認識しない `VbName`, を返す `Nothing` \(文字列ではなく"Nothing"\) です。  
  
   
  
## 例  
 次の例では、 `SystemTypeName` をいくつかの変数のデータ型の名前を返す関数。  
  
 [!code-vb[VbVbalrFunctions\#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#49)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public static string TypeName (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string TypeName(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.TypeName(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。<see langword="Object" /> 変数。 場合 <see langword="Option Strict" /> は <see langword="Off" />, 、構造体以外の任意のデータ型の変数を渡すことができます。</param>
        <summary>返します。、 <see langword="String" /> 変数に関する情報をデータ型を含む値。</summary>
        <returns>返します。、 <see langword="String" /> 変数に関する情報をデータ型を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表に、 `String` によって返される値 `TypeName` のさまざまな内容 `VarName`します。  
  
|`VarName` 内容|返される文字列|  
|------------------|-------------|  
|16 ビット `True` または `False` 値の型|"Boolean"|  
|8 ビットのバイナリ値の型|「バイト」|  
|16 ビット文字値の型|"Char"|  
|64 ビットの日付と時刻の値を入力します。|「日付」|  
|参照型のデータが存在しないか、存在しないことを示します|"DBNull"|  
|128 ビットの固定小数点数値型|"Decimal"|  
|64 ビットの浮動小数点数値型|"Double"|  
|32 ビット整数値の型|"Integer"|  
|特殊化されていないオブジェクトを指す参照型|「オブジェクト」|  
|クラスから作成された特殊なオブジェクトを指す参照型 *objectclass*|"*objectclass*"|  
|64 ビット整数値の型|"Long"|  
|オブジェクトが現在割り当てられていない参照型|"Nothing"|  
|8 ビット符号付き整数値の型|"SByte"|  
|16 ビット整数値の型|"Short"|  
|32 ビット浮動小数点数値型|「単一」|  
|16 ビット文字の文字列を指す参照型|「文字列」|  
|32 ビット符号なし整数値の型|"UInteger"|  
|64 ビット符号なし整数値の型|"ULong"|  
|16 ビット符号なし整数値の型|"UShort"|  
  
 場合 `VarName` 、配列は、返される文字列は空のかっこの前の表に、文字列のいずれかを指定できます。 たとえば場合、 `VarName` 、整数の配列を指す `TypeName` "Integer\(\)"を返します。  
  
 `TypeName` 参照型の名前を返すなど、クラス名が返されるだけ、自体には、修飾名ではなく。 たとえば場合、 `VarName` クラスのオブジェクトを指し示す <xref:System.Drawing.Printing.PaperSource?displayProperty=fullName>, 、`TypeName` "PaperSource"を返します。 変数は特定のクラス型として宣言されたに割り当てられているオブジェクトを持たない場合 `TypeName` "Nothing"を返します。  
  
   
  
## 例  
 次の例では、 `TypeName` をいくつかの変数に関するデータ型情報を返す関数。  
  
 [!code-vb[VbVbalrFunctions\#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Information.IsArray(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDate(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsDBNull(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsError(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNothing(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsNumeric(System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Information.IsReference(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="UBound">
      <MemberSignature Language="C#" Value="public static int UBound (Array Array, int Rank = 1);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 UBound(class System.Array Array, int32 Rank) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.UBound(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Array" Type="System.Array" />
        <Parameter Name="Rank" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Array">必須です。 任意のデータ型の配列。 ディメンションの最も大きいインデックスを検索する配列。</param>
        <param name="Rank">省略可能です。<see langword="Integer" />。 最も大きいインデックスが返される次元です。 最初の次元は、2 番目の 2 に 1 を使用したりできます。 場合 <c>Rank</c> は省略すると、1 が使用されます。</param>
        <summary>指定された配列の次元の最も大きいインデックスを返します。</summary>
        <returns>
          <see langword="Integer" />。 値が最も高い指定されたディメンションの添字を含めることができます。 場合 <paramref name="Array" /> 1 つだけの要素を持つ <see langword="UBound" /> 0 を返します。 場合 <paramref name="Array" /> 長さ 0 の文字列である場合の例については、要素が存在しない <see langword="UBound" /> \-1 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 配列の添字は 0 から開始されるため、次元の長さはその次元の最も大きいインデックスより 1 だけ大きい数値です。  
  
 次の次元の配列の `UBound` 次の表に、値を返します。  
  
```vb  
Dim a(100, 5, 4) As Byte  
```  
  
|Ubound 関数を呼び出す|戻り値|  
|--------------------|---------|  
|`UBound(a, 1)`|100|  
|`UBound(a, 2)`|5|  
|`UBound(a, 3)`|4|  
  
 使用する `UBound` 合計を計算が、配列の要素の数が添字は 0 から始まるファクトのアカウントに返される値を調整する必要があります。 次の例は、配列の合計サイズを計算 `a` 前の例では。  
  
```vb  
Dim total As Integer  
total = (UBound(A, 1) + 1) * (UBound(A, 2) + 1) * (UBound(A, 3) + 1)  
```  
  
 値が計算された `total` は 3030、101 \* 6 \* 5 です。  
  
   
  
## 例  
 次の例では、 `UBound` を指定された配列の次元の最も大きいインデックスを調べます。  
  
 [!code-vb[VbVbalrFunctions\#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Array" /> は <see langword="Nothing" /> です。</exception>
        <exception cref="T:System.RankException">
          <paramref name="Rank" /> 1 未満または <paramref name="Rank" /> のランクよりも大きい <paramref name="Array" />します。</exception>
        <altmember cref="M:Microsoft.VisualBasic.Information.LBound(System.Array,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.RankException" />
      </Docs>
    </Member>
    <Member MemberName="VarType">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.VariantType VarType (object VarName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.VariantType VarType(object VarName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VarType(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.VariantType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="VarName" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="VarName">必須です。<see langword="Object" /> 変数。 場合 <see langword="Option Strict" /> は <see langword="Off" />, 、構造体以外の任意のデータ型の変数を渡すことができます。</param>
        <summary>返します。、 <see langword="Integer" /> 変数のデータ型の分類を含む値。</summary>
        <returns>返します。、 <see langword="Integer" /> 変数のデータ型の分類を含む値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返される整数値 `VarType` のメンバーである、 <xref:Microsoft.VisualBasic.VariantType>です。  
  
 によって返される値を次の表に示します `VarType` の特殊なケースの `VarName`です。  
  
|によって表されるデータ型 `VarName`|によって返される値 `VarType`|  
|----------------------------|-------------------------|  
|[Nothing \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/06176e2d-bbf7-4a37-afaa-a86ad21ee99f)|`VariantType.Object`|  
|<xref:System.DBNull>|`VariantType.Null`|  
|列挙|基になるデータ型 \(`SByte`, 、`Byte`, 、`Short`, 、`UShort`, 、`Integer`, 、`UInteger`, 、`Long`, 、または `ULong`\)|  
|配列|配列要素の型のビットごとの OR と `VariantType.Array`|  
|配列の配列|ビットごとの OR `VariantType.Object` と `VariantType.Array`|  
|構造体 \(<xref:System.ValueType?displayProperty=fullName>\)|`VariantType.UserDefinedType`|  
|<xref:System.Exception>|`VariantType.Error`|  
|不明|`VariantType.Object`|  
  
   
  
## 例  
 次の例では、 `VarType` をいくつかの変数に関するデータの種類の分類の情報を返す関数。  
  
 [!code-vb[VbVbalrFunctions\#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
        <altmember cref="T:Microsoft.VisualBasic.VariantType" />
      </Docs>
    </Member>
    <Member MemberName="VbTypeName">
      <MemberSignature Language="C#" Value="public static string VbTypeName (string UrtName);" />
      <MemberSignature Language="ILAsm" Value=".method public static string VbTypeName(string UrtName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Information.VbTypeName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="UrtName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="UrtName">必須です。<see langword="String" /> 共通言語ランタイムによって使用される型名を含む変数。</param>
        <summary>返します。、 <see langword="String" /> 変数の Visual Basic データ型名を示す値。</summary>
        <returns>返します。、 <see langword="String" /> 変数の Visual Basic データ型名を示す値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `VbTypeName` 共通言語ランタイムの型名に対応する Visual Basic の型名を返します。 たとえば場合、 `UrtName` "Int32"または"System.Int32"を含む `VbTypeName` "Integer"を返します。 場合 `VbTypeName` の値を認識しない `UrtName`, を返す `Nothing` \(文字列ではなく"Nothing"\) です。  
  
 内の型名 `UrtName` からなど、さまざまなソースから取得できます、 <xref:System.Reflection.MemberInfo.Name%2A> プロパティに、 <xref:System.Reflection.MemberInfo> の配列、 <xref:System.Type> クラスです。  
  
   
  
## 例  
 次の例では、 `VbTypeName` をいくつかの変数のデータ型の名前を返す関数。  
  
 [!code-vb[VbVbalrFunctions\#56](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#56)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.String" />
        <altmember cref="M:Microsoft.VisualBasic.Information.SystemTypeName(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>