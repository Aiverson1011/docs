<Type Name="X509Certificate2" FullName="System.Security.Cryptography.X509Certificates.X509Certificate2">
  <TypeSignature Language="C#" Value="public class X509Certificate2 : System.Security.Cryptography.X509Certificates.X509Certificate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit X509Certificate2 extends System.Security.Cryptography.X509Certificates.X509Certificate" />
  <TypeSignature Language="DocId" Value="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />
  <AssemblyInfo>
    <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.Cryptography.X509Certificates.X509Certificate</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>X.509 証明書を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The X.509 structure originated in the International Organization for Standardization \(ISO\) working groups. This structure can be used to represent various types of information including identity, entitlement, and holder attributes \(permissions, age, sex, location, affiliation, and so forth\). Although the ISO specifications are most informative on the structure itself, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class is designed to model the usage scenarios defined in specifications issued by the Internet Engineering Task Force \(IETF\) Public Key Infrastructure, X.509 \(PKIX\) working group. The most informative of these specifications is RFC 3280, "[Certificate and Certificate Revocation List \(CRL\) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)."  
  
> [!IMPORTANT]
>  Starting with the [!INCLUDE[net_v46](~/includes/net-v46-md.md)], this type implements the <xref:System.IDisposable> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref:System.IDisposable.Dispose%2A> method in a **languageKeyword tag is not supported!!!!**  
> \/**languageKeyword tag is not supported!!!!**  
>  block. To dispose of it indirectly, use a language construct such as **languageKeyword tag is not supported!!!!**  
>  \(in C\#\) or **languageKeyword tag is not supported!!!!**  
>  \(in Visual Basic\). For more information, see the “Using an Object that Implements IDisposable” section in the <xref:System.IDisposable> interface topic.  
>   
>  For apps that target the [!INCLUDE[net_v452](~/includes/net-v452-md.md)] and earlier versions, the <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> class does not implement the <xref:System.IDisposable> interface and therefore does not have a **languageKeyword tag is not supported!!!!**  
>  method.  
  
   
  
## 例  
 The following example demonstrates how to use an <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object to encrypt and decrypt a file.  
  
 [!code-csharp[X509Certificate2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/x509certificate2/cs/program.cs#1)]
 [!code-vb[X509Certificate2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/x509certificate2/vb/program.vb#1)]  
  
 The following example creates a command\-line executable that takes a certificate file as an argument and prints various certificate properties to the console.  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor creates an empty <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> object, unlike the other constructors for this class that use certificate information from a byte array, a pointer, or a certificate file.  
  
   
  
## 例  
 The following code example opens the current user certificate store, selects only active certificates, then allows the user to select one or more certificates. The example then writes certificate information to the console.  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[])" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのバイト配列から情報を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> バイト配列から証明書の情報を使用してオブジェクトです。 バイト配列には、バイナリ \(DER\) エンコードまたは Base64 でエンコードされた X.509 データを指定できます。 バイト配列には、PKCS7 ことができます \(Authenticode\) で署名されたファイルです。署名証明書は、オブジェクトの作成に使用されます。  
  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `rawData`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.IntPtr)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">アンマネージ コードで証明書のコンテキストへのポインター。 C の構造体と呼ばれる <see langword="PCCERT_CONTEXT" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのアンマネージのハンドルを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクト Microsoft Cryptographic API 証明書のコンテキストを識別するハンドルを使用して `PCCERT_CONTEXT`します。 このコンス トラクターの直前の呼び出し元がアンマネージ コード アクセス許可が必要であることを注意してください。  
  
> [!IMPORTANT]
>  コンス トラクターでは、証明書のコンテキストのコピーを作成します。 コンス トラクターに渡されるコンテキスト構造が無効な場合があると仮定しません。リリースされています可能性があります。 現在のコピーを取得する `PCCERT_CONTEXT` から構造体、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate.Handle%2A> プロパティが有効の有効期間中にのみ、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (System.Security.Cryptography.X509Certificates.X509Certificate certificate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Cryptography.X509Certificates.X509Certificate certificate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Security.Cryptography.X509Certificates.X509Certificate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="certificate" Type="System.Security.Cryptography.X509Certificates.X509Certificate" />
      </Parameters>
      <Docs>
        <param name="certificate">
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> オブジェクト。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスを使用して、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの新しいインスタンスを作成、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> クラスを使用して、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate> オブジェクトです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの証明書ファイル名を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクトの証明書ファイル名を使用します。 バイナリ \(DER\) エンコードまたは Base64 エンコードがサポートしています。  
  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `fileName`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, System.Security.SecureString password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, class System.Security.SecureString password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのバイト配列と、パスワードを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが使用するには、証明書の秘密キーを含む PKCS12 \(PFX\) ファイルです。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化し、キー コンテナーに保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `rawData`, 、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのバイト配列と、パスワードを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクトのバイト配列と証明書データにアクセスするために必要なパスワードを使用します。 証明書の秘密キーを格納する PKCS12 \(PFX\) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化し、キー コンテナーに保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `rawData`, 、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected X509Certificate2 (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">新しいを逆シリアル化に必要なシリアル化情報 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />します。</param>
        <param name="context">逆シリアル化するストリームのソースに関するコンテキスト情報。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの指定のシリアル化とストリーム コンテキスト情報を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, System.Security.SecureString password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, class System.Security.SecureString password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 証明書ファイル名とパスワードを使用しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが使用するには、証明書の秘密キーを含む PKCS12 \(PFX\) ファイルです。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化し、キー コンテナーに保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `fileName`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの証明書ファイル名と証明書にアクセスするために使用するパスワードを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクトの証明書ファイル名と証明書にアクセスするために必要なパスワードを使用します。 証明書の秘密キーを格納する PKCS12 \(PFX\) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化し、キー コンテナーに保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `fileName`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのバイト配列、パスワード、およびキー格納フラグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが使用するには、証明書の秘密キーを含む PKCS12 \(PFX\) ファイルです。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化しを Microsoft 暗号化 API 暗号化サービス プロバイダー \(CSP\) を保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `rawData`, 、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(unsigned int8[] rawData, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスのバイト配列、パスワード、およびキー格納フラグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> バイトを使用してオブジェクトの配列に、証明書データ、およびキー格納フラグをアクセスするために必要なパスワード。 証明書の秘密キーを含む PKCS12 \(PFX\) ファイルと共に使用されます。 正しいパスワードを使用して、このコンス トラクターの呼び出しでは、秘密キーを復号化しを Microsoft 暗号化 API 暗号化サービス プロバイダー \(CSP\) を保存します。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `rawData`, 、 [X509Certificate2 コンストラクター \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの証明書ファイル名、パスワード、およびキー格納フラグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `fileName`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public X509Certificate2 (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.#ctor(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 証明書ファイルを使用してクラス名、パスワード、証明書およびキー格納フラグにアクセスするために使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターが、新たに作成 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 証明書ファイルを使用してオブジェクトの名前、証明書およびキー格納フラグにアクセスするために必要なパスワード。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 作成する場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> の pkcs7 で署名済みのファイル ストアを指定することによって証明書 `fileName`, 、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、ストア内の証明書のいずれかのではなく、ストアに署名した証明書を作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書でエラーが発生します。 例:  
  
-   証明書ファイルが存在しません。  
  
-   証明書が無効です。  
  
-   証明書のパスワードが正しくありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for accessing unmanaged code. Security action: <see cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Archived">
      <MemberSignature Language="C#" Value="public bool Archived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Archived" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または X.509 証明書がアーカイブされることを示す値を設定します。</summary>
        <value>
          <see langword="true" /> 証明書がアーカイブされている場合 <see langword="false" /> 場合は、証明書はアーカイブできません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ストアに関連付けられている証明書でのみ設定されます。 プロパティが設定されていて、証明書ストアに証明書を追加、値が永続化されます。 プロパティがストアから取得した証明書に設定されている場合、値はすぐに永続化します。  
  
 X.509 ストア、アーカイブされた証明書は含まれません、返される <xref:System.Security.Cryptography.X509Certificates.X509Certificate2Collection> しない限り、オブジェクト、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> にプロパティが設定されている `true`します。 物理的なアーカイブ動作が発生しない場合、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.Archived%2A> 値が設定または解除します。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Export">
      <MemberSignature Language="C#" Value="public override byte[] Export (System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] Export(valuetype System.Security.Cryptography.X509Certificates.X509ContentType contentType, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Export(System.Security.Cryptography.X509Certificates.X509ContentType,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("X509ContentType.SerializedCert is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentType" Type="System.Security.Cryptography.X509Certificates.X509ContentType" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contentType">To be added.</param>
        <param name="password">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X509ExtensionCollection Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ExtensionCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Extension" /> オブジェクトのコレクションを取得します。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 X.509 v3 証明書の形式で定義された拡張は、証明書に含まれるその他のデータを許可します。 RFC 3280 に PKIX によって、また X.509 v3 定義で、ISO で多数の拡張機能が定義された"[Certificate and Certificate Revocation List \(CRL\) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)." 一般的な拡張キー使用法に関する情報を含める \(<xref:System.Security.Cryptography.X509Certificates.X509KeyUsageExtension>\)、キーの識別子 \(<xref:System.Security.Cryptography.X509Certificates.X509SubjectKeyIdentifierExtension>\)、証明書のポリシー、\(拡張子は CRL 配布ポイント\) の失効情報およびその他の用途。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="FriendlyName">
      <MemberSignature Language="C#" Value="public string FriendlyName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FriendlyName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.FriendlyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または証明書に関連付けられた別名を設定します。</summary>
        <value>証明書のフレンドリ名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 フレンドリ名は、設定可能な X.509 証明書ストアのプロパティです。 関連付けるエイリアス証明書が簡単に識別できるようにユーザーを有効に使用されます。  
  
 証明書は、空の文字列の表示名が存在しない場合 \(""\) が返されます。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCertContentType">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Detection limited to Cert, Pfx, Pkcs12, Pkcs7 and Unknown")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ContentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <summary>バイト配列に格納されている証明書の種類を示します。</summary>
        <returns>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、ファイル内の証明書の種類を検出することができます。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="rawData" /> 長さは 0 または <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCertContentType">
      <MemberSignature Language="C#" Value="public static System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Security.Cryptography.X509Certificates.X509ContentType GetCertContentType(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetCertContentType(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Detection limited to Cert, Pfx, Pkcs12 and Unknown")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X509ContentType</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <summary>ファイルに格納されている証明書の種類を示します。</summary>
        <returns>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509ContentType" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、ファイル内の証明書の種類を検出することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">for reading the certificate. Security action: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />. Associated enumeration: <see cref="F:System.IO.FileAccess.Read" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetNameInfo">
      <MemberSignature Language="C#" Value="public string GetNameInfo (System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetNameInfo(valuetype System.Security.Cryptography.X509Certificates.X509NameType nameType, bool forIssuer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo(System.Security.Cryptography.X509Certificates.X509NameType,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("always return String.Empty for UpnName, DnsFromAlternativeName and UrlName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nameType" Type="System.Security.Cryptography.X509Certificates.X509NameType" />
        <Parameter Name="forIssuer" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="nameType">
          <see cref="T:System.Security.Cryptography.X509Certificates.X509NameType" /> サブジェクトの値。</param>
        <param name="forIssuer">
          <see langword="true" /> 発行者名を含めるそれ以外の場合、 <see langword="false" />です。</param>
        <summary>証明書からサブジェクトと発行者名を取得します。</summary>
        <returns>証明書の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、名前と値の多くは、複数の場所にあることができますので、証明書を解析する代わりに常に使用する必要があります。 このメソッドを使うと、適切な名前が返されることができます。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPrivateKey">
      <MemberSignature Language="C#" Value="public bool HasPrivateKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPrivateKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.HasPrivateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトには、秘密キーが含まれています。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトには、プライベートが含まれています。 キー以外の場合、 <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書のコンテキストが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトにバイト配列からのデータです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用を X.509 証明書の生のバイト配列を取得し、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 関連する値を持つオブジェクト。  
  
 このメソッドは、バイト配列のみを受け入れる、以降は、Base64 でエンコードされた、DER でエンコードされた X.509 証明書または PFX\/PKCS12 証明書を含む、パスワードを必要としない証明書の種類に対してのみ使用できます。 PFX\/PKCS12 証明書が複数の証明書を格納できることに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書の名前。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 証明書ファイルから情報を含むオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、X.509 証明書を表しに設定する .cer 拡張子を持つファイルなど、証明書ファイルを使用して、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> ファイルに含まれる証明書を持つオブジェクト。  
  
 このメソッドは、Base64 でエンコードされた、DER でエンコードされた X.509 証明書、証明書の PFX\/PKCS12、Authenticode の署名証明書など、いくつかの証明書の種類で使用できます。 PFX\/PKCS12 証明書が複数の証明書を格納できることに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("SecureString is incomplete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトのデータをバイト配列、パスワード、およびキー格納フラグを使用しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、Base64 でエンコードされた、DER でエンコードされた X.509 証明書、証明書の PFX\/PKCS12 などの証明書の種類に対して使用できます。 PFX\/PKCS12 証明書が複数の証明書を格納できることに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (byte[] rawData, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(unsigned int8[] rawData, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.Byte[],System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("missing KeyStorageFlags support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rawData" Type="System.Byte[]" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="rawData">X.509 証明書のデータを格納しているバイト配列。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトの秘密キーをインポートする方法を決定するためのデータをバイト配列、パスワード、およびフラグを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、設定を使用できます、 [Import メソッド \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509Certificate2> オブジェクトのバイト配列で指定された証明書のパスワードを使用します。[Import メソッド \(Byte\<xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> 場所と方法を制御する値を使用できるプライベート キーをインポートします。  
  
 このメソッドは、バイト配列を受け取り、Base64 でエンコードされた、DER でエンコードされた X.509 証明書または証明書の PFX\/PKCS12 などの証明書の型に対して使用できます。 PFX\/PKCS12 証明書が複数の証明書を格納できることに注意してください。 その場合は、秘密キーに関連付けられている最初の証明書を使用または、秘密キーが見つからない場合、最初の証明書が使用されます。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName, System.Security.SecureString password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName, class System.Security.SecureString password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.Security.SecureString,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("SecureString is incomplete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.Security.SecureString" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 証明書ファイル、パスワード、およびキー格納フラグの情報を持つオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 **セキュリティに関する注意** をハードコードしないでをソース コード内のパスワード。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Import">
      <MemberSignature Language="C#" Value="public override void Import (string fileName, string password, System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Import(string fileName, string password, valuetype System.Security.Cryptography.X509Certificates.X509KeyStorageFlags keyStorageFlags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Import(System.String,System.String,System.Security.Cryptography.X509Certificates.X509KeyStorageFlags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("missing KeyStorageFlags support")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
        <Parameter Name="keyStorageFlags" Type="System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" />
      </Parameters>
      <Docs>
        <param name="fileName">証明書ファイルの名前。</param>
        <param name="password">X.509 証明書データにアクセスするために必要なパスワード。</param>
        <param name="keyStorageFlags">証明書をインポートする場所と方法を制御する列挙値のビットごとの組み合わせ。</param>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 、パスワード、証明書ファイルから情報を持つオブジェクトと <see cref="T:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags" /> 値。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用する設定、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 、パスワード、証明書ファイルから情報を持つオブジェクトと <xref:System.Security.Cryptography.X509Certificates.X509KeyStorageFlags> 値。  
  
> [!IMPORTANT]
>  ソース コード内でパスワードをハードコーディング コードします。  パスワードをハードコーディングを使用してアセンブリから取得できる、 [MSIL Disassembler \(Ildasm.exe\)](http://msdn.microsoft.com/ja-jp/db27f6b2-f1ec-499e-be3a-7eecf95ca42b), 、16 進エディターを Notepad.exe などのテキスト エディターで、アセンブリを開くだけで、またはです。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="IssuerName">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X500DistinguishedName IssuerName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.IssuerName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X500DistinguishedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書の発行者の識別名を取得します。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 証明書の発行者の名前を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティには、証明書を発行した証明機関 \(CA\) の名前が含まれています。 証明書の名前を取得するには、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.GetNameInfo%2A> メソッドです。  
  
 証明書の識別名は、証明書のサブジェクトまたは発行者のテキスト表現です。 この表現は、名前の属性で構成されています \(たとえば、"CN \= MyName, OU \= MyOrgUnit、C \= u. s."\) です。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドラインの実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書のコンテキストが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NotAfter">
      <MemberSignature Language="C#" Value="public DateTime NotAfter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime NotAfter" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotAfter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その後、証明書が無効になった現地時刻で日付を取得します。</summary>
        <value>A <see cref="T:System.DateTime" /> 、証明書の有効期限日を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、証明書が無効になる日付を示します。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="NotBefore">
      <MemberSignature Language="C#" Value="public DateTime NotBefore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTime NotBefore" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.NotBefore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書が有効となるローカル時間で日付を取得します。</summary>
        <value>A <see cref="T:System.DateTime" /> 証明書の有効日を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、証明書が有効となる日付を示します。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="PrivateKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.AsymmetricAlgorithm PrivateKey { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.AsymmetricAlgorithm PrivateKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PrivateKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.AsymmetricAlgorithm</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 証明書に関連付けられている秘密キーを表すオブジェクト。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> RSA や DSA のいずれかの暗号化サービス プロバイダーであるオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれかを返すように、このプロパティが RSA や DSA キーのみをサポートする現在、 <xref:System.Security.Cryptography.RSACryptoServiceProvider> または <xref:System.Security.Cryptography.DSACryptoServiceProvider> オブジェクトです。 秘密キーがいないかどうか、証明書に関連付け、それを返します `null`します。  
  
> [!WARNING]
>  このプロパティを設定する場合 `null` または削除することがなく別のキーに秘密キー ファイルはディスクに残っています。  
  
 このプロパティに関連付けられている秘密キーを正しく削除するには、次のように設定します。 `PersistKeyInCsp` に `false`, 、まず、 <xref:System.Security.Cryptography.AsymmetricAlgorithm.Clear%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">キーの値は、RSA や DSA キーまたはキーを読み取ることができません。</exception>
        <exception cref="T:System.ArgumentNullException">このプロパティは設定されている値 <see langword="null" />です。</exception>
        <exception cref="T:System.NotSupportedException">この秘密キーのキーのアルゴリズムがサポートされていません。</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">X.509 キーが一致しません。</exception>
        <exception cref="T:System.ArgumentException">暗号化サービス プロバイダー キーが <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PublicKey">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.PublicKey PublicKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.PublicKey PublicKey" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.PublicKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> 証明書に関連付けられているオブジェクト。</summary>
        <value>
          <see cref="P:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返します、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> オブジェクト、オブジェクト識別子が含まれます \(<xref:System.Security.Cryptography.Oid>\) 公開キー アルゴリズム、ASN.1 エンコードされたパラメーター、および ASN.1 エンコードされたキーの値を表します。  
  
 キーとしてを取得することも、 <xref:System.Security.Cryptography.AsymmetricAlgorithm> オブジェクトを参照することで、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.PublicKey%2A> プロパティです。 このプロパティは、いずれかを返すよう、RSA や DSA キーのみをサポートしています、 <xref:System.Security.Cryptography.RSACryptoServiceProvider> または <xref:System.Security.Cryptography.DSACryptoServiceProvider> 公開キーを表すオブジェクト。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">キーの値は、RSA や DSA キーまたはキーを読み取ることができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RawData">
      <MemberSignature Language="C#" Value="public byte[] RawData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] RawData" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.RawData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書の生データを取得します。</summary>
        <value>バイト配列として証明書の生データ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>状態をリセットする <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、証明書の状態をリセットすることができます。 また、証明書に関連付けられているすべてのリソースを解放します。  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">for full trust for the immediate caller. This member cannot be used by partially trusted code.</permission>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">for full trust for inheritors. This member cannot be inherited by partially trusted code.</permission>
      </Docs>
    </Member>
    <Member MemberName="SerialNumber">
      <MemberSignature Language="C#" Value="public string SerialNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SerialNumber" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SerialNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書のシリアル番号を取得します。</summary>
        <value>証明書のシリアル番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 証明書のシリアル番号は、元の X.509 プロトコルの一部です。 シリアル番号とは、証明機関 \(CA\) とも呼ばれる証明書の発行者によって発行される一意の番号です。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SignatureAlgorithm">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.Oid SignatureAlgorithm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.Oid SignatureAlgorithm" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SignatureAlgorithm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.Oid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書の署名の作成に使用されるアルゴリズムを取得します。</summary>
        <value>オブジェクト識別子を返します \(<see cref="T:System.Security.Cryptography.Oid" />\) 署名アルゴリズムのです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オブジェクト識別子 \(<xref:System.Security.Cryptography.Oid>\) 証明書で使用される署名アルゴリズムの種類を識別します。  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SubjectName">
      <MemberSignature Language="C#" Value="public System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Cryptography.X509Certificates.X500DistinguishedName SubjectName" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.SubjectName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Cryptography.X509Certificates.X500DistinguishedName</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書からサブジェクトの識別名を取得します。</summary>
        <value>
          <see cref="T:System.Security.Cryptography.X509Certificates.X500DistinguishedName" /> 証明書のサブジェクトの名前を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サブジェクト識別名は、証明書のユーザーの名前です。 証明書の識別名は、件名のテキスト表現または証明書の発行者です。 この表現から成る名前属性などの"CN \= MyName, OU \= MyOrgUnit、C \= u. s."。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書のコンテキストが正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Thumbprint">
      <MemberSignature Language="C#" Value="public string Thumbprint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Thumbprint" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Thumbprint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書のサムプリントを取得します。</summary>
        <value>証明書のサムプリント。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 拇印は、SHA1 アルゴリズムを使用して動的に生成し、証明書に物理的に存在しません。 拇印が証明書の一意の値であるため、証明書ストア内の特定の証明書を検索するよく使用されます。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>X.509 証明書をテキスト形式で表示します。</summary>
        <returns>証明書の情報です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての場合と同様 `ToString` メソッド、出力があります、.NET Framework のバージョン間で一貫性のあるため、メソッドの結果は、コンテンツを解析してはなりません。 プロパティを使用して、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> コンテンツに関する正確な情報を取得するかを使用するオブジェクト、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString%2A> メソッドは、証明書に関する情報を取得します。  
  
 このメソッドは、テキスト形式で証明書を表示します。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString (bool verbose);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString(bool verbose) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.ToString(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verbose" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="verbose">
          <see langword="true" /> 公開キー、秘密キー、拡張機能、およびなどを表示するには <see langword="false" /> 次のような情報を表示する、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> 拇印、シリアル番号、サブジェクトと発行者の名前を含むクラスです。</param>
        <summary>X.509 証明書をテキスト形式で表示します。</summary>
        <returns>証明書の情報です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての場合と同様 `ToString` メソッド、出力があります、.NET Framework のバージョン間で一貫性のあるため、メソッドの結果は、コンテンツを解析してはなりません。 プロパティを使用して、 <xref:System.Security.Cryptography.X509Certificates.X509Certificate2> 正確な情報を取得するオブジェクト。  
  
 このメソッドは、テキスト形式で証明書を表示します。 場合、 `verbose` にパラメーターが設定されている `true`, 、テキストの表示には、公開キー、秘密キー、および拡張機能が含まれています。 場合 `verbose` に設定されている `false`, 、テキストの表示には、拇印、シリアル番号、件名、発行者名、および有効期限情報を含む X.509 証明書から使用できるフィールドが含まれています。  
  
   
  
## 例  
 次のコード例では、コマンドライン実行可能ファイルを証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力を作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Verify">
      <MemberSignature Language="C#" Value="public bool Verify ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Verify() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.Cryptography.X509Certificates.X509Certificate2.Verify" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("by default this depends on the incomplete X509Chain")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基本的な検証ポリシーを使用して X.509 チェーンの検証を実行します。</summary>
        <returns>
          <see langword="true" /> 検証が成功した場合 <see langword="false" /> 検証に失敗した場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、証明書の単純なチェーンを作成し、そのチェーンに基本のポリシーを適用します。 使用して直接証明書の検証の詳細については、障害を必要がある場合、 <xref:System.Security.Cryptography.X509Certificates.X509Chain> オブジェクトです。  
  
 使用して、チェーン エンジンの既定をオーバーライドできることに注意してください、 <xref:System.Security.Cryptography.CryptoConfig> クラスです。 Microsoft Windows Server 2003 で既定のエンジンは RFC3280、仕様に準拠している"[Certificate and Certificate Revocation List \(CRL\) Profile](http://go.microsoft.com/fwlink/?LinkId=45286)."  
  
   
  
## 例  
 次のコード例では、現在のユーザー証明書ストアを開いて、アクティブな証明書のみを選択し、1 つまたは複数の証明書を選択することができます。 この例は、証明書情報をコンソールに書き込みます。  
  
 [!code-cpp[CertSelect\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertSelect/CPP/certselect.cpp#1)]
 [!code-csharp[CertSelect\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertSelect/CS/certselect.cs#1)]
 [!code-vb[CertSelect\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertSelect/VB/certselect.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public int Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Version" />
      <MemberSignature Language="DocId" Value="P:System.Security.Cryptography.X509Certificates.X509Certificate2.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>証明書の X.509 形式のバージョンを取得します。</summary>
        <value>証明書の形式です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 X.509 証明書のいくつかのバージョンがあります。 このプロパティでは、証明書で使用される形式を示します。 たとえば、バージョン 3 証明書の「3」が返されます。  
  
   
  
## 例  
 次のコード例では、証明書ファイルを引数として受け取り、さまざまな証明書のプロパティをコンソールに出力するコマンドライン実行可能ファイルを作成します。  
  
 [!code-cpp[CertInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CertInfo/CPP/certinfo.cpp#1)]
 [!code-csharp[CertInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CertInfo/CS/certinfo.cs#1)]
 [!code-vb[CertInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CertInfo/VB/certinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">証明書は、読み取りができません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToString">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>X.509 証明書をテキスト形式で表示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Import">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>設定、 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> オブジェクトに、証明書情報を提供します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCertContentType">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイト配列またはファイルに含まれる証明書の種類を示します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.Cryptography.X509Certificates</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>