<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Negotiate セキュリティ プロトコルを使用して、クライアントと、必要に応じてクライアント サーバー間の通信で、サーバーを認証するストリームを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Net.Security.NegotiateStream> クラスに対して認証し、情報をセキュリティで保護されたが、クライアントとサーバーの間で送信します。 使用して <xref:System.Net.Security.NegotiateStream>, 、次を行うことができます。  
  
-   権限の借用または委任のクライアントの資格情報をサーバーに送信します。  
  
-   サーバー認証を要求します。  
  
-   暗号化するか、データを転送する前に署名します。  
  
 認証は、情報を送信する前に実行する必要があります。 クライアントが、同期を使用して認証を要求 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドで、認証が完了するまでブロック、または非同期 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> メソッドで、認証が完了するを待機中にブロックしません。 サーバーは、同期を使用して認証を要求 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または非同期 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。 クライアント、および必要に応じて、サーバーは、Negotiate セキュリティ プロトコルを使用して認証されます。 Windows 95\/98 システムでは、Windows NT LAN Manager \(NTLM\) は、認証に使用されるプロトコルです。 その他のプラットフォーム、Kerberos プロトコルが認証の使用クライアントとサーバーの両方をサポートしている場合それ以外の場合、NTLM が使用されます。 これらのプロトコルの詳しい説明については、MSDN で msdn.microsoft.com\/library\/ でプラットフォーム SDK のドキュメントを参照します。<xref:System.Net.Security.NegotiateStream> クラスは、セキュリティ サポート プロバイダー インターフェイス \(SSPI\) を使用して認証を実行します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスを使って、 <xref:System.Net.Security.NegotiateStream> 転送中に、データを保護するためです。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。 リモート クライアントまたはサーバーを使用して情報を取得できます、 <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> プロパティです。  
  
 認証が失敗した場合はきます、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 同期を使用してデータを送信する <xref:System.Net.Security.NegotiateStream.Write%2A> または非同期 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> メソッドです。 同期を使用してデータを受信する <xref:System.Net.Security.NegotiateStream.Read%2A> または非同期 <xref:System.Net.Security.NegotiateStream.BeginRead%2A> メソッドです。 これらはによるデータへ自動的に適用されるセキュリティ サービスなど、暗号化や署名が有効になっている場合、 <xref:System.Net.Security.NegotiateStream>です。  
  
 <xref:System.Net.Security.NegotiateStream> を作成するときに指定したストリームを使用してデータを伝送、 <xref:System.Net.Security.NegotiateStream>です。 指定するオプションがあるこの基になるストリームを指定するときに終了するかどうか、 <xref:System.Net.Security.NegotiateStream> も基になるストリームを閉じます。  
  
   
  
## 例  
 次のコード例を使用するクライアント\/サーバー接続のクライアント側を示しています、 <xref:System.Net.Security.NegotiateStream>です。 クライアントは、認証し、サーバーにメッセージを非同期的に送信します。  
  
 [!code-cpp[NclNegoAsyncClient\#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient\#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 次のコード例を使用するクライアント\/サーバー接続のサーバー側を示しています、 <xref:System.Net.Security.NegotiateStream> をクライアントを認証し、クライアントによって送信されたメッセージを読み取る。  
  
 [!code-cpp[NclNegoAsyncServer\#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer\#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 防ぐために、 <xref:System.Net.Security.NegotiateStream> が指定したストリームを終了するを使用して、 <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> コンス トラクターです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream">A <see cref="T:System.IO.Stream" /> によって使用されるオブジェクト、 <see cref="T:System.Net.Security.NegotiateStream" /> データを送受信するためです。</param>
        <summary>
          <see cref="T:System.Net.Security.NegotiateStream" /> を指定して <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例では、このコンス トラクターを呼び出す方法を示します。  
  
 [!code-cpp[NclNegoSyncClient\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream">A <see cref="T:System.IO.Stream" /> によって使用されるオブジェクト、 <see cref="T:System.Net.Security.NegotiateStream" /> データを送受信するためです。</param>
        <param name="leaveInnerStreamOpen">
          <see langword="true" /> 閉じるこのことを示すために <see cref="T:System.Net.Security.NegotiateStream" /> 影響を与えません <c>innerstream</c>; <see langword="false" /> 閉じるこのことを示すために <see cref="T:System.Net.Security.NegotiateStream" /> も閉じます <c>innerStream</c>します。 詳細については、「解説」を参照してください。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Net.Security.NegotiateStream" /> クラスの指定して <see cref="T:System.IO.Stream" /> およびクロージャの動作をストリーミングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定すると `true` の `leaveStreamOpen` パラメーター、閉じる、 <xref:System.Net.Security.NegotiateStream> 影響を与えません、 `innerStream` ストリーム明示的に閉じる必要があります `innerStream` が不要になったとき。  
  
   
  
## 例  
 次のコード例では、このコンス トラクターを呼び出す方法を示します。 このコード例が示されている例の一部は、 <xref:System.Net.Security.NegotiateStream> クラスです。  
  
 [!code-cpp[NclNegoAsyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="innerStream" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="innerStream" /> と <see cref="F:System.IO.Stream.Null" /> が等価です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定したクライアントの資格情報を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定したクライアントの資格情報とチャネル バインドを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> でこのメソッドに渡される拡張保護の使用、 `binding` からアプリケーションがパラメーターを取得する <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティに関連付けられた <xref:System.Net.Security.SslStream>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報と認証オプションを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 有効な値はありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> が null です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報、認証オプションとチャネル バインドを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> でこのメソッドに渡される拡張保護の使用、 `binding` からアプリケーションがパラメーターを取得する <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティに関連付けられた <xref:System.Net.Security.SslStream>します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 有効な値はありません。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定したクライアントの資格情報を使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定したクライアントの資格情報とチャネル バインドを使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, 、相互認証が必要とします。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> でこのメソッドに渡される拡張保護の使用、 `binding` からアプリケーションがパラメーターを取得する <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティに関連付けられた <xref:System.Net.Security.SslStream>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報と認証オプションを使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 有効な値はありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> が null です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報、認証オプションとチャネル バインドを使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> でこのメソッドに渡される拡張保護の使用、 `binding` からアプリケーションがパラメーターを取得する <xref:System.Net.Security.SslStream.TransportContext%2A> プロパティに関連付けられた <xref:System.Net.Security.SslStream>します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="targetName" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="allowedImpersonationLevel" /> 有効な値はありません。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントとサーバーの接続の認証のサーバー側を処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッドは、認証中にブロックします。 アプリケーションの認証が完了するを待機中にブロックを防ぐためを使用して、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバー、クライアントの認証を必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティのレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <summary>サーバー、クライアントの認証を必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定した拡張保護ポリシーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティのレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> 、サーバーの id を確立するために使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>サーバー、クライアントの認証を必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential " /> <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、r の認証を行うことができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>サーバー、クライアントの認証を必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報、認証オプションを使用し、拡張保護ポリシー。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 このメソッドは、操作が完了するまでブロックします。 操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential " /> <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、r の認証を行うことができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>サーバー、クライアントの認証を必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーによって呼び出されます。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティのレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <summary>サーバー、クライアントの認証を必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定した拡張保護ポリシーを使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティのレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> 、サーバーの id を確立するために使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>サーバー、クライアントの認証を必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential " /> <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、r の認証を行うことができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <summary>サーバー、クライアントの認証を必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報、認証オプションを使用し、拡張保護ポリシー。</summary>
        <returns>
          <see cref="T:System.Threading.Tasks.Task" /> を返します。  
  
 非同期操作を表すタスク オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential " /> <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、r の認証を行うことができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントとサーバーの接続のクライアント側を認証する非同期操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードでは、認証中にはブロックしません。 認証が完了するを待機中にブロックは、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証する非同期操作を開始するクライアントによって呼び出されます。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、クライアントの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティのレベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。<xref:System.Net.Security.NegotiateStream> クラスは相互認証に使用される SPN を構築します。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
   
  
## 例  
 次のコード例では、クライアントの非同期の認証を開始するには、このメソッドを呼び出す方法を示します。  
  
 [!code-cpp[NclNegoAsyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証する非同期操作を開始するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報を使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証する非同期操作を開始するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報とチャネル バインドを使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証する非同期操作を開始するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報と認証オプションを使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="binding">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> 拡張保護に使用されます。</param>
        <param name="targetName">サービス プリンシパル名 \(SPN\) を認証するサーバーを一意に識別します。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="allowedImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証する非同期操作を開始するクライアントによって呼び出されます。 認証プロセスでは、指定された資格情報、認証オプションとチャネル バインドを使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="targetName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、サーバーと認証を行う目的以前使用されていました。 ストリームを使用して、クライアントと認証を再試行することはできません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントとサーバーの接続を認証するためのサーバー側の処理を非同期操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドのオーバー ロードでは、認証中にはブロックしません。 認証が完了するを待機中にブロックを使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアントを認証する非同期操作を開始するサーバーおよび必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアントを認証する非同期操作を開始するサーバーおよび必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定した拡張保護ポリシーを使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認証に使用して、サーバーの <xref:System.Net.CredentialCache.DefaultCredentials%2A>です。 サーバーのサービス プリンシパル名 \(SPN\) が指定されていません。 偽装レベルが <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, 、セキュリティ レベルは <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。  
  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアントを認証する非同期操作を開始するサーバーおよび必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">to use the explicit <see cref="T:System.Net.NetworkCredential" />. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential">
          <see cref="T:System.Net.NetworkCredential" /> クライアントの id を確立するために使用されます。</param>
        <param name="policy">
          <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> 拡張保護に使用されます。</param>
        <param name="requiredProtectionLevel">いずれか、 <see cref="T:System.Net.Security.ProtectionLevel" /> したストリーム用のセキュリティ サービスを示す値。</param>
        <param name="requiredImpersonationLevel">いずれか、 <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 、サーバーがクライアントの資格情報を使用して、リソースにアクセスする方法を示す値。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 、認証の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>クライアントを認証する非同期操作を開始するサーバーおよび必要に応じてクライアントとサーバーの接続で、サーバーによって呼び出されます。 認証プロセスでは、指定したサーバーの資格情報、認証オプションを使用し、拡張保護ポリシー。 このメソッドはブロックされません。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `requiredProtectionLevel` 認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーターです。 たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、 <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> 値。 成功した認証とは限りませんが、要求された <xref:System.Net.Security.ProtectionLevel> が与えられています。 確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。  
  
 場合、 `policy` パラメーターは `null`, 、拡張保護ポリシーを使用している <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> に設定 <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするのいずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドのオーバー ロードします。  
  
 呼び出して、非同期認証操作を完了する必要があります、 <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> に渡された拡張保護ポリシーで、 <paramref name="policy" /> パラメーターは、どちらも <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="credential" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="requiredImpersonationLevel" /> 必要があります <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, 、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, 、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,、</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">認証が既に発生しました。  
  
 または  
  
 このストリームは、以前、クライアントと認証を行う目的で使用されていました。 ストリームを使用して、サーバーと認証を再試行することはできません。</exception>
        <exception cref="T:System.NotSupportedException">Windows 95 および Windows 98 がサポートされていません。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.PlatformNotSupportedException">
          <paramref name="policy" /> にパラメーターが設定された <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> 拡張保護をサポートしていないプラットフォームにします。</exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> ストリームから読み取ったバイトを受け取る配列。</param>
        <param name="offset">0 から始まる場所 <c>buffer</c> 開始位置を示す現在のストリームから読み取ったデータの格納します。</param>
        <param name="count">ストリームから読み取られるバイトの最大数。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 読み取り操作の完了時に呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">読み取り操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>ストリームからデータを読み取り、指定した配列に格納する非同期の読み取り操作を開始します。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 暗号化、署名、または暗号化および署名が有効になっている場合、読み取り操作は基になるストリームからデータを読み取ります、データの整合性をチェックし、復号化します。 使用中では、データの暗号化や署名など、セキュリティはサービスなし、されていない場合、このメソッドは、基になるストリームに非同期の読み取り操作を開始します。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするを使用して、 [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.Read%2A> メソッドです。  
  
 非同期の読み取り操作を呼び出すことによって完了する必要があります、 [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.EndRead%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream> クラスが複数の同時読み取り操作をサポートしていません。 他の操作は、同じストリームで既に実行中の読み取り中には、読み取り操作を開始しようとする場合、 [BeginRead メソッド \(Byte\<xref:System.NotSupportedException> 例外がスローされます。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、[BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、[BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、非同期読み取り操作の開始を示します。 このコード例が示されている例の一部は、 [BeginRead メソッド \(Byte\<xref:System.Net.Security.NegotiateStream> クラスです。  
  
 [!code-cpp[NclNegoAsyncServer\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset" /> 長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="offset" /> plus <paramref name="count" /> の長さより大きい <paramref name="buffer" />します。</exception>
        <exception cref="T:System.IO.IOException">読み取り操作が失敗しました。  
  
 または  
  
 暗号化を使用しているが、データの暗号化を解除できませんでした。</exception>
        <exception cref="T:System.NotSupportedException">進行中の読み取り操作が既に存在します。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> をストリームに書き込まれるバイト数を提供します。</param>
        <param name="offset">0 から始まる場所 <c>buffer</c> ストリームに書き込むバイトの読み取りを開始する位置を示す。</param>
        <param name="count">
          <see cref="T:System.Int32" /> から読み取るバイト数を指定する値 <c>buffer</c>です。</param>
        <param name="asyncCallback">
          <see cref="T:System.AsyncCallback" /> 書き込み操作が完了したときに呼び出すメソッドを参照するデリゲート。</param>
        <param name="asyncState">書き込み操作に関する情報を含むユーザー定義オブジェクト。 このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</param>
        <summary>書き込みの非同期書き込み操作を開始 <see cref="T:System.Byte" />s は指定したバッファーからストリームします。</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> 非同期操作の状態を示すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 暗号化、署名、または暗号化および署名が有効になっている場合このメソッドはバッファーからデータを読み取り、記号 \($\) を暗号化します。 または暗号化し署名、して転送基になるストリームを使用しています。 使用中では、データの暗号化や署名など、セキュリティはサービスなし、されていない場合、このメソッドは、基になるストリームに非同期の書き込み操作を開始します。  
  
 このメソッドは非同期であり、操作の完了もブロックしません。 操作が完了するまでにブロックするを使用して、 [BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.Read%2A> メソッドです。  
  
 非同期の読み取り操作を呼び出すことによって完了する必要があります、 [BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.EndWrite%2A> メソッドです。 通常、このメソッドはによって、 `asyncCallback` を委任します。 非同期プログラミング モデルの使用に関する詳細については、次を参照してください。 [Asynchronous Programming Overview](http://msdn.microsoft.com/ja-jp/41972034-92ed-450a-9664-ab93fcc6f1fb)  
  
 [BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream> クラスが複数の同時書き込み操作をサポートしていません。 別の書き込み操作は同一のストリームで既に実行中に、書き込み操作を開始しようとする場合、 [BeginWrite メソッド \(Byte\<xref:System.NotSupportedException> 例外がスローされます。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 [BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、[BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、[BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または [BeginWrite メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、非同期の書き込み操作の開始を示します。  
  
 [!code-cpp[NclNegoAsyncClient\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 操作が完了したら、次のメソッドが呼び出されます。  
  
 [!code-cpp[NclNegoAsyncClient\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 または  
  
 <paramref name="offset" /> 長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="offset" /> カウントがの長さより大きいと <paramref name="buffer" />です。</exception>
        <exception cref="T:System.IO.IOException">書き込み操作に失敗しました。  
  
 または  
  
 暗号化を使用しているが、データを暗号化できませんでした。</exception>
        <exception cref="T:System.NotSupportedException">実行中の書き込み操作が既に存在します。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> を基になるストリームが読み取り可能かどうかを示す値。</summary>
        <value>
          <see langword="true" /> 認証が行われ、基になるストリームが読み取り可能な場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって返される値を返します成功した認証が発生した場合、 <xref:System.IO.Stream.CanRead%2A> プロパティを基になるストリーム。 インスタンスを作成するときに、基になるストリームが指定された、 <xref:System.Net.Security.NegotiateStream> クラスです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> を基になるストリームがシーク可能かどうかを示す値。</summary>
        <value>このプロパティは常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 位置を設定しないで、 <xref:System.Net.Security.NegotiateStream> オブジェクトまたはその基になるストリーム。 インスタンスを作成するときに、基になるストリームが指定された、 <xref:System.Net.Security.NegotiateStream> クラスです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> を基になるストリームがタイムアウトをサポートしているかどうかを示す値。</summary>
        <value>
          <see langword="true" /> 基になるストリームがタイムアウトをサポートしている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、呼び出しによって返される値を返します、 <xref:System.IO.Stream.CanTimeout%2A> プロパティを基になるストリーム。 インスタンスを作成するときに、基になるストリームが指定された、 <xref:System.Net.Security.NegotiateStream> クラスです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> を基になるストリームが書き込み可能かどうかを示す値。</summary>
        <value>
          <see langword="true" /> 認証が行われ、基になるストリームが書き込み可能な場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しによって返される値を返します成功した認証が発生した場合、 <xref:System.IO.Stream.CanWrite%2A> プロパティを基になるストリーム。 インスタンスを作成するときに、基になるストリームが指定された、 <xref:System.Net.Security.NegotiateStream> クラスです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Net.Security.NegotiateStream" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public **languageKeyword tag is not supported!!!!**  
**legacyBold tag is not supported!!!!**  
method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返されるインスタンス <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />します。</param>
        <summary>呼び出しで開始された保留中の非同期クライアント認証操作を終了 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作が完了していない場合、このメソッドは、これはまでブロックします。 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 この操作を同期的に実行するには、いずれかの操作を使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 呼び出しによって作成されていない <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />します。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">保留中のクライアント認証が完了することはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返されるインスタンス <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />します。</param>
        <summary>呼び出しで開始された保留中の非同期クライアント認証操作を終了 <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作が完了していない場合、このメソッドは、これはまでブロックします。  
  
 認証が成功した場合、確認する必要があります、 <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> と <xref:System.Net.Security.NegotiateStream.IsSigned%2A> プロパティを確認してどのようなセキュリティ サービスで使用される、 <xref:System.Net.Security.NegotiateStream>です。 チェック、 <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> プロパティを相互認証が発生したかどうかを確認します。  
  
 受信した認証が失敗した場合、 <xref:System.Security.Authentication.AuthenticationException> または <xref:System.Security.Authentication.InvalidCredentialException>です。 この場合、別の資格情報を使用して認証を再試行できます。  
  
 この操作を同期的に実行するを使用して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> 呼び出しによって作成されていない <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />します。</exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException">認証に失敗しました。 このオブジェクトを使用して、認証を再試行することができます。</exception>
        <exception cref="T:System.InvalidOperationException">保留中の認証が完了することはありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返されるインスタンス <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>終了、非同期の読み取り操作の呼び出しで開始された <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />します。</summary>
        <returns>A <see cref="T:System.Int32" /> 基になるストリームから読み取ったバイト数を指定する値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作が完了していない場合、このメソッドは、これはまでブロックします。  
  
 この操作を同期的に実行するを使用して、 <xref:System.Net.Security.NegotiateStream.Read%2A> メソッドです。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、読み取り操作の非同期の終了を示します。 例については、操作の開始を示す、次を参照してください。 <xref:System.Net.Security.NegotiateStream.BeginRead%2A>します。  
  
 [!code-cpp[NclNegoAsyncServer\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">AsyncResult がへの呼び出しによって作成されていない <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />します。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
        <exception cref="T:System.IO.IOException">読み取り操作が失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> への呼び出しによって返されるインスタンス <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></param>
        <summary>呼び出しで開始された非同期書き込み操作を終了 <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 操作が完了していない場合、このメソッドは、これはまでブロックします。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
 この操作を同期的に実行するを使用して、 <xref:System.Net.Security.NegotiateStream.Write%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、非同期の書き込み操作を完了するために呼び出されるメソッドを示します。 例については、操作の開始を示す、次を参照してください。 <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>します。  
  
 [!code-cpp[NclNegoAsyncClient\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">AsyncResult がへの呼び出しによって作成されていない <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />します。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
        <exception cref="T:System.IO.IOException">書き込み操作に失敗しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>基になるデバイスに書き込まれるバッファー内のデータが発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.IO.Stream.Flush%2A> 基になるストリーム。  
  
   
  
## 例  
 次のコード例では、ストリームのフラッシュを示しています。  
  
 [!code-cpp[NclNegoSyncClient\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>サーバーがクライアントの資格情報を使用する方法を示す値を取得します。</summary>
        <value>
          <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正常に、このメソッドを呼び出す前に認証する必要があります。 クライアントは、のいずれかを呼び出すことによって認証を要求するときに、偽装レベルを指定、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> メソッドです。 指定せずに認証する場合、 <xref:System.Security.Principal.TokenImpersonationLevel> , 、<xref:System.Security.Principal.TokenImpersonationLevel.Identification> を使用します。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認証が失敗したかが発生していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> 認証が成功したかどうかを示す値。</summary>
        <value>
          <see langword="true" /> 成功した認証が行われた場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアントの認証を呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> メソッドです。 サーバーに認証を呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> を示す値かどうかこの <see cref="T:System.Net.Security.NegotiateStream" /> データの暗号化を使用します。</summary>
        <value>
          <see langword="true" /> データは、ネットワーク経由で送信される前に暗号化および復号化する場合に達したとき、リモート エンドポイントです。それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 暗号化したデータのプライバシーの保護を利用します。つまり、いるデータは、転送中に、サード パーティによって解読できないことを確認すると役立ちます。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> サーバーとクライアントの両方が認証済みかどうかを示す値。</summary>
        <value>
          <see langword="true" /> サーバーが認証されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 相互認証は、クライアント、サーバー認証用の資格情報を提供する必要が生じると、クライアントによって指定されます。 既定では、クライアントは、相互認証を要求します。  
  
 ネゴシエーション プロトコルは、クライアントとサーバーでサポートされるセキュリティ プロトコルによって、NTLM または Kerberos のいずれかを選択します。 NTLM は、相互認証をサポートしていません。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> このローカル側の接続を使用するかどうかを示す値 <see cref="T:System.Net.Security.NegotiateStream" /> サーバーとして認証されました。</summary>
        <value>
          <see langword="true" /> ローカル エンドポイントが正常に認証された接続のサーバー側として認証されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが返す認証に失敗しました、または発生しなかった、 `false`です。  
  
 呼び出すと、サーバーを認証するため、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> または <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Boolean" /> をこのストリームを使用して送信されるデータが署名されているかどうかを示す値。</summary>
        <value>
          <see langword="true" /> 送信する前に、データが署名されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 そのようなデータの整合性を保護するためのデータの署名具体的には、受信者が、データが転送中に改ざんされているかどうかを判断するに役立ちます。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>基になるストリームの長さを取得します。</summary>
        <value>A <see cref="T:System.Int64" /> 基になるストリームの長さを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、呼び出しによって返される値を返します、 <xref:System.IO.Stream.Length%2A> プロパティを基になるストリーム。 基になるストリームがシーク可能でない場合、このプロパティは例外をスロー通常です。 基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティの値を取得する場合はサポートされません、基になるストリームが、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または基になるストリームの現在の位置を設定します。</summary>
        <value>A <see cref="T:System.Int64" /> 基になるストリームの現在の位置を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、呼び出しによって返される値を返します、 <xref:System.IO.Stream.Position%2A> プロパティを基になるストリーム。 基になるストリームがシーク可能でない場合、このプロパティは例外をスロー通常です。 基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">このプロパティを設定することはできません。  
  
 または  
  
 このプロパティの値を取得する場合はサポートされません、基になるストリームが、 <see cref="T:System.Net.Sockets.NetworkStream" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> ストリームから読み取ったバイトを受け取る配列。</param>
        <param name="offset">A <see cref="T:System.Int32" /> で 0 から始まる位置を含む <c>buffer</c> 開始位置を示す現在のストリームから読み取ったデータの格納します。</param>
        <param name="count">A <see cref="T:System.Int32" /> ストリームから読み取られるバイトの最大数を格納しています。</param>
        <summary>現在のストリームからデータを読み取り、指定した配列に格納します。</summary>
        <returns>A <see cref="T:System.Int32" /> 基になるストリームから読み取ったバイト数を指定する値。 読み取られるデータがある場合は、0 を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはの最大数を読み取ります `count` 現在からのバイト ストリームし、に保存 `buffer` で始まる `offset`します。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 [Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、[Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、[Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または [Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
 この操作を非同期的に実行するを使用して、 [Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginRead%2A> メソッドです。  
  
   
  
## 例  
 次のコード例に示しますからの読み取り、 [Read メソッド \(Byte\<xref:System.Net.Security.NegotiateStream>です。  
  
 [!code-cpp[NclNegoSyncServer\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">読み取り操作が失敗しました。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
        <exception cref="T:System.NotSupportedException">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作が既に進行中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または読み取り操作がブロックのデータ待機時間を設定します。</summary>
        <value>A <see cref="T:System.Int32" /> される読み取り操作が失敗するまでの経過時間の大きさを指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、呼び出しによって返される値を返します、 <xref:System.IO.Stream.ReadTimeout%2A> プロパティを基になるストリーム。 このプロパティを設定すると、 <xref:System.IO.Stream.ReadTimeout%2A> 基になるストリームの値は、指定した値に設定します。  
  
 基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>, 、<xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> はミリ秒単位でありに設定されている <xref:System.Threading.Timeout.Infinite> 既定の操作はタイムアウトしない読み取れるようにします。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この認証ストリームの共有相手の身元に関する情報を取得します。</summary>
        <value>
          <see cref="T:System.Security.Principal.IIdentity" /> リモート エンドポイントの id を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセスする場合、クライアントによって、このプロパティを返します、 <xref:System.Security.Principal.GenericIdentity> サーバーと使用される認証プロトコルのサービス プリンシパル名 \(SPN\) を格納しています。 アクセスする場合、サーバーによって、このプロパティを返します、 <xref:System.Security.Principal.WindowsIdentity> クライアントを記述します。 場合、 <xref:System.Security.Principal.WindowsIdentity> が利用できない、クライアントの情報が返されます内のサーバーに、 <xref:System.Security.Principal.GenericIdentity>です。  
  
   
  
## 例  
 次のコード例では、このプロパティの値を表示するを示します。  
  
 [!code-cpp[NclNegoAsyncServer\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認証が失敗したかが発生していません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">この値は無視されます。</param>
        <param name="origin">この値は無視されます。</param>
        <summary>スロー <see cref="T:System.NotSupportedException" />します。</summary>
        <returns>常に <see cref="T:System.NotSupportedException" /> をスローします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出す必要はありません。 関数は、継承されますでサポートされていない <xref:System.Net.Security.NegotiateStream>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">シークはサポートされていません <see cref="T:System.Net.Security.NegotiateStream" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Int64" /> ストリームの長さを指定する値。</param>
        <summary>基になるストリームの長さを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">A <see cref="T:System.Byte" /> をストリームに書き込まれたバイトを提供します。</param>
        <param name="offset">
          <see cref="T:System.Int32" /> で 0 から始まる位置を含む <c>buffer</c> ストリームに書き込むバイトの読み取りを開始する位置を示す。</param>
        <param name="count">A <see cref="T:System.Int32" /> から読み取るバイト数を含んでいる <c>buffer</c>します。</param>
        <summary>指定した数を書き込む <see cref="T:System.Byte" />指定されたバッファー、オフセットを使用して、基になるストリームにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 暗号化、署名、または暗号化および署名が有効になっている場合このメソッドはバッファーからデータを読み取り、記号 \($\) を暗号化します。 または暗号化し署名、して転送基になるストリームを使用しています。 セキュリティに使用するには、データの暗号化や署名などサービスなしの場合このメソッドを呼び出して [Write メソッド \(Byte\<xref:System.IO.Stream.Write%2A> 基になるストリーム。  
  
 このメソッドは、書き込み操作が完了するまでブロックします。 操作が完了するまでをブロックしないようにを使用して、 [Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.Write%2A> メソッドです。  
  
 正常に認証が完了するまでは、このメソッドを呼び出すことはできません。 認証するための 1 つを呼び出し、 [Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, 、[Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, 、[Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, 、または [Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> メソッドです。  
  
 [Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream> クラスが複数の同時書き込み操作をサポートしていません。 別の書き込み操作は同一のストリームで既に実行中に、書き込み操作を開始しようとする場合、 [Write メソッド \(Byte\<xref:System.NotSupportedException> 例外がスローされます。  
  
   
  
## 例  
 次のコード例に示しますへの書き込み、 [Write メソッド \(Byte\<xref:System.Net.Security.NegotiateStream>です。  
  
 [!code-cpp[NclNegoSyncClient\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset is less than 0" />。  
  
 または  
  
 <paramref name="offset" /> 長さより大きい <paramref name="buffer" />します。  
  
 または  
  
 <paramref name="offset" /> カウントがの長さより大きいと <paramref name="buffer" />です。</exception>
        <exception cref="T:System.IO.IOException">書き込み操作に失敗しました。  
  
 または  
  
 暗号化を使用しているが、データを暗号化できませんでした。</exception>
        <exception cref="T:System.NotSupportedException">実行中の書き込み操作が既に存在します。</exception>
        <exception cref="T:System.ObjectDisposedException">このオブジェクトが閉じられています。</exception>
        <exception cref="T:System.InvalidOperationException">認証が行われていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または書き込み操作がブロックのデータ待機時間を設定します。</summary>
        <value>A<see cref="T:System.Int32" />書き込み操作が失敗するまでの経過時間を指定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.WriteTimeout%2A>プロパティを基になるストリーム。 指定された値の設定、集合演算、<xref:System.IO.Stream.WriteTimeout%2A>基になるストリームの値。  
  
 基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、 <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> \(ミリ秒単位\) に設定されている<xref:System.Threading.Timeout.Infinite>既定では書き込み操作はタイムアウトしないようにします。  
  
   
  
## 例  
 次のコード例では、このプロパティの値の表示を示しています。  
  
 [!code-cpp[NclNegoSyncClient\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>サーバー側の非同期操作としてクライアントとサーバーの接続の認証を処理します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント、および必要に応じて非同期操作としてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント、および必要に応じてクライアントとサーバーの接続で、サーバーを認証するクライアントによって呼び出されます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>