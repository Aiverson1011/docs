<Type Name="XmlWriter" FullName="System.Xml.XmlWriter">
  <TypeSignature Language="C#" Value="public abstract class XmlWriter : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlWriter extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>XML データが格納されたストリームまたはファイルを、高速かつ非キャッシュで前方のみに生成する方法を提供するライターを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlWriter> クラス、XML データをストリーム、ファイル、テキスト リーダー、または文字列に書き込みます。 W3C がサポートしている [Extensible Markup Language \(XML\) 1.0 \(fourth edition\)](http://www.w3.org/TR/2006/REC-xml-20060816/) と [Namespaces in XML 1.0 \(third edition\)](http://www.w3.org/TR/REC-xml-names/) の推奨事項です。  
  
 メンバー、 <xref:System.Xml.XmlWriter> クラスを使用するとします。  
  
-   文字が有効な XML 文字かどうか、要素名と属性名が有効な XML 名かどうかを確認します。  
  
-   XML ドキュメントが整形式かどうかを確認します。  
  
-   バイナリ バイトを Base64 または BinHex としてエンコードし、結果として得られるテキストを記述します。  
  
-   値の変換を手動で実行することを避けるため、文字列の代わりに共通言語ランタイム型を使用して値を渡します。  
  
-   複数のドキュメントを 1 つの出力ストリームに書き込みます。  
  
-   有効な名前、修飾された名前、および名前トークンを書き込みます。  
  
 このセクションの内容:  
  
 [XML ライターを作成します。](#create)   
 [出力形式を指定します。](#output)   
 [データの一致](#conformance)   
 [要素の書き込み](#writing_elements)   
 [属性の記述](#writing_attributes)   
 [名前空間の処理](#handling_ns)   
 [型指定されたデータの書き込み](#writing_types)   
 [XML ライターを閉じる](#close)   
 [非同期プログラミング](#async)   
 [セキュリティの考慮事項](#security)  
  
<a name="create"></a>   
## XML ライターを作成します。  
 作成する、 <xref:System.Xml.XmlWriter> インスタンスを使用して、 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> メソッドです。 XML ライターを有効に機能のセットを指定するには、渡す、 <xref:System.Xml.XmlWriterSettings> に、 <xref:System.Xml.XmlWriter.Create%2A> メソッドです。 それ以外の場合、既定の設定が使用されます。 参照してください、 <xref:System.Xml.XmlWriter.Create%2A> 詳細ページを参照します。  
  
<a name="output"></a>   
## 出力形式を指定します。  
 <xref:System.Xml.XmlWriterSettings> クラスには、制御するいくつかのプロパティが含まれています。 どのように <xref:System.Xml.XmlWriter> 出力の書式設定します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|使用するテキスト エンコーディングを指定します。 既定値は、`Encoding.UTF8` です。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|要素をインデントするかどうかを示します。 既定値は `false` \(インデントなし\)。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|インデントに使用する文字列を指定します。 既定値は 2 つのスペースです。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|改行に使用する文字列を指定します。 既定値は `\r\n` \(キャリッジ リターン、ライン フィード\) です。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|改行文字を処理する方法を指定します。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|新しい行に属性を書き込むかどうかを示します。 このプロパティを使用するときは、<xref:System.Xml.XmlWriterSettings.Indent%2A> を `true` に設定する必要があります。 既定値は、`false` です。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 宣言を書き込むかどうかを示します。 既定値は、`false` です。|  
  
 <xref:System.Xml.XmlWriterSettings.Indent%2A> および <xref:System.Xml.XmlWriterSettings.IndentChars%2A> プロパティによって、意味のない空白の書式設定方法が制御されます。 たとえば、要素ノードにインデントを設定します。  
  
 [!code-csharp[XmlWriter\_v2\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#8)]
 [!code-vb[XmlWriter\_v2\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#8)]  
  
 使用して、 <xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A> 1 レベル深くインデントされた新しい行の各属性に書き込めません。  
  
 [!code-csharp[XmlWriter\_v2\#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#9)]
 [!code-vb[XmlWriter\_v2\#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#9)]  
  
<a name="conformance"></a>   
## データの一致  
 XML ライターから 2 つのプロパティを使用して、 <xref:System.Xml.XmlWriterSettings> クラスのデータの一致を確認します。  
  
-   <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> プロパティの文字をチェックし、スローする XML ライターに指示、 <xref:System.Xml.XmlException> 、W3C で定義されていると、任意の文字が有効な範囲を超える場合に例外です。  
  
-   <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> プロパティに書き込まれるストリームが整形式 XML 1.0 ドキュメントまたはドキュメント フラグメントの規則に準拠していることを確認して、W3C で定義されている XML ライターを構成します。 次の 3 つの準拠レベルは次の表で説明します。 既定値は、<xref:System.Xml.ConformanceLevel.Document> です。 詳細については、「、 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=fullName> プロパティおよび <xref:System.Xml.ConformanceLevel?displayProperty=fullName> 列挙します。  
  
    |レベル|説明|  
    |---------|--------|  
    |<xref:System.Xml.ConformanceLevel.Document>|XML 出力は、整形式 XML 1.0 ドキュメントの規則に準拠しているし、準拠しているすべてのプロセッサで処理できます。|  
    |<xref:System.Xml.ConformanceLevel.Fragment>|XML 出力は、整形式 XML 1.0 ドキュメント フラグメントの規則に準拠しています。|  
    |<xref:System.Xml.ConformanceLevel.Auto>|XML ライターでは、確認を適用するチェック \(ドキュメントまたはフラグメント\)、受信データに基づくのレベルを決定します。|  
  
<a name="writing_elements"></a>   
## 要素の書き込み  
 以下を使用する <xref:System.Xml.XmlWriter> 要素ノードを作成する方法です。 例については、表示されているメソッドを参照してください。  
  
|用途|目的|  
|--------|--------|  
|<xref:System.Xml.XmlWriter.WriteElementString%2A>|文字列値も含め、全体の要素ノードを作成します。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>|複数のメソッドを使用して要素の値を記述するには、次のように呼び出します。  たとえば、<xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出して、型指定された値を書き込んだり、<xref:System.Xml.XmlWriter.WriteCharEntity%2A> を呼び出して文字エンティティを書き込んだり、<xref:System.Xml.XmlWriter.WriteAttributeString%2A> を呼び出して 1 つの属性を書き込んだり、子要素を書き込んだりすることができます。 これはより高度なバージョンの <xref:System.Xml.XmlWriter.WriteElementString%2A> メソッドです。<br /><br /> 要素を閉じるを呼び出す、 <xref:System.Xml.XmlWriter.WriteEndElement%2A> または <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> メソッドです。|  
|<xref:System.Xml.XmlWriter.WriteNode%2A>|現在位置にある要素ノードをコピーする、 <xref:System.Xml.XmlReader> または <xref:System.Xml.XPath.XPathNavigator> オブジェクトです。 呼び出されると、ソース オブジェクトからすべてを <xref:System.Xml.XmlWriter> インスタンスにコピーします。|  
  
<a name="writing_attributes"></a>   
## 属性の記述  
 以下を使用する <xref:System.Xml.XmlWriter> 要素ノードに属性を書き込む方法です。 次のセクションで説明したように、要素に名前空間宣言を作成するこれらのメソッドを使用もできます。  
  
|用途|目的|  
|--------|--------|  
|<xref:System.Xml.XmlWriter.WriteAttributeString%2A>|文字列値も含め、全体の属性ノードに書き込めません。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>|複数のメソッドを使用して属性値を記述するには、次のように呼び出します。 たとえば、呼び出す <xref:System.Xml.XmlWriter.WriteValue%2A> に型指定された値を書き込むことです。 これはより高度なバージョンの <xref:System.Xml.XmlWriter.WriteElementString%2A> メソッドです。<br /><br /> 要素を閉じるを呼び出す、 <xref:System.Xml.XmlWriter.WriteEndAttribute%2A> メソッドです。|  
|<xref:System.Xml.XmlWriter.WriteAttributes%2A>|現在位置にあるすべての属性をコピーする、 <xref:System.Xml.XmlReader> オブジェクトです。 書き込まれる属性は、リーダーが現在位置付けられているノードの種類によって異なります。<br /><br /> -   属性ノードの現在の属性から、書き込みます残りの属性要素の終了タグまでです。<br />-   要素ノードの要素に含まれるすべての属性を書き込みます。<br />-   XML 宣言ノードに対しては、宣言ですべての属性を書き込みます。<br />-   他のすべてのノード型のメソッドは例外をスローします。|  
  
<a name="handling_ns"></a>   
## 名前空間の処理  
 名前空間は、XML ドキュメント内の要素名と属性名を修飾するために使用されます。 名前空間プレフィックスは、さらに、URI 参照に関連付けられた名前空間を持つ要素と属性を関連付けます。 名前空間は、XML ドキュメントの中の要素名と属性名を一意にします。  
  
 <xref:System.Xml.XmlWriter> 、現在の名前空間スコープで定義されているすべての名前空間に対応する名前空間スタックを保持します。 要素および属性の書き込み時には、次の方法で名前空間を使用できます。  
  
-   使用して手動で名前空間を宣言する、 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> メソッドです。 これは、名前空間宣言の個数を最適化する方法がわかっているときに役立つ場合があります。 例については、次を参照してください。、 <xref:System.Xml.XmlWriter.WriteAttributeString%28System.String%2CSystem.String%2CSystem.String%2CSystem.String%29> メソッドです。  
  
-   現在の名前空間宣言を新しい名前空間でオーバーライドする。 次のコードで、 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> メソッドは名前空間 URI を変更に対して、 `"x"` のプレフィックスを `"123"` に `"abc"`します。  
  
     [!code-csharp[XmlWriter\_v2\#18](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#18)]
     [!code-vb[XmlWriter\_v2\#18](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#18)]  
  
     このコードは、次の XML 文字列を生成します。  
  
    ```  
    <x:root xmlns:x="123">  
      <item xmlns:x="abc" />  
    </x:root>  
    ```  
  
-   属性または要素の書き込み時に名前空間プレフィックスを指定する。 要素や属性の書き込みに使用されるメソッドの多くは、これを行うには、有効にします。 たとえば、 <xref:System.Xml.XmlWriter.WriteStartElement%28System.String%2CSystem.String%2CSystem.String%29> メソッドが開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。  
  
<a name="writing_types"></a>   
## 型指定されたデータの書き込み  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドは、共通言語ランタイム \(CLR\) オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則に従って、文字列形式に変換しを使用してアウトに出力、 <xref:System.Xml.XmlWriter.WriteString%2A> メソッドです。 これは、メソッドを使用するよりも簡単です、 <xref:System.Xml.XmlConvert> 記述する前に、型指定されたデータを文字列値に変換するクラス。  
  
 使用して、型指定された値がテキストにシリアル化をテキストに記述する場合、 <xref:System.Xml.XmlConvert> スキーマの種類のルール。  
  
 CLR 型に対応する既定の XSD データ型を参照してください、 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドです。  
  
 <xref:System.Xml.XmlWriter> XML データ ストアへの書き込みにも使用できます。 たとえば、<xref:System.Xml.XPath.XPathNavigator> クラスは <xref:System.Xml.XmlWriter> オブジェクトを作成して、<xref:System.Xml.XmlDocument> オブジェクト用のノードを作成できます。 データ ストアに、利用可能なスキーマ情報がある場合、 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが許可されていない型に変換しようとする場合、例外をスローします。データ ストアには、利用可能なスキーマ情報がない場合、 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドはすべての値として扱います、 `xsd:anySimpleType` 型です。  
  
<a name="close"></a>   
## XML ライターを閉じる  
 使用すると <xref:System.Xml.XmlWriter> XML では、要素および属性を出力する方法は、呼び出されるまで書き込まれません、 <xref:System.Xml.XmlWriter.Close%2A> メソッドです。 たとえばを使用している場合 <xref:System.Xml.XmlWriter> を設定する、 <xref:System.Xml.XmlDocument> オブジェクトを終了するまで書き込まれた要素とターゲット ドキュメントに属性を表示することはできません、 <xref:System.Xml.XmlWriter> インスタンス。  
  
<a name="async"></a>   
## 非同期プログラミング  
 ほとんどの <xref:System.Xml.XmlWriter> メソッドをメソッド名の末尾に"Async"を持つ対応する非同期があります。 たとえば、非同期と同等の <xref:System.Xml.XmlWriter.WriteAttributeString%2A> は <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>です。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> され、メソッドは非同期に対応するものがある、戻り値を文字列に変換を使用して、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッド代わりにします。  
  
<a name="security"></a>   
## セキュリティの考慮事項  
 使用する場合は、以下を検討してください、 <xref:System.Xml.XmlWriter> クラス。  
  
-   によってスローされた例外、 <xref:System.Xml.XmlWriter> たくないパス情報が満載のアプリを公開しています。 アプリは、例外をキャッチして、適切に処理する必要があります。  
  
-   <xref:System.Xml.XmlWriter> 渡されるデータを検証しません、 <xref:System.Xml.XmlWriter.WriteDocType%2A> または <xref:System.Xml.XmlWriter.WriteRaw%2A> メソッドです。 これらのメソッドには、任意のデータをパスする必要があります。  
  
   
  
## 例  
 次のコード例は、非同期 API を使用して XML を生成する方法を示しています。  
  
```  
async Task TestWriter(Stream stream)   
{  
    XmlWriterSettings settings = new XmlWriterSettings();  
    settings.Async = true;  
  
    using (XmlWriter writer = XmlWriter.Create(stream, settings)) {  
        await writer.WriteStartElementAsync("pf", "root", "http://ns");  
        await writer.WriteStartElementAsync(null, "sub", null);  
        await writer.WriteAttributeStringAsync(null, "att", null, "val");  
        await writer.WriteStringAsync("text");  
        await writer.WriteEndElementAsync();  
        await writer.WriteProcessingInstructionAsync("pName", "pValue");  
        await writer.WriteCommentAsync("cValue");  
        await writer.WriteCDataAsync("cdata value");  
        await writer.WriteEndElementAsync();  
        await writer.FlushAsync();  
    }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、このストリームと基になるストリームを閉じます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべての要素または属性が開いたままにしては自動的に閉じられます。  
  
> [!NOTE]
>  使用すると、 <xref:System.Xml.XmlWriter> XML では、要素および属性を出力する方法は書き込まれませんが呼び出されるまで、 <xref:System.Xml.XmlWriter.Close%2A> メソッドです。 XmlWriter を使用して設定する場合など、 <xref:System.Xml.XmlDocument>, 閉じるまで、 <xref:System.Xml.XmlWriter>, 、書き込まれた要素とターゲット ドキュメントに属性を確認することはできません。  
  
   
  
## 例  
 次の例では、XML ノードを書き込みます。  
  
 [!code-cpp[XmlWriter.Close\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> のインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Some of the <xref:System.Xml.XmlWriter.Create%2A> overloads include a **parameterReference tag is not supported!!!!**  
 parameter that accepts an <xref:System.Xml.XmlWriterSettings> object. You can use this object to:  
  
-   Specify which features you want supported on the created <xref:System.Xml.XmlWriter> object.  
  
-   Reuse the <xref:System.Xml.XmlWriterSettings> object to create multiple writer objects. The <xref:System.Xml.XmlWriterSettings> object is copied and marked read\-only for each created writer. Changes to the settings on an <xref:System.Xml.XmlWriterSettings> instance do not affect existing writers with the same settings. Thus, you can use the same settings to create multiple writers with the same functionality. Or, you can modify the settings on an <xref:System.Xml.XmlWriterSettings> instance and create a new writer with a different set of features.  
  
-   Add features to an existing XML writer. The <xref:System.Xml.XmlWriter.Create%2A> method can accept another <xref:System.Xml.XmlWriter> object. The underlying <xref:System.Xml.XmlWriter> object does not have to be an XML writer created by the static <xref:System.Xml.XmlWriter.Create%2A> method. For example, you can specify a user\-defined XML writer to add additional features to.  
  
-   Take full advantage of features such as better conformance checking and compliance to the [XML 1.0 recommendation](http://www.w3.org/TR/2006/REC-xml-20060816/) that are available only on <xref:System.Xml.XmlWriter> objects created by the static <xref:System.Xml.XmlWriter.Create%2A> method.  
  
 If you use a <xref:System.Xml.XmlWriter.Create%2A> overload that doesn't accept an <xref:System.Xml.XmlWriterSettings> object, the following default writer settings are used:  
  
|Setting|Default|  
|-------------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|Two spaces|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(no removal\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(carriage return, new line\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
> [!NOTE]
>  Although the .NET Framework includes the <xref:System.Xml.XmlTextWriter> class, which is a concrete implementation of the <xref:System.Xml.XmlWriter> class, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A> method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="output">書き込み先のストリーム。<see cref="T:System.Xml.XmlWriter" /> XML 1.0 テキスト構文を書き込み、指定したストリームに付加します。</param>
        <summary>新たに作成 <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定のストリームを使用します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用すると、 <xref:System.Xml.XmlWriterSettings> 次の既定の設定でのオブジェクトを使用した XML ライターを作成します。  
  
|設定|既定|  
|--------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(削除しない\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 作成されたライターでサポートする機能を指定する場合を受け取るオーバー ロードを使用して、 <xref:System.Xml.XmlWriterSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlWriterSettings> 、カスタム設定を持つオブジェクト。  
  
 また、XmlWriter 常にバイト順マーク \(BOM\)、基になるデータ ストリームを書き込みます。ただし、一部のストリームでは、BOM は許可されません。 BOM を省略するには、新しい作成 <xref:System.Xml.XmlWriterSettings> オブジェクトし、新しいするエンコード プロパティを設定 <xref:System.Text.UTF8Encoding> を false に設定するコンス トラクターでブール値を持つオブジェクト。  
  
   
  
## 例  
 次の例では、XML フラグメントをメモリ ストリームに書き込みます。 \(を使用して、 <xref:System.Xml.XmlWriter.Create%28System.IO.Stream%2CSystem.Xml.XmlWriterSettings%29> オーバー ロードの新しい XML ライターのインスタンスでも、設定を構成する\)。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> を記述します。<see cref="T:System.Xml.XmlWriter" /> XML 1.0 テキスト構文が書き込まれ、指定した追加 <see cref="T:System.IO.TextWriter" />します。</param>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定を使用して <see cref="T:System.IO.TextWriter" />します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用すると、 <xref:System.Xml.XmlWriterSettings> XML ライターを作成する既定の設定を持つオブジェクトを使用します。  
  
|設定|既定|  
|--------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(削除しない\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 作成されたライターでサポートする機能を指定する場合を受け取るオーバー ロードを使用して、 <xref:System.Xml.XmlWriterSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlWriterSettings> 、カスタム設定を持つオブジェクト。  
  
   
  
## 例  
 次の例では、コンソールに出力するライターを作成します。  
  
 [!code-csharp[XmlWriter\_v2\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#3)]
 [!code-vb[XmlWriter\_v2\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputFileName">書き込み先のファイル。<see cref="T:System.Xml.XmlWriter" /> 指定したパスにファイルを作成し、XML 1.0 テキスト構文に書き込みます。<c>outputFileName</c> ファイル システム パスを指定する必要があります。</param>
        <summary>新たに作成 <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定したファイル名を使用します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用すると、 <xref:System.Xml.XmlWriterSettings> XML ライターを作成する既定の設定を持つオブジェクトを使用します。  
  
|設定|既定|  
|--------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(削除しない\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 作成された XML ライターでサポートする機能を指定する場合を受け取るオーバー ロードを使用して、 <xref:System.Xml.XmlWriterSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlWriterSettings> 、カスタム設定を持つオブジェクト。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> オブジェクトおよび book ノードを書き込みます。  
  
 [!code-csharp[XmlWriter\_v2\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#2)]
 [!code-vb[XmlWriter\_v2\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> への書き込み先となります。 書き込まれた内容、 <see cref="T:System.Xml.XmlWriter" /> に追加されますが、 <see cref="T:System.Text.StringBuilder" />です。</param>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定を使用して <see cref="T:System.Text.StringBuilder" />します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードを使用すると、 <xref:System.Xml.XmlWriterSettings> XML ライターを作成する既定の設定を持つオブジェクトを使用します。  
  
|設定|既定|  
|--------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(削除しない\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 作成された XML ライターでサポートする機能を指定する場合を受け取るオーバー ロードを使用して、 <xref:System.Xml.XmlWriterSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlWriterSettings> 、カスタム設定を持つオブジェクト。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Xml.XmlWriter" /> 基になるライターとして使用するオブジェクト。</param>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定を使用して <see cref="T:System.Xml.XmlWriter" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクトを指定したラップ <see cref="T:System.Xml.XmlWriter" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、基になる機能を追加する <xref:System.Xml.XmlWriter> オブジェクトです。 基になる <xref:System.Xml.XmlWriter> オブジェクトによって作成されたオブジェクトを指定できます、 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> メソッド、またはを使用して作成されたオブジェクト、 <xref:System.Xml.XmlTextWriter> 実装します。  
  
 このオーバー ロードを使用すると、 <xref:System.Xml.XmlWriterSettings> XML ライターを作成する既定の設定を持つオブジェクトを使用します。  
  
|設定|既定|  
|--------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NamespaceHandling%2A>|<xref:System.Xml.NamespaceHandling.Default> \(削除しない\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`|  
|<xref:System.Xml.XmlWriterSettings.OutputMethod%2A>|<xref:System.Xml.XmlOutputMethod.Xml?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`|  
  
 作成された XML ライターでサポートする機能を指定する場合を受け取るオーバー ロードを使用して、 <xref:System.Xml.XmlWriterSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlWriterSettings> 、カスタム設定を持つオブジェクト。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.Stream output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.Stream output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.Stream,System.Xml.XmlWriterSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">書き込み先のストリーム。<see cref="T:System.Xml.XmlWriter" /> XML 1.0 テキスト構文を書き込み、指定したストリームに付加します。</param>
        <param name="settings">
          <see cref="T:System.Xml.XmlWriterSettings" /> 、新しい構成に使用されるオブジェクト <see cref="T:System.Xml.XmlWriter" /> インスタンス。 これは、する場合 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 既定値の設定を使用します。  
  
 場合、 <see cref="T:System.Xml.XmlWriter" /> と共にを使用する、 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドを使用してください、 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を取得するプロパティ、 <see cref="T:System.Xml.XmlWriterSettings" /> 正しい設定を持つオブジェクト。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトには、正しい出力設定します。</param>
        <summary>新たに作成 <see cref="T:System.Xml.XmlWriter" /> ストリームを使用してインスタンスと <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 XmlWriter が常にバイト順マーク \(BOM\) を基になるデータ ストリームに書き込みますただし、一部のストリームでは、BOM は許可されません。 BOM を省略するには、新しい作成 <xref:System.Xml.XmlWriterSettings> オブジェクトし、新しいするエンコード プロパティを設定 <xref:System.Text.UTF8Encoding> を false に設定するコンス トラクターでブール値を持つオブジェクト。  
  
   
  
## 例  
 次の例では、XML フラグメントをメモリ ストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.IO.TextWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.IO.TextWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.IO.TextWriter,System.Xml.XmlWriterSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.IO.TextWriter" /> を記述します。<see cref="T:System.Xml.XmlWriter" /> XML 1.0 テキスト構文が書き込まれ、指定した追加 <see cref="T:System.IO.TextWriter" />します。</param>
        <param name="settings">
          <see cref="T:System.Xml.XmlWriterSettings" /> 、新しい構成に使用されるオブジェクト <see cref="T:System.Xml.XmlWriter" /> インスタンス。 これは、する場合 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 既定値の設定を使用します。  
  
 場合、 <see cref="T:System.Xml.XmlWriter" /> と共にを使用する、 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドを使用してください、 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を取得するプロパティ、 <see cref="T:System.Xml.XmlWriterSettings" /> 正しい設定を持つオブジェクト。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトには、正しい出力設定します。</param>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを使用して、 <see cref="T:System.IO.TextWriter" /> と <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、XML 文字列を書き込みます。  
  
 [!code-csharp[XmlWriter\_v2\#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#4)]
 [!code-vb[XmlWriter\_v2\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="text" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (string outputFileName, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(string outputFileName, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.String,System.Xml.XmlWriterSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputFileName" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="outputFileName">書き込み先のファイル。<see cref="T:System.Xml.XmlWriter" /> 指定したパスにファイルを作成し、XML 1.0 テキスト構文に書き込みます。<c>outputFileName</c> ファイル システム パスを指定する必要があります。</param>
        <param name="settings">
          <see cref="T:System.Xml.XmlWriterSettings" /> 、新しい構成に使用されるオブジェクト <see cref="T:System.Xml.XmlWriter" /> インスタンス。 これは、する場合 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 既定値の設定を使用します。  
  
 場合、 <see cref="T:System.Xml.XmlWriter" /> と共にを使用する、 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドを使用してください、 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を取得するプロパティ、 <see cref="T:System.Xml.XmlWriterSettings" /> 正しい設定を持つオブジェクト。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトには、正しい出力設定します。</param>
        <summary>新たに作成 <see cref="T:System.Xml.XmlWriter" /> インスタンス ファイル名を使用して、 <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> 定義済みの設定を持つオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="url" /> 値は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Text.StringBuilder output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Text.StringBuilder output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Text.StringBuilder,System.Xml.XmlWriterSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Text.StringBuilder" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Text.StringBuilder" /> への書き込み先となります。 書き込まれた内容、 <see cref="T:System.Xml.XmlWriter" /> に追加されますが、 <see cref="T:System.Text.StringBuilder" />です。</param>
        <param name="settings">
          <see cref="T:System.Xml.XmlWriterSettings" /> 、新しい構成に使用されるオブジェクト <see cref="T:System.Xml.XmlWriter" /> インスタンス。 これは、する場合 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 既定値の設定を使用します。  
  
 場合、 <see cref="T:System.Xml.XmlWriter" /> と共にを使用する、 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドを使用してください、 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を取得するプロパティ、 <see cref="T:System.Xml.XmlWriterSettings" /> 正しい設定を持つオブジェクト。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトには、正しい出力設定します。</param>
        <summary>新しい <see cref="T:System.Xml.XmlWriter" /> インスタンスを使用して、 <see cref="T:System.Text.StringBuilder" /> と <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="builder" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlWriter Create (System.Xml.XmlWriter output, System.Xml.XmlWriterSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlWriter Create(class System.Xml.XmlWriter output, class System.Xml.XmlWriterSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Create(System.Xml.XmlWriter,System.Xml.XmlWriterSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.Xml.XmlWriter" />
        <Parameter Name="settings" Type="System.Xml.XmlWriterSettings" />
      </Parameters>
      <Docs>
        <param name="output">
          <see cref="T:System.Xml.XmlWriter" /> 基になるライターとして使用するオブジェクト。</param>
        <param name="settings">
          <see cref="T:System.Xml.XmlWriterSettings" /> 、新しい構成に使用されるオブジェクト <see cref="T:System.Xml.XmlWriter" /> インスタンス。 これは、する場合 <see langword="null" />, 、 <see cref="T:System.Xml.XmlWriterSettings" /> 既定値の設定を使用します。  
  
 場合、 <see cref="T:System.Xml.XmlWriter" /> と共にを使用する、 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" /> メソッドを使用してください、 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" /> を取得するプロパティ、 <see cref="T:System.Xml.XmlWriterSettings" /> 正しい設定を持つオブジェクト。 これにより、作成された <see cref="T:System.Xml.XmlWriter" /> オブジェクトには、正しい出力設定します。</param>
        <summary>新たに作成 <see cref="T:System.Xml.XmlWriter" /> インスタンスの指定を使用して <see cref="T:System.Xml.XmlWriter" /> と <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</summary>
        <returns>
          <see cref="T:System.Xml.XmlWriter" /> オブジェクトを指定したラップ <see cref="T:System.Xml.XmlWriter" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、基になる追加機能を追加する <xref:System.Xml.XmlWriter> オブジェクトです。 基になる <xref:System.Xml.XmlWriter> オブジェクトによって作成されたオブジェクトを指定できます、 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> メソッド、またはを使用して作成されたオブジェクト、 <xref:System.Xml.XmlTextWriter> 実装します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="writer" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlWriter" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Xml.XmlWriter" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public abstract void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.Flush" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、代わりに呼び出されます <xref:System.Xml.XmlWriter.Close%2A> 、バッファー内の新機能を失うことがなく、基になるストリームに書き込みを行う場合します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.FlushAsync%2A>です。  
  
   
  
## 例  
 次の例では、2 つの XML フラグメントを書き込みます。  
  
 [!code-cpp[XmlWriter.Flush\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Flush/CPP/write2docs_v2.cpp#1)]
 [!code-csharp[XmlWriter.Flush\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Flush/CS/write2docs_v2.cs#1)]
 [!code-vb[XmlWriter.Flush\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Flush/VB/write2docs_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FlushAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FlushAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.FlushAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッファー内のデータをすべて基になるストリームに非同期にフラッシュし、基になるストリームもフラッシュします。</summary>
        <returns>タスクを表す非同期 <see langword="Flush" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.Flush%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public abstract string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.LookupPrefix(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">検索対象のプリフィックスを持つ名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされると、名前空間 URI の現在の名前空間スコープで定義された最も近いプリフィックスを返します。</summary>
        <returns>一致するプリフィックスまたは <see langword="null" /> 一致する名前空間のない URI は、現在のスコープで見つからない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、本を書き込みます。  
  
 [!code-cpp[XmlWriter.WriteElementString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="ns" /> いずれかが <see langword="null" /> または <see langword="String.Empty" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlWriterSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlWriterSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Xml.XmlWriter" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトがこのライター インスタンスを作成するために使用します。 このライターを使用して作成されなかった場合、 <see cref="Overload:System.Xml.XmlWriter.Create" /> メソッドは、このプロパティの返します <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlWriterSettings> クラスを使用して作成されたライターのインスタンスでサポートする機能のセットを指定します。<xref:System.Xml.XmlWriterSettings> によって返されるオブジェクト、 <xref:System.Xml.XmlWriter.Settings%2A> プロパティを変更することはできません。 スローされる例外の個々 の設定の結果を変更しようとします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributes">
      <MemberSignature Language="C#" Value="public virtual void WriteAttributes (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteAttributes(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributes(System.Xml.XmlReader,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="XmlReader" /> 属性をコピー先となるからです。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーする、 <see langword="XmlReader" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされると、現在位置で見つかったすべての属性を書き込みます、 <see cref="T:System.Xml.XmlReader" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リーダーが配置されている場合、 `element` ノード `WriteAttributes` 含まれているすべての属性をコピーします。 リーダーが配置されている場合、 `attribute` \] ノードを書き込む現在の属性では、次に残り、属性の終了タグの要素までです。 リーダーが配置されている場合、 `XmlDeclaration` 宣言内のノードを書き込むすべての属性です。 このメソッドがスローするその他のノード型で、リーダーが配置されている場合、 <xref:System.Xml.XmlException>です。  
  
 使用して、このメソッドが呼び出された場合 <xref:System.Xml.XmlValidatingReader>, 、整形式の xml が書き込まれるときに、ドキュメントは無効になる可能性があります \(これは、エンティティから拡張された\) 内容は置き換えられます。 たとえば、属性が含まれている場合、 `&gt;` 整形式ドキュメントは、展開されたことを確認する、展開されているエンティティ \> 書き込み時に置き換えられます `&gt;`します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteAttributesAsync%2A>です。  
  
   
  
## 例  
 次の例は、出力にすべての要素をコピー、タグ名を大文字に変更し、変更されていないすべての属性をコピーします。  
  
 [!code-cpp[XmlWriter.WriteAttributes\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributes/CPP/writeattrs_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributes\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributes/CS/writeattrs_v2.cs#1)]
 [!code-vb[XmlWriter.WriteAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributes/VB/writeattrs_v2.vb#1)]  
  
 この例では、 `test1.xml`, 、入力として。  
  
 [!code-xml[XmlWriter.WriteAttributes\#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteAttributes/XML/test1.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Xml.XmlException">リーダーが配置されていない、 <see langword="element" />, 、<see langword="attribute" /> または <see langword="XmlDeclaration" /> ノードです。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteAttributesAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteAttributesAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributesAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteAttributesAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="XmlReader" /> 属性をコピー先となるからです。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーする、 <see langword="XmlReader" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>現在位置で見つかったすべての属性を非同期に書き込みます、 <see cref="T:System.Xml.XmlReader" />です。</summary>
        <returns>タスクを表す非同期 <see langword="WriteAttributes" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteAttributes%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteAttributeString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、指定した値の属性を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <param name="value">属性の値。</param>
        <summary>派生クラスでオーバーライドされると、指定したローカル名と値の属性を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteAttributeString` では次の処理が行われます。  
  
-   属性の値には、二重引用符または単一引用符が含まれている場合、それらに置き換えられます。 `&quot;` と `&apos;` それぞれします。  
  
-   作成する場合、 `xml:space` 属性で、ライターの検証属性値が有効です。 \(有効な値は `preserve` または `default`.\)  
  
-   作成する場合、 `xml:lang` 属性で、ライターがいないことを確認属性の値が w3c 勧告 『 XML 1.0 勧告に沿って有効であります。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>です。  
  
   
  
## 例  
 次の例は、本を書き込みます。  
  
 [!code-cpp[XmlWriter.WriteElementString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> または <see langword="xml:lang" /> 属性の値が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性に関連付ける名前空間 URI。</param>
        <param name="value">属性の値。</param>
        <summary>派生クラスでオーバーライドされると、指定したローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、ユーザー定義の名前空間プレフィックスを持つ属性を書き込み、指定した名前空間に関連付けます。 場合 `localName` "xmlns"は、このメソッドもこのとして扱います名前空間の宣言です。 ここで、 `ns` 引数を指定できます `null`します。  
  
 `WriteAttributeString` では次の処理が行われます。  
  
-   属性の値には、二重引用符または単一引用符が含まれている場合、それらに置き換えられます。 `&quot;` と `&apos;` それぞれします。  
  
-   作成する場合、 `xml:space` 属性で、ライターの検証属性値が有効です。 \(有効な値は `preserve` または `default`.\)  
  
-   作成する場合、 `xml:lang` 属性で、ライターがいないことを確認属性の値が w3c 勧告 『 XML 1.0 勧告に沿って有効であります。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> 名前空間宣言を書き込みます。  
  
 [!code-cpp[XmlWriter.WriteAttributeString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> または <see langword="xml:lang" /> 属性の値が無効です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeString">
      <MemberSignature Language="C#" Value="public void WriteAttributeString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteAttributeString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeString(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">属性の名前空間プレフィックス。</param>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <param name="value">属性の値。</param>
        <summary>派生クラスでオーバーライドされると、指定したプリフィックス、ローカル名、名前空間 URI、および値の属性を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、ユーザー定義の名前空間プレフィックスを持つ属性を書き込み、指定した名前空間に関連付けます。 プレフィックスが"xmlns"である場合、このメソッドも、名前空間宣言として扱われます、URI が指定した属性の値で提供される名前空間に宣言されたプリフィックスに関連付けます。 この場合、 `ns` 引数を指定できます `null`します。  
  
 `WriteAttributeString` では次の処理が行われます。  
  
-   属性の値には、二重引用符または単一引用符が含まれている場合、それらに置き換えられます。 `&quot;` と `&apos;` それぞれします。  
  
-   作成する場合、 `xml:space` 属性で、ライターの検証属性値が有効です。 \(有効な値は `preserve` または `default`.\)  
  
-   作成する場合、 `xml:lang` 属性で、ライターがいないことを確認属性の値が w3c 勧告 『 XML 1.0 勧告に沿って有効であります。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteAttributeStringAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlWriter.WriteAttributeString%2A> 名前空間宣言を書き込みます。  
  
 [!code-cpp[XmlWriter.WriteAttributeString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CPP/writeattrstring.cpp#1)]
 [!code-csharp[XmlWriter.WriteAttributeString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteAttributeString/CS/writeattrstring.cs#1)]
 [!code-vb[XmlWriter.WriteAttributeString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteAttributeString/VB/writeattrstring.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">
          <see langword="xml:space" /> または <see langword="xml:lang" /> 属性の値が無効です。</exception>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="localName" /> または <paramref name="ns" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteAttributeStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteAttributeStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteAttributeStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteAttributeStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">属性の名前空間プレフィックス。</param>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <param name="value">属性の値。</param>
        <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して属性を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteAttributeString" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public abstract void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">エンコードするバイト配列。</param>
        <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
        <param name="count">書き込むバイト数。</param>
        <summary>派生クラスでオーバーライドされると、指定したバイナリ バイトを Base64 としてエンコードし、その結果生成されるテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 たとえば、バイト バッファーは、GIF イメージのバイナリ コンテンツを含めることができます。 有効な XML は言えません明確にします。`Base64` 65、US\-ASCII 文字から成るテキスト形式で任意のバイト シーケンスを表すように設計されたエンコード \(\[z0 9\/cli \=\]\) の各文字が 6 のビットのバイナリ データをエンコードします。 詳細については、for Comments \(RFC\) 1521 http:\/\/www.rfc\-editor.org\/ コメントの Web サイトに対する要求にある要求を参照してください。  
  
 このメソッドの非同期バージョンは、 [WriteBase64 メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBase64Async%2A>です。  
  
   
  
## 例  
 次の例では、 [WriteBase64 メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBase64%2A> 書き込みます `Base64` データ。`Base64` 内でデータが埋め込まれて、 `<image>` 要素。  
  
 [!code-csharp[XmlReader\_Read\_Write\_Binary\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#3)]
 [!code-vb[XmlReader\_Read\_Write\_Binary\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">エンコードするバイト配列。</param>
        <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
        <param name="count">書き込むバイト数。</param>
        <summary>指定したバイナリ バイトを base64 として非同期にエンコードし、その結果生成されるテキストを書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteBase64" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [WriteBase64Async メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBase64%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [WriteBase64Async メソッド \(Byte\<xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public virtual void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">エンコードするバイト配列。</param>
        <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
        <param name="count">書き込むバイト数。</param>
        <summary>派生クラスでオーバーライドされると、指定されたバイナリ バイトをエンコードとして <see langword="BinHex" /> し、生成されるテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 [WriteBinHex メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBinHexAsync%2A>です。  
  
   
  
## 例  
 次の例では、 [WriteBinHex メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBinHex%2A> 書き込みます `BinHex` データ。`BinHex` 内でデータが埋め込まれて、 `<image>` 要素。  
  
 [!code-csharp[XmlReader\_Read\_Write\_Binary\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#1)]
 [!code-vb[XmlReader\_Read\_Write\_Binary\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">エンコードするバイト配列。</param>
        <param name="index">書き込むバイトの開始を示すバッファー内の位置。</param>
        <param name="count">書き込むバイト数。</param>
        <summary>として指定したバイナリ バイトを非同期にエンコード <see langword="BinHex" /> し、生成されるテキストを書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteBinHex" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [WriteBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlWriter.WriteBinHex%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [WriteBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public abstract void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCData(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">CDATA ブロック内に配置するテキスト。</param>
        <summary>派生クラスでオーバーライドされると、指定したテキストを含む &lt;\!\[CDATA\[...\]\]&gt; ブロックを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `text` か `null` または `String.Empty`, 、このメソッドは次に例を空の CDATA ブロックを書き込みます \<\! \[CDATA \[\] \>。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteCDataAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCDataAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCDataAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCDataAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">CDATA ブロック内に配置するテキスト。</param>
        <summary>指定したテキストを格納する &lt;\!\[CDATA\[...\]\]&gt; ブロックを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteCData" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteCData%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntity(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">文字エンティティを生成する Unicode 文字。</param>
        <summary>派生クラスでオーバーライドされると、指定した Unicode 文字値の文字エンティティを強制的に生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、16 進数の文字エンティティ参照形式で指定した Unicode 文字を書き込みます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteCharEntityAsync%2A>です。  
  
   
  
## 例  
 参照してください <xref:System.Xml.XmlTextWriter.WriteCharEntity%2A?displayProperty=fullName> 、たとえば、このメソッドを使用しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文字がサロゲート ペアの文字範囲 <see langword="0xd800" /> \- <see langword="0xdfff" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharEntityAsync (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharEntityAsync(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharEntityAsync(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">文字エンティティを生成する Unicode 文字。</param>
        <summary>指定した Unicode 文字値の文字エンティティを非同期に強制的に生成します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteCharEntity" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteCharEntity%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public abstract void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">書き込むテキストを格納している文字配列。</param>
        <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>派生クラスでオーバーライドされると、一度に 1 つのバッファーにテキストを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、一度に大量の 1 つのバッファーにテキストを書き込むを使用できます。  
  
 特別な処理を行うことを確認する必要がある、 `WriteChars` メソッドでは複数のバッファーの書き込みでサロゲート ペア文字が分割されません。 XML 仕様では、サロゲート ペアの有効な範囲を定義します。  
  
 このメソッドの非同期バージョンは、 [WriteChars メソッド \(Char\<xref:System.Xml.XmlWriter.WriteCharsAsync%2A>です。  
  
   
  
## 例  
 [!code-csharp[XmlWriter.WriteChars\#1](~/samples/snippets/csharp/VS_Snippets_Data/xmlwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 引いたバッファー サイズ <paramref name="index" /> がより小さい <paramref name="count" />サロゲート ペア文字の呼び出しの結果が分割されている、または無効なサロゲート ペアが書き込まれます。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="buffer" /> パラメーターの値が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCharsAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCharsAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCharsAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">書き込むテキストを格納している文字配列。</param>
        <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>一度に 1 つのバッファーにテキストを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteChars" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [WriteCharsAsync メソッド \(Char\<xref:System.Xml.XmlWriter.WriteChars%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [WriteCharsAsync メソッド \(Char\<xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public abstract void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteComment(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">コメント内に配置するテキスト。</param>
        <summary>派生クラスでオーバーライドされると、指定したテキストを格納している &lt;\!\-\-...\-\-&gt; コメントを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `text` か `null` または `String.Empty`, 、このメソッドは、データ コンテンツのないとコメントを次に例を書き込みます \<\!\-\-\-\> です。  
  
 場合 `text` ダッシュを 2 つの無効なシーケンスが含まれています"\-"、 <xref:System.Xml.XmlWriter> か throw ことができます、 <xref:System.ArgumentException> \(<xref:System.Xml.XmlTextWriter> オブジェクト\) ダッシュの間にスペースを挿入または「\- \-」できるように、テキストが有効な XML コメント \(<xref:System.Xml.XmlWriter> によって作成されたオブジェクト、 <xref:System.Xml.XmlWriter.Create%2A> メソッド\)。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteCommentAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">テキストは、適切な形式以外の XML ドキュメントになります。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCommentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteCommentAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteCommentAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteCommentAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">コメント内に配置するテキスト。</param>
        <summary>指定したテキストを含むコメント &lt;\!\-\-...\-\-&gt; を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteComment" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteComment%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public abstract void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">DOCTYPE の名前。 これを空にすることはできません。</param>
        <param name="pubid">かどうかは null、PUBLIC も書き込みます"pubid""sysid"を <c>pubid</c> と <c>sysid</c> は指定した引数の値に置き換えられます。</param>
        <param name="sysid">場合 <c>pubid</c> は <see langword="null" /> と <c>sysid</c> が"null 以外で、SYSTEM sysid"を書き込みます <c>sysid</c> はこの引数の値に置き換えられます。</param>
        <param name="subset">null でない場合は、\[subset\] を書き込みます。subset は、この引数の値に置き換えられます。</param>
        <summary>派生クラスでオーバーライドされると、指定した名前とオプションの属性を含む DOCTYPE 宣言を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに無効な文字をチェックしません `pubid`, 、`sysid` または `subset`です。 ない確認内部サブセットは、整形式です。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlWriter> に渡されるデータを検証できません、 <xref:System.Xml.XmlWriter.WriteDocType%2A> メソッドです。 このメソッドに、任意のデータを渡さないでください。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteDocTypeAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">値 <paramref name="name" /> 無効な XML になります。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocTypeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteDocTypeAsync (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteDocTypeAsync(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteDocTypeAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">DOCTYPE の名前。 これを空にすることはできません。</param>
        <param name="pubid">かどうかは null、PUBLIC も書き込みます"pubid""sysid"を <c>pubid</c> と <c>sysid</c> は指定した引数の値に置き換えられます。</param>
        <param name="sysid">場合 <c>pubid</c> は <see langword="null" /> と <c>sysid</c> が"null 以外で、SYSTEM sysid"を書き込みます <c>sysid</c> はこの引数の値に置き換えられます。</param>
        <param name="subset">null でない場合は、\[subset\] を書き込みます。subset は、この引数の値に置き換えられます。</param>
        <summary>指定された名前とオプション属性を使用して DOC 宣言を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteDocType" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteDocType%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>文字列値を含む要素を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="value">要素の値。</param>
        <summary>指定されたローカル名および値を使用して要素を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>です。  
  
   
  
## 例  
 次の例では、複数の書き込みメソッドを使用して、XML フラグメントを作成します。  
  
 [!code-cpp[XmlWriter.WriteElementString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 値は <see langword="null" /> または空の文字列です。  
  
 または  
  
 パラメーターの値が有効ではありません。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素に関連付ける名前空間 URI。</param>
        <param name="value">要素の値。</param>
        <summary>指定されたローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>です。  
  
   
  
## 例  
 次の例では、複数の書き込みメソッドを使用して、XML フラグメントを作成します。  
  
 [!code-cpp[XmlWriter.WriteElementString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 値は <see langword="null" /> または空の文字列です。  
  
 または  
  
 パラメーターの値が有効ではありません。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementString">
      <MemberSignature Language="C#" Value="public void WriteElementString (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteElementString(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementString(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">要素のプレフィックス。</param>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素の名前空間 URI。</param>
        <param name="value">要素の値。</param>
        <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteElementStringAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> 値は <see langword="null" /> または空の文字列です。  
  
 または  
  
 パラメーターの値が有効ではありません。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteElementStringAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task WriteElementStringAsync (string prefix, string localName, string ns, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task WriteElementStringAsync(string prefix, string localName, string ns, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteElementStringAsync(System.String,System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteElementStringAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">要素のプレフィックス。</param>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素の名前空間 URI。</param>
        <param name="value">要素の値。</param>
        <summary>指定されたプレフィックス、ローカル名、名前空間 URI、および値を使用して要素を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteElementString" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteElementString%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、終了前 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出した場合 `WriteStartAttribute`, 、このメソッドを使用して、属性を閉じることができます。  
  
 呼び出して属性を終了することもできます `WriteStartAttribute` もう一度呼び出して <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, 、またはを呼び出して <xref:System.Xml.XmlWriter.WriteEndElement%2A>します。  
  
> [!NOTE]
>  使用すると、 <xref:System.Xml.XmlWriter> XML では、要素および属性を出力する方法は書き込まれませんが呼び出されるまで、 <xref:System.Xml.XmlWriter.Close%2A> メソッドです。 XmlWriter を使用して設定する場合など、 <xref:System.Xml.XmlDocument>, 閉じるまで、 <xref:System.Xml.XmlWriter>, 、書き込まれた要素とターゲット ドキュメントに属性を確認することはできません。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteEndAttributeAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttributeAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task WriteEndAttributeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndAttributeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndAttributeAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期に閉じ、以前 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" /> 呼び出します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteEndAttribute" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、開いている任意の要素または属性を閉じ、ライターを Start 状態に戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  使用すると、 <xref:System.Xml.XmlWriter> XML では、要素および属性を出力する方法は書き込まれませんが呼び出されるまで、 <xref:System.Xml.XmlWriter.Close%2A> メソッドです。 XmlWriter を使用して設定する場合など、 <xref:System.Xml.XmlDocument>, 閉じるまで、 <xref:System.Xml.XmlWriter>, 、書き込まれた要素とターゲット ドキュメントに属性を確認することはできません。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteEndDocumentAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">XML ドキュメントが正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndDocumentAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>開いている要素または属性を非同期に閉じ、ライターを Start 状態に戻します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteEndDocument" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteEndDocument%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素にコンテンツが含まれていない場合は、短い終了タグ"\/\>"が書き込まれます。それ以外の場合、完全な終了タグが書き込まれます。  
  
> [!NOTE]
>  使用すると、 <xref:System.Xml.XmlWriter> XML では、要素および属性を出力する方法は書き込まれませんが呼び出されるまで、 <xref:System.Xml.XmlWriter.Close%2A> メソッドです。 設定する、XmlWwriter を使用している場合など、 <xref:System.Xml.XmlDocument>, 閉じるまで、 <xref:System.Xml.XmlWriter>, 、書き込まれた要素とターゲット ドキュメントに属性を確認することはできません。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteEndElementAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlWriter.WriteEndElement%2A> と <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> メソッドです。  
  
 [!code-csharp[XmlWriter.WriteFullEndElement\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEndElementAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
        <returns>タスクを表す非同期 <see langword="WriteEndElement" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteEndElement%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public abstract void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRef(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">エンティティ参照の名前。</param>
        <summary>派生クラスでオーバーライドされるなどのエンティティ参照を書き込みます <see langword="&amp;name;" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteEntityRefAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> いずれかが <see langword="null" /> または <see langword="String.Empty" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRefAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteEntityRefAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteEntityRefAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteEntityRefAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">エンティティ参照の名前。</param>
        <summary>などのエンティティ参照を非同期に書き込みます <see langword="&amp;name;" />します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteEntityRef" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteEntityRef%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public abstract void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、1 つの要素を閉じ、対応する名前空間スコープをポップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、常に完全な終了タグを書き込みます。 これは、機能は、完全な終了タグを含める必要のある要素を処理するときに便利です。 たとえば、ブラウザーは、HTML スクリプト ブロックで終わる"\<\/script \>"を想定します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteFullEndElementAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlWriter.WriteEndElement%2A> と <xref:System.Xml.XmlWriter.WriteFullEndElement%2A> メソッドです。  
  
 [!code-csharp[XmlWriter.WriteFullEndElement\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteFullEndElement/CS/writerfullend_v2.cs#1)]
 [!code-vb[XmlWriter.WriteFullEndElement\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteFullEndElement/VB/writerfullend_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteFullEndElementAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteFullEndElementAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteFullEndElementAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つの要素を非同期に閉じ、対応する名前空間スコープをポップします。</summary>
        <returns>タスクを表す非同期 <see langword="WriteFullEndElement" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public virtual void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">書き込む名前。</param>
        <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』\(http:\/\/www.w3.org\/TR\/1998\/REC\-xml\-19980210\#NT\-Name\) に準拠した有効な名前であるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 <xref:System.Xml.XmlTextWriter.Namespaces%2A> に設定されている `true`, 、`WriteName` また、w3c 勧告 『 Namespaces in XML 』 に従って有効なも、名前を確認します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteNameAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 有効な XML 名ではありません。または <paramref name="name" /> か <see langword="null" /> または <see langword="String.Empty" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNameAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNameAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">書き込む名前。</param>
        <summary>指定した名前が W3C 勧告『XML 1.0』\(http:\/\/www.w3.org\/TR\/1998\/REC\-xml\-19980210\#NT\-Name\) に準拠した有効な名前であることを確認し、それを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteName" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteName%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public virtual void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmToken(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">書き込む名前。</param>
        <summary>派生クラスでオーバーライドされると、指定した名前を書き込み、その名前が W3C 勧告『XML 1.0』\(http:\/\/www.w3.org\/TR\/1998\/REC\-xml\-19980210\#NT\-Name\) に準拠した有効な NmToken であるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteNmTokenAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 有効な NmToken ではありません。または <paramref name="name" /> か <see langword="null" /> または <see langword="String.Empty" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmTokenAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNmTokenAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNmTokenAsync(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNmTokenAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">書き込む名前。</param>
        <summary>指定した名前が W3C 勧告『XML 1.0』\(http:\/\/www.w3.org\/TR\/1998\/REC\-xml\-19980210\#NT\-Name\) に準拠した有効な NmToken であることを確認し、それを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteNmToken" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteNmToken%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNode">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>ソース オブジェクトから現在のライターのインスタンスにすべてをコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XmlReader,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーする、 <see langword="XmlReader" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされると、リーダーのデータをすべてライターにコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、このメソッドのサポートされているノードの種類を示します。  
  
|ノード型|WriteNode 動作|  
|----------|------------------|  
|`None`|型に関係なくすべてのノードを書き出します。 つまり、ライターを使用、 <xref:System.Xml.XmlReader> と処理命令、コメントなどの属性を含むすべてのノードを書き込みます。<br /><br /> このような状況が発生したときに、 <xref:System.Xml.XmlReader> は初期状態です。 \(、 <xref:System.Xml.XmlReader.ReadState%2A?displayProperty=fullName> プロパティを返します。 `ReaderState.Initial`\)。|  
|`Element`|要素ノードと任意の属性ノードを書き出します。|  
|`Attribute`|何も実行しません。 代わりに、<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> タグまたは <xref:System.Xml.XmlWriter.WriteAttributeString%2A> タグを使用してください。|  
|`Text`|テキスト ノードを書き出します。|  
|`CDATA`|CDATA セクション ノードを書き出します。|  
|`EntityReference`|エンティティ参照ノードを書き出します。|  
|`ProcessingInstruction`|処理命令ノードを書き出します。|  
|`Comment`|コメント ノードを書き出します。|  
|`DocumentType`|ドキュメント型ノードを書き出します。|  
|`SignificantWhitespace`|有意の空白ノードを書き出します。|  
|`Whitespace`|空白ノードを書き出します。|  
|`EndElement`|終了要素タグを書き込みます。|  
|`EndEntity`|何も実行しません。|  
|`XmlDeclaration`|XML 宣言ノードを書き出します。|  
  
 リーダーが初期状態である場合は、このメソッドは、ファイルの末尾にリーダーを移動します。 リーダーが既にまたは closed の状態でファイルの末尾にある場合、このメソッドは操作不可です。  
  
 次の c\# コードでは、コンソールに全体の XML 入力ドキュメントをコピーします。  
  
```  
XmlReader reader = XmlReader.Create(myfile);  
XmlWriter writer = XmlWriter.Create(Console.Out);  
writer.WriteNode(reader, false);  
```  
  
 ルート ノードを移動し、文書の他の場所に配置する場合、次の c\# の例は正しくノードを書き込みます。  
  
```  
XmlReader reader = XmlReader.Create(myfile);  
reader.Read(); // Read PI  
reader.Read(); // Read Comment  
reader.Read(); // Read DOCType  
XmlWriter writer = XmlWriter.Create(Console.Out);  
while (!reader.EOF){  
  writer.WriteNode(reader, false);  
 }  
```  
  
 出力のインデントを設定する場合は、リーダーは、空白文字を返すようにし、作成者が構成されている `WriteNode` 出力を生成することがあります。 本質的に取得されます二重の書式設定します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>です。  
  
   
  
## 例  
 次の例では、コンソールを最初と最後の book ノードを書き出します。  
  
 [!code-cpp[XmlWriter.WriteNode\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteNode/CPP/writenode.cpp#1)]
 [!code-csharp[XmlWriter.WriteNode\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteNode/CS/writenode.cs#1)]
 [!code-vb[XmlWriter.WriteNode\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteNode/VB/writenode.vb#1)]  
  
 この例では、 `books.xml`, 、入力として。  
  
 [!code-xml[XmlWriter.WriteNode\#2](~/samples/snippets/xml/VS_Snippets_Data/XmlWriter.WriteNode/XML/books.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="reader" /> 無効な文字が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNode">
      <MemberSignature Language="C#" Value="public virtual void WriteNode (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteNode(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNode(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>すべてをコピー、 <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト ライターに出力します。 位置、 <see cref="T:System.Xml.XPath.XPathNavigator" /> は変更されません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、サポートされている `XPath` このメソッドのノード型。  
  
|XPathNodeType|WriteNode 動作|  
|-------------------|------------------|  
|`Root`|型に関係なくすべてのノードを書き出します。 つまり、ライターが使用する、 <xref:System.Xml.XPath.XPathNavigator> し \(処理命令、コメントなどの属性を含む\) のルート ノードからすべてのノードを書き込みます|  
|`Element`|要素ノードと任意の属性ノードを書き出します。|  
|`Attribute`|何も実行しません。 代わりに、<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> タグまたは <xref:System.Xml.XmlWriter.WriteAttributeString%2A> タグを使用してください。|  
|`Text`|テキスト ノードを書き出します。|  
|`Namespace`|何も実行しません。 使用して、 <xref:System.Xml.XmlWriter.WriteStartAttribute%2A> または <xref:System.Xml.XmlWriter.WriteAttributeString%2A> 名前空間宣言を書き込みます。|  
|`ProcessingInstruction`|処理命令ノードを書き出します。|  
|`Comment`|コメント ノードを書き出します。|  
|`SignificantWhitespace`|有意の空白ノードを書き出します。|  
|`Whitespace`|空白ノードを書き出します。|  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteNodeAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlWriter.WriteNode%2A> メソッドは最初の book ノードをドキュメントからコピーをコンソールに書き込みます。  
  
 [!code-csharp[XmlWriteNode\_nav\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriteNode_nav/CS/XmlWriteNode_nav.cs#1)]
 [!code-vb[XmlWriteNode\_nav\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriteNode_nav/VB/XmlWriteNode_nav.vb#1)]  
  
 この例では、入力として books.xml ファイルを使用します。  
  
 [!code-xml[XPathXMLExamples\#1](~/samples/snippets/xml/VS_Snippets_Data/XPathXMLExamples/XML/books.xml#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="navigator" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteNodeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
        <summary>ソース オブジェクトから現在のライターのインスタンスにすべてを非同期にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteNode%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XmlReader reader, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XmlReader reader, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XmlReader,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">読み取り元の <see cref="T:System.Xml.XmlReader" />。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーする、 <see langword="XmlReader" />。 そうしないと、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされると、リーダーのデータをすべてライターに非同期にコピーし、リーダーを次の兄弟の開始位置に移動します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteNode" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteNode%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNodeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteNodeAsync (System.Xml.XPath.XPathNavigator navigator, bool defattr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteNodeAsync(class System.Xml.XPath.XPathNavigator navigator, bool defattr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteNodeAsync(System.Xml.XPath.XPathNavigator,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteNodeAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="navigator" Type="System.Xml.XPath.XPathNavigator" />
        <Parameter Name="defattr" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="navigator">コピー元の <see cref="T:System.Xml.XPath.XPathNavigator" />。</param>
        <param name="defattr">
          <see langword="true" /> 既定の属性をコピーするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>すべてを非同期的にコピー、 <see cref="T:System.Xml.XPath.XPathNavigator" /> オブジェクト ライターに出力します。 位置、 <see cref="T:System.Xml.XPath.XPathNavigator" /> は変更されません。</summary>
        <returns>タスクを表す非同期 <see langword="WriteNode" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteNode%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public abstract void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">処理命令の名前。</param>
        <param name="text">処理命令に含めるテキスト。</param>
        <summary>派生クラスでオーバーライドされた場合に次のように名前とテキスト間に空白が入った処理命令を書き込みます: &lt;? テキストという名前を? &gt;。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、XML 宣言を書き込むために使用できます \(なく <xref:System.Xml.XmlWriter.WriteStartDocument%2A>\)。 これは、結果、されて正しく記述されていないエンコーディング属性です。 たとえば、次の c\# コードになります、無効な XML ドキュメント既定のエンコーディングは utf\-8 のため。  
  
```  
XmlWriter writer = XmlWriter.Create("output.xml");  
writer.WriteProcessingInstruction("xml", "version='1.0' encoding='UTF-16'");  
writer.WriteStartElement("root");  
writer.Close();  
```  
  
 場合 `text` か `null` または `String.Empty`, を書き込む、 `ProcessingInstruction` 例については、コンテンツ データのない \< でしょうか。 名ですか? \>。  
  
 テキストに無効なシーケンスが含まれている場合"? \>"、 <xref:System.Xml.XmlWriter> か throw ことができます、 <xref:System.ArgumentException> \(<xref:System.Xml.XmlTextWriter> オブジェクト\) にスペースを挿入または"でしょうか。 \>"無効な XML が書き込まれないように \(<xref:System.Xml.XmlWriter> によって作成されたオブジェクト、 <xref:System.Xml.XmlWriter.Create%2A> メソッド\)。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteProcessingInstructionAsync%2A>です。  
  
   
  
## 例  
 次の例では、本を表す XML ファイルを書き込みます。  
  
 [!code-csharp[XmlWriter.WriteStartDocument\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteStartDocument/CS/writerbook_v2.cs#1)]
 [!code-vb[XmlWriter.WriteStartDocument\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteStartDocument/VB/writerbook_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">テキストは、非整形式の XML ドキュメントになります。  
  
 <paramref name="name" /> いずれかが <see langword="null" /> または <see langword="String.Empty" />です。  
  
 後に、XML 宣言を作成するこの方法が使用される <see cref="M:System.Xml.XmlWriter.WriteStartDocument" /> は既に呼び出されています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstructionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteProcessingInstructionAsync (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteProcessingInstructionAsync(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteProcessingInstructionAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">処理命令の名前。</param>
        <param name="text">処理命令に含めるテキスト。</param>
        <summary>非同期に次のように名前とテキスト間に空白が入った処理命令を書き込みます: &lt;? テキストという名前ですか? &gt;。</summary>
        <returns>タスクを表す非同期 <see langword="WriteProcessingInstruction" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public virtual void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">書き込むローカル名。</param>
        <param name="ns">名前の名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされると、名前空間の限定名を書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `ns` 現在既定の名前空間、プレフィックスなしのマップを生成します。  
  
 属性値を書き込むときにこのメソッドを生成、プレフィックス `ns` が見つかりません。 要素の内容を記述する場合に例外をスロー `ns` が見つかりません。  
  
> [!NOTE]
>  派生したクラスの場合、 <xref:System.Xml.XmlWriter> このメソッドをオーバーライドしない `localName` 有効 W3C XML 名にするのにはチェックされません。 このような場合も、このメソッドを呼び出す前に、文字列の有効性を確認する <xref:System.Xml.XmlReader.IsName%2A> メソッドです。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteQualifiedNameAsync%2A>です。  
  
   
  
## 例  
 例では、次の要素を書き込みます。  
  
```  
<root xmlns:x="urn:abc">  
  <item href="#x:test"/>  
</root>  
```  
  
 [!code-csharp[XmlWriter\_v2\#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#5)]
 [!code-vb[XmlWriter\_v2\#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="localName" /> いずれかが <see langword="null" /> または <see langword="String.Empty" />です。  
  
 <paramref name="localName" /> 有効な名前ではありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteQualifiedNameAsync (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteQualifiedNameAsync(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteQualifiedNameAsync(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlWriter/&lt;WriteQualifiedNameAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">書き込むローカル名。</param>
        <param name="ns">名前の名前空間 URI。</param>
        <summary>名前空間の修飾名を非同期に書き込みます。 このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</summary>
        <returns>タスクを表す非同期 <see langword="WriteQualifiedName" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、生のマークアップを手動で書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteRawAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">書き込むテキストを格納している文字列。</param>
        <summary>派生クラスでオーバーライドされると、手動で文字列から生のマークアップを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、特殊文字をエスケープしません。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlWriter> に渡されるデータを検証できません、 <xref:System.Xml.XmlWriter.WriteRaw%2A> メソッドです。 このメソッドに、任意のデータを渡さないでください。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteRawAsync%2A>です。  
  
   
  
## 例  
 参照してください <xref:System.Xml.XmlTextWriter.WriteRaw%2A?displayProperty=fullName> 、たとえば、このメソッドを使用しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="data" /> いずれかが <see langword="null" /> または <see langword="String.Empty" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public abstract void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">書き込むテキストを格納している文字配列。</param>
        <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>派生クラスでオーバーライドされると、手動で文字バッファーから生のマークアップを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、特殊文字をエスケープしません。  
  
> [!IMPORTANT]
>  [WriteRaw メソッド \(Char\<xref:System.Xml.XmlWriter> に渡されるデータを検証できません、 [WriteRaw メソッド \(Char\<xref:System.Xml.XmlWriter.WriteRaw%2A> メソッドです。 このメソッドに、任意のデータを渡さないでください。  
  
 このメソッドの非同期バージョンは、 [WriteRaw メソッド \(Char\<xref:System.Xml.XmlWriter.WriteRawAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRawAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
        <summary>生のマークアップを非同期に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteRaw%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">書き込むテキストを格納している文字列。</param>
        <summary>文字列から手動で生のマークアップを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteRaw" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteRaw%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteRawAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteRawAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteRawAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteRawAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">書き込むテキストを格納している文字配列。</param>
        <param name="index">書き込むテキストの開始を示すバッファー内の位置。</param>
        <param name="count">書き込む文字数。</param>
        <summary>文字バッファーから手動で生のマークアップを非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteRaw" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [WriteRawAsync メソッド \(Char\<xref:System.Xml.XmlWriter.WriteRaw%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [WriteRawAsync メソッド \(Char\<xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、属性の開始を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <summary>指定されたローカル名を使用して属性の開始を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、複数の書き込みメソッドを使用して値を記述することができます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public void WriteStartAttribute (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartAttribute(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <summary>指定されたローカル名および名前空間 URI を使用して属性の開始を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これはより高度なバージョンの <xref:System.Xml.XmlWriter.WriteAttributeString%2A> などの複数の書き込みメソッドを使用して属性値を記述することができる <xref:System.Xml.XmlWriter.WriteString%2A>, 、<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>, 、という具合です。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>です。  
  
   
  
## 例  
 参照してください <xref:System.Xml.XmlTextWriter.WriteStartAttribute%2A?displayProperty=fullName> 、たとえば、このメソッドを使用しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public abstract void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">属性の名前空間プレフィックス。</param>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされると、指定されたプリフィックス、ローカル名、および名前空間 URI を使用して属性の開始を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドでは、複数の書き込みメソッドを使用して値を記述することができます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartAttributeAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttributeAsync">
      <MemberSignature Language="C#" Value="protected virtual System.Threading.Tasks.Task WriteStartAttributeAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartAttributeAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartAttributeAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">属性の名前空間プレフィックス。</param>
        <param name="localName">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <summary>指定されたプレフィックス、ローカル名、および名前空間 URI を使用して属性の開始を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteStartAttribute" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteStartAttribute%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、XML 宣言を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドキュメントのエンコーディングのレベルは、ライターの実装方法によって決まります。 などの場合、 <xref:System.Text.Encoding> でオブジェクトが指定された、 `XmlTextWriter` コンス トラクター、エンコーディング属性の値を指定します。 このメソッドでは、スタンドアロン属性は作成されません。  
  
 `WriteStartDocument` と呼ばれる、ライターでは、作成するが、整形式 XML ドキュメントであることを検証します。 たとえば、XML 宣言が最初のノードか、ルート レベルの 1 つだけの要素が存在し、具合を確認します。 このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベルの規則が適用されないと想定しています。  
  
 場合 `WriteStartDocument` が呼び出されたし、 <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> メソッドの使用を別の XML 宣言を作成、例外がスローされます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public abstract void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocument(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">場合 <see langword="true" />, を書き込みます"スタンドアロン \= \[はい\]"場合 <see langword="false" />, 、書き込む"スタンドアロン \= no"です。</param>
        <summary>派生クラスでオーバーライドされると、バージョン "1.0" の XML 宣言とスタンドアロン属性を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドキュメントのエンコーディングのレベルは、ライターの実装方法によって決まります。 などの場合、 <xref:System.Text.Encoding> でオブジェクトが指定された、 `XmlTextWriter` コンス トラクター、エンコーディング属性の値を指定します。  
  
 `WriteStartDocument` が呼び出されると、ライターことを検証記述するウェルフォームド XML ドキュメントです。 たとえば、XML 宣言が最初のノードか、ルート レベルの 1 つだけの要素が存在し、具合を確認します。 このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベルの規則が適用されないと想定しています。  
  
 場合 `WriteStartDocument` が呼び出されたし、 <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> メソッドの使用を別の XML 宣言を作成、例外がスローされます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartDocumentAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocumentAsync">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
        <summary>XML 宣言を非同期的に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バージョン "1.0" で XML 宣言を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteStartDocument" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartDocumentAsync (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartDocumentAsync(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartDocumentAsync(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">場合 <see langword="true" />, を書き込みます"スタンドアロン \= \[はい\]"場合 <see langword="false" />, 、書き込む"スタンドアロン \= no"です。</param>
        <summary>バージョン "1.0" とスタントアロン属性を使用して XML 宣言を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteStartDocument" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteStartDocument%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <summary>派生クラスでオーバーライドされると、指定したローカル名の開始タグを書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>です。  
  
   
  
## 例  
 次の例では、XML ノードを書き込みます。  
  
 [!code-cpp[XmlWriter.Close\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public void WriteStartElement (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteStartElement(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素に関連付ける名前空間 URI。 この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</param>
        <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間に関連付けます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、コンテンツの属性の記述するか、作成は、このメソッドを呼び出した後 <xref:System.Xml.XmlWriter.WriteComment%2A>, 、<xref:System.Xml.XmlWriter.WriteString%2A>, 、または `WriteStartElement` の子要素です。 いずれかを持つ要素を閉じることができます <xref:System.Xml.XmlWriter.WriteEndElement%2A> または <xref:System.Xml.XmlWriter.WriteFullEndElement%2A>です。 たとえば、次の c\# コード。  
  
```  
writer.WriteStartElement("item",null);  
writer.WriteString("some text");  
writer.WriteEndElement();  
```  
  
 次の出力が生成されます。  
  
```  
<item>some text</item>  
```  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public abstract void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">要素の名前空間プリフィックス。</param>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素に関連付ける名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされると、指定した開始タグを書き込み、指定した名前空間とプリフィックスに関連付けます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStartElementAsync%2A>です。  
  
   
  
## 例  
 次の例は、XML フラグメントを書き込みます。  
  
 [!code-cpp[XmlWriter.WriteElementString\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteElementString/CPP/writeelemstring_v2.cpp#1)]
 [!code-csharp[XmlWriter.WriteElementString\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteElementString/CS/writeelemstring_v2.cs#1)]
 [!code-vb[XmlWriter.WriteElementString\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteElementString/VB/writeelemstring_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">有効な XML 文字では、出力をエンコードするため無効ですが、バッファー内の文字があります。 たとえば、出力エンコーディングが ASCII の場合は、0 ~ 127 の範囲から文字を要素と属性名に使用する必要がありますだけします。 このメソッドの引数またはバッファーを書き込んでいた以前のメソッドの引数は無効な文字があります。 文字エン ティティ参照可能な場合 \(たとえば、テキスト ノードまたは属性値\) 内でこのような文字がエスケープされます。 ただし、文字エン ティティ参照は、要素と属性名、コメント、処理命令、または CDATA セクションでは許可されません。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElementAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStartElementAsync (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStartElementAsync(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStartElementAsync(System.String,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">要素の名前空間プリフィックス。</param>
        <param name="localName">要素のローカル名。</param>
        <param name="ns">要素に関連付ける名前空間 URI。</param>
        <summary>指定した開始タグを非同期に書き込み、指定した名前空間とプレフィックスに関連付けます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteStartElement" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteStartElement%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、ライターの状態を取得します。</summary>
        <value>
          <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public abstract void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">書き込むテキスト。</param>
        <summary>派生クラスでオーバーライドされると、指定したテキスト内容を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `WriteString` では次の処理が行われます。  
  
-   文字 `&`, 、`<`, 、および `>` に置き換えられます `&amp;`, 、`&lt;`, 、および `&gt;`, 、それぞれします。  
  
-   既定の動作、 <xref:System.Xml.XmlWriter> を使用して作成 <xref:System.Xml.XmlWriter.Create%2A> をスローする、 <xref:System.ArgumentException> 範囲 0 x\-0x1F \(除外の空白文字 0x9、0 xa、および 0 xd\) で文字の値を書き込もうとするとします。 作成することで無効な XML 文字を書き込むことが、 <xref:System.Xml.XmlWriter> で、 <xref:System.Xml.XmlWriterSettings.CheckCharacters%2A> プロパティに設定 `false`します。 これを行う数値文字エン ティティに置き換えられる文字は発生 \(&番号 0; から \(& a\) \#0x1F\)。 さらに、 <xref:System.Xml.XmlTextWriter> で作成された、 `new` 演算子は、数値文字エン ティティに無効な文字を既定では置き換えられます。  
  
 **注** マイクロソフトが無効な文字を処理する XML を使用する多くのアプリケーションが設計されていませんので、無効な XML 文字を書き込む方法をお勧めします。  
  
-   場合 `WriteString` と呼ばれる属性値のコンテキストでは、二重と単一引用符に置き換えられます `&quot;` と `&apos;` それぞれします。  
  
 たとえば、この文字列を入力 `test<item>test` として書き出され  
  
```  
test&lt;item&gt;test  
```  
  
 場合 `text` か `null` または `String.Empty`, 、このメソッドは、データ内容のないテキスト ノードを書き込みます。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A>です。  
  
   
  
## 例  
 次の例では、XML ノードを書き込みます。  
  
 [!code-cpp[XmlWriter.Close\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.Close/CPP/XmlWriter.Close.cpp#1)]
 [!code-csharp[XmlWriter.Close\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.Close/CS/writeelems.cs#1)]
 [!code-vb[XmlWriter.Close\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.Close/VB/writeelems.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">テキスト文字列には、無効なサロゲート ペアが含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteStringAsync (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteStringAsync(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteStringAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">書き込むテキスト。</param>
        <summary>指定したテキストの内容を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteString" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteString%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public abstract void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
        <param name="highChar">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
        <summary>派生クラスでオーバーライドされると、サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、utf\-16 エンコードを使用するシステムに該当するだけです。  
  
 16 進形式では、サロゲート文字エンティティが書き込まれます。 サロゲート文字の範囲は、\#x10ffff \#x10 10000 です。 サロゲート文字エンティティを生成する次の式を使用します \(`highChar` \-0xD800\) \* 0x400 \+ \(`lowChar` \-0xDC00\) \+ 0x10000。  
  
 HTML と XML の両方でドキュメントの文字セット \(および、したがって数字参照の表記法\) は UCS \[ISO 10646\] に基づいています。 ソース ドキュメント内の 1 つの数字参照可能性がありますので場合によってに対応 \(上位サロゲートと下位サロゲート\)、文字列内の 2 つの 16 ビット単位です。 これらの 16 ビット単位は、サロゲート ペアと呼ばれます。  
  
 詳細については関連のサロゲートまたは文字」を参照して 3.7 http:\/\/www.w3.org\/TR\/REC\-xml\#charsets ある 3.0 と Unicode 2.0 標準 http:\/\/www.unicode.org、または、w3c 勧告 『 XML 1.0 勧告のセクション 2.2 にある Unicode のです。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効なサロゲート文字ペアが渡されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteSurrogateCharEntityAsync (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteSurrogateCharEntityAsync(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteSurrogateCharEntityAsync(System.Char,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">下位サロゲート。 この値は、0xDC00 から 0xDFFF の範囲内にある必要があります。</param>
        <param name="highChar">上位サロゲート。 この値は、0xD800 から 0xDBFF の範囲内にある必要があります。</param>
        <summary>サロゲート文字ペアのサロゲート文字エンティティを非同期に生成して書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteSurrogateCharEntity" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteSurrogateCharEntity%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteValue">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>単一の単純型の値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドは、共通言語ランタイム \(CLR\) 単純型の値を受け取り、XML スキーマ定義言語 \(XSD\) データ型の変換の規則に従ってその文字列表現に変換しを使用してアウト出力に、 <xref:System.Xml.XmlWriter.WriteString%2A> メソッドです。 これにより、パイプラインの単純な型の値の間でデータを渡す場合は、最小限に抑える省くをオーバーヘッドと <xref:System.Xml.XPath.XPathDocument>, 、<xref:System.Xml.XmlReader>, 、および <xref:System.Xml.XmlWriter> オブジェクトです。 この機能は、CLR の単純型を処理する場合にも役立ちますと <xref:System.Xml.XmlWriter> インスタンス。 呼び出すことができます、 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッド内のメソッドを使用する代わりに型指定された値を <xref:System.Xml.XmlConvert> 記述する前に、型指定されたデータを文字列値に変換するクラス。  
  
 非同期操作の戻り値に変換 <xref:System.Xml.XmlWriter.WriteValue%2A> 文字列を使用して、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
 次の表は、既定の CLR 型に対応する XSD データ型を示します。  
  
 CLR オブジェクトが <xref:System.Collections.IEnumerable>、<xref:System.Collections.IList>、<xref:System.Collections.ICollection> などのリスト型の場合は、値型の配列として扱われます。  
  
|CLR 型|既定の XSD データ型|  
|-----------|------------------|  
|<xref:System.Boolean?displayProperty=fullName>|xsd:boolean|  
|<xref:System.Byte?displayProperty=fullName>\*\*|xsd:integer|  
|<xref:System.Byte?displayProperty=fullName> 配列|xsd:base64Binary|  
|<xref:System.Char?displayProperty=fullName>\*\*|xsd:string|  
|<xref:System.DateTime?displayProperty=fullName>|xsd:dateTime|  
|<xref:System.Decimal?displayProperty=fullName>|xsd:decimal|  
|<xref:System.Double?displayProperty=fullName>|xsd:double|  
|<xref:System.Int16?displayProperty=fullName>\*\*|xsd:integer|  
|<xref:System.Int32?displayProperty=fullName>|xsd:integer|  
|<xref:System.Int64?displayProperty=fullName>|xsd:integer|  
|<xref:System.Single?displayProperty=fullName>|xsd:float|  
|<xref:System.String?displayProperty=fullName>|xsd:string|  
|<xref:System.IO.TextReader?displayProperty=fullName>|xsd:string|  
|<xref:System.IO.BinaryReader?displayProperty=fullName>|xsd:base64Binary|  
  
 \*\* これらの型は CLS 準拠ではありません。 対応がない <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドです。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.Boolean" /> 値。</param>
        <summary>
          <see cref="T:System.Boolean" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTime value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTime value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.DateTime" /> 値。</param>
        <summary>
          <see cref="T:System.DateTime" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、型指定されたデータを使用して book ノードを書き込みます。  
  
 [!code-csharp[XmlWriter\_v2\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter\_v2\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (DateTimeOffset value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.DateTimeOffset value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.DateTimeOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.DateTimeOffset" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.DateTimeOffset" /> 値。</param>
        <summary>
          <see cref="T:System.DateTimeOffset" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (decimal value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(valuetype System.Decimal value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Decimal)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.Decimal" /> 値。</param>
        <summary>
          <see cref="T:System.Decimal" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Double)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.Double" /> 値。</param>
        <summary>
          <see cref="T:System.Double" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、型指定されたデータを使用して book ノードを書き込みます。  
  
 [!code-csharp[XmlWriter\_v2\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter_v2/CS/writer_v2.cs#1)]
 [!code-vb[XmlWriter\_v2\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter_v2/VB/writer_v2.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.Int32" /> 値。</param>
        <summary>
          <see cref="T:System.Int32" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.Int64" /> 値。</param>
        <summary>
          <see cref="T:System.Int64" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">書き込むオブジェクト値。  
  
 **注** このメソッドでは、.NET Framework 3.5 のリリースで <see cref="T:System.DateTimeOffset" /> をパラメーターとして。</param>
        <summary>オブジェクト値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム \(CLR\) オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 CLR オブジェクトがリスト型のかどうかなど、 <xref:System.Collections.IEnumerable>, 、<xref:System.Collections.IList>, 、または <xref:System.Collections.ICollection>, 、値型の配列として扱われます。<xref:System.Xml.XmlWriter> 値を XML スキーマ \(XSD\) データ型に従った場合は、その文字列表現の規則し、変換を使用して書き出します、 <xref:System.Xml.XmlWriter.WriteString%2A> メソッドです。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.Single)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">書き込む単精度浮動小数点数。</param>
        <summary>単精度浮動小数点数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> メソッドが呼び出されると、<xref:System.Xml.XmlWriter> が、XML スキーマ \(XSD\) のデータ型変換規則に従って値をその文字列表現に変換し、<xref:System.Xml.XmlWriter.WriteString%2A> メソッドを使用して書き出します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 非同期操作は、このメソッドの戻り値を文字列に変換し、使用、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public virtual void WriteValue (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteValue(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteValue(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">書き込む <see cref="T:System.String" /> 値。</param>
        <summary>
          <see cref="T:System.String" /> 値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、共通言語ランタイム オブジェクトを受け取り、入力値を XML スキーマ定義言語 \(XSD\) データ型変換規則を使用して、目的の出力の型に変換します。  
  
 <xref:System.Xml.XmlWriter.WriteValue%2A> を複数回連続して呼び出す場合、値をスペースで区切りません。 スペースを挿入するには、複数回の <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 呼び出しの間に <xref:System.Xml.XmlWriter.WriteValue%2A> を呼び出す必要があります。 配列型を渡す、 <xref:System.Xml.XmlWriter.WriteValue%28System.Object%29?displayProperty=fullName> のオーバー ロードを個別の値の配列を書き込みます。  
  
 このメソッドが呼び出された場合、 <xref:System.Xml.XmlWriter> テキスト専用にする、型指定された値がテキストにシリアル化は、その出力をインスタンス化します。  
  
 また、非同期操作を使用して、 <xref:System.Xml.XmlWriter.WriteStringAsync%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">無効な値が指定されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public abstract void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespace(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">空白文字の文字列。</param>
        <summary>派生クラスでオーバーライドされると、指定した空白を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ドキュメントの書式を手動で設定を使用します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlWriter.WriteWhitespaceAsync%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">文字列には、空白文字以外の文字が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespaceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task WriteWhitespaceAsync (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task WriteWhitespaceAsync(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriter.WriteWhitespaceAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">空白文字の文字列。</param>
        <summary>指定した空白を非同期に書き込みます。</summary>
        <returns>タスクを表す非同期 <see langword="WriteWhitespace" /> 操作します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlWriter.WriteWhitespace%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlWriterSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlWriterSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlWriterSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、取得、現在 <see langword="xml:lang" /> スコープ。</summary>
        <value>現在の <see langword="xml:lang" /> スコープ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、別のコンポーネントが設定したライターの状態を確認する 1 つのコンポーネントを使用します。 たとえば、おそらく 1 つのコンポーネントが別のヘルプ テキストを生成する言語を確認します。 言語に関する情報が書き込むことによって伝え、 `xml:lang` 属性です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、 <see cref="T:System.Xml.XmlSpace" /> 現在を表す <see langword="xml:space" /> スコープ。</summary>
        <value>
          <see langword="XmlSpace" /> 現在を表す <see langword="xml:space" /> スコープ。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 説明  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="None" />  
  
 </term>  
<description> これがない場合の既定 <see langword="xml:space" /> スコープが存在しません。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Default" />  
  
 </term>  
<description> 現在のスコープは <see langword="xml:space" />\="default"です。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Preserve" />  
  
 </term>  
<description> 現在のスコープは <see langword="xml:space" />\="preserve"です。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これにより、1 つのコンポーネントが別のコンポーネントが設定したライターの状態を確認できます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlWriter" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>
          <see cref="T:System.Xml.XmlWriter" /> クラスによって使用されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>