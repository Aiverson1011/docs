<Type Name="XmlSecureResolver" FullName="System.Xml.XmlSecureResolver">
  <TypeSignature Language="C#" Value="public class XmlSecureResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlSecureResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlSecureResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.Xml.XmlResolver" /> オブジェクトをラップし、基になっている <see cref="T:System.Xml.XmlResolver" /> がアクセスできるリソースを制限することによって、<see cref="T:System.Xml.XmlResolver" /> の別の実装のセキュリティ保護を支援します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlUrlResolver> クラスは、<xref:System.Xml> 名前空間内のクラスすべての既定のリゾルバーです。 XML ドキュメントを読み込むと、エンティティ、Dtd またはスキーマなどの外部リソースを解決するには、import または include ディレクティブに使用されます。  
  
 この既定の設定をオーバーライドするには指定することによって、 <xref:System.Xml.XmlResolver> を使用するオブジェクト。 リソースを制限する場合などを基になる <xref:System.Xml.XmlResolver> 使用すると、アクセスできる、 <xref:System.Xml.XmlSecureResolver> オブジェクトです。  
  
 <xref:System.Xml.XmlSecureResolver> 具象実装をラップ <xref:System.Xml.XmlResolver> し、リソースを制限する、基になる <xref:System.Xml.XmlResolver> にアクセスします。 たとえば、 <xref:System.Xml.XmlSecureResolver> クロス ドメインのリダイレクトは、埋め込みの Uniform Resource Identifier \(URI\) の参照が行われるを禁止する機能が用意されています。  
  
 構築する場合、 <xref:System.Xml.XmlSecureResolver> オブジェクトを入力して、有効な <xref:System.Xml.XmlResolver> 実装 URL 証拠オブジェクト、または、アクセス許可セットのインスタンスで使用されると、 <xref:System.Xml.XmlSecureResolver> セキュリティを判別します。 いずれか、 <xref:System.Security.PermissionSet?displayProperty=fullName> が生成または既存の 1 つを使用し、 <xref:System.Security.PermissionSet.PermitOnly%2A?displayProperty=fullName> 、基になるセキュリティで保護するために呼び出されます <xref:System.Xml.XmlResolver>します。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlSecureResolver> オブジェクトはユーザー資格情報など、重要な情報を含むことがあります。 キャッシュする場合は注意する必要があります <xref:System.Xml.XmlSecureResolver> オブジェクトおよび渡さないでください、 <xref:System.Xml.XmlSecureResolver> 信頼できないコンポーネントにオブジェクトです。  
  
> [!IMPORTANT]
>  .NET Framework 共通言語ランタイム \(CLR\) で実行されているコードと Microsoft SQL Server 2005 に統合されている CLR で実行されているコード用のセキュリティ インフラストラクチャで違いがあります。 これは、SQL Server で使用すると、.NET Framework CLR 動作が異なるために開発されたコードが CLR を統合する場合につながります。 次のいずれかの違いに影響を与えます、 <xref:System.Xml.XmlSecureResolver> クラスは、URL に基づいて証拠がある場合 \(つまり、使用、 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%28System.String%29> メソッドまたは <xref:System.Xml.XmlSecureResolver.%23ctor%2A> コンス トラクター\)。 ポリシー メカニズムが SQL Server の CLR の統合の解像度が使用しない、 <xref:System.Security.Policy.Url> または <xref:System.Security.Policy.Zone> 情報。 代わりに、アセンブリが読み込まれるときに、サーバーが追加 GUID ベースのアクセス許可を付与します。 使用すると、 <xref:System.Xml.XmlSecureResolver> で SQL Server CLR を統合する、指定したを使用して直接必要な証拠を提供 <xref:System.Security.PermissionSet>します。  
  
## セキュリティで保護された競合回避モジュールを使用するには  
  
1.  正しいアクセス許可セットを持つ <xref:System.Xml.XmlSecureResolver> オブジェクトを作成します。  
  
2.  <xref:System.Xml.XmlReaderSettings> オブジェクトを使用する <xref:System.Xml.XmlSecureResolver> オブジェクトを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#5a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5a)]
     [!code-vb[XmlSecureResolver\_Samples\#5a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5a)]  
  
3.  渡す、 <xref:System.Xml.XmlReaderSettings> オブジェクトを <xref:System.Xml.XmlReader.Create%2A> メソッドを作成する際、 <xref:System.Xml.XmlReader> オブジェクトです。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#5b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#5b)]
     [!code-vb[XmlSecureResolver\_Samples\#5b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#5b)]  
  
## URL を使用してアクセスを制限するには  
 使用して、 <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> コンス トラクターを作成する、 <xref:System.Xml.XmlSecureResolver> のみ、ローカル イントラネット サイトへのアクセスが許可されているオブジェクト。  
  
 [!code-csharp[XmlSecureResolver\_Samples\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver\_Samples\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
## アクセス許可セットを使用してアクセスを制限するには  
  
1.  <xref:System.Net.WebPermission> オブジェクトを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#4a](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4a)]
     [!code-vb[XmlSecureResolver\_Samples\#4a](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4a)]  
  
2.  アクセスを許可する Url を指定します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#4b](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4b)]
     [!code-vb[XmlSecureResolver\_Samples\#4b](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4b)]  
  
3.  <xref:System.Security.PermissionSet> オブジェクトに Web アクセス許可を追加します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#4c](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4c)]
     [!code-vb[XmlSecureResolver\_Samples\#4c](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4c)]  
  
4.  使用して、 <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29> コンス トラクターを作成する、 <xref:System.Xml.XmlSecureResolver> オブジェクト権限のセットを使用しています。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#4d](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#4d)]
     [!code-vb[XmlSecureResolver\_Samples\#4d](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#4d)]  
  
     参照してください、 <xref:System.Xml.XmlSecureResolver.%23ctor%2A> のリファレンス ページの別の例です。  
  
## 証拠を使用してアクセスを制限するには  
 使用してアクセスを制限することができます、 <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> コンス トラクターと指定する <xref:System.Security.Policy.Evidence>です。 基になる <xref:System.Security.Policy.Evidence> に適用される <xref:System.Security.PermissionSet> の作成には、<xref:System.Xml.XmlResolver> を使用します。<xref:System.Xml.XmlSecureResolver> はリソースを開く前に、作成された <xref:System.Security.PermissionSet.PermitOnly%2A> の <xref:System.Security.PermissionSet> 呼び出します。  
  
 一般的なシナリオとそれぞれを指定する証拠の種類を次に示します。  
  
-   完全に信頼された環境で作業している場合は、アセンブリを使用して、エビデンスを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver\_Samples\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   部分的に信頼された環境で作業している場合は、コードや、外部ソースからのデータがあると、外部ソースの出所を知ってと検証可能な URI を持つ、URI を使用して、エビデンスを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver\_Samples\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   作業している場合は、コードや、外部ソースからデータを部分的に信頼された環境があるが、か、外部ソースの出所を特定できません。  
  
     `evidence` パラメーターを `null` に設定します。 これは、リソースへのアクセスを禁止します。  
  
     または  
  
     アプリケーションでリソースへのアクセスが必要な場合は、呼び出し元に証拠を要求します。  
  
## セキュリティで保護された競合回避モジュールを使用して、XSLT スタイル シートを読み込む  
  
1.  正しいアクセス許可セットを持つ <xref:System.Xml.XmlSecureResolver> オブジェクトを作成します。  
  
2.  <xref:System.Xml.XmlSecureResolver> を <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> メソッドに渡します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#6)]
     [!code-vb[XmlSecureResolver\_Samples\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#6)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>This class has an inheritance demand. Full trust is required to inherit from the <see cref="T:System.Xml.XmlSecureResolver" /> class.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlSecureResolver" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 3 つのコンス トラクターは、次の 3 つの種類のアクセス制限を提供します。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> コンス トラクターは、URL を使用してアクセスを制限します。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.PermissionSet%29> コンス トラクターは、アクセス許可セットを使用してアクセスを制限します。  
  
-   <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.Security.Policy.Evidence%29> コンス トラクターの証拠を使用してアクセスを制限します。  
  
 この種の制限の例については、コンス トラクター リファレンス トピックを参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.PermissionSet permissionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.PermissionSet permissionSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.PermissionSet)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="permissionSet" Type="System.Security.PermissionSet" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> によってラップされた XML リゾルバー。</param>
        <param name="permissionSet">基になっている <see cref="T:System.Xml.XmlResolver" /> に適用するアクセス許可セット。<see cref="T:System.Xml.XmlSecureResolver" /> は、基になっている XML リゾルバーで <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> メソッドを呼び出す前に、アクセス許可セットで <see cref="M:System.Security.PermissionSet.PermitOnly" /> メソッドを呼び出します。</param>
        <summary>
          <see cref="T:System.Xml.XmlResolver" /> と <see cref="T:System.Security.PermissionSet" /> を指定して、<see cref="T:System.Xml.XmlSecureResolver" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例を構築、 <xref:System.Xml.XmlSecureResolver> カスタマイズされたアクセス許可セットを使用してオブジェクトです。  
  
 [!code-cpp[XmlSecureResolver.cctor\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.cctor/CPP/secresolver.cpp#1)]
 [!code-csharp[XmlSecureResolver.cctor\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.cctor/CS/secresolver.cs#1)]
 [!code-vb[XmlSecureResolver.cctor\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.cctor/VB/secresolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
        <altmember cref="T:System.Security.Policy.Evidence" />
        <altmember cref="T:System.Net.WebPermission" />
        <altmember cref="T:System.Security.SecurityManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, System.Security.Policy.Evidence evidence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, class System.Security.Policy.Evidence evidence) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.Security.Policy.Evidence)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="evidence" Type="System.Security.Policy.Evidence" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> によってラップされた XML リゾルバー。</param>
        <param name="evidence">基になる <see cref="T:System.Xml.XmlResolver" /> に適用される <see cref="T:System.Security.PermissionSet" /> の作成に使用される証拠。<see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="T:System.Xml.XmlResolver" /> で <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> を呼び出す前に、作成された <see cref="T:System.Security.PermissionSet" /> で <see cref="M:System.Security.PermissionSet.PermitOnly" /> メソッドを呼び出します。</param>
        <summary>
          <see cref="T:System.Xml.XmlResolver" /> と <see cref="T:System.Security.Policy.Evidence" /> を指定して、<see cref="T:System.Xml.XmlSecureResolver" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 可能なシナリオおよびシナリオごとに指定する証拠の種類を次に示します。  
  
-   完全に信頼された環境で作業している場合は、アセンブリを使用して、エビデンスを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#1)]
     [!code-vb[XmlSecureResolver\_Samples\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#1)]  
  
-   部分的に信頼された環境で作業している場合は、コードや、外部ソースからのデータがあると、外部ソースの出所を知ってと検証可能な URI を持つ、URI を使用して、エビデンスを作成します。  
  
     [!code-csharp[XmlSecureResolver\_Samples\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#2)]
     [!code-vb[XmlSecureResolver\_Samples\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#2)]  
  
-   作業している場合は、コードや、外部ソースからデータを部分的に信頼された環境があるが、か、外部ソースの出所を特定できません。  
  
     `evidence` パラメーターを `null` に設定します。 これは、リソースへのアクセスを禁止します。  
  
     または  
  
     アプリケーションでリソースへのアクセスが必要な場合は、呼び出し元に証拠を要求します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlSecureResolver (System.Xml.XmlResolver resolver, string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver, string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.#ctor(System.Xml.XmlResolver,System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="resolver">
          <see cref="T:System.Xml.XmlSecureResolver" /> によってラップされた XML リゾルバー。</param>
        <param name="securityUrl">基になる <see cref="T:System.Xml.XmlResolver" /> に適用される <see cref="T:System.Security.PermissionSet" /> の作成に使用される URL。<see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="T:System.Xml.XmlResolver" /> で <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" /> を呼び出す前に、作成された <see cref="T:System.Security.PermissionSet" /> で <see cref="M:System.Security.PermissionSet.PermitOnly" /> を呼び出します。</param>
        <summary>
          <see cref="T:System.Xml.XmlResolver" /> と URL を指定して、<see cref="T:System.Xml.XmlSecureResolver" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  .NET Framework 共通言語ランタイム \(CLR\) で実行されているコードと Microsoft SQL Server 2005 に統合されている CLR で実行されているコード用のセキュリティ インフラストラクチャで違いがあります。 これは、SQL Server で使用すると、.NET Framework CLR 動作が異なるために開発されたコードが CLR を統合する場合につながります。 次のいずれかの違いに影響を与えます、 <xref:System.Xml.XmlSecureResolver> クラスは、URL に基づいて証拠がある場合 \(つまり、使用、 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A> メソッドまたは <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> コンス トラクター\)。 ポリシー メカニズムが SQL Server の CLR の統合の解像度が使用しない、 <xref:System.Security.Policy.Url> または <xref:System.Security.Policy.Zone> 情報。 代わりに、アセンブリが読み込まれるときに、サーバーが追加 GUID ベースのアクセス許可を付与します。 使用すると、 <xref:System.Xml.XmlSecureResolver> で SQL Server CLR を統合する、指定したを使用して直接必要な証拠を提供 <xref:System.Security.PermissionSet>します。  
  
   
  
## 例  
 この例では、 <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> コンス トラクターを作成する、 <xref:System.Xml.XmlSecureResolver> のみ、ローカル イントラネット サイトへのアクセスが許可されているオブジェクト。  
  
 [!code-csharp[XmlSecureResolver\_Samples\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver_Samples/CS/XmlSecureResolver_ex.cs#3)]
 [!code-vb[XmlSecureResolver\_Samples\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver_Samples/VB/XmlSecureResolver_ex.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEvidenceForUrl">
      <MemberSignature Language="C#" Value="public static System.Security.Policy.Evidence CreateEvidenceForUrl (string securityUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.Policy.Evidence CreateEvidenceForUrl(string securityUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.CreateEvidenceForUrl(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="securityUrl">証拠の作成に使用する URL。</param>
        <summary>指定した URL を使用して、エビデンスを作成します。</summary>
        <returns>指定された URL から生成された証拠。これは、既定のポリシーによって定義されています。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  .NET Framework 共通言語ランタイム \(CLR\) で実行されているコードと Microsoft SQL Server 2005 に統合されている CLR で実行されているコード用のセキュリティ インフラストラクチャで違いがあります。 これは、SQL Server で使用すると、.NET Framework CLR 動作が異なるために開発されたコードが CLR を統合する場合につながります。 次のいずれかの違いに影響を与えます、 <xref:System.Xml.XmlSecureResolver> クラスは、URL に基づいて証拠がある場合 \(つまり、使用、 <xref:System.Xml.XmlSecureResolver.CreateEvidenceForUrl%2A> メソッドまたは <xref:System.Xml.XmlSecureResolver.%23ctor%28System.Xml.XmlResolver%2CSystem.String%29> コンス トラクター\)。 ポリシー メカニズムが SQL Server の CLR の統合の解像度を使用しない、 <xref:System.Security.Policy.Url> または <xref:System.Security.Policy.Zone> 情報。 代わりに、アセンブリが読み込まれるときに、サーバーが追加 GUID ベースのアクセス許可を付与します。 使用すると、 <xref:System.Xml.XmlSecureResolver> で SQL Server CLR を統合する、指定したを使用して直接必要な証拠を提供 <xref:System.Security.PermissionSet>します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlSecureResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Web 要求を認証するために使用する資格情報を設定します。</summary>
        <value>Web 要求を認証するために使用する資格情報。<see cref="T:System.Xml.XmlSecureResolver" /> は、基になる <see cref="T:System.Xml.XmlResolver" /> で、指定した資格情報を設定します。 このプロパティが設定されていない場合、既定値は <see langword="null" /> です。つまり、<see cref="T:System.Xml.XmlSecureResolver" /> にはユーザーの資格情報がありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、 <xref:System.Xml.XmlSecureResolver> を解決し必要なネットワーク リソースを開く既定の資格情報を持つ、 <xref:System.Xml.XmlTextReader>です。  
  
 [!code-cpp[XmlSecureResolver.Credentials\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSecureResolver.Credentials/CPP/secresolver2.cpp#1)]
 [!code-csharp[XmlSecureResolver.Credentials\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSecureResolver.Credentials/CS/secresolver2.cs#1)]
 [!code-vb[XmlSecureResolver.Credentials\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSecureResolver.Credentials/VB/secresolver2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="P:System.Net.CredentialCache.DefaultCredentials" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">
          <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
        <param name="role">現在は使用されていません。</param>
        <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
        <summary>URI を実際のリソースを格納しているオブジェクトにマップします。 このメソッドは、基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出す前に <see cref="M:System.Security.PermissionSet.PermitOnly" /> を呼び出すことで、コンストラクターで作成された <see cref="T:System.Security.PermissionSet" /> を一時的に設定してリソースを開きます。</summary>
        <returns>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。<see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  アプリケーションをメモリ サービス拒否の脅威を軽減することができます、 <xref:System.Xml.XmlSecureResolver.GetEntity%2A> メソッドを実装することによって、 <xref:System.Runtime.InteropServices.ComTypes.IStream> 読み取ったバイト数を制限します。 これにより、悪意のあるコードが、無限のバイト ストリームを渡すしよう状況を防ぐ、 <xref:System.Xml.XmlSecureResolver.GetEntity%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> <see langword="null" /> も <see cref="T:System.IO.Stream" /> 型です。</exception>
        <exception cref="T:System.UriFormatException">指定された URI が絶対 URI ではありません。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="absoluteUri" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Exception">ランタイム エラー \(中断されたサーバー接続など\) があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">
          <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" /> から返された URI。</param>
        <param name="role">現在は使用されていません。</param>
        <param name="ofObjectToReturn">返すオブジェクトの型。 現在のバージョンだけが、<see cref="T:System.IO.Stream" /> オブジェクトを返します。</param>
        <summary>URI を実際のリソースを格納しているオブジェクトに非同期にマップします。</summary>
        <returns>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="GetEntity" /> を呼び出すことによって返されるストリーム。<see cref="T:System.IO.Stream" /> 以外の型が指定された場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">相対 URI の解決に使用するベース URI。</param>
        <param name="relativeUri">解決対象の URI。 URI は絶対 URI でも相対 URI でもかまいません。 絶対 URI の場合は、この値が <c>baseUri</c> 値を効率的に置き換えます。 相対 URI の場合、この値は <c>baseUri</c> と結合して絶対 URI を作成します。</param>
        <summary>基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出して、ベース URI と相対 URI から絶対 URI を解決します。</summary>
        <returns>絶対 URI。相対 URI を解決できない場合は <see langword="null" /> \(基になる <see cref="T:System.Xml.XmlResolver" /> で <see langword="ResolveUri" /> を呼び出すことによって返されます\)。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
  </Members>
</Type>