<Type Name="XmlReader" FullName="System.Xml.XmlReader">
  <TypeSignature Language="C#" Value="public abstract class XmlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReader" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{debuggerDisplayProxy}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 <xref:System.Xml.XmlReader> 文書またはストリームに XML データへの前方参照専用、読み取り専用のアクセスを提供します。 このクラスは、W3C に準拠している [Extensible Markup Language \(XML\) 1.0 \(fourth edition\)](http://www.w3.org/TR/2006/REC-xml-20060816/) と [Namespaces in XML 1.0 \(third edition\)](http://www.w3.org/TR/REC-xml-names/) の推奨事項です。  
  
 <xref:System.Xml.XmlReader>メソッドを使用して、XML データを移動し、ノードの内容を読み取ることができます。 クラスのプロパティは、これは、リーダーが配置されている現在のノードの値を反映します。 <xref:System.Xml.XmlReader.ReadState%2A> プロパティの値は、XML リーダーの現在の状態を示します。 プロパティを設定するなど、 <xref:System.Xml.ReadState.Initial> によって、 <xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName> メソッドと <xref:System.Xml.ReadState.Closed> によって、 <xref:System.Xml.XmlReader.Close%2A?displayProperty=fullName> メソッドです。<xref:System.Xml.XmlReader> データ一致チェックし、DTD またはスキーマに対する検証も提供します。  
  
 <xref:System.Xml.XmlReader>プル モデルを使用して、データを取得します。 このモデルでは:  
  
-   自然で、上から下の洗練された手続きによって状態管理を簡略化します。  
  
-   複数の入力ストリームと階層化をサポートしています。  
  
-   により、クライアントは、バッファーを提供する、パーサーは、文字列に直接書き込まれると、およびため文字列の余分なコピーの必要があります。  
  
-   選択的な処理をサポートします。 クライアントでは、項目をスキップでき、アプリケーションに関心のあるものを処理することができます。 \(たとえば、"正規化"\)、XML ストリームを処理する方法を管理するには、事前にプロパティを設定することもできます。  
  
 このセクションの内容:  
  
 [XML リーダーの作成](#xmlreader_create)   
 [XML データの検証](#xmlreader_validate)   
 [データの一致](#xmlreader_data)   
 [ノードを移動します。](#xmlreader_nodes)   
 [読み取る XML 要素](#xmlreader_elements)   
 [読み取る XML 属性](#xmlreader_attributes)   
 [読み取る XML コンテンツ](#xmlreader_content)   
 [CLR 型に変換します。](#xmlreader_clr)   
 [非同期プログラミング](#xmlreader_async)   
 [セキュリティの考慮事項](#xmlreader_security)  
  
<a name="xmlreader_create"></a>   
## XML リーダーの作成  
 使用して、 <xref:System.Xml.XmlReader.Create%2A> を作成する方法、 <xref:System.Xml.XmlReader>インスタンス。  
  
 .NET Framework の具体的な実装を提供しますが、 <xref:System.Xml.XmlReader> クラスなど、 <xref:System.Xml.XmlTextReader>, 、<xref:System.Xml.XmlNodeReader>, と <xref:System.Xml.XmlValidatingReader> クラス、お勧め特化されたクラスは、これらのシナリオでのみ使用すること。  
  
-   Readan XML DOM サブツリーをする場合、 <xref:System.Xml.XmlNode> オブジェクトを使用して、 <xref:System.Xml.XmlNodeReader> クラスです。 \(ただし、このクラスはサポート DTD またはスキーマの検証\)。  
  
-   要求のエンティティを展開する必要があります、たくない、テキスト コンテンツ正規化され、または既定の属性が返されるを使用しない場合、 <xref:System.Xml.XmlTextReader> クラスです。  
  
 XML リーダーに有効に機能のセットを指定するには、渡す、 <xref:System.Xml.XmlReaderSettings?displayProperty=fullName> オブジェクトを <xref:System.Xml.XmlReader.Create%2A> メソッドです。 1 つを使用する <xref:System.Xml.XmlReaderSettings?displayProperty=fullName> オブジェクトを同じ機能を持つ複数のリーダーを作成または変更、 <xref:System.Xml.XmlReaderSettings?displayProperty=fullName>さまざまな機能セットを新たにリーダーを作成するオブジェクト。 機能は、既存のリーダーにも簡単に追加できます。  
  
 使用しない場合、<xref:System.Xml.XmlReaderSettings?displayProperty=fullName>オブジェクトの既定の設定を使用します。 参照してください、 <xref:System.Xml.XmlReader.Create%2A> 詳細ページを参照します。  
  
 <xref:System.Xml.XmlReader> スローする <xref:System.Xml.XmlException> XML の解析エラーを検出します。 例外がスローされると、リーダーの状態は予測できません。 たとえば、報告されたノード型は、現在のノードの実際のノード型とは異なる場合があります。 使用して、 <xref:System.Xml.XmlReader.ReadState%2A> リーダーがエラー状態であるかどうかを確認するプロパティです。  
  
<a name="xmlreader_validate"></a>   
## XML データの検証  
 XML ドキュメントとその要素間のリレーションシップ、データ型、および内容の制約の構造を定義するには、ドキュメント型定義 \(DTD\) または XML スキーマ定義言語 \(XSD\) スキーマを使用します。 XML ドキュメントがによって定義されたすべての構文要件を満たしている場合は、適切な形式と見なされる、 [W3C XML 1.0 Recommendation](http://www.w3.org/TR/2006/REC-xml-20060816/)します。 整形式でも、DTD またはスキーマで定義されている制約に準拠している場合は有効になっています。 \(を参照してください、 [W3C XML Schema Part 1: Structures](http://www.w3.org/TR/xmlschema-1/) と [W3C XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema-2/)の推奨事項です\)。 したがって、有効な XML ドキュメントはすべて整形式ですが、整形式の XML ドキュメントがすべて有効であるとは限りません。  
  
 DTD では、インライン XSD スキーマに対してデータを検証するかに格納されている XSD スキーマ、 <xref:System.Xml.Schema.XmlSchemaSet> オブジェクト \(キャッシュ\)。 これらのシナリオを参照して、 <xref:System.Xml.XmlReader.Create%2A> リファレンス ページです。<xref:System.Xml.XmlReader> Xml\-data Reduced \(XDR\) スキーマ検証をサポートしていません。  
  
 次の設定を使用して、 <xref:System.Xml.XmlReaderSettings> クラスが存在する場合、検証の種類を指定、<xref:System.Xml.XmlReader> インスタンス化をサポートします。  
  
|これを使用して <xref:System.Xml.XmlReaderSettings> メンバー|指定する型|  
|--------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|  
|<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> プロパティ|DTD 処理を許可するかどうか。 既定では、DTD 処理は許可されません。|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> プロパティ|読者が、データを検証するかどうかと \(DTD またはスキーマ\) を実行する検証の種類。 既定では、データ検証は実行されません。|  
|<xref:System.Xml.XmlReaderSettings.ValidationEventHandler> イベント|検証イベントに関する情報を受信するためのイベント ハンドラー。 イベント ハンドラーが提供されていない場合は、最初の検証エラーに対して <xref:System.Xml.XmlException> がスローされます。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> プロパティ|追加の検証のオプションから、 <xref:System.Xml.Schema.XmlSchemaValidationFlags> 列挙型のメンバー。<br /><br /> -   `AllowXmlAttributes`\-XML 属性を許可する \(`xml:*`\) これらしているスキーマで定義されていない場合でも、インスタンス ドキュメントにします。 属性は、そのデータ型に基づいて検証されます。参照してください、 <xref:System.Xml.Schema.XmlSchemaValidationFlags> のリファレンス ページの特定のシナリオで使用する設定。 \(既定では無効です。\)<br />-   `ProcessIdentityConstraints` \-Id 制約を処理する \(`xs:ID`, 、`xs:IDREF`, 、`xs:key`, 、`xs:keyref`, 、`xs:unique`\) の検証中に発生します。 \(既定で有効になっている\)。<br />-   `ProcessSchemaLocation` \-\-で指定されたスキーマを処理する、 `xsi:schemaLocation` または `xsi:noNamespaceSchemaLocation` 属性です。 \(既定で有効になっている\)。<br />-   `ProcessInlineSchema`\-検証中にインライン XML スキーマを処理します。 \(既定では無効です。\)<br />-   `ReportValidationWarnings`\-検証の警告が発生した場合は、イベントを報告します。 警告は通常、特定の要素または属性を検証するための DTD または XML スキーマがない場合に発行されます。 通知には <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> が使用されます。 \(既定では無効です。\)|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|検証に使用する <xref:System.Xml.Schema.XmlSchemaSet>。|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> プロパティ|<xref:System.Xml.XmlResolver>を解決する外部のリソースにアクセスするためです。 DTD とスキーマ、およびそのいずれかなどの外部のエンティティを含むこの `xs:include` または `xs:import` XML スキーマに含まれる要素です。 指定しない場合、 <xref:System.Xml.XmlResolver>, 、 <xref:System.Xml.XmlReader> 、既定値を使用して <xref:System.Xml.XmlUrlResolver> をユーザーの資格情報なし。|  
  
<a name="xmlreader_data"></a>   
## データの一致  
 によって作成された XML リーダー、 <xref:System.Xml.XmlReader.Create%2A> methodmeet 既定では、次の準拠要件。  
  
-   新しい行および属性値が W3C に従って正規化された [XML 1.0 Recommendation](http://www.w3.org/TR/2006/REC-xml-20060816/)します。  
  
-   すべてのエンティティが自動的に展開します。  
  
-   ドキュメント型定義で宣言されている既定の属性は、リーダーを検証しない場合でも常に追加します。  
  
-   適切な XML 名前空間 URI に割り当てられた XML プレフィックスの宣言が許可されます。  
  
-   1 つの表記名 `NotationType` 属性宣言と`NmTokens` 1 つの `Enumeration` declarationare 個別の属性です。  
  
 これらを使用して <xref:System.Xml.XmlReaderSettings> を有効にする準拠の型をチェックするように指定するプロパティ。  
  
|これを使用して <xref:System.Xml.XmlReaderSettings> プロパティ|目的|既定|  
|---------------------------------------------------------------------------------------------------------------------------------------------------------|--------|--------|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A> プロパティ|有効または無効には、以下をチェックします。<br /><br /> -   定義されている文字が有効な XML 文字の範囲内では、 [2.2 Characters](http://www.w3.org/TR/2006/REC-xml-20060816/#charsets) w3c 勧告 『 XML 1.0 勧告のセクションです。<br />-   定義されているすべての XML 名が有効で、 [2.3 Common Syntactic Constructs](http://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) w3c 勧告 『 XML 1.0 勧告のセクションです。<br /><br /> このプロパティに設定すると `true` \(既定値\)、 <xref:System.Xml.XmlException> XML ファイルには、無効な文字または無効な XML 名が含まれている場合に例外がスローされます \(たとえば、要素名は、数字で始まる\)。|文字と名前の確認が有効にします。<br /><br /> 設定 <xref:System.Xml.XmlReaderSettings.CheckCharacters%2A> に `false` 文字エン ティティ参照に対する文字のチェックをオフにします。 リーダーがテキスト データを処理している場合は、常に XML 名ではこの設定に関係なく、有効なことを確認します。 **Note:**  XML 1.0 勧告では、DTD がある場合にはドキュメント レベルの一致が必要です。 そのため、リーダーがサポートするために構成されている場合 <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=fullName>, 、XML データには、ドキュメント型定義 \(DTD\) が含まれていますが、 <xref:System.Xml.XmlException> がスローされます。|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> プロパティ|適用する準拠のレベルを選択します。<br /><br /> -   <xref:System.Xml.ConformanceLevel.Document>。 規則に準拠している、 [well\-formed XML 1.0 document](http://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)します。<br />-   <xref:System.Xml.ConformanceLevel.Fragment>。 として使用できる整形式ドキュメント フラグメントの規則に準拠している、 [external parsed entity](http://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)します。<br />-   <xref:System.Xml.ConformanceLevel.Auto>。 リーダーによって決まりますレベルに準拠します。<br /><br /> データに準拠していない場合は、 <xref:System.Xml.XmlException> 例外がスローされます。|<xref:System.Xml.ConformanceLevel.Document>|  
  
<a name="xmlreader_nodes"></a>   
## ノードを移動します。  
 現在のノードは、XML リーダーが配置されている現在 XML ノードです。 すべて <xref:System.Xml.XmlReader>メソッドは、このノードおよびすべての相関関係の操作を実行 <xref:System.Xml.XmlReader>プロパティは、現在のノードの値を反映します。  
  
 次の方法では、ノード間を移動し、データの解析が発生しやすいようにします。  
  
|これを使用して <xref:System.Xml.XmlReaderSettings> メソッド|目的|  
|--------------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|<xref:System.Xml.XmlReader.Read%2A>|最初のノードを読み取るし、一度に 1 つのノードをストリームに進みます。 このような呼び出しが内で通常実行される、 `while` ループします。<br /><br /> 使用して、 <xref:System.Xml.XmlReader.NodeType%2A> 現在のノードの種類 \(たとえば、属性、コメント、要素、およびなど\) を取得するプロパティです。|  
|<xref:System.Xml.XmlReader.Skip%2A>|現在のノードの子をスキップし、次のノードに移動します。|  
|<xref:System.Xml.XmlReader.MoveToContent%2A> および <xref:System.Xml.XmlReader.MoveToContentAsync%2A>|非コンテンツ ノードをスキップし、次のコンテンツ ノードまたはファイルの末尾に移動します。<br /><br /> 非コンテンツ ノードが含まれて <xref:System.Xml.XmlNodeType.ProcessingInstruction>, 、<xref:System.Xml.XmlNodeType.DocumentType>, 、<xref:System.Xml.XmlNodeType.Comment>, 、<xref:System.Xml.XmlNodeType.Whitespace>, 、および <xref:System.Xml.XmlNodeType.SignificantWhitespace>です。<br /><br /> コンテンツ ノードには空白文字以外のテキスト、 <xref:System.Xml.XmlNodeType.CDATA>, 、<xref:System.Xml.XmlNodeType.EntityReference> , 、および<xref:System.Xml.XmlNodeType.EndEntity>です。|  
|<xref:System.Xml.XmlReader.ReadSubtree%2A>|要素とそのすべての子要素を読み取り、返す、新しい <xref:System.Xml.XmlReader> のインスタンスに設定 <xref:System.Xml.ReadState.Initial?displayProperty=fullName>します。<br /><br /> このメソッドは XML 要素の周囲に境界線を作成するために役立ちますたとえば、別のコンポーネントで処理するためにデータを渡すし、データの量を制限する場合、コンポーネントはアクセスできます。|  
  
 参照してください、 <xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName> テキスト ストリームの 1 つのノードを一度に移動すると、各ノードの型を表示する例についてはページを参照します。  
  
 以降のセクションでは、特定の種類の要素、属性などのデータを読み取る方法について説明し、型指定されたデータ。  
  
<a name="xmlreader_elements"></a>   
## 読み取る XML 要素  
 次の表は、メソッドとプロパティを <xref:System.Xml.XmlReader> 要素を処理するクラスを提供します。<xref:System.Xml.XmlReader> が 1 つの要素上に位置した後、<xref:System.Xml.XmlReader.Name%2A> などのノードのプロパティには要素の値が反映されます。 下に説明するメンバーに加えて、<xref:System.Xml.XmlReader> クラスの任意の一般メソッドとプロパティも要素の処理に使用できます。 たとえば、<xref:System.Xml.XmlReader.ReadInnerXml%2A> メソッドを使用して要素のコンテンツを読むことができます。  
  
> [!NOTE]
>  3.1 章を参照、 [W3C XML 1.0 Recommendation](http://www.w3.org/TR/2006/REC-xml-20060816/#sec-starttags) の開始タグの定義、タグ、および空要素タグを終了します。  
  
|これを使用して <xref:System.Xml.XmlReader> メンバー|目的|  
|------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|<xref:System.Xml.XmlReader.IsStartElement%2A> メソッド|かどうか、現在のノードは開始タグまたは空要素タグを確認してください。|  
|<xref:System.Xml.XmlReader.ReadStartElement%2A> メソッド|現在のノードが要素であることを確認し、リーダーを次のノードに進め \(呼び出し <xref:System.Xml.XmlReader.IsStartElement%2A> 続けて <xref:System.Xml.XmlReader.Read%2A>\)。|  
|<xref:System.Xml.XmlReader.ReadEndElement%2A> メソッド|現在のノードが終了タグであることを確認し、次のノードに、リーダーを進めます。|  
|<xref:System.Xml.XmlReader.ReadElementString%2A> メソッド|テキストのみの要素を読み取る。|  
|<xref:System.Xml.XmlReader.ReadToDescendant%2A> メソッド|指定の名前を持つ次の子孫 \(子\) 要素に XML リーダーを進めます。|  
|<xref:System.Xml.XmlReader.ReadToNextSibling%2A> メソッド|XML リーダーを指定の名前を持つ次の兄弟要素に進みます。|  
|<xref:System.Xml.XmlReader.IsEmptyElement%2A> プロパティ|現在の要素に終了要素タグを確認します。 例:<br /><br /> -   `<item num="123"/>` \(<xref:System.Xml.XmlReader.IsEmptyElement%2A> は `true`\)。<br />-   `<item num="123"> </item>` \(<xref:System.Xml.XmlReader.IsEmptyElement%2A> は `false`, 要素のコンテンツは空には\)。|  
  
 要素のテキストの内容を読み取り中の例は、次を参照してください。、 <xref:System.Xml.XmlReader.ReadString%2A> メソッドです。 次の例では、要素を処理を使用して、 `while` ループします。  
  
 [!code-csharp[XmlReaderBasic\#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic\#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
<a name="xmlreader_attributes"></a>   
## 読み取る XML 属性  
 XML 属性は、要素に最もよくあるが、XML 宣言やドキュメント型ノードにも許可されています。  
  
 要素ノードに配置されているときに、 <xref:System.Xml.XmlReader.MoveToAttribute%2A> メソッドを使用して、要素の属性リストを移動できます。 注意してください <xref:System.Xml.XmlReader.MoveToAttribute%2A> が呼び出されると、ノードのプロパティなど、 <xref:System.Xml.XmlReader.Name%2A>, 、<xref:System.Xml.XmlReader.NamespaceURI%2A>, 、および <xref:System.Xml.XmlReader.Prefix%2A> その属性のプロパティを反映して、対象は、要素、属性のプロパティではありません。  
  
 <xref:System.Xml.XmlReader> クラスには、これらのメソッドとプロパティを読み取って処理要素の属性が用意されています。  
  
|これを使用して <xref:System.Xml.XmlReader> メンバー|目的|  
|------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|<xref:System.Xml.XmlReader.HasAttributes%2A> プロパティ|現在のノードが属性を持っているかどうかを確認してください。|  
|<xref:System.Xml.XmlReader.AttributeCount%2A> プロパティ|現在の要素に属性の数を取得します。|  
|<xref:System.Xml.XmlReader.MoveToFirstAttribute%2A> メソッド|要素内の最初の属性に移動します。|  
|<xref:System.Xml.XmlReader.MoveToNextAttribute%2A> メソッド|要素の次の属性に移動します。|  
|<xref:System.Xml.XmlReader.MoveToAttribute%2A> メソッド|指定した属性に移動します。|  
|<xref:System.Xml.XmlReader.GetAttribute%2A> メソッドまたは <xref:System.Xml.XmlReader.Item%2A> プロパティ|指定した属性の値を取得します。|  
|<xref:System.Xml.XmlReader.IsDefault%2A> プロパティ|現在のノードが DTD またはスキーマで定義された既定値から生成された属性であるかどうかを確認します。|  
|<xref:System.Xml.XmlReader.MoveToElement%2A> メソッド|現在の属性を所有している要素に移動します。 このメソッドを使用して、その属性間を移動後に要素を返します。|  
|<xref:System.Xml.XmlReader.ReadAttributeValue%2A> メソッド|1 つまたは複数を属性値を解析 `Text`, 、`EntityReference`, 、または `EndEntity`ノードです。|  
  
 一般の <xref:System.Xml.XmlReader> のメソッドとプロパティもすべて属性の処理に使用できます。 たとえば、<xref:System.Xml.XmlReader> が属性上に位置した後、<xref:System.Xml.XmlReader.Name%2A> および <xref:System.Xml.XmlReader.Value%2A> のプロパティは、その属性の値を反映します。 コンテンツの `Read` メソッドも属性の値を取得するために使用できます。  
  
 この例では、 <xref:System.Xml.XmlReader.AttributeCount%2A> プロパティ要素のすべての属性間を移動します。  
  
 [!code-csharp[XmlReaderBasic\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 この例では、 <xref:System.Xml.XmlReader.MoveToNextAttribute%2A> メソッドで、 `while` ループを使用して、属性間を移動します。  
  
 [!code-csharp[XmlReaderBasic\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 **XML 宣言ノードの属性の読み取り**  
  
 XML リーダーが、XML 宣言ノードに配置されているときに、 <xref:System.Xml.XmlReader.Value%2A> プロパティは、バージョン、スタンドアロン、および 1 つの文字列としてエンコード情報を返します。<xref:System.Xml.XmlReader> によって作成されたオブジェクト、 <xref:System.Xml.XmlReader.Create%2A> 、メソッド、 <xref:System.Xml.XmlTextReader> クラス、および <xref:System.Xml.XmlValidatingReader>クラスは、バージョン、スタンドアロン、およびエンコーディング情報を属性として公開します。  
  
 **ドキュメント型ノードの属性の読み取り**  
  
 XML リーダーの位置は、ドキュメント型ノードにある場合、 <xref:System.Xml.XmlReader.GetAttribute%2A> メソッドと <xref:System.Xml.XmlReader.Item%2A> SYSTEM および PUBLIC リテラルの値を返すプロパティを使用できます。 たとえば、`reader.GetAttribute("PUBLIC")` は PUBLIC の値を返します。  
  
 **処理命令ノードの属性の読み取り**  
  
 <xref:System.Xml.XmlReader> が処理命令ノード上に位置しているとき、<xref:System.Xml.XmlReader.Value%2A> プロパティはテキストの内容全体を返します。 処理命令ノード内の項目は、属性として扱われます。 読み取れない、 <xref:System.Xml.XmlReader.GetAttribute%2A> または <xref:System.Xml.XmlReader.MoveToAttribute%2A> メソッドです。  
  
<a name="xmlreader_content"></a>   
## 読み取る XML コンテンツ  
 XMLReader クラスには、XML ファイルからコンテンツの読み取りし、文字列の値として内容を取得する次のメンバーが含まれています。 \(CLR 型を返すを参照してください、 [次のセクション](#xmlreader_clr).\)  
  
|これを使用して <xref:System.Xml.XmlReader> メンバー|目的|  
|------------------------------------------------------------------------------------------------------------------------------------------------|--------|  
|<xref:System.Xml.XmlReader.Value%2A> プロパティ|現在のノードのテキストの内容を取得します。 返される値は、ノードの種類によって異なります。参照してください、 <xref:System.Xml.XmlReader.Value%2A> 詳細ページを参照します。|  
|<xref:System.Xml.XmlReader.ReadString%2A> メソッド|要素またはテキスト ノードのコンテンツを文字列として取得します。 このメソッドは、処理命令とコメントを停止します。<br /><br /> このメソッドが特定のノード型を処理する方法の詳細については、「、 <xref:System.Xml.XmlReader.ReadString%2A> リファレンス ページです。|  
|<xref:System.Xml.XmlReader.ReadInnerXml%2A> メソッドおよび <xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A> メソッド|開始と終了タグを除く、マークアップを含む、現在のノードのすべてのコンテンツを取得します。 たとえば。<br /><br /> `<node>this<child id="123"/></node>`<br /><br /> <xref:System.Xml.XmlReader.ReadInnerXml%2A> 返します。<br /><br /> `this<child id="123"/>`|  
|<xref:System.Xml.XmlReader.ReadOuterXml%2A> メソッドおよび <xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A> メソッド|現在のノードとその子のマークアップと開始\/終了タグを含むすべてのコンテンツを取得します。 たとえば。<br /><br /> `<node>this<child id="123"/></node>`<br /><br /> <xref:System.Xml.XmlReader.ReadOuterXml%2A> 返します。<br /><br /> `<node>this<child id="123"/></node>`|  
  
<a name="xmlreader_clr"></a>   
## CLR 型に変換します。  
 メンバーを使用して、 <xref:System.Xml.XmlReader> クラス \(次の表に記載\) XML データを読み取り、文字列ではなくランタイム \(CLR\) 型の共通言語としての値を返します。 これらのメンバーでは、手動で解析または文字列の値に変換することがなく、コーディング作業に最適な表現で値を取得できます。  
  
-   **ReadElementContentAs** のメソッドは、要素ノード型でのみ呼び出すことができます。 これらのメソッドは、子要素または混合コンテンツを含む要素では使用できません。 呼ばれると、<xref:System.Xml.XmlReader> オブジェクトは開始タグと要素コンテンツと読み、その後、終了要素タグを越えて移動します。 処理命令とコメントは無視され、エンティティは展開されます。  
  
-   **ReadContentAs**メソッドは、現在のリーダーの位置でテキストの内容を読み取るし、スキーマやデータ型に、関連付けられている情報を XML データとして使用することがない場合は、テキストの内容を要求された戻り値の型に変換します。 テキスト、空白、有意の空白、および CDATA セクションは連結されます。 コメントおよび処理命令をスキップし、エンティティ参照は自動的に解決します。  
  
 <xref:System.Xml.XmlReader> クラスによって定義されたルールを使用して、 [W3C XML Schema Part 2: Datatypes](http://www.w3.org/TR/xmlschema-2/)推奨します。  
  
|これを使用して <xref:System.Xml.XmlReader>メソッド|この CLR 型を取得するには|  
|-----------------------------------------------------------------------------------------------------------------------------------------------|---------------------|  
|<xref:System.Xml.XmlReader.ReadContentAsBoolean%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsBoolean%2A>|<xref:System.Boolean>|  
|<xref:System.Xml.XmlReader.ReadContentAsDateTime%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A>|<xref:System.DateTime>|  
|<xref:System.Xml.XmlReader.ReadContentAsDouble%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsDouble%2A>|<xref:System.Double>|  
|<xref:System.Xml.XmlReader.ReadContentAsLong%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsLong%2A>|<xref:System.Int64>|  
|<xref:System.Xml.XmlReader.ReadContentAsInt%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsInt%2A>|<xref:System.Int32>|  
|<xref:System.Xml.XmlReader.ReadContentAsString%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsString%2A>|<xref:System.String>|  
|<xref:System.Xml.XmlReader.ReadContentAs%2A> および <xref:System.Xml.XmlReader.ReadElementContentAs%2A>|指定した種類の `returnType` パラメーター|  
|<xref:System.Xml.XmlReader.ReadContentAsObject%2A> および <xref:System.Xml.XmlReader.ReadElementContentAsObject%2A>|指定したとおり、最も適切な型、 <xref:System.Xml.XmlReader.ValueType%2A?displayProperty=fullName> プロパティです。 参照してください [Type Support in the System.Xml Classes](http://msdn.microsoft.com/ja-jp/63570538-06e3-4401-ad4d-ac50be90c7bf) 情報をマップします。|  
  
 要素は、その形式は CLR 型を簡単に変換できない場合、は、変換に成功したことを確認するスキーマ マッピングを使用することができます。 次の例では、.xsd ファイルを使用して、変換、 `hire-date` 要素を `xs:date` の種類、使用して、 <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A> として要素を返すメソッド、 <xref:System.DateTime> オブジェクトです。  
  
 **入力 \(hireDate.xml\):**  
  
 [!code-xml[XmlReader.ReadElementContentAs\#9](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xml#9)]  
  
 **スキーマ \(hireDate.xsd\):**  
  
 [!code-xml[XmlReader.ReadElementContentAs\#10](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/hireDate.xsd#10)]  
  
 **コードに示します。**  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#13)]
 [!code-vb[XmlReader.ReadElementContentAs\#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#13)]  
  
 **Output:**  
  
```  
Six Month Review Date:  7/8/2003 12:00:00 AM  
```  
  
<a name="xmlreader_async"></a>   
## 非同期プログラミング  
 ほとんどの <xref:System.Xml.XmlReader> メソッドをメソッド名の末尾に"Async"を持つ対応する非同期があります。 たとえば、非同期と同等の <xref:System.Xml.XmlReader.ReadContentAsObject%2A> は <xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A>です。  
  
 次のメソッドは、非同期メソッド呼び出しで使用できます。  
  
-   <xref:System.Xml.XmlReader.GetAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToFirstAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToNextAttribute%2A>  
  
-   <xref:System.Xml.XmlReader.MoveToElement%2A>  
  
-   <xref:System.Xml.XmlReader.ReadAttributeValue%2A>  
  
-   <xref:System.Xml.XmlReader.ReadSubtree%2A>  
  
-   <xref:System.Xml.XmlReader.ResolveEntity%2A>  
  
 次のセクションでは、対応する非同期がインストールされていないメソッドの非同期の使用状況について説明します。  
  
 **ReadStartElement メソッド**  
  
 [!code-csharp[System.Xml.XmlReader.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#1)]
 [!code-vb[System.Xml.XmlReader.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#1)]  
  
 **ReadEndElement メソッド**  
  
 [!code-csharp[System.Xml.XmlReader.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#2)]
 [!code-vb[System.Xml.XmlReader.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#2)]  
  
 **ReadToNextSibling メソッド**  
  
 [!code-csharp[System.Xml.XmlReader.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#3)]
 [!code-vb[System.Xml.XmlReader.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#3)]  
  
 **ReadToFollowing メソッド**  
  
 [!code-csharp[System.Xml.XmlReader.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#4)]
 [!code-vb[System.Xml.XmlReader.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#4)]  
  
 **ReadToDescendant メソッド**  
  
 [!code-csharp[System.Xml.XmlReader.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#5)]
 [!code-vb[System.Xml.XmlReader.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#5)]  
  
<a name="xmlreader_security"></a>   
## セキュリティの考慮事項  
 使用する場合は、以下を検討してください、 <xref:System.Xml.XmlReader> クラス。  
  
-   スローされた例外、 <xref:System.Xml.XmlReader> アプリに送られたくないパス情報を開示することができます。 アプリは、例外をキャッチして、適切に処理する必要があります。  
  
-   サービス拒否の問題を心配している場合、または信頼されていないソースを扱う場合は、DTD 処理を有効にしません。 既定では DTD の処理が無効になっている <xref:System.Xml.XmlReader> によって作成されたオブジェクト、 <xref:System.Xml.XmlReader.Create%2A> メソッドです。  
  
     DTD 処理を有効にした場合、<xref:System.Xml.XmlSecureResolver> を使用して <xref:System.Xml.XmlReader> でアクセス可能なリソースを制限できます。 XML 処理に対するメモリと時間制限できるように、アプリを設計することもできます。 たとえば、ASP.NET アプリケーションでタイムアウト制限を構成できます。  
  
-   XML データには、スキーマ ファイルなど、外部リソースへの参照が含まれることがあります。 使用して既定では、外部リソースの解決、 <xref:System.Xml.XmlUrlResolver> ユーザー資格情報を持つオブジェクト。 この点については、次のいずれかの方法でセキュリティを強化できます。  
  
    -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。  
  
    -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> に設定することにより、`null` が外部リソースを開けないようにする。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> と <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> の検証フラグ、 <xref:System.Xml.XmlReaderSettings> オブジェクトが既定で設定されていません。 このことは、信頼できないソースからの XML データを処理する際に、スキーマ ベースの攻撃から <xref:System.Xml.XmlReader> を保護するのに役立ちます。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 場合、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> プロパティに設定されて `null`, 、スキーマの場所が解決されない場合でも、 <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> と <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> 検証フラグが設定されます。  
  
     検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
  
     無効にすることをお勧めします <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> をドキュメントの大きな部分 id 制約を持つスキーマに対して高可用性のシナリオでの信頼されていない系の大規模な XML ドキュメントを検証するときにフラグを設定します。 このフラグは、既定で有効にします。  
  
-   XML データには、処理に長時間を要する大量の属性、名前空間宣言、入れ子になった要素などが含まれることがあります。 送信される入力のサイズを制限する、 <xref:System.Xml.XmlReader>, 、ことができます。  
  
    -   設定して、ドキュメントのサイズを制限、 <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> プロパティです。  
  
    -   エンティティの展開の設定により生成される文字数を制限、 <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> プロパティです。  
  
    -   カスタム作成 `IStream` の実装、 <xref:System.Xml.XmlReader>です。  
  
-   <xref:System.Xml.XmlReader.ReadValueChunk%2A> メソッドは、大量のデータ ストリームを処理するために使用できます。 このメソッドは、値全体に 1 つの文字列を割り当てる代わりに、一度に少数の文字を読みます。  
  
-   多数の一意のローカル名、名前空間、またはプレフィックスを持つ XML ドキュメントを読み取るときに問題が発生することができます。 派生したクラスを使用している場合 <xref:System.Xml.XmlReader>, を呼び出すと、 <xref:System.Xml.XmlReader.LocalName%2A>, 、<xref:System.Xml.XmlReader.Prefix%2A>, 、または <xref:System.Xml.XmlReader.NamespaceURI%2A> プロパティが各項目に返される文字列が追加、 <xref:System.Xml.NameTable>です。 保持するコレクション、 <xref:System.Xml.NameTable> サイズは、文字列ハンドルの仮想メモリ リークを作成することはありませんが減少します。 これがから派生するには、 <xref:System.Xml.NameTable> クラスし、最大サイズ クォータを適用します。 \(の使用を回避する方法はありません、 <xref:System.Xml.NameTable>, を切り替えたり、 <xref:System.Xml.NameTable> それがいっぱいのとき\)。 別の軽減は、前述のプロパティを使用しないで、代わりに使用する、 <xref:System.Xml.XmlReader.MoveToAttribute%2A> メソッドを <xref:System.Xml.XmlReader.IsStartElement%2A> メソッド; 可能な限りこれらのメソッドしない文字列を返すし、あふれてしまう問題を回避、 <xref:System.Xml.NameTable> コレクションです。  
  
-   <xref:System.Xml.XmlReaderSettings> オブジェクトはユーザー資格情報など、重要な情報を含むことがあります。 信頼できないコンポーネントが <xref:System.Xml.XmlReaderSettings> オブジェクトとそのユーザー資格情報を使用して、<xref:System.Xml.XmlReader> オブジェクトを作成し、データを読む可能性があります。 キャッシュする場合は注意が必要 <xref:System.Xml.XmlReaderSettings> オブジェクトを渡すときや、 <xref:System.Xml.XmlReaderSettings> オブジェクト 1 つのコンポーネントです。  
  
-   信頼できないソースからの <xref:System.Xml.NameTable>、<xref:System.Xml.XmlNamespaceManager>、および <xref:System.Xml.XmlResolver> オブジェクトなどのサポート コンポーネントは受け入れないようにします。  
  
   
  
## 例  
 次のコード例では、非同期の parse XML を使用する方法を示します。  
  
 [!code-csharp[System.Xml.XmlReader.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.xml.xmlreader.class/cs/program.cs#6)]
 [!code-vb[System.Xml.XmlReader.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.xml.xmlreader.class/vb/module1.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see langword="XmlReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、この型の状態を初期化するために、派生クラスのコンス トラクターによって呼び出されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public abstract int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードの属性数を取得します。</summary>
        <value>現在のノードにある属性の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは `Element`, 、`DocumentType` と `XmlDeclaration` ノードのみです。 \(他のノード型属性がありません。\)  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public abstract string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードのベース URI を取得します。</summary>
        <value>現在のノードのベース URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ネットワークに接続された XML ドキュメントでは、さまざまな W3C 標準包含機構を使用して集計データのチャンクで構成され、したがって各所に由来するノードが含まれます。 DTD エンティティは、この例が、これは Dtd に限定ではありません。 ベース URI がわかりますからこれらのノードが付属しています。 返されるノードのベース URI がないかどうか \(たとえば、解析されたメモリ内の文字列から\)、 `String.Empty` が返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public virtual bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
        <value>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バイナリ コンテンツの読み取りメソッドには、 <xref:System.Xml.XmlReader.ReadContentAsBase64%2A>, 、<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A>, 、<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>, 、および <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A> メソッドです。 このプロパティを返す場合 `false` 、 <xref:System.NotSupportedException> 、バイナリのいずれかを読み取るときに返されるメソッドが呼び出されます。  
  
 すべての Microsoft .NET Framework の実装、 <xref:System.Xml.XmlReader> クラスの戻り値 `true` このプロパティのです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Xml.XmlReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキストの解析 <xref:System.Xml.XmlReader> 静的から作成されたオブジェクトを <xref:System.Xml.XmlReader.Create%2A> メソッドの戻り値を常に `true`します。 その他のすべての Microsoft .NET Framework 実装、 <xref:System.Xml.XmlReader> クラスを含む、 <xref:System.Xml.XmlTextReader> クラス、返す `false`します。  
  
 このプロパティを返す場合 `false` 、 <xref:System.NotSupportedException> ときに返される、 <xref:System.Xml.XmlReader.ReadValueChunk%2A> メソッドが呼び出されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public virtual bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
        <value>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは常に返します `false` の実装のため <xref:System.Xml.XmlReader> DTD 情報をサポートしていません。 この場合は、呼び出す <xref:System.Xml.XmlReader.ResolveEntity%2A> 例外をスローします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、変更、 <see cref="P:System.Xml.XmlReader.ReadState" /> に <see cref="F:System.Xml.ReadState.Closed" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、読み取っているときに保持されているすべてのリソースも解放します。 場合 <xref:System.Xml.XmlReader.Close%2A> が既に呼び出されると、アクションは実行されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Create">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Xml.XmlReader" /> のインスタンスを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Most of the <xref:System.Xml.XmlReader.Create%2A> overloads include a **parameterReference tag is not supported!!!!**  
 parameter that accepts an <xref:System.Xml.XmlReaderSettings> object. You can use this object to:  
  
-   Specify which features you want supported on the <xref:System.Xml.XmlReader> object.  
  
-   Reuse the <xref:System.Xml.XmlReaderSettings> object to create multiple readers. You can use the same settings to create multiple readers with the same functionality. Or, you can modify the settings on an <xref:System.Xml.XmlReaderSettings>instance and create a new reader with a different set of features.  
  
-   Add features to an existing XML reader. The <xref:System.Xml.XmlReader.Create%2A> method can accept another <xref:System.Xml.XmlReader> object. The underlying <xref:System.Xml.XmlReader> object can be a user\-defined reader, a <xref:System.Xml.XmlTextReader> object, or another <xref:System.Xml.XmlReader> instance that you want to add additional features to.  
  
-   Take full advantage of features such as better conformance checking and compliance to the [XML 1.0 \(fourth edition\)](http://www.w3.org/TR/2006/REC-xml-20060816/)recommendation that are available only on <xref:System.Xml.XmlReader> objects created by the static <xref:System.Xml.XmlReader.Create%2A> method.  
  
> [!NOTE]
>  Although the .NET Framework includes concrete implementations of the <xref:System.Xml.XmlReader> class, such as the <xref:System.Xml.XmlTextReader>, <xref:System.Xml.XmlNodeReader>, and the <xref:System.Xml.XmlValidatingReader> classes, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A> method.  
  
## Default settings  
 If you use a <xref:System.Xml.XmlReader.Create%2A> overload that doesn't accept a <xref:System.Xml.XmlReaderSettings> object, the following default reader settings are used:  
  
|Setting|Default|  
|-------------|-------------|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName>|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`|  
|<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|An empty <xref:System.Xml.Schema.XmlSchemaSet> object|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> enabled|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|A new <xref:System.Xml.XmlUrlResolver> object.  Starting with the .NET Framework 4.5.2, this setting has a default value of **languageKeyword tag is not supported!!!!**<br />.|  
  
## Settings for common scenarios  
 Here are the <xref:System.Xml.XmlReaderSettings> properties you should set for some of the typical XML reader scenarios.  
  
|Requirement|Set|  
|-----------------|---------|  
|Data must be a well\-formed XML document.|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> to <xref:System.Xml.ConformanceLevel.Document>.|  
|Data must be a well\-formed XML parsed entity.|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> to <xref:System.Xml.ConformanceLevel.Fragment>.|  
|Data must be validated against a DTD.|<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> to <xref:System.Xml.DtdProcessing.Parse><br /><xref:System.Xml.XmlReaderSettings.ValidationType%2A> to <xref:System.Xml.ValidationType.DTD>.|  
|Data must be validated against an XML schema.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> to <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.Schemas%2A> to the <xref:System.Xml.Schema.XmlSchemaSet> to use for validation. Note that <xref:System.Xml.XmlReader> doesn't support XML\-Data Reduced \(XDR\) schema validation.|  
|Data must be validated against an inline XML schema.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> to <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> to <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>.|  
|Type support.|<xref:System.Xml.XmlReaderSettings.ValidationType%2A> to <xref:System.Xml.ValidationType.Schema><br /><xref:System.Xml.XmlReaderSettings.Schemas%2A> to the <xref:System.Xml.Schema.XmlSchemaSet> to use.|  
  
 <xref:System.Xml.XmlReader> doesn't support XML\-Data Reduced \(XDR\) schema validation.  
  
## Asynchronous programming  
 In synchronous mode, the <xref:System.Xml.XmlReader.Create%2A> method reads the first chunk of data from the buffer of the file, stream, or text reader. This may throw an exception if an I\/O operation fails. In asynchronous mode, the first I\/O operation occurs with a read operation, so exceptions that arise will be thrown when the read operation occurs.  
  
## Security considerations  
 By default, the <xref:System.Xml.XmlReader> uses an <xref:System.Xml.XmlUrlResolver> object with no user credentials to open resources. This means that, by default, the XML reader can access any location that doesn't require credentials. Use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to control access to resources:  
  
-   Set <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> to an <xref:System.Xml.XmlSecureResolver> object to restrict the resources that the XML reader can access.  
  
 \-or\-  
  
-   Set <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> to **languageKeyword tag is not supported!!!!**  
     to prevent the XML reader from opening any external resources.  
  
   
  
## 例  
 This example creates an XML reader that strips insignificant white space, strips comments, and performs fragment\-level conformance checking.  
  
 [!code-csharp[XmlReader.Create\#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#11)]
 [!code-vb[XmlReader.Create\#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#11)]  
  
 The following example uses an <xref:System.Xml.XmlUrlResolver> with default credentials to access a file.  
  
 [!code-cpp[XmlReaderSettings.cctor\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 [!code-cpp[XmlReaderSettings.cctor\#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 The following code wraps a reader instance within another reader.  
  
 [!code-csharp[XmlReader.Create\#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#13)]
 [!code-vb[XmlReader.Create\#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#13)]  
  
 This example chains readers to add DTD and XML schema validation.  
  
 [!code-csharp[XmlReader.Create\#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#12)]
 [!code-vb[XmlReader.Create\#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">XML データを格納しているストリーム。  
  
 <see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の標識を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を \(Unicode\) 文字のストリームとして解析する処理を継続します。</param>
        <summary>既定の設定で指定されたストリームを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlReaderSettings> 既定の設定でオブジェクトを使用して、リーダーを作成します。 作成されたリーダーをサポートする機能を指定する場合は、使用するオーバー ロードを使用して、 <xref:System.Xml.XmlReaderSettings> 、引数の 1 つとしてオブジェクトを渡して、 <xref:System.Xml.XmlReaderSettings> 正しい設定を持つオブジェクト。  
  
 既定の <xref:System.Xml.XmlUrlResolver> 資格情報なしで、ドキュメント型定義 \(DTD\)、エンティティ、スキーマなどの外部リソースにアクセスを使用しています。  
  
> [!IMPORTANT]
>  .NET Framework 4.5.2、既定値はありませんから <xref:System.Xml.XmlUrlResolver> が提供されます。 ソリューションが .NET Framework 4.5.2 またはそれ以降のバージョンを対象の場合は、指定、 <xref:System.Xml.XmlResolver> を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 認証が必要なネットワーク リソースには、外部のリソースが存在する場合は、指定、 <xref:System.Xml.XmlResolver> 、必要な資格情報を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 作成された <xref:System.Xml.XmlReader> オブジェクトがエンティティ参照を展開し、改行文字の XML 正規化を実行します。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlReader> オブジェクトから読み取る、 <xref:System.IO.FileStream>です。  
  
 [!code-csharp[XmlReader.Create\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#8)]
 [!code-vb[XmlReader.Create\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
        <summary>指定されたテキスト リーダーを使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Xml.XmlReaderSettings> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <xref:System.Xml.XmlReaderSettings> object as one of its arguments, and pass in an <xref:System.Xml.XmlReaderSettings> object with the correct settings.  
  
 A default <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, specify an <xref:System.Xml.XmlResolver>with the necessary credentials using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 The following example uses the <xref:System.IO.StringReader> class to read an XML string.  
  
 [!code-csharp[XmlReader.Create\#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#7)]
 [!code-vb[XmlReader.Create\#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlUrlResolver" /> クラスは、パスを正規データ形式に変換するときに使用されます。</param>
        <summary>指定された URI で新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An <xref:System.Xml.XmlReaderSettings> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <xref:System.Xml.XmlReaderSettings> object as one of its arguments, and pass in an <xref:System.Xml.XmlReaderSettings> object with the correct settings.  
  
 A default <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, specify an <xref:System.Xml.XmlResolver> with the necessary credentials using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 The following example creates an <xref:System.Xml.XmlReader> object that reads XML data file specified by the URI.  
  
 [!code-csharp[XmlReader.Create\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#6)]
 [!code-vb[XmlReader.Create\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputUri" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
        <exception cref="T:System.IO.FileNotFoundException">URI によって識別されるファイルが存在しません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  
</para>  
</block>  
  
 URI の形式が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="input">XML データを格納しているストリーム。  
  
 <see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の標識を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を \(Unicode\) 文字のストリームとして解析する処理を継続します。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定されたストリームと設定で、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default an <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property to specify an <xref:System.Xml.XmlResolver> with the necessary credentials.  
  
> [!IMPORTANT]
>  You can use one of the following methods to control which resources the <xref:System.Xml.XmlReader> can access:  
>   
>  -   Restrict the resources that the <xref:System.Xml.XmlReader> can access by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  
>   
>  \-or\-  
>   
>  -   Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to **languageKeyword tag is not supported!!!!**  
>     .  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> の設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定されたテキスト リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Xml.XmlUrlResolver> 資格情報なしで、ドキュメント型定義 \(DTD\)、エンティティ、スキーマなどの外部リソースにアクセスを使用しています。  
  
> [!IMPORTANT]
>  .NET Framework 4.5.2、既定値はありませんから <xref:System.Xml.XmlUrlResolver> が提供されます。 ソリューションが .NET Framework 4.5.2 またはそれ以降のバージョンを対象の場合は、指定、 <xref:System.Xml.XmlResolver> を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 外部のリソースがある場合、認証が必要なネットワーク リソースを使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティを指定する、 <xref:System.Xml.XmlResolver> ために必要な資格情報を使用します。  
  
> [!IMPORTANT]
>  次のメソッドのいずれかを使用して、対象のリソースを制御することができます、 <xref:System.Xml.XmlReader> にアクセスできます。  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。  
>   
>  または  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> に設定することにより、`null` が外部リソースを開けないようにする。  
  
 作成された <xref:System.Xml.XmlReader> オブジェクトがエンティティ参照を展開し、改行文字の XML 正規化を実行します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。<see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定された URI と設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default an <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 This means that the <xref:System.Xml.XmlReader> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property to specify an <xref:System.Xml.XmlResolver> with the necessary credentials.  
  
> [!IMPORTANT]
>  You can restrict the resources that the <xref:System.Xml.XmlReader> can access by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 The following example creates an <xref:System.Xml.XmlReader> object that supports document type definition \(DTD\) validation.  
  
 [!code-csharp[XmlReader.Create\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#3)]
 [!code-vb[XmlReader.Create\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see langword="null" /> 値が <paramref name="inputUri" /> です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">URI で指定したファイルが見つかりません。</exception>
        <exception cref="T:System.UriFormatException">
          <block subset="none" type="note">  
<para>  
 [Windows ストア アプリ用 .NET](http://go.microsoft.com/fwlink/?LinkID=247912) または [ポータブル クラス ライブラリ](http://msdn.microsoft.com/ja-jp/c31e1663-c164-4e65-b66d-d3aa8750a154)では、基本クラスの例外である <see cref="T:System.FormatException" /> を代わりにキャッチします。  
  
</para>  
</block>  
  
 URI の形式が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.Xml.XmlReader reader, System.Xml.XmlReaderSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.Xml.XmlReader reader, class System.Xml.XmlReaderSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
      </Parameters>
      <Docs>
        <param name="reader">基になる XML リーダーとして使用するオブジェクト。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。  
  
 <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトの準拠レベルは、基になるリーダーの準拠レベルと一致するか、<see cref="F:System.Xml.ConformanceLevel.Auto" /> に設定する必要があります。</param>
        <summary>指定された XML リーダーと設定を使用して新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>指定された <see cref="T:System.Xml.XmlReader" /> オブジェクトをラップするオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、基になる追加機能を追加する <xref:System.Xml.XmlReader> オブジェクトです。 基になる <xref:System.Xml.XmlReader> オブジェクトは別にすることができます <xref:System.Xml.XmlReader> によって作成されたオブジェクト、 <xref:System.Xml.XmlReader.Create%2A> メソッド、または <xref:System.Xml.XmlReader> 、具象型のいずれかを使用して作成されたオブジェクト <xref:System.Xml.XmlReader> 実装します。  
  
 既定の <xref:System.Xml.XmlUrlResolver> 資格情報なしで、スキーマなどの外部リソースにアクセスを使用しています。  
  
> [!IMPORTANT]
>  .NET Framework 4.5.2、既定値はありませんから <xref:System.Xml.XmlUrlResolver> が提供されます。 ソリューションが .NET Framework 4.5.2 またはそれ以降のバージョンを対象の場合は、指定、 <xref:System.Xml.XmlResolver> を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 認証が必要なネットワーク リソースには、外部のリソースが存在する場合は、指定、 <xref:System.Xml.XmlResolver> 、必要な資格情報を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
> [!IMPORTANT]
>  次のメソッドのいずれかを使用して、対象のリソースを制御することができます、 <xref:System.Xml.XmlReader> にアクセスできます。  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。  
>   
>  または  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> に設定することにより、`null` が外部リソースを開けないようにする。  
  
 作成された <xref:System.Xml.XmlReader> オブジェクトがエンティティ参照を展開し、改行文字の XML 正規化を実行します。  
  
   
  
## 例  
 次の例の作成、検証型 <xref:System.Xml.XmlReader> にラップされたオブジェクト、 <xref:System.Xml.XmlNodeReader> オブジェクトです。  
  
 [!code-csharp[XmlReader.Create\#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#5)]
 [!code-vb[XmlReader.Create\#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> 値は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトが、基になるリーダーの準拠レベルと一致しない準拠レベルを指定した場合。  
  
 または  
  
 基になる <see cref="T:System.Xml.XmlReader" /> が <see cref="F:System.Xml.ReadState.Error" /> 状態か <see cref="F:System.Xml.ReadState.Closed" /> 状態。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">XML データを格納しているストリーム。  
  
 <see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の標識を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を \(Unicode\) 文字のストリームとして解析する処理を継続します。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
  
 **セキュリティに関するメモ** ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
        <summary>指定されたストリーム、ベース URI、設定を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default an <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property to specify an <xref:System.Xml.XmlResolver> with the necessary credentials.  
  
> [!IMPORTANT]
>  You can use one of the following methods to control which resources the <xref:System.Xml.XmlReader> can access:  
>   
>  -   Restrict the resources that the <xref:System.Xml.XmlReader> can access by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  
>   
>  \-or\-  
>   
>  -   Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to **languageKeyword tag is not supported!!!!**  
>     .  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.Stream input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.Stream input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="input">XML データを格納しているストリーム。  
  
 <see cref="T:System.Xml.XmlReader" /> は、バイト順マークや、エンコードに関するその他の標識を探すため、ストリームの先頭バイトをスキャンします。 エンコーディングが確認された場合、そのエンコーディングを使用してストリームの読み込みを続行し、入力を \(Unicode\) 文字のストリームとして解析する処理を継続します。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>解析のために指定されたストリーム、設定、およびコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Xml.XmlUrlResolver> 資格情報なしで、ドキュメント型定義 \(DTD\)、エンティティ、スキーマなどの外部リソースにアクセスを使用しています。  
  
> [!IMPORTANT]
>  .NET Framework 4.5.2、既定値はありませんから <xref:System.Xml.XmlUrlResolver> が提供されます。 ソリューションが .NET Framework 4.5.2 またはそれ以降のバージョンを対象の場合は、指定、 <xref:System.Xml.XmlResolver> を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 外部のリソースがある場合、認証が必要なネットワーク リソースを使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティを指定する、 <xref:System.Xml.XmlResolver> ために必要な資格情報を使用します。  
  
> [!IMPORTANT]
>  次のメソッドのいずれかを使用して、対象のリソースを制御することができます、 <xref:System.Xml.XmlReader> にアクセスできます。  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。  
>   
>  または  
>   
>  -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> に設定することにより、`null` が外部リソースを開けないようにする。  
  
 作成された <xref:System.Xml.XmlReader> オブジェクトがエンティティ参照を展開し、改行文字の XML 正規化を実行します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, string baseUri);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, string baseUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="baseUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、<see cref="T:System.Xml.XmlReader" /> はデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <param name="baseUri">読み取るエンティティまたはドキュメントのベース URI。 この値は、<see langword="null" /> の場合もあります。  
  
 **セキュリティに関するメモ** ベース URI は、XML ドキュメントの相対 URI を解決するために使用されます。 信頼関係のないソースからベース URI を使用することは避けてください。</param>
        <summary>指定されたテキスト リーダー、設定、およびベース URI を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default an <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property to specify an <xref:System.Xml.XmlResolver> with the necessary credentials.  
  
> [!IMPORTANT]
>  You can use one of the following methods to control which resources the <xref:System.Xml.XmlReader> can access:  
>   
>  -   Restrict the resources that the <xref:System.Xml.XmlReader> can access by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  
>   
>  \-or\-  
>   
>  -   Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to **languageKeyword tag is not supported!!!!**  
>     .  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (System.IO.TextReader input, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(class System.IO.TextReader input, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="input">XML データの読み出し元のテキスト リーダー。 テキスト リーダーは Unicode 文字のストリームを返すため、XML リーダーはデータ ストリームのデコードに XML 宣言に指定されたエンコーディングを使用しません。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定したテキスト リーダー、設定、および解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 By default an <xref:System.Xml.XmlUrlResolver> with no credentials is used to access any external resources such as a document type definition \(DTD\), entities, schemas, and so on.  
  
> [!IMPORTANT]
>  Starting with the .NET Framework 4.5.2, no default <xref:System.Xml.XmlUrlResolver> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref:System.Xml.XmlResolver> using the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property.  
  
 If the external resource is located on a network resource that requires authentication, use the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> property to specify an <xref:System.Xml.XmlResolver> with the necessary credentials.  
  
> [!IMPORTANT]
>  You can use one of the following methods to control which resources the <xref:System.Xml.XmlReader> can access:  
>   
>  -   Restrict the resources that the <xref:System.Xml.XmlReader> can access by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.  
>   
>  \-or\-  
>   
>  -   Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> property to **languageKeyword tag is not supported!!!!**  
>     .  
  
 The created <xref:System.Xml.XmlReader> object expands entity references and performs XML normalization of new line characters.  
  
   
  
## 例  
 The following example creates an <xref:System.Xml.XmlReader> object that reads an XML fragment.  
  
 [!code-csharp[XmlReader.Create\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> プロパティと <see cref="P:System.Xml.XmlParserContext.NameTable" /> プロパティの両方に値が含まれています。 \(これらの <see langword="NameTable" /> プロパティの 1 つのみを設定して使用できます。\)</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Xml.XmlReader Create (string inputUri, System.Xml.XmlReaderSettings settings, System.Xml.XmlParserContext inputContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xml.XmlReader Create(string inputUri, class System.Xml.XmlReaderSettings settings, class System.Xml.XmlParserContext inputContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputUri" Type="System.String" />
        <Parameter Name="settings" Type="System.Xml.XmlReaderSettings" />
        <Parameter Name="inputContext" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="inputUri">XML データを格納しているファイルの URI。<see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト上の <see cref="T:System.Xml.XmlResolver" /> オブジェクトは、パスを正規データ形式に変換するときに使用されます。<see cref="P:System.Xml.XmlReaderSettings.XmlResolver" /> が <see langword="null" /> の場合は、新しい <see cref="T:System.Xml.XmlUrlResolver" /> オブジェクトが使用されます。</param>
        <param name="settings">新しい <see cref="T:System.Xml.XmlReader" /> インスタンスの設定。 この値は、<see langword="null" /> の場合もあります。</param>
        <param name="inputContext">XML フラグメントの解析に必要なコンテキスト情報。 コンテキスト情報には、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の <c>xml:lang</c> と <c>xml:space</c> のスコープ、ベース URI、およびドキュメント型定義を格納できます。  
  
 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定された URI、設定、解析するためのコンテキスト情報を使用して、新しい <see cref="T:System.Xml.XmlReader" /> インスタンスを作成します。</summary>
        <returns>ストリーム内の XML データの読み取りに使用するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Xml.XmlUrlResolver> 資格情報なしで、ドキュメント型定義 \(DTD\)、エンティティ、スキーマなどの外部リソースにアクセスを使用しています。  
  
> [!IMPORTANT]
>  .NET Framework 4.5.2、既定値はありませんから <xref:System.Xml.XmlUrlResolver> が提供されます。 ソリューションが .NET Framework 4.5.2 またはそれ以降のバージョンを対象の場合は、指定、 <xref:System.Xml.XmlResolver> を使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティです。  
  
 つまり、 <xref:System.Xml.XmlReader> 認証を必要としない任意の場所にアクセスできます。 外部のリソースがある場合、認証が必要なネットワーク リソースを使用して、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName> プロパティを指定する、 <xref:System.Xml.XmlResolver> ために必要な資格情報を使用します。  
  
> [!IMPORTANT]
>  リソースを制限することができますが、 <xref:System.Xml.XmlReader> を設定してアクセスできます、 <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> プロパティを <xref:System.Xml.XmlSecureResolver> オブジェクトです。  
  
 作成された <xref:System.Xml.XmlReader> オブジェクトがエンティティ参照を展開し、改行文字の XML 正規化を実行します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see langword="inputUri" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">
          <see cref="T:System.Xml.XmlReader" /> には、XML データの場所にアクセスするための十分なアクセス許可がありません。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Xml.XmlReaderSettings.NameTable" /> と <see cref="P:System.Xml.XmlParserContext.NameTable" /> のプロパティは、どちらも値を含んでいます。 \(これらの <see langword="NameTable" /> プロパティのうち、設定して使用できるのは 1 つだけです\)。</exception>
        <exception cref="T:System.IO.FileNotFoundException">URI で指定したファイルが見つかりません。</exception>
        <exception cref="T:System.UriFormatException">URI の形式が正しくありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public abstract int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、XML ドキュメント内の現在のノードの深さを取得します。</summary>
        <value>XML ドキュメント内の現在のノードの深さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 参照してください <xref:System.Xml.XmlTextReader.Depth%2A> \(で、 `XmlTextReader` クラス\)、たとえば、このプロパティを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlReader" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Xml.XmlReader" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public abstract bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
        <value>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
        <summary>派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
        <returns>指定した属性の値。 このメソッドは、リーダーを移動しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、3 番目の属性の値を取得します。  
  
 [!code-csharp[XmlReaderBasic\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#2)]
 [!code-vb[XmlReaderBasic\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> が範囲外です。 負でないと、属性のコレクションのサイズより小さいことがあります。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の限定名。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した属性の値を取得 <see cref="P:System.Xml.XmlReader.Name" />します。</summary>
        <returns>指定した属性の値。 属性が見つからないかどうか、または値が <see langword="String.Empty" />, 、<see langword="null" /> が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リーダーを移動しません。  
  
 リーダーが配置されている場合、 `DocumentType` ノード、このメソッドを使用して、公開キーとシステム リテラルなどを取得すること `reader.GetAttribute("PUBLIC")`  
  
   
  
## 例  
 次の例では、ISBN 属性の値を取得します。  
  
 [!code-csharp[XmlReaderBasic\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#3)]
 [!code-vb[XmlReaderBasic\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public abstract string GetAttribute (string name, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetAttribute(string name, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性のローカル名。</param>
        <param name="namespaceURI">属性の名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した属性の値を取得 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" />です。</summary>
        <returns>指定した属性の値。 属性が見つからないかどうか、または値が <see langword="String.Empty" />, 、<see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の XML には、特定の名前空間内の属性が含まれています。  
  
```  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 検索できる、 `dt:type` 属性の 1 つの引数 \(プレフィックスとローカル名\) または 2 つの引数 \(ローカル名と名前空間 URI\) を使用します。  
  
```  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 参照する、 `xmlns:dt` 属性を次の引数のいずれかを使用します。  
  
```  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 使用してこの情報を取得することも、 <xref:System.Xml.XmlReader.Prefix%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetValueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; GetValueAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; GetValueAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.GetValueAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードのテキスト値を非同期に取得します。</summary>
        <returns>現在のノードの値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasAttributes">
      <MemberSignature Language="C#" Value="public virtual bool HasAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.HasAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードに属性があるかどうかを示す値を取得します。</summary>
        <value>現在のノードが属性を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public virtual bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、現在のノードが保持できるかどうかを示す値を取得、 <see cref="P:System.Xml.XmlReader.Value" />です。</summary>
        <value>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 場合 <see langword="false" />, 、ノードの値を持つ <see langword="String.Empty" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 返す値を持つノード型の一覧を次の表に示します。  
  
|ノード型|値|  
|----------|-------|  
|`Attribute`|属性の値。|  
|`CDATA`|CDATA セクションの内容。|  
|`Comment`|コメントの内容。|  
|`DocumentType`|内部サブセット。|  
|`ProcessingInstruction`|ターゲットを除く全内容。|  
|`SignificantWhitespace`|混合コンテンツ モデル内のマークアップ間の空白。|  
|`Text`|テキスト ノードの内容。|  
|`Whitespace`|マークアップ間の空白。|  
|`XmlDeclaration`|宣言の内容。|  
  
   
  
## 例  
 参照してください <xref:System.Xml.XmlTextReader.HasValue%2A> \(で、 `XmlTextReader` クラス\) このメソッドを使用するサンプルのです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public virtual bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードが DTD またはスキーマで定義された既定値から生成された属性かどうかを示す値を取得します。</summary>
        <value>現在のノードが、DTD またはスキーマで定義された既定値から生成された値を持つ属性である場合は <see langword="true" />。属性値が明示的に設定された場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `IsDefault` 常に返します `false` の実装のため `XmlReader` スキーマまたは DTD 情報をサポートしていません。 このプロパティは、属性ノードのみに適用されます。  
  
   
  
## 例  
 次の例では、ルート要素のすべての属性が表示されます。  
  
```  
using System;  
using System.IO;  
using System.Xml;  
  
public class Sample   
{  
  public static void Main(){  
  
    // Create the reader.  
    XmlReader reader = XmlReader.Create("book4.xml");  
  
    reader.MoveToContent();  
  
    // Display each of the attribute nodes, including default attributes.  
    while (reader.MoveToNextAttribute()){  
        if (reader.IsDefault)  
          Console.Write("(default attribute) ");  
        Console.WriteLine("{0} = {1}", reader.Name, reader.Value);    
    }             
  
    //Close the reader.  
    reader.Close();       
  
  }  
} // End class  
```  
  
 この例では、入力として次のファイルが使用されます。  
  
 `book4.xml`  
  
```  
<!DOCTYPE book SYSTEM 'book.dtd'>  
<book ISBN = '1-861001-57-5'>  
  <title>Pride And Prejudice</title>  
  <price>19.95</price>  
</book>  
```  
  
 `book.dtd`  
  
```  
<!ELEMENT book (title,price)>   
<!ATTLIST book   
   genre CDATA "novel"  
   ISBN CDATA #REQUIRED>  
<!ELEMENT title (#PCDATA)>  
<!ELEMENT price (#PCDATA)>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public abstract bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、現在のノードが空の要素であるかどうかを示す値を取得 \(たとえば、 <c>&lt;MyElement/&gt;</c>\)。</summary>
        <value>現在のノードが <c>/&gt;</c> で終わる要素である \(<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.Element" /> に等しい\) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティにより、次のことが区別できます。  
  
 `<item num="123"/>` \(`IsEmptyElement` is `true`\).  
  
 `<item num="123"></item>` \(`IsEmptyElement` は `false`, 要素の内容は空には\)。  
  
 対応する `EndElement` 空の要素のノードは生成されません。  
  
 既定のコンテンツがスキーマ検証のための要素に追加された場合 `IsEmptyElement` が返されます `true`します。 要素が既定値を持つかどうかに影響を与えません。 つまり、 `IsEmptyElement` 単純に、ソース ドキュメント内の要素がある終了要素タグかどうかを報告します。  
  
   
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-csharp[XmlReaderBasic\#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic\#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
 この例では、 `elems.xml`, 、入力として。  
  
 [!code-xml[XML\_Core\_Files\#3](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/elems.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsName">
      <MemberSignature Language="C#" Value="public static bool IsName (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsName(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsName(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">検証対象の名前。</param>
        <summary>文字列引数が有効な XML 名かどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 名前が無効である場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 [W3C XML 1.0 Recommendation](http://go.microsoft.com/fwlink/?LinkId=49863) 名前が有効かどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsNameToken">
      <MemberSignature Language="C#" Value="public static bool IsNameToken (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNameToken(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsNameToken(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">検証対象の名前トークン。</param>
        <summary>文字列引数が有効な XML 名トークンかどうかを示す値を返します。</summary>
        <returns>
          <see langword="true" /> 有効な名前トークンである場合それ以外の場合 <see langword="false" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 [W3C XML 1.0 Recommendation](http://go.microsoft.com/fwlink/?LinkId=49863) 名前のトークンが有効かどうかを確認します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> 値は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し <see cref="M:System.Xml.XmlReader.MoveToContent" /> し、現在のコンテンツ ノードが開始タグまたは空要素タグかどうか。</summary>
        <returns>
          <see langword="true" /> 場合 <see cref="M:System.Xml.XmlReader.MoveToContent" /> 開始タグまたは空要素タグが見つかると <see langword="false" /> ノード型以外の場合 <see langword="XmlNodeType.Element" /> が見つかりました。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リーダーがコンテンツ ノードに配置されるまで、空白、コメント、および処理命令をスキップします。 次に、現在のノードが要素であるかどうか。  
  
   
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-csharp[XmlReaderBasic\#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#10)]
 [!code-vb[XmlReaderBasic\#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#10)]  
  
 この例では、 `elems.xml`, 、入力として。  
  
 [!code-xml[XML\_Core\_Files\#3](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/elems.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">正しくない XML は、入力ストリームが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">一致する文字列、 <see langword="Name" /> 見つかった要素のプロパティです。</param>
        <summary>呼び出し <see cref="M:System.Xml.XmlReader.MoveToContent" /> し、現在のコンテンツ ノードが開始タグまたは空要素タグで、テスト、 <see cref="P:System.Xml.XmlReader.Name" /> 見つかった要素のプロパティが指定した引数に一致します。</summary>
        <returns>
          <see langword="true" /> 結果として得られるノードが要素の場合、 <see langword="Name" /> 、指定した文字列と一致するプロパティです。<see langword="false" /> ノード型以外の場合 <see langword="XmlNodeType.Element" /> が見つかった場合は、要素 <see langword="Name" /> プロパティが、指定した文字列と一致しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リーダーがコンテンツ ノードに配置されるまで、空白、コメント、および処理命令をスキップします。 次に、現在のノードが要素であるかどうか。  
  
   
  
## 例  
 次の例では、価格の各要素が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#17](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#17)]
 [!code-vb[XmlReaderBasic\#17](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">正しくない XML は、入力ストリームが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <Member MemberName="IsStartElement">
      <MemberSignature Language="C#" Value="public virtual bool IsStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsStartElement(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.IsStartElement(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">照合する文字列、 <see langword="LocalName" /> 見つかった要素のプロパティです。</param>
        <param name="ns">照合する文字列、 <see langword="NamespaceURI" /> 見つかった要素のプロパティです。</param>
        <summary>呼び出し <see cref="M:System.Xml.XmlReader.MoveToContent" /> し、現在のコンテンツ ノードが開始タグまたは空要素タグで、テスト、 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 見つかった要素のプロパティが、指定した文字列と一致します。</summary>
        <returns>
          <see langword="true" /> 結果として得られるノードが要素の場合。<see langword="false" /> ノード型以外の場合 <see langword="XmlNodeType.Element" /> が見つかった場合は、 <see langword="LocalName" /> と <see langword="NamespaceURI" /> 要素のプロパティに指定した文字列と一致しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、リーダーがコンテンツ ノードに配置されるまで、空白、コメント、および処理命令をスキップします。 次に、現在のノードが要素であるかどうか。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">正しくない XML は、入力ストリームが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.MoveToContent" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.Int32)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">属性のインデックス。</param>
        <summary>派生クラスでオーバーライドされると、指定したインデックスの属性の値を取得します。</summary>
        <value>指定した属性の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、リーダーを移動しません。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#1)]
 [!code-vb[XmlReaderBasic\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の限定名。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した属性の値を取得 <see cref="P:System.Xml.XmlReader.Name" />します。</summary>
        <value>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、リーダーを移動しません。  
  
 リーダーが配置されている場合、 `DocumentType` ノード、このメソッドを使用して、公開キーとシステム リテラルなどを取得すること `reader["PUBLIC"]`  
  
   
  
## 例  
 次の例では、ISBN 属性の値を取得します。  
  
 [!code-csharp[XmlReaderBasic\#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#7)]
 [!code-vb[XmlReaderBasic\#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Item(System.String,System.String)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性のローカル名。</param>
        <param name="namespaceURI">属性の名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した属性の値を取得 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" />です。</summary>
        <value>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、リーダーを移動しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.GetAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public abstract string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードのローカル名を取得します。</summary>
        <value>プリフィックスを削除した現在のノードの名前。 たとえば、<see langword="LocalName" /> が要素 <c>&lt;bk:book&gt;</c> の <see langword="book" /> です。  
  
 名前を持たないノード型 \(<see langword="Text" />、<see langword="Comment" /> など\) の場合、このプロパティは <see langword="String.Empty" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-csharp[XmlReaderBasic\#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic\#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 例では、入力として book2.xml というファイルを使用します。  
  
 [!code-xml[XML\_Core\_Files\#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="P:System.Xml.XmlReader.Name" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public abstract string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.LookupNamespace(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。</param>
        <summary>派生クラスでオーバーライドされると、現在の要素のスコープの名前空間プリフィックスを解決します。</summary>
        <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リーダーが配置されている場合は次の XML 文字列で、 `href` 属性は、プレフィックス `a` が呼び出すことによって解決 `reader.LookupNamespace("a")`します。 返される文字列は `urn:456`です。  
  
```  
<root xmlns:a="urn:456">  
  <item>  
  <ref href="a:b"/>  
  </item>  
 </root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public virtual void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">属性のインデックス。</param>
        <summary>派生クラスでオーバーライドされると、指定したインデックスの属性に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#4)]
 [!code-vb[XmlReaderBasic\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">パラメーターには、負の値があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の限定名。</param>
        <summary>派生クラスでオーバーライドされると、指定した属性に移動 <see cref="P:System.Xml.XmlReader.Name" />します。</summary>
        <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出した後 `MoveToAttribute`, 、 <xref:System.Xml.XmlReader.Name%2A>, 、<xref:System.Xml.XmlReader.NamespaceURI%2A>, 、および <xref:System.Xml.XmlReader.Prefix%2A> プロパティは、その属性のプロパティを反映します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">このパラメーターは、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToAttribute (string name, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToAttribute(string name, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性のローカル名。</param>
        <param name="ns">属性の名前空間 URI。</param>
        <summary>派生クラスでオーバーライドされると、指定した属性に移動 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" />です。</summary>
        <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出した後 `MoveToAttribute`, 、 <xref:System.Xml.XmlReader.Name%2A>, 、<xref:System.Xml.XmlReader.NamespaceURI%2A>, 、および <xref:System.Xml.XmlReader.Prefix%2A> プロパティは、その属性のプロパティを反映します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToContent">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlNodeType MoveToContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Xml.XmlNodeType MoveToContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToContent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードがコンテンツであるかどうかをチェック \(空白文字以外のテキスト、 <see langword="CDATA" />, 、<see langword="Element" />, 、<see langword="EndElement" />, 、<see langword="EntityReference" />, 、または <see langword="EndEntity" />\) ノードです。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。<see langword="ProcessingInstruction" />、<see langword="DocumentType" />、<see langword="Comment" />、<see langword="Whitespace" />、または <see langword="SignificantWhitespace" /> に該当するノードはスキップされます。</summary>
        <returns>
          <see cref="P:System.Xml.XmlReader.NodeType" /> メソッドが見つけた現在のノードのまたは <see langword="XmlNodeType.None" /> リーダーが入力ストリームの終わりに達した場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のノードが属性ノードの場合は、このメソッドに移動し、リーダー戻る属性を所有する要素。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.MoveToContentAsync%2A>です。  
  
   
  
## 例  
 これは、中断なしのランダムな XML マークアップをスキップできるコードを記述する場合に便利です。 たとえば、次のコードがあるとします。  
  
 [!code-cpp[Classic WebData XmlReader.MoveToContent Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.MoveToContent Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.MoveToContent Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.MoveToContent Example/VB/source.vb#1)]  
  
 このコードは、互換性に影響することがなく、次の入力を処理できます。  
  
```  
<price>123.4</price>  
```  
  
 および  
  
```  
<?xml version="1.0"><!DOCTYPE price SYSTEM  
  "abc"><price>123.4</price>  
```  
  
 および  
  
```  
<?xml version="1.0"><!DOCTYPE price SYSTEM "abc"  
  [<!ENTTIY p  
  "123.4">]><price>&p;</price>  
```  
  
 および  
  
```  
<!-- some test comment --><?processing  
  instruction?><price>123.4</price>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">正しくない XML 入力ストリームで検出されました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToContentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt; MoveToContentAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;valuetype System.Xml.XmlNodeType&gt; MoveToContentAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToContentAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;MoveToContentAsync&gt;c__async5))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Xml.XmlNodeType&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードがコンテンツ ノードであるかどうかを非同期的に確認します。 ノードがコンテンツ ノードでない場合、リーダーは、次のコンテンツ ノードまたはファイルの末尾までスキップします。</summary>
        <returns>メソッドが見つけた現在のノードの <see cref="P:System.Xml.XmlReader.NodeType" />。リーダーが入力ストリームの末尾に到達した場合は <see langword="XmlNodeType.None" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This is the asynchronous version of <xref:System.Xml.XmlReader.MoveToContent%2A>, with the same functionality. To use this method, you must set the <xref:System.Xml.XmlReaderSettings.Async%2A> flag to **languageKeyword tag is not supported!!!!**  
.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public abstract bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在の属性ノードを含む要素に移動します。</summary>
        <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、その属性間を移動後に要素を返します。 このメソッドでは、リーダーを移動し、ノード型を次のいずれかに: `Element`, 、`DocumentType`, 、または `XmlDeclaration`です。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#4)]
 [!code-vb[XmlReaderBasic\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToFirstAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、最初の属性に移動します。</summary>
        <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、最初の属性の値を取得します。  
  
 [!code-csharp[XmlReaderBasic\#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#5)]
 [!code-vb[XmlReaderBasic\#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public abstract bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.MoveToNextAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、次の属性に移動します。</summary>
        <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のノードが要素ノードの場合は、このメソッドは <xref:System.Xml.XmlReader.MoveToFirstAttribute%2A>です。 場合 `MoveToNextAttribute` 返します `true`, 、リーダーが次の属性に移動。 それ以外の場合、リーダーの位置は変更されません。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-csharp[XmlReaderBasic\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#6)]
 [!code-vb[XmlReaderBasic\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードの限定名を取得します。</summary>
        <value>現在のノードの限定名。 たとえば、<see langword="Name" /> が要素 <c>&lt;bk:book&gt;</c> の <see langword="bk:book" /> です。  
  
 返される名前は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table">  
<listheader>  
<term> ノード型  
  
 </term>  
<description> 名前  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> 属性の名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> ドキュメントの種類の名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Element" />  
  
 </term>  
<description> タグ名。  
  
 </description>  
</item>  
<item>  
<term> <see langword="EntityReference" />  
  
 </term>  
<description> 参照されたエンティティの名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> 処理命令の対象。  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> リテラル文字列 <see langword="xml" />します。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-csharp[XmlReaderBasic\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 このサンプルを使用して、 `items.xml` ファイルです。  
  
 [!code-xml[XML\_Core\_Files\#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="P:System.Xml.XmlReader.LocalName" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public abstract string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、リーダーが配置されているノードの名前空間 URI \(W3C の名前空間の仕様における定義に準拠\) を取得します。</summary>
        <value>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは `Element` と `Attribute` ノードのみです。  
  
   
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-csharp[XmlReaderBasic\#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic\#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 例では、入力として book2.xml というファイルを使用します。  
  
 [!code-xml[XML\_Core\_Files\#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、 <see cref="T:System.Xml.XmlNameTable" /> この実装に関連付けられています。</summary>
        <value>ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 すべてのノードと属性名が返される <xref:System.Xml.XmlReader> を使用して最小単位に分割されて、 `NameTable`です。 同じ名前に複数回が返される場合 \(たとえば、 `Customer`\)、し、同じ `String` その名前のオブジェクトが返されます。 これにより、オブジェクト比較負荷の高い文字列比較ではなく、これらの文字列で効率的なコードを記述することが可能です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="T:System.Xml.XmlNameTable" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードの型を取得します。</summary>
        <value>現在のノードの型を指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-csharp[XmlReaderBasic\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 このサンプルを使用して、 `items.xml` ファイルです。  
  
 [!code-xml[XML\_Core\_Files\#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public abstract string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードに関連付けられている名前空間プレフィックスを取得します。</summary>
        <value>現在のノードに関連付けられた名前空間プリフィックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-csharp[XmlReaderBasic\#9](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#9)]
 [!code-vb[XmlReaderBasic\#9](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#9)]  
  
 例では、入力として book2.xml というファイルを使用します。  
  
 [!code-xml[XML\_Core\_Files\#5](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book2.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public virtual char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
        <value>属性ノードの値を囲むために使用されている引用符 \(" または '\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、属性ノードのみに適用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、ストリームから次のノードを読み取ります。</summary>
        <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 When an <xref:System.Xml.XmlReader> is first created and initialized, there is no information available. You must call <xref:System.Xml.XmlReader.Read%2A> to read the first node. The <xref:System.Xml.XmlReader.Read%2A> method sets the state of the XML reader to initiate <xref:System.Xml.ReadState.Initial> and moves through the XML file sequentially until it reaches the end of the file, at which point the method returns a value of **languageKeyword tag is not supported!!!!**  
.  
  
 This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method returns **languageKeyword tag is not supported!!!!**  
. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.  
  
 For the asynchronous version of this method, see <xref:System.Xml.XmlReader.ReadAsync%2A>.  
  
   
  
## 例  
 The following example reads an XML file and displays each of the nodes.  
  
 [!code-csharp[XmlReaderBasic\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 The sample uses the **languageKeyword tag is not supported!!!!**  
 file.  
  
 [!code-xml[XML\_Core\_Files\#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 **Output:**  
  
```  
<Item>Test with an entity: 123</Item><Item>Test with a child element <more> stuff</Item><Item>Test with a CDATA section <![CDATA[<456>]]]><![CDATA[]> def</Item><Item>Test with a char entity: A</Item><!-- Fourteen chars in this element.--><Item>1234567890ABCD</Item></Items>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; ReadAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; ReadAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ストリームから次のノードを非同期に読み取ります。</summary>
        <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.Read%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public abstract bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadAttributeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、属性値を解析して、1 つ以上に <see langword="Text" />, 、<see langword="EntityReference" />, 、または <see langword="EndEntity" /> ノードです。</summary>
        <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
 <c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して呼び出した後 <xref:System.Xml.XmlReader.MoveToAttribute%2A> に目を通して属性値を構成するテキストまたはエンティティ参照ノード。<xref:System.Xml.XmlReader.Depth%2A> 属性の値のノードの 1 を加えた属性ノードの深さはインクリメントに出入り一般エンティティ参照をステップ実行時に 1 つずつです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">返される値の型。  
  
 **注** の値である .NET Framework 3.5 のリリースでは、 <c>returnType</c> パラメーターができるようになりました、 <see cref="T:System.DateTimeOffset" /> 型です。</param>
        <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。 たとえば、<see cref="T:System.Xml.XmlQualifiedName" /> オブジェクトを <c>xs:string</c> に変換するときにこれを使用できます。  
  
 この値は、<see langword="null" /> の場合もあります。</param>
        <summary>指定された型のオブジェクトとして内容を読み取ります。</summary>
        <returns>要求された型に変換された、連結されたテキストの内容または属性値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、現在のリーダーの位置でテキストの内容を読み取り、要求された戻り値の型に変換します。 テキスト、空白、有意の空白、および CDATA セクションは連結されます。 コメントと処理命令はスキップされ、エンティティ参照は自動的に解決されます。  
  
 このメソッドは読み取り、必要に応じて、変換、およびコンテンツの現在のノードからアトミック値の項目を返すために使用します。 入力の型が現在のノードの値を含むターゲット型のインスタンスでは、現在のノードの型のマッピングが有効な場合が返されます。 「解説」を参照してください、<xref:System.Xml.XmlReader> 既定のマッピングの一覧について referencepage です。  
  
 たとえば、次の XML テキストをしたとします。  
  
```  
<elem>123 <!-- comment --> <?pi my_text?> 456 <?pi another_pi?></elem>  
```  
  
 データが型指定されておりに文字列の配列が指定されたかどうか、 <xref:System.Xml.XmlReader.ReadContentAs%2A> メソッド呼び出し、整数値が有効な CLR 型マッピングの一覧に従って文字列から変換されました。  
  
 データが型指定されていて、指定に文字列の配列が、 <xref:System.Xml.XmlReader.ReadContentAs%2A> メソッドの呼び出し、個別の文字列にコンテンツを解析し、します。 2 つの文字列を格納する配列には、「123」および「456」の値が返されます。 コンテンツからは、空白は保持されません。  
  
 一般に型指定されていないデータを表示する場合、コンテンツが指定された型に従って解析されます。 たとえば、整数の配列に提供、 <xref:System.Xml.XmlReader.ReadContentAs%2A> {123,456} の整数の配列に文字列を解析し、メソッドの呼び出しです。  
  
 次の例では XML テキストが区切られないスペース  
  
```  
<elem>123<!-- comment --><?pi my_text?>456789<?pi another_pi?></elem>  
```  
  
 コンテンツが型指定されたあり、文字列の配列に指定されたかどうか、 <xref:System.Xml.XmlReader.ReadContentAs%2A> メソッドを呼び出して、値 123456789 で連結された文字列が返される 1 つを含む配列。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadContentAsAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlReader.ReadContentAs%2A> メソッドを文字列オブジェクトの配列に色の要素の内容を返します。  
  
 [!code-csharp[XmlReader.ReadContentAs\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadContentAs/CS/readContentAs.cs#2)]
 [!code-vb[XmlReader.ReadContentAs\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadContentAs/VB/readContentAs.vb#2)]  
  
 この例は、`dataFile_2.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadContentAs\#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadContentAs/XML/dataFile_2.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.FormatException">コンテンツは、指定した型の正しい形式ではありません。</exception>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="returnType" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.OverflowException">
          <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadContentAsAsync&gt;c__async1))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">返される値の型。</param>
        <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
        <summary>指定された型のオブジェクトとして内容を非同期に読み取ります。</summary>
        <returns>要求された型に変換された、連結されたテキストの内容または属性値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadContentAs%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>コンテンツを読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コンテンツをストリームをデコード、 `Base64` コンテンツ、およびデコードされたバイナリ バイトを返します \(たとえば、インライン `Base64` でエンコードされた GIF イメージ\) をバッファーにします。 このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。 詳細については、RFC 1521 を参照してください。"MIME \(Multipurpose Internet Mail Extensions\) パート 1: を指定すると、Internet Message Bodies の形式を記述するための機構"です。 Rfc を取得する、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkId=37119)します。  
  
> [!NOTE]
>  呼び出しの間でのリーダーのプロパティのいずれかにアクセスする必要がありますできません、 [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64%2A> メソッド、メソッドが値を返すまで `0`します。  
  
 このメソッドでは、次の動作があります。  
  
-   [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64%2A> 値を返します `0` で動作がバイト ストリームの末尾に到達したとき。 最初の非コンテンツ ノードでは、リーダーが配置されます。  
  
-   要求した場合や、リーダーは現在の位置に留まりますストリームに残されますよりバイトの正確な数です。  
  
-   [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64%2A> 次の XML ノード型でサポートされていません: `Element`, 、`XmlDeclaration`, 、`None`, 、`Document`, 、`DocumentType`, 、`Notation`, 、`Entity`, 、`DocumentFragment`です。  
  
 このメソッドの非同期バージョンは、 [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64Async%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>コンテンツを非同期に読み取り、Base64 でデコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [ReadContentAsBase64Async メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [ReadContentAsBase64Async メソッド \(Byte\<xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、コンテンツをストリームをデコード、 `BinHex` コンテンツ、およびデコードされたバイナリ バイトを返します \(たとえば、インライン `BinHex` でエンコードされた GIF イメージ\) をバッファーにします。 このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。  
  
> [!NOTE]
>  呼び出しの間でのリーダーのプロパティのいずれかにアクセスする必要がありますできません、 [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> メソッド、メソッドが値を返すまで `0`します。  
  
 このメソッドでは、次の動作があります。  
  
-   [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> 値を返します `0` で動作がバイト ストリームの末尾に到達したとき。 最初の非コンテンツ ノードでは、リーダーが配置されます。  
  
-   要求したか、バイトのままになって、ストリーム リーダーよりも正確な数は、現在の位置に留まります。  
  
-   [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> 次の XML ノード型でサポートされていません: `Element`, 、`XmlDeclaration`, 、`None`, 、`Document`, 、`DocumentType`, 、`Notation, Entity`, 、`DocumentFragment`です。  
  
 このメソッドの非同期バージョンは、 [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHexAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>非同期的に、コンテンツを読み取り、 <see langword="BinHex" /> デコードされたバイナリ バイトです。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [ReadContentAsBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [ReadContentAsBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadContentAsBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsBoolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see langword="Boolean" />です。</summary>
        <returns>テキストの内容として、 <see cref="T:System.Boolean" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:boolean`, 、リーダーが返す、ボックス化解除された <xref:System.Boolean> オブジェクトです。 コンテンツが型指定しない場合 `xsd:boolean`, に変換しようとしているリーダー、 <xref:System.Boolean> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、次を参照してください。、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlReader.ReadContentAsBoolean%2A> B として属性の読み取りメソッド`oolean` 値。  
  
 [!code-csharp[XmlReader.ReadContentAs\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadContentAs/CS/readContentAs.cs#1)]
 [!code-vb[XmlReader.ReadContentAs\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadContentAs/VB/readContentAs.vb#1)]  
  
 この例は、`dataFile_2.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadContentAs\#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadContentAs/XML/dataFile_2.xml#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadContentAsDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see cref="T:System.DateTime" /> オブジェクトです。</summary>
        <returns>テキストの内容として、 <see cref="T:System.DateTime" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:dateTime`, 、リーダーが返す、ボックス化解除された <xref:System.DateTime> オブジェクトです。 コンテンツが型指定しない場合 `xsd:dateTime`, に変換しようとしているリーダー、 <xref:System.DateTime> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
> [!NOTE]
>  内容が <xref:System.DateTime.Year%2A?displayProperty=fullName> として型指定されている場合は、`xsd:gMonthDay` 値は信頼できません。<xref:System.Xml.XmlReader> 常に、 <xref:System.DateTime.Year%2A?displayProperty=fullName> 1,904 ､ ホ値します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、次を参照してください。、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDateTimeOffset">
      <MemberSignature Language="C#" Value="public virtual DateTimeOffset ReadContentAsDateTimeOffset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTimeOffset ReadContentAsDateTimeOffset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</summary>
        <returns>テキストの内容として、 <see cref="T:System.DateTimeOffset" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadContentAsDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDecimal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see cref="T:System.Decimal" /> オブジェクトです。</summary>
        <returns>現在の位置でテキストの内容、 <see cref="T:System.Decimal" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:decimal`, 、リーダーが返す、ボックス化解除された <xref:System.Decimal> オブジェクトです。 コンテンツが型指定しない場合 `xsd:decimal`, に変換しようとしているリーダー、 <xref:System.Decimal> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、次を参照してください。、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadContentAsDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsDouble" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置のテキストの内容を、倍精度浮動小数点数として読み取ります。</summary>
        <returns>倍精度浮動小数点数としてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:double`, 、リーダーは、倍精度浮動小数点数を返します。 コンテンツが型指定しない場合 `xsd:double`, 、によって定義されたルールに従って倍精度浮動小数点数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、次を参照してください。、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadContentAsFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsFloat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置のテキストの内容を、単精度浮動小数点数として読み取ります。</summary>
        <returns>現在の位置における単精度浮動小数点数としてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:float`, 、リーダーが返す、ボックス化解除された単精度浮動小数点数。 コンテンツが型指定しない場合 `xsd:float`, 、によって定義されたルールに従って単精度浮動小数点数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadContentAsInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsInt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を 32 ビット符号付き整数として読み取ります。</summary>
        <returns>32 ビット符号付き整数としてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:integer`, 、リーダーがボックス化解除の 32 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:integer`, 、によって定義されたルールに従って 32 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader>リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadContentAsLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsLong" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を 64 ビット符号付き整数として読み取ります。</summary>
        <returns>64 ビット符号付き整数としてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが入力した場合は `xsd:long`, 、リーダーがボックス化解除された 64 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:long`, 、によって定義されたルールに従って 64 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 次の表では、これについて説明しますメソッドには、各ノードの型がどのように処理します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|同じ `XmlConvert.ToXxx` 属性値にします。|リーダーは現在の位置に留まります|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader>リファレンス ページです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadContentAsObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see cref="T:System.Object" />です。</summary>
        <returns>最も適切な共通言語ランタイム \(CLR\) オブジェクトとしてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 コンテンツが型指定された場合、リーダーがで指定された、最も適切な型のボックス化された CLR を返します、 <xref:System.Xml.XmlReader.ValueType%2A> プロパティです。 コンテンツがリスト型の場合、リーダーは、適切な型のボックス化されたオブジェクトの配列を返します。  
  
> [!NOTE]
>  コンテンツの解析中に、検証エラーが発生して、リーダーが配置されている場合、 <xref:System.Xml.XmlReader> によって作成されたオブジェクト、 <xref:System.Xml.XmlReader.Create%2A> メソッドは、リーダーがコンテンツを文字列としてを返します。 つまり、検証エラーまたは警告が発生すると、コンテンツと見なされます型指定します。  
  
 コンテンツが型指定されていない場合、リーダーはコンテンツを文字列として返します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダーは現在の位置に留まります|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|リーダーがリーダーを検証するスキーマの場合、要素の値 \(<xref:System.Xml.XmlReaderSettings.ValidationType%2A> に設定されている <xref:System.Xml.ValidationType.Schema>\) 以外の場合、空の文字列です。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadContentAsObjectAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadContentAsObjectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsObjectAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadContentAsObjectAsync&gt;c__async0))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を非同期に読み取ります、 <see cref="T:System.Object" />です。</summary>
        <returns>最も適切な共通言語ランタイム \(CLR\) オブジェクトとしてのテキストの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadContentAsObject%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadContentAsString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を読み取り、 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>テキストの内容として、 <see cref="T:System.String" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、テキスト、空白、有意の空白、および CDATA セクションを連結し、コメントや処理命令をスキップします。 エンティティ参照は、自動的に解決されます。  
  
 このメソッドを使用する文字列、またはコメントをスキップすると、処理命令テキストの内容を読み取り、型指定された値を変換します。  
  
 次の表では、このメソッドが各ノードの型を処理する方法について説明します。  
  
|XmlNodeType|戻り値|リーダーの動作|  
|-----------------|---------|-------------|  
|`Text`<br /><br /> `CDATA`<br /><br /> `Whitespace`<br /><br /> `SignificantWhitespace`<br /><br /> `EntityReference`<br /><br /> `EndEntity`|テキストの連結されたコンテンツ、CDATA、空白、および有意の空白のノードが指定された型に変換されます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`Attribute`|呼び出しと同じ `XmlConvert.ToXxx` 属性値にします。|リーダは現在の位置に留まります。|  
|`Comment`<br /><br /> `ProcessingInstruction`|処理命令 \(PI\) またはコメントは無視し、PI またはコメントに続く連結されたテキスト コンテンツを読みます。|次の要素開始タグまたは要素終了タグに移動します。 エンティティ参照は自動的に展開されます。|  
|`EndElement`|空の文字列。|リーダは現在の位置に留まります。|  
|`Element`<br /><br /> `XmlDeclaration`<br /><br /> `None`<br /><br /> `Document`<br /><br /> `DocumentType`<br /><br /> `Notation`<br /><br /> `Entity`<br /><br /> `DocumentFragment`|<xref:System.InvalidOperationException> がスローされます。|未定義。ただし、リーダーは通常、現在の位置に留まります。|  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadContentAsStringAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">試行が正しくありません。</exception>
        <exception cref="T:System.FormatException">文字列の形式が正しくありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadContentAsStringAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadContentAsStringAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の位置でテキストの内容を非同期に読み取ります、 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>テキストの内容として、 <see cref="T:System.String" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadContentAsString%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">返される値の型。  
  
 **注** の値である .NET Framework 3.5 のリリースでは、 <c>returnType</c> パラメーターができるようになりました、 <see cref="T:System.DateTimeOffset" /> 型です。</param>
        <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
        <summary>要素の内容を要求された型として返します。</summary>
        <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadElementContentAsAsync%2A>です。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlReader.ReadElementContentAs%2A> の内容を読み取るためのメソッド、 `date` ノードです。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#5](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#5)]
 [!code-vb[XmlReader.ReadElementContentAs\#5](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#5)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.OverflowException">
          <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAs">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAs (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAs(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="returnType">返される値の型。  
  
 **注** の値である .NET Framework 3.5 のリリースでは、 <c>returnType</c> パラメーターができるようになりました、 <see cref="T:System.DateTimeOffset" /> 型です。</param>
        <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、要素の内容を要求された型として読み込みます。</summary>
        <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
        <exception cref="T:System.OverflowException">
          <see langword="Decimal.MaxValue" /> を読み取りました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsAsync (Type returnType, System.Xml.IXmlNamespaceResolver namespaceResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsAsync(class System.Type returnType, class System.Xml.IXmlNamespaceResolver namespaceResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadElementContentAsAsync&gt;c__async4))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="namespaceResolver" Type="System.Xml.IXmlNamespaceResolver" />
      </Parameters>
      <Docs>
        <param name="returnType">返される値の型。</param>
        <param name="namespaceResolver">型変換に関連する名前空間プレフィックスの解決に使用される <see cref="T:System.Xml.IXmlNamespaceResolver" /> オブジェクト。</param>
        <summary>要素の内容を要求された型として非同期に読み取ります。</summary>
        <returns>要求された型のオブジェクトに変換された要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadElementContentAs%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>要素を読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは要素の内容を使用してデコード `Base64` のエンコードとデコードされたバイナリ バイトを返します \(たとえば、インライン `Base64`\-エンコードされた GIF イメージ\) バッファーにします。 詳細については、RFC 1521 を参照してください。"MIME \(Multipurpose Internet Mail Extensions\) パート 1: を指定すると、Internet Message Bodies の形式を記述するための機構"です。 Rfc を取得する、 [Request for Comments Web site](http://go.microsoft.com/fwlink/?LinkId=37119)します。  
  
 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A> 単純なコンテンツの要素を読み取るだけことができます。 要素には、テキスト、空白、有意の空白、CDATA セクション、コメントおよび処理命令を含めることができます。 自動的に展開されるエンティティ参照型を含めることもできます。 要素には、子要素を持つことはできません。  
  
 このメソッドとよく似ていますが、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBase64%2A> する点が異なりますメソッドは、要素ノード型でのみ呼び出すことができます。  
  
 場合、 `count` 値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と等しい場合、または、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader> ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。 次の [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader> メソッドの呼び出しは、ゼロが返されたし、次のノードは、リーダー、 `EndElement`です。  
  
 呼び出した場合 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.Read%2A> 最初のコンテンツが読み取られていた場合、リーダーが動作の要素の内容のすべてを使用すると、前にし、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.Read%2A> メソッドが呼び出されました。 これは、終了要素が出現するまでに、リーダーがすべてのテキストを読み取ることを意味します。 終了タグのノードを読み取り、次のノードを読み取るされ、後続のノード上に自身を配置します。  
  
 このメソッドの非同期バージョンは、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBase64Async%2A>です。  
  
   
  
## 例  
 次の例は、インラインを読み取って `Base64` エンコードされるイメージです。`Base64` 内でデータが埋め込まれて、 `<image>` 要素。 A [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.IO.BinaryWriter> 新しいバイナリ データ ファイルを作成するために使用します。  
  
 [!code-csharp[XmlReader\_Read\_Write\_Binary\#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#4)]
 [!code-vb[XmlReader\_Read\_Write\_Binary\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <exception cref="T:System.Xml.XmlException">要素には、混合コンテンツが含まれています。</exception>
        <exception cref="T:System.FormatException">コンテンツは、要求された型に変換できません。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64Async">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBase64Async (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBase64Async(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>要素を非同期に読み取り、<see langword="Base64" /> の内容をデコードします。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This is the asynchronous version of [ReadElementContentAsBase64Async メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A>, with the same functionality. To use this method, you must set the [ReadElementContentAsBase64Async メソッド \(Byte\<xref:System.Xml.XmlReaderSettings.Async%2A> flag to **languageKeyword tag is not supported!!!!**  
.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" /> に設定せずに、<see cref="T:System.Xml.XmlReader" /> 非同期メソッドが呼び出されました。 この場合、「非同期メソッドを使用する場合、XmlReaderSettings.Async を True に設定します」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは要素の内容を使用してデコード `BinHex` のエンコードとデコードされたバイナリ バイトを返します \(たとえば、インライン `BinHex`\-エンコードされた GIF イメージ\) バッファーにします。  
  
 このメソッドは、単純なコンテンツの要素を読み取るだけことができます。 要素には、テキスト、空白、有意の空白、CDATA セクション、コメントおよび処理命令を含めることができます。 自動的に展開されるエンティティ参照型を含めることもできます。 要素には、子要素を持つことはできません。  
  
 このメソッドとよく似ていますが、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadContentAsBinHex%2A> する点が異なりますメソッドは、要素ノード型でのみ呼び出すことができます。  
  
 場合、 `count` 値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と等しい場合、または、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader> ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。 次の [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader> メソッドの呼び出しは、ゼロが返されたし、次のノードは、リーダー、 `EndElement`です。  
  
 呼び出した場合 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.Read%2A> 最初のコンテンツが読み取られていた場合、リーダーが動作の要素の内容のすべてを使用すると、前にし、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.Read%2A> メソッドが呼び出されました。 これは、終了要素が出現するまでに、リーダーがすべてのテキストを読み取ることを意味します。 終了タグのノードを読み取り、次のノードを読み取るされ、後続のノード上に自身を配置します。  
  
 このメソッドの非同期バージョンは、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBinHexAsync%2A>です。  
  
   
  
## 例  
 次の例は、インラインを読み取って `BinHex` エンコードされるイメージです。`BinHex` 内でデータが埋め込まれて、 `<image>` 要素。 A [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.IO.BinaryWriter> 新しいバイナリ データ ファイルを作成するために使用します。  
  
 [!code-csharp[XmlReader\_Read\_Write\_Binary\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Read_Write_Binary/CS/readBinary.cs#2)]
 [!code-vb[XmlReader\_Read\_Write\_Binary\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Read_Write_Binary/VB/readBinary.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <exception cref="T:System.Xml.XmlException">要素には、混合コンテンツが含まれています。</exception>
        <exception cref="T:System.FormatException">コンテンツは、要求された型に変換できません。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHexAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadElementContentAsBinHexAsync (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadElementContentAsBinHexAsync(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>非同期的に、要素を読み取り、 <see langword="BinHex" /> コンテンツです。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [ReadElementContentAsBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [ReadElementContentAsBinHexAsync メソッド \(Byte\<xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBoolean" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.Boolean" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.Boolean" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 要素の内容が入力した場合は `xsd:boolean`, 、リーダーが返す、ボックス化解除された <xref:System.Boolean> オブジェクトです。 コンテンツが型指定しない場合 `xsd:boolean`, に変換しようとしているリーダー、 <xref:System.Boolean> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.Boolean" /> オブジェクトです。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBoolean">
      <MemberSignature Language="C#" Value="public virtual bool ReadElementContentAsBoolean (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadElementContentAsBoolean(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>確認、指定されたローカル名と名前空間 URI と一致する現在の要素のし、現在の要素を読み込んでとして内容を返します、 <see cref="T:System.Boolean" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.Boolean" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:boolean`, 、リーダーが返す、ボックス化解除された <xref:System.Boolean> オブジェクトです。 コンテンツが型指定しない場合 `xsd:boolean`, に変換しようとしているリーダー、 <xref:System.Boolean> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.DateTime" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.DateTime" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:dateTime`, 、リーダーが返す、ボックス化解除された <xref:System.DateTime> オブジェクトです。 コンテンツが型指定しない場合 `xsd:dateTime`, に変換しようとしているリーダー、 <xref:System.DateTime> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
> [!NOTE]
>  内容が <xref:System.DateTime.Year%2A?displayProperty=fullName> として型指定されている場合は、`xsd:gMonthDay` 値は信頼できません。<xref:System.Xml.XmlReader> 常に、 <xref:System.DateTime.Year%2A?displayProperty=fullName> 1,904 ､ ホ値します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlReader.ReadElementContentAsDateTime%2A> の内容を読み取るためのメソッド、 `date` 要素。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#4](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#4)]
 [!code-vb[XmlReader.ReadElementContentAs\#4](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#4)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.DateTime" /> オブジェクトです。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDateTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ReadElementContentAsDateTime (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ReadElementContentAsDateTime(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDateTime(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>確認、指定されたローカル名と名前空間 URI と一致する現在の要素のし、現在の要素を読み込んでとして内容を返します、 <see cref="T:System.DateTime" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.DateTime" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:dateTime`, 、リーダーが返す、ボックス化解除された <xref:System.DateTime> オブジェクトです。 コンテンツが型指定しない場合 `xsd:dateTime`, に変換しようとしているリーダー、 <xref:System.DateTime> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
> [!NOTE]
>  内容が <xref:System.DateTime.Year%2A?displayProperty=fullName> として型指定されている場合は、`xsd:gMonthDay` 値は信頼できません。<xref:System.Xml.XmlReader> 常に、 <xref:System.DateTime.Year%2A?displayProperty=fullName> 1,904 ､ ホ値します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDecimal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.Decimal" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.Decimal" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 リーダーが要素へのコンテンツを変換しようとした場合、 <xref:System.Decimal> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.Decimal" />です。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDecimal">
      <MemberSignature Language="C#" Value="public virtual decimal ReadElementContentAsDecimal (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Decimal ReadElementContentAsDecimal(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>確認、指定されたローカル名と名前空間 URI と一致する現在の要素のし、現在の要素を読み込んでとして内容を返します、 <see cref="T:System.Decimal" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.Decimal" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 リーダーが要素へのコンテンツを変換しようとした場合、 <xref:System.Decimal> オブジェクトによって定義されたルールに従って、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.Decimal" />です。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDouble" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み込み、その内容を倍精度浮動小数点数として返します。</summary>
        <returns>倍精度浮動小数点数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:double`, 、リーダーは、倍精度浮動小数点数を返します。 コンテンツが型指定しない場合 `xsd:double`, 、によって定義されたルールに従って倍精度浮動小数点数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 次の例では、このメソッドを使用して、倍精度浮動小数点数としての要素の内容を返します。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#7](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#7)]
 [!code-vb[XmlReader.ReadElementContentAs\#7](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#7)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、倍精度浮動小数点数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsDouble">
      <MemberSignature Language="C#" Value="public virtual double ReadElementContentAsDouble (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ReadElementContentAsDouble(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を倍精度浮動小数点数として返します。</summary>
        <returns>倍精度浮動小数点数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:double`, 、リーダーは、倍精度浮動小数点数を返します。 コンテンツが型指定しない場合 `xsd:double`, 、によって定義されたルールに従って倍精度浮動小数点数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsFloat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み込み、その内容を単精度浮動小数点数として返します。</summary>
        <returns>単精度浮動小数点数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 リーダーが要素の内容をによって定義されたルールに従って単精度浮動小数点数に変換しようとした場合、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、単精度浮動小数点数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsFloat">
      <MemberSignature Language="C#" Value="public virtual float ReadElementContentAsFloat (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ReadElementContentAsFloat(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を単精度浮動小数点数として返します。</summary>
        <returns>単精度浮動小数点数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 リーダーが要素の内容をによって定義されたルールに従って単精度浮動小数点数に変換しようとした場合、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、単精度浮動小数点数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsInt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取り、その内容を 32 ビット符号付き整数として返します。</summary>
        <returns>32 ビット符号付き整数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:integer`, 、リーダーがボックス化解除の 32 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:integer`, 、によって定義されたルールに従って 32 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、32 ビット符号付き整数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsInt">
      <MemberSignature Language="C#" Value="public virtual int ReadElementContentAsInt (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadElementContentAsInt(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 32 ビット符号付き整数として返します。</summary>
        <returns>32 ビット符号付き整数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:integer`, 、リーダーがボックス化解除の 32 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:integer`, 、によって定義されたルールに従って 32 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、32 ビット符号付き整数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsLong" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取り、その内容を 64 ビット符号付き整数として返します。</summary>
        <returns>64 ビット符号付き整数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:long`, 、リーダーがボックス化解除された 64 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:long`, 、によって定義されたルールに従って 64 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 次の例では、 <xref:System.Xml.XmlReader.ReadElementContentAsLong%2A> の内容を読み取るためのメソッド、 `longValue` 要素。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#3](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#3)]
 [!code-vb[XmlReader.ReadElementContentAs\#3](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#3)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、64 ビット符号付き整数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsLong">
      <MemberSignature Language="C#" Value="public virtual long ReadElementContentAsLong (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 ReadElementContentAsLong(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が現在の要素のものと一致することを確認し、現在の要素を読み込んで内容を 64 ビット符号付き整数として返します。</summary>
        <returns>64 ビット符号付き整数としての要素の内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 コンテンツが入力した場合は `xsd:long`, 、リーダーがボックス化解除された 64 ビット符号付き整数を返します。 コンテンツが型指定しない場合 `xsd:long`, 、によって定義されたルールに従って 64 ビット符号付き整数に変換しようとしているリーダー、 [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 詳細については、<xref:System.Xml.XmlReader> のリファレンス ページの「解説」を参照してください。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、64 ビット符号付き整数に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.Object" />です。</summary>
        <returns>最も適切な型のボックス化された共通言語ランタイム \(CLR\) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティを適切な CLR 型を決定します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadElementContentAsObjectAsync%2A>です。  
  
   
  
## 例  
 次の例の内容を読み取るメソッドを使用して、 `price` ノードです。 リーダーは、スキーマ内の情報を使用して、コンテンツを適切なデータ型にマップします。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#6](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#6)]
 [!code-vb[XmlReader.ReadElementContentAs\#6](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#6)]  
  
 この例では、入力として次の 2 つのファイルを使用します。  
  
 `item.xml`  
  
 [!code-xml[XmlReader.ReadElementContentAs\#11](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/item.xml#11)]  
  
 `item.xsd`  
  
 [!code-xml[XmlReader.ReadElementContentAs\#12](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/item.xsd#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObject">
      <MemberSignature Language="C#" Value="public virtual object ReadElementContentAsObject (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object ReadElementContentAsObject(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>確認、指定されたローカル名と名前空間 URI と一致する現在の要素のし、現在の要素を読み込んでとして内容を返します、 <see cref="T:System.Object" />です。</summary>
        <returns>最も適切な型のボックス化された共通言語ランタイム \(CLR\) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティを適切な CLR 型を決定します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容は、要求された型に変換できません。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsObjectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; ReadElementContentAsObjectAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; ReadElementContentAsObjectAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsObjectAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadElementContentAsObjectAsync&gt;c__async2))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期的に現在の要素を読み込んで内容を返しますとして、 <see cref="T:System.Object" />です。</summary>
        <returns>最も適切な型のボックス化された共通言語ランタイム \(CLR\) オブジェクト。<see cref="P:System.Xml.XmlReader.ValueType" /> プロパティを適切な CLR 型を決定します。 内容がリスト型として型指定されている場合、このメソッドは適切な型のボックス化されたオブジェクトの配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadElementContentAsObject%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.String" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadElementContentAsStringAsync%2A>です。  
  
   
  
## 例  
 次の例では読み取り、 `stringValue` 要素とテキスト コンテンツ \(コメントを無視し、処理命令\) を返します。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#1)]
 [!code-vb[XmlReader.ReadElementContentAs\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#1)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.String" /> オブジェクトです。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementContentAsString (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementContentAsString(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>確認、指定されたローカル名と名前空間 URI と一致する現在の要素のし、現在の要素を読み込んでとして内容を返します、 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.String" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、開始タグと、要素の内容を読み込んで、終了要素タグを越えてリーダーを移動します。 エンティティを展開し、処理命令とコメントは無視されます。 要素には、単純な内容だけを含めることができます。 つまり、子要素を持つできません。  
  
 詳細については、の「解説」セクションを参照してください、 <xref:System.Xml.XmlReader> リファレンス ページと [W3C XML Schema Part 2: Datatypes](http://go.microsoft.com/fwlink/?LinkId=4871) 推奨します。  
  
   
  
## 例  
 次の例では読み取り、 `stringValue` 要素とテキスト コンテンツ \(コメントを無視し、処理命令\) を返します。  
  
 [!code-csharp[XmlReader.ReadElementContentAs\#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.ReadElementContentAs/CS/readElementContentAs.cs#2)]
 [!code-vb[XmlReader.ReadElementContentAs\#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.ReadElementContentAs/VB/readElementContentAs.vb#2)]  
  
 この例は、`dataFile.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReader.ReadElementContentAs\#8](~/samples/snippets/xml/VS_Snippets_Data/XmlReader.ReadElementContentAs/XML/dataFile.xml#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.Xml.XmlException">現在の要素には、子要素が含まれています。  
  
 または  
  
 要素の内容に変換できない、 <see cref="T:System.String" /> オブジェクトです。</exception>
        <exception cref="T:System.ArgumentNullException">メソッドが呼び出された <see langword="null" /> 引数。</exception>
        <exception cref="T:System.ArgumentException">指定されたローカル名と名前空間 URI と一致しません、現在の要素の読み取り中です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsStringAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadElementContentAsStringAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadElementContentAsStringAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementContentAsStringAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadElementContentAsStringAsync&gt;c__async3))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>非同期的に現在の要素を読み込んで内容を返しますとして、 <see cref="T:System.String" /> オブジェクトです。</summary>
        <returns>要素の内容として、 <see cref="T:System.String" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadElementContentAsString%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementString">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>単純なテキストのみの要素を読み取ります。 ただし、ことをお勧めを使用すること、 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> メソッド代わりに、この操作を処理するより簡単な方法を提供するためです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Xml.XmlReader.ReadElementContentAsString%2A> テキスト要素を読み取ります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>テキストのみの要素を読みます。 ただし、ことをお勧めを使用すること、 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッド代わりに、この操作を処理するより簡単な方法を提供するためです。</summary>
        <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Xml.XmlReader.ReadElementContentAsString> テキスト要素を読み取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグではありません。または、見つかった要素に単純なテキスト値が含まれていません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">確認対象の名前。</param>
        <summary>確認、 <see cref="P:System.Xml.XmlReader.Name" /> テキストだけの要素を読み取る前に、指定した文字列と一致する見つかった要素のプロパティです。 ただし、ことをお勧めを使用すること、 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" /> メソッド代わりに、この操作を処理するより簡単な方法を提供するためです。</summary>
        <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Xml.XmlReader.ReadElementContentAsString> テキスト要素を読み取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグではない場合場合、要素 <see langword="Name" /> 指定した引数が一致しないか、要素が見つかった場合に、単純なテキスト値がないです。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadElementString">
      <MemberSignature Language="C#" Value="public virtual string ReadElementString (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadElementString(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadElementString(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">確認対象のローカル名。</param>
        <param name="ns">確認対象の名前空間 URI。</param>
        <summary>確認、 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> テキストだけの要素を読み取る前に、指定した文字列と一致する要素のプロパティにあります。 ただし、ことをお勧めを使用すること、 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" /> メソッド代わりに、この操作を処理するより簡単な方法を提供するためです。</summary>
        <returns>読み取られた要素内に格納されているテキスト。 要素が空の場合は、空の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Xml.XmlReader.ReadElementContentAsString%28System.String%2CSystem.String%29> テキスト要素を読み取ります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">次のコンテンツ ノードが開始タグではない場合場合、要素 <see langword="LocalName" /> または <see langword="NamespaceURI" /> 指定した引数は一致しないか、要素が見つかった場合に、単純なテキスト値がないです。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadEndElement">
      <MemberSignature Language="C#" Value="public virtual void ReadEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadEndElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコンテンツ ノードが終了タグで、リーダーを次のノードに進めることを確認します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-csharp[XmlReaderBasic\#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#11)]
 [!code-vb[XmlReaderBasic\#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#11)]  
  
 例では、 `book3.xml` ファイルです。  
  
 [!code-xml[XML\_Core\_Files\#6](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book3.xml#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">現在のノードが終了タグではないか、入力ストリームの正しくない XML が検出されたかどうか。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadStartElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadInnerXml">
      <MemberSignature Language="C#" Value="public virtual string ReadInnerXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadInnerXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadInnerXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、マークアップを含むすべての内容を文字列として読み取ります。</summary>
        <returns>現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。  
  
 現在のノードが要素でも属性でもない場合は、空の文字列が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、マークアップを含め、現在のノードのすべてのコンテンツを返します。 現在のノード \(開始タグ\) と対応する終了ノード \(終了タグ\) は返されません。 たとえば、次とします。  
  
```  
<node>  
 this <child id="123"/>  
</node>  
```  
  
 `ReadInnerXml` の場合、`this <child id="123"/>` が返されます。  
  
 このメソッドは、次のように、要素と属性のノードを処理します。  
  
|ノード型|呼び出し前に、の位置|XML フラグメント|戻り値|呼び出し後の位置|  
|----------|----------------|----------------|---------|--------------|  
|`Element`|`item1` 開始タグ上。|\< item1 \> text1 \<\/item1 \>\< item2 \> text2 \<\/item2 \>|text1|`item2` 開始タグ上。|  
|`Attribute`|`attr1` 属性ノード上。|\< 項目 attr1"val1"attr2 の \= \="val2"\> text \<\/item \>|val1|`attr1` 属性ノード上に留まる。|  
  
 リーダーがリーフ ノード上にある場合、`ReadInnerXml` の呼び出しは <xref:System.Xml.XmlReader.Read%2A> と同じです。 このメソッドを返します `String.Empty` \(を除く属性ノードの属性の値が返される場合\)。  
  
 このメソッドは、整形式の XML を確認します。 場合 `ReadInnerXml` から呼び出される、 <xref:System.Xml.XmlValidatingReader>, 、また、このメソッドが返されるコンテンツを検証します。  
  
 実装されている、 <xref:System.Xml.XmlNodeReader>, 、<xref:System.Xml.XmlTextReader> と `XmlValidatingReader` クラス、 `ReadOuterXml` メソッドは、名前空間を認識します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadInnerXmlAsync%2A>です。  
  
   
  
## 例  
 次の例を比較して、 `ReadInnerXml` と <xref:System.Xml.XmlReader.ReadOuterXml%2A> メソッドです。  
  
 [!code-csharp[XmlReaderBasic\#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#12)]
 [!code-vb[XmlReaderBasic\#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#12)]  
  
 例では `2books.xml` ファイルを入力として。  
  
 [!code-xml[XML\_Core\_Files\#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML が整形式または XML の解析中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadInnerXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadInnerXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadInnerXmlAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadInnerXmlAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadInnerXmlAsync&gt;c__async6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>マークアップを含むすべてのコンテンツを文字列として非同期に読み取ります。</summary>
        <returns>現在のノード内の、マークアップを含むすべての XML の内容。 現在のノードが子を持っていない場合は、空の文字列が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadInnerXml%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOuterXml">
      <MemberSignature Language="C#" Value="public virtual string ReadOuterXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadOuterXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadOuterXml" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、このノードとそのすべての子を表す内容 \(マークアップを含む\) を読み取ります。</summary>
        <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.Xml.XmlReader.ReadInnerXml%2A> 開始と終了タグを返す点が異なります。  
  
 このメソッドは、次のように、要素と属性のノードを処理します。  
  
|ノード型|呼び出し前に、の位置|XML フラグメント|戻り値|呼び出し後の位置|  
|----------|----------------|----------------|---------|--------------|  
|`Element`|`item1` 開始タグ上。|\< item1 \> text1 \<\/item1 \>\< item2 \> text2 \<\/item2 \>|\< item1 \> text1 \<\/item1 \>|`item2` 開始タグ上。|  
|`Attribute`|`attr1` 属性ノード上。|\< 項目 attr1"val1"attr2 の \= \="val2"\> text \<\/item \>|attr1 \="val1"|`attr1` 属性ノード上に留まる。|  
  
 リーダーがリーフ ノード上にある場合、`ReadOuterXml` の呼び出しは <xref:System.Xml.XmlReader.Read%2A> と同じです。 このメソッドを返します `String.Empty` \(を除く属性ノードの属性のマークアップが返される場合\)。  
  
 このメソッドは、整形式の XML を確認します。 場合 `ReadOuterXml` から呼び出される、 <xref:System.Xml.XmlValidatingReader>, 、また、このメソッドが返されるコンテンツを検証  
  
 実装されている、 <xref:System.Xml.XmlNodeReader>, 、<xref:System.Xml.XmlTextReader> と `XmlValidatingReader` クラス、 `ReadOuterXml` メソッドは、名前空間を認識します。 次の XML テキストを指定した `<A xmlns:S="urn:1"><S:B>hello</S:B></A>`, にリーダーが配置されている場合は、 `S:B` 開始タグ、 `ReadOuterXml` 返します `<S:B xmlns:S="urn:1">hello<S:B/>`します。  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.ReadOuterXmlAsync%2A>です。  
  
   
  
## 例  
 次の例を比較して、 `ReadInnerXml` と `ReadOuterXml` メソッドです。  
  
 [!code-csharp[XmlReaderBasic\#12](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#12)]
 [!code-vb[XmlReaderBasic\#12](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#12)]  
  
 例では `2books.xml` ファイルを入力として。  
  
 [!code-xml[XML\_Core\_Files\#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML が整形式または XML の解析中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadOuterXmlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;string&gt; ReadOuterXmlAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; ReadOuterXmlAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadOuterXmlAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlReader/&lt;ReadOuterXmlAsync&gt;c__async8))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このノードとその子を表すコンテンツをマークアップを含めて非同期に読み取ります。</summary>
        <returns>リーダーが要素ノードまたは属性ノードに配置されている場合、このメソッドは、現在のノードおよびそのすべての子の、マークアップを含む、XML の内容をすべて返します。それ以外の場合は、空の文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.ReadOuterXml%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードが要素であるか調べ、リーダーを次のノードに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出す <xref:System.Xml.XmlReader.IsStartElement%2A> 続けて <xref:System.Xml.XmlReader.Read%2A> する入力ストリームについては、その要素のコンテンツを配置します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">入力ストリームでは、正しくない XML が見つかりました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要素の限定名。</param>
        <summary>現在のコンテンツ ノードを持つ要素であることを確認、指定された <see cref="P:System.Xml.XmlReader.Name" /> 、リーダーを次のノードに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの呼び出しがへの呼び出しに対応して <xref:System.Xml.XmlReader.IsStartElement%2A> への呼び出し後に <xref:System.Xml.XmlReader.Read%2A>します。  
  
   
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-csharp[XmlReaderBasic\#11](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#11)]
 [!code-vb[XmlReaderBasic\#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#11)]  
  
 例では、 `book3.xml` ファイルです。  
  
 [!code-xml[XML\_Core\_Files\#6](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/book3.xml#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">入力ストリームでは、正しくない XML が見つかりました。  
  
 または  
  
 <see cref="P:System.Xml.XmlReader.Name" /> 要素と一致しない、指定された <paramref name="name" />します。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadStartElement">
      <MemberSignature Language="C#" Value="public virtual void ReadStartElement (string localname, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadStartElement(string localname, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localname" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localname">要素のローカル名。</param>
        <param name="ns">要素の名前空間 URI。</param>
        <summary>現在のコンテンツ ノードを持つ要素であることを確認、指定された <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 、リーダーを次のノードに進めます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの呼び出しがへの呼び出しに対応して <xref:System.Xml.XmlReader.IsStartElement%2A> への呼び出し後に <xref:System.Xml.XmlReader.Read%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">入力ストリームでは、正しくない XML が見つかりました。  
  
 または  
  
 <see cref="P:System.Xml.XmlReader.LocalName" /> と <see cref="P:System.Xml.XmlReader.NamespaceURI" /> 見つかった要素のプロパティでは、指定した引数が一致しません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="M:System.Xml.XmlReader.ReadEndElement" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public abstract System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、リーダーの状態を取得します。</summary>
        <value>リーダーの状態を指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlReader.ReadState%2A>プロパティには、次の値のいずれか。  
  
-   <xref:System.Xml.ReadState.Initial>, 、ときに、 <xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName>メソッドが呼び出されます。  
  
-   <xref:System.Xml.ReadState.Interactive>, 、ときに、 <xref:System.Xml.XmlReader.Read%2A?displayProperty=fullName> メソッドが呼び出されて、リーダーの追加のメソッドを呼び出すことができます。  
  
-   <xref:System.Xml.ReadState.EndOfFile>, 、XML ドキュメントの末尾を正常に到達したとします。  
  
-   <xref:System.Xml.ReadState.Closed>, 、ときに、 <xref:System.Xml.XmlReader.Close%2A?displayProperty=fullName> メソッドが呼び出されます。  
  
-   <xref:System.Xml.ReadState.Error>, 、ときに、エラーが原因で、読み取り操作を続行できません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public virtual string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、要素ノードまたはテキスト ノードの内容を文字列として読み取ります。 ただし、ことをお勧めを使用すること、 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" /> メソッド代わりに、この操作を処理するより簡単な方法を提供するためです。</summary>
        <returns>要素の内容または空の文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することをお勧めします <xref:System.Xml.XmlReader.ReadElementContentAsString%2A> を文字列としての要素またはテキスト ノードの内容を読み取るためのメソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xml.XmlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadSubtree" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しい返します <see langword="XmlReader" /> インスタンスを使用して、現在のノードとそのすべての子孫を読み取ることができます。</summary>
        <returns>新しい XML リーダーのインスタンスに設定 <see cref="F:System.Xml.ReadState.Initial" />します。 呼び出す、 <see cref="M:System.Xml.XmlReader.Read" /> メソッドを呼び出す前に位置したノードに新しいリーダーが配置、 <see cref="M:System.Xml.XmlReader.ReadSubtree" /> メソッドです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlReader.ReadSubtree%2A> 要素ノードでのみ呼び出すことができます。 サブツリー全体が読み取られると、呼び出し、 <xref:System.Xml.XmlReader.Read%2A> メソッドが返す `false`します。 新しい XML リーダーが閉じられた時点に配置されている元の readeris、 `EndElement` サブツリーのノードです。 したがって、呼び出した場合、 <xref:System.Xml.XmlReader.ReadSubtree%2A> サブツリーは読み取りおよび新しい XML リーダーにされた後、書籍要素の開始タグ上のメソッドが閉じられて、書籍要素の終了タグに元の XML リーダーが配置されています。  
  
 新しいリーダーが閉じられるまで、元のリーダーの操作はしないようにします。 元のリーダーの操作はサポートされず、その動作は予見できません。  
  
> [!NOTE]
>  <xref:System.Xml.XmlReader.ReadSubtree%2A> Creatingcopies いないを扱える個別に XML データのメソッドは目的としています。 たまたまのでは、XML 要素を囲む境界を作成します。 これは、別のコンポーネントで処理するためにデータを渡すし、コンポーネントにアクセスできるデータの量を制限する必要がある場合に便利です。 返された XML リーダーを渡すときに、 <xref:System.Xml.XmlReader.ReadSubtree%2A> 別のアプリケーション、アプリケーションにメソッドには、その XML 要素のみ、全体の XML ドキュメントではないがアクセスできます。  
  
   
  
## 例  
 <xref:System.Xml.XmlReader.ReadSubtree%2A> メソッドを使用する方法の例を次に示します。  
  
 [!code-csharp[XmlReaderBasic\#13](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#13)]
 [!code-vb[XmlReaderBasic\#13](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#13)]  
  
 このトピックの例を実行するのにには、次の XML データを使用します。  
  
```  
<?xml version="1.0" encoding="utf-8" ?>  
<Books>  
  <Book>  
    <Title>A Brief History of Time</Title>  
  </Book>  
  <Book>  
    <Title>Principle Of Relativity</Title>  
  </Book>  
  <Book>  
    <Title>Victory of Reason</Title>  
  </Book>  
  <Book>  
    <Title>The Unicorn that did not Fail</Title>  
  </Book>  
  <Book>  
    <Title>Rational Ontology</Title>  
  </Book>  
  <Book>  
    <Title>The Meaning of Pizza</Title>  
  </Book>  
</Books>  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">移動先となる要素の修飾名。</param>
        <summary>進めます、 <see cref="T:System.Xml.XmlReader" /> 指定した修飾名を持つ次の子孫要素にします。</summary>
        <returns>
          <see langword="true" /> 一致する子孫要素が見つかった場合それ以外の場合 <see langword="false" />します。 一致する子要素が見つからない場合、 <see cref="T:System.Xml.XmlReader" /> 終了タグが配置されている \(<see cref="P:System.Xml.XmlReader.NodeType" /> は <see langword="XmlNodeType.EndElement" />\) 要素のです。  
  
 場合、 <see cref="T:System.Xml.XmlReader" /> 要素に配置されていないときに <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" /> 呼ばれましたが、このメソッドが戻る <see langword="false" /> との位置、 <see cref="T:System.Xml.XmlReader" /> は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、2 番目の book ノードを解析します。  
  
 [!code-csharp[XmlReaderBasic\#14](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#14)]
 [!code-vb[XmlReaderBasic\#14](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#14)]  
  
 この例では、 `2books.xml`, 、入力として。  
  
 [!code-xml[XML\_Core\_Files\#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">このパラメーターは、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToDescendant">
      <MemberSignature Language="C#" Value="public virtual bool ReadToDescendant (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToDescendant(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">移動先となる要素のローカル名。</param>
        <param name="namespaceURI">移動先となる要素の名前空間 URI。</param>
        <summary>進めます、 <see cref="T:System.Xml.XmlReader" /> 指定されたローカル名と名前空間 URI の次の子孫要素にします。</summary>
        <returns>
          <see langword="true" /> 一致する子孫要素が見つかった場合それ以外の場合 <see langword="false" />します。 一致する子要素が見つからない場合、 <see cref="T:System.Xml.XmlReader" /> 終了タグが配置されている \(<see cref="P:System.Xml.XmlReader.NodeType" /> は <see langword="XmlNodeType.EndElement" />\) 要素のです。  
  
 場合、 <see cref="T:System.Xml.XmlReader" /> 要素に配置されていないときに <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" /> 呼ばれましたが、このメソッドが戻る <see langword="false" /> との位置、 <see cref="T:System.Xml.XmlReader" /> は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToFollowing(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">要素の限定名。</param>
        <summary>指定された修飾名の要素が見つかるまで読み込みます。</summary>
        <returns>
          <see langword="true" /> 一致する要素が見つかった場合それ以外の場合 <see langword="false" /> と <see cref="T:System.Xml.XmlReader" /> ファイルの終端状態にします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、機能的に同等の実行、 `following::name` 現在のノードからの XPath 式。 XML ドキュメントに名前を持つ要素を検索する簡単な方法を提供します。 指定した名前の一致する次の次の要素にリーダーを進めます `true` 一致する要素が見つからない場合。 次の例を使用して、リーダーは読み取る指定した要素の最初のインスタンスに転送用の読み取り中にします。  
  
```xml  
<!--"sample.xml"-->  
<?xmlversion="1.0">  
   <items>  
      <item xmls="urn:1"/>  
   </items>  
</xml>  
  
```  
  
```csharp  
XmlTextReader reader = newXmlTextReader("sample.xml");  
  
reader.ReadToFollowing("item");  
  
```  
  
 このメソッドは、すべてのノード型で呼び出すことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">このパラメーターは、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToFollowing">
      <MemberSignature Language="C#" Value="public virtual bool ReadToFollowing (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToFollowing(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">要素のローカル名。</param>
        <param name="namespaceURI">要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI が見つかるまで要素を読み込みます。</summary>
        <returns>
          <see langword="true" /> 一致する要素が見つかった場合それ以外の場合 <see langword="false" /> と <see cref="T:System.Xml.XmlReader" /> ファイルの終端状態にします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、機能的に同等の実行、 `following::name` 現在のノードからの XPath 式。 XML ドキュメントに名前を持つ要素を検索する簡単な方法を提供します。 指定した名前の一致する次の次の要素にリーダーを進めます `true` 一致する要素が見つからない場合。  
  
```xml  
<!--"sample.xml"-->  
<?xmlversion="1.0">  
   <items>  
      <item xmls="urn:1"/>  
   </items>  
</xml>  
  
```  
  
```csharp  
XmlTextReader reader = newXmlTextReader("sample.xml");  
  
reader.ReadToFollowing("item", "urn:1");  
  
```  
  
 このメソッドは、すべてのノード型で呼び出すことができます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToNextSibling(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">移動先となる兄弟要素の修飾名。</param>
        <summary>進めます、 <see langword="XmlReader" /> 指定した修飾名を持つ次の兄弟要素にします。</summary>
        <returns>
          <see langword="true" /> 一致する兄弟要素が見つかった場合それ以外の場合 <see langword="false" />します。 一致する兄弟要素が見つからない場合、 <see langword="XmlReader" /> 終了タグが配置されている \(<see cref="P:System.Xml.XmlReader.NodeType" /> は <see langword="XmlNodeType.EndElement" />\) の親要素です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  呼び出す必要はありません <xref:System.Xml.XmlReader.ReadToNextSibling%2A> ときに、 `XmlReader` 初期状態は、\(<xref:System.Xml.XmlReader.ReadState%2A> は <xref:System.Xml.ReadState.Initial>\)。 呼び出すことができます <xref:System.Xml.XmlReader.Read%2A> に進めておく、 `XmlReader` しを呼び出す、 <xref:System.Xml.XmlReader.ReadToNextSibling%2A> メソッドです。  
  
   
  
## 例  
 次の例では、各 book ノードの ISBN 属性を読み取ります。  
  
 [!code-csharp[XmlReaderBasic\#15](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#15)]
 [!code-vb[XmlReaderBasic\#15](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentException">このパラメーターは、空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadToNextSibling">
      <MemberSignature Language="C#" Value="public virtual bool ReadToNextSibling (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ReadToNextSibling(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">移動先となる兄弟要素のローカル名。</param>
        <param name="namespaceURI">移動先となる兄弟要素の名前空間 URI。</param>
        <summary>指定されたローカル名と名前空間 URI を使用して、<see langword="XmlReader" /> を次の兄弟要素に進めます。</summary>
        <returns>一致する兄弟要素が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 一致する兄弟要素が見つからない場合、<see langword="XmlReader" /> が親要素の終了タグ \(<see cref="P:System.Xml.XmlReader.NodeType" /> が <see langword="XmlNodeType.EndElement" />\) に配置されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Do not call <xref:System.Xml.XmlReader.ReadToNextSibling%2A> when the **languageKeyword tag is not supported!!!!**  
>  is an initial state \(<xref:System.Xml.XmlReader.ReadState%2A> is <xref:System.Xml.ReadState.Initial>\). You can call <xref:System.Xml.XmlReader.Read%2A> to advance the **languageKeyword tag is not supported!!!!**  
>  and then call the <xref:System.Xml.XmlReader.ReadToNextSibling%2A> method.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">先行の非同期操作が完了する前に、<see cref="T:System.Xml.XmlReader" /> メソッドが呼び出されました。 この場合、「非同期操作が既に実行されています」というメッセージと共に <see cref="T:System.InvalidOperationException" /> がスローされます。</exception>
        <exception cref="T:System.ArgumentNullException">両方のパラメーター値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunk">
      <MemberSignature Language="C#" Value="public virtual int ReadValueChunk (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 ReadValueChunk(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内のオフセット位置、 <see cref="T:System.Xml.XmlReader" /> 結果のコピーを開始できます。</param>
        <param name="count">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
        <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを読み込みます。</summary>
        <returns>バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、一度に 1 つの値に 1 つの文字列を割り当てる代わりに文字の数が少ないのは、ストリーミング方式で、XML ドキュメントに埋め込まれたテキストの非常に大量のストリームの読み取りを使用します。 値を持つ任意のノードでこのメソッドを呼び出すことができる \([ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.HasValue%2A> は `true`\)、ノードの値の実際のストリーミング、テキスト、空白および有意の空白のノードで呼び出された場合にのみ発生します。 属性および CDATA のノードを含むその他のノード型の値がキャッシュされます。  
  
 このメソッドが戻るのコンテンツだけ、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.Value%2A> プロパティと、移動されません、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader>です。  
  
 このメソッドは、指定した数の文字を読み取ります \(`count`\) を文字バッファーにノードの値の \(`buffer`\) 指定されたオフセット位置 \(`index`\) し、バッファーに書き込まれた文字数を返します。 返す、 `0` 値の末尾に到達したとき。 値を使用して再度読み取るには、それを再起動できません。  
  
 呼び出しの間に [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A> 、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader> プロパティは使用しないで変更を除き、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.Value%2A> プロパティです。 ときに、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.Value%2A> プロパティへのアクセス部分の値を返す可能性がありますか \(まだによって返される文字を含む [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A>\) または実装によって完全な値です。 すべての [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader> に実装して、 [ReadValueChunk メソッド \(Char\<xref:System.Xml> 名前空間の部分の値を返す、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.Value%2A> プロパティの実装です。  
  
 読み取り、その読み取りメソッドを呼び出しの間に呼び出すことができる [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A>です。 このような場合、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader> 、次に移動 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlNodeType> ストリームと返されるされていないすべての文字ではスキップされます。  
  
 ケースがある可能性がありますと [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A> 要求された文字数より小さいを返します。 たとえば、200 文字の値がサロゲート ペアと 127 と 128 の位置にあるがあり先 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A> 128 文字バッファーを持つメソッドの呼び出しは、要求された 128 ではなく 127 文字を返します。 次に、返されるサロゲート ペア [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A> 呼び出します。 この場合、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A> 行うようにが発生した場合、バッファーの最後に、不完全なサロゲート ペアがあるため、要求された 128 文字が返されませんでした。  
  
 このメソッドの非同期バージョンは、 [ReadValueChunk メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunkAsync%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーのインデックスまたはインデックス \+ カウントは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <exception cref="T:System.Xml.XmlException">XML データが整形式ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadValueChunkAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;int&gt; ReadValueChunkAsync (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;int32&gt; ReadValueChunkAsync(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内のオフセット位置、 <see cref="T:System.Xml.XmlReader" /> 結果のコピーを開始できます。</param>
        <param name="count">バッファーにコピーする最大文字数。 コピーされた実際の文字数は、このメソッドから返されます。</param>
        <summary>XML ドキュメントに埋め込まれたテキストの大量のストリームを非同期に読み取ります。</summary>
        <returns>バッファー内へ読み取られた文字数。 それ以上テキストの内容がない場合は、値として 0 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの [ReadValueChunkAsync メソッド \(Char\<xref:System.Xml.XmlReader.ReadValueChunk%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 [ReadValueChunkAsync メソッド \(Char\<xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public abstract void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.ResolveEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、解決のエンティティ参照を <see langword="EntityReference" /> ノードです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 リーダーが配置されている場合、 `EntityReference` ノード \(`XmlNodeType.EntityReference`\) 場合は、 <xref:System.Xml.XmlReader.Read%2A> 呼び出し元がこのメソッドでは、エンティティの置換テキストは解析後に呼び出されます。 エンティティの置換テキストが完了すると、 `EndEntity` エンティティ参照のスコープを閉じるノードが返されます。  
  
> [!NOTE]
>  このメソッドを呼び出した後、エンティティが属性の値の一部である場合、呼び出す必要があります <xref:System.Xml.XmlReader.ReadAttributeValue%2A> エンティティにステップ インします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="P:System.Xml.XmlReader.CanResolveEntity" />
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public virtual System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スキーマ検証の結果、現在のノードに割り当てられているスキーマ情報を取得します。</summary>
        <value>
          <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> オブジェクトの現在のノードのスキーマ情報を格納します。 要素、属性、または null でないと、テキスト ノードのスキーマ情報を設定できます <see cref="P:System.Xml.XmlReader.ValueType" /> \(型指定された値\)。  
  
 現在のノードが上記のノード型の 1 つでない場合、または場合、 <see langword="XmlReader" /> インスタンスは、スキーマ情報を報告していない、このプロパティを返します <see langword="null" />します。  
  
 このプロパティがから呼び出された場合、 <see cref="T:System.Xml.XmlTextReader" /> または <see cref="T:System.Xml.XmlValidatingReader" /> オブジェクトに、このプロパティは常に返す <see langword="null" />します。 これら <see langword="XmlReader" /> の実装からスキーマ情報は公開されないように、 <see langword="SchemaInfo" /> プロパティです。  
  
 <block subset="none" type="note">  
<para>  
 要素のスキーマ検証後の情報セット \(PSVI\) を取得する必要がある場合は要素の終了タグにリーダーを配置し、それ以外の場合は開始タグに配置します。 PSVI を素通り、 <see langword="SchemaInfo" /> リーダーのプロパティです。 作成している検証型リーダー <see cref="Overload:System.Xml.XmlReader.Create" /> で、 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> プロパティに設定 <see cref="F:System.Xml.ValidationType.Schema" /> 要素の完全な PSVI を要素の終了タグにリーダーが配置されている場合にのみです。  
  
</para>  
</block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.Schema.IXmlSchemaInfo> インターフェイスは、サブセットのスキーマ検証後の情報セット \(PSVI\) の XML ノードに関連付けられているを公開します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Xml.XmlReader" /> インスタンスを作成するために使用された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.Xml.XmlReaderSettings" /> このリーダーのインスタンスを作成するために使用します。 このリーダーを使用して作成されなかった場合、 <see cref="Overload:System.Xml.XmlReader.Create" /> メソッドは、このプロパティの返します <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlReaderSettings> オブジェクトは、ユーザーの資格情報などの機密情報を含めることができます。 アプリケーション必要がある場合にこのオブジェクトをキャッシュするか、別のコンポーネントに渡すことです。  
  
 <xref:System.Xml.XmlReaderSettings> クラスを使用して作成されたリーダーのインスタンスでサポートする機能のセットを指定します。<xref:System.Xml.XmlReaderSettings> このプロパティによって返されるオブジェクトは変更できません。 スローされる例外の個々 の設定の結果を変更しようとします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.Skip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードの子をスキップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の XML の入力にリーダーが配置されているかどうか、 `<a>` ノードまたはその属性は、呼び出しのいずれかの `Skip` 、リーダーを `<b>` ノードです。  
  
 リーダーがリーフ ノードに既に配置されているかどうか \(など、 `<x>` ノードまたはテキスト ノード `abc`\) を呼び出す `Skip` 呼び出しと同じには、 <xref:System.Xml.XmlReader.Read%2A>です。  
  
```  
<a name="bob" age="123">  
 <x/>abc<y/>  
</a>  
<b>  
...  
</b>  
```  
  
 このメソッドは、整形式の XML を確認します。  
  
 リーダーが配置されている場合、 <xref:System.Xml.XmlValidatingReader>, 、また、このメソッドはスキップされた内容を検証します。  
  
 `XmlReader` 実装を決定するかどうか、 `Skip` メソッドが外部エンティティを展開します。 次の表は、さまざまな種類の外部のエンティティが展開されているかどうかを示して `XmlReader` オブジェクトです。  
  
|XmlReader の種類|外部エンティティを展開します。|  
|-------------------|---------------------|  
|<xref:System.Xml.XmlTextReader>|いいえ。|  
|<xref:System.Xml.XmlReader> によって作成されたインスタンス、 <xref:System.Xml.XmlReader.Create%2A> テキスト データを読み取っているメソッド。|いいえ。|  
|<xref:System.Xml.XmlReader> によって作成されたインスタンス、 <xref:System.Xml.XmlReader.Create%2A> バイナリ データを読み取っているメソッド。|該当なし。|  
|スキーマ検証 <xref:System.Xml.XmlReader> によって作成されたインスタンス、 <xref:System.Xml.XmlReader.Create%2A> メソッドです。|はい。|  
|<xref:System.Xml.XmlValidatingReader>|はい。|  
|<xref:System.Xml.XmlReader> によって返されるインスタンス、 <xref:System.Xml.XPath.XPathNavigator> オブジェクトです。|該当しない。|  
|<xref:System.Xml.XmlNodeReader>|いいえ。|  
|<xref:System.Xml.XmlReader> ラップされた別のインスタンス <xref:System.Xml.XmlReader> インスタンス。|基になる実装に依存します <xref:System.Xml.XmlReader>します。 \(、 `Skip` メソッドを基になる <xref:System.Xml.XmlReader> と呼びます\)。|  
  
 このメソッドの非同期バージョンは、 <xref:System.Xml.XmlReader.SkipAsync%2A>です。  
  
   
  
## 例  
 次の例では、2 番目の book ノードから XML ファイルを解析します。  
  
 [!code-csharp[XmlReaderBasic\#14](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#14)]
 [!code-vb[XmlReaderBasic\#14](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#14)]  
  
 この例では、 `2books.xml`, 、入力として。  
  
 [!code-xml[XML\_Core\_Files\#7](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/2books.xml#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="SkipAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SkipAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SkipAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReader.SkipAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードの子を非同期にスキップします。</summary>
        <returns>現在のノード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、非同期バージョンの <xref:System.Xml.XmlReader.Skip%2A>, 、同じ機能を持つ。 このメソッドを使用して設定する必要があります、 <xref:System.Xml.XmlReaderSettings.Async%2A> フラグを `true`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> が設定されていない非同期メソッドが呼び出された、 <see cref="P:System.Xml.XmlReaderSettings.Async" /> フラグを <see langword="true" />します。 この場合、 <see cref="T:System.InvalidOperationException" /> "非同期メソッドを使用する場合は true にセット XmlReaderSettings.Async"というメッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、現在のノードのテキスト値を取得します。</summary>
        <value>返される値は、ノードの <see cref="P:System.Xml.XmlReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  
 <list type="table">  
<listheader>  
<term> ノード型  
  
 </term>  
<description> 値  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> 属性の値。  
  
 </description>  
</item>  
<item>  
<term> <see langword="CDATA" />  
  
 </term>  
<description> CDATA セクションの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Comment" />  
  
 </term>  
<description> コメントの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> 内部サブセット。  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> ターゲットを除く全内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="SignificantWhitespace" />  
  
 </term>  
<description> 混合コンテンツ モデル内のマークアップ間の空白。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Text" />  
  
 </term>  
<description> テキスト ノードの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Whitespace" />  
  
 </term>  
<description> マークアップ間の空白。  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> 宣言の内容。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの非同期バージョンを参照してください、 <xref:System.Xml.XmlReader.GetValueAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-csharp[XmlReaderBasic\#8](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderBasic/CS/XmlReader_Basic.cs#8)]
 [!code-vb[XmlReaderBasic\#8](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderBasic/VB/xmlreader_basic.vb#8)]  
  
 このサンプルを使用して、 `items.xml` ファイルです。  
  
 [!code-xml[XML\_Core\_Files\#2](~/samples/snippets/xml/VS_Snippets_Data/XML_Core_Files/XML/items.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
      </Docs>
    </Member>
    <Member MemberName="ValueType">
      <MemberSignature Language="C#" Value="public virtual Type ValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValueType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.ValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードの共通言語ランタイム \(CLR\) 型を取得します。</summary>
        <value>ノードの型指定された値に対応する CLR 型。 既定値は、<see langword="System.String" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 参照してください [Type Support in the System.Xml Classes](http://msdn.microsoft.com/ja-jp/63570538-06e3-4401-ad4d-ac50be90c7bf) の既定のマッピングの一覧です。  
  
 型の要素 `xs:int` が、 `ValueType` の `System.Int32` 既定です。 ただし、 `ValueType` にマップできる有効な型のいずれかになります `xs:int`, など `System.Int16` または `System.Double`です。  
  
 ノードが指定されていないか、またはノードの値にマップされているノードが混在したコンテンツを格納する要素の場合、 `System.String` 型です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <block subset="none" type="overrides">
          <para>Implementers must provide a <see langword="ValueType" /> for every node, even if it is only the <see langword="System.String" /> type.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public virtual string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、取得、現在 <see langword="xml:lang" /> スコープ。</summary>
        <value>現在の <see langword="xml:lang" /> スコープ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを表す、 `xml:lang` 内で、現在のノードが存在するスコープします。 たとえばでの XML フラグメントをここでは `xml:lang` ルート要素に米国英語に設定します。  
  
```  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 リーダーが配置されている場合、 `name` 要素では、このプロパティを使用できます、米国英語版のスコープ内にある検索 `xml:lang` 属性です。  
  
   
  
## 例  
 参照してください <xref:System.Xml.XmlTextReader.XmlLang%2A?displayProperty=fullName> たとえばのこのプロパティを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="P:System.Xml.XmlReader.XmlSpace" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、取得、現在 <see langword="xml:space" /> スコープ。</summary>
        <value>
          <see cref="T:System.Xml.XmlSpace" /> 値のいずれか。<see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 参照してください <xref:System.Xml.XmlTextReader.XmlSpace%2A> \(で、 `XmlTextReader` クラス\)、たとえば、このプロパティを使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <altmember cref="P:System.Xml.XmlReader.XmlLang" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ReadElementContentAsDouble">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み込み、その内容を倍精度浮動小数点数として返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadToNextSibling">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>進めます、 <see langword="XmlReader" /> に次の一致する兄弟要素。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、属性の値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、指定した属性に移動します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsInt">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み取り、その内容を 32 ビット符号付き整数として返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>
          <see cref="T:System.Xml.XmlReader" /> クラスによって使用されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadToFollowing">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>指定された要素が見つかるまで読み込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsLong">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み取り、その内容を 64 ビット符号付き整数として返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAs">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み込み、型指定されたオブジェクトとして内容を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsObject">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.Object" />です。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsFloat">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素の値を単精度浮動小数点数として読み込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsDecimal">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>として現在の要素の値を読み取り、 <see cref="T:System.Decimal" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在のノードが要素であるか調べ、リーダーを次のノードに進めます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsString">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.String" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsBoolean">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>として現在の要素の値を読み取り、 <see cref="T:System.Boolean" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>派生クラスでオーバーライドされると、属性の値を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadToDescendant">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>進めます、 <see cref="T:System.Xml.XmlReader" /> 次の一致する子孫要素にします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsStartElement">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在のコンテンツ ノードが開始タグかどうかをテストします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadElementContentAsDateTime">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Xml.XmlReader" /> 前の非同期操作が完了する前に、メソッドが呼び出されました。 この場合、 <see cref="T:System.InvalidOperationException" /> 「非同期操作が既に進行中です」メッセージと共にスローされます。</exception>
        <summary>現在の要素を読み取ってとして内容を返す、 <see cref="T:System.DateTime" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>