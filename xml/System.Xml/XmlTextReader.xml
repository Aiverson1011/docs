<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。  
  
 .NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlReader" /> クラスを使用することをお勧めします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 <xref:System.Xml.XmlTextReader> XML データのストリームへの前方参照専用、読み取り専用アクセスを提供します。 現在のノードとは、現在リーダーが置かれているノードのことです。 読み取りメソッドを使用して、リーダーを進められ、プロパティは、現在のノードの値を反映します。  
  
 このクラスは実装 <xref:System.Xml.XmlReader> 、w3c 勧告 『 Extensible Markup Language \(XML\) 1.0 および 『 Namespaces in XML 』 に準拠しているとします。`XmlTextReader` 次の機能を提供します。  
  
-   整形式 XML の規則を適用します。  
  
-   `XmlTextReader` データの検証は提供されません。  
  
-   確認 `DocumentType` ノードは、適切な形式です。`XmlTextReader` DTD が整形を確認しますが、DTD を使用するには検証されません。  
  
-   ノードの場所 <xref:System.Xml.XmlTextReader.NodeType%2A> は `XmlNodeType.EntityReference`, 、1 つの空 `EntityReference` ノードが返されます \(つまり、 <xref:System.Xml.XmlTextReader.Value%2A> プロパティは `String.Empty`\)。  
  
> [!NOTE]
>  DTD 内のエンティティの実際の宣言と呼ばれる `Entity` ノードです。 データのこれらのノードを参照するときに呼び出される `EntityReference` ノードです。  
  
-   既定の属性は展開されません。  
  
 `XmlTextReader` データ検証に必要な余分なチェックは行われず、高速の整形パーサーを提供します。  
  
 データの検証を実行する、検証型を使用して <xref:System.Xml.XmlReader>します。  
  
 XML データを読み取る、 <xref:System.Xml.XmlDocument>, を使用して <xref:System.Xml.XmlNodeReader>します。  
  
 `XmlTextReader` スローする <xref:System.Xml.XmlException> XML の解析エラーを検出します。 例外がスローされた後、リーダーの状態は予測できません。 たとえば、報告されたノード型の現在のノードの実際のノード型とは異なる場合があります。 使用して、 <xref:System.Xml.XmlTextReader.ReadState%2A> 、リーダーがエラー状態であるかどうかを確認するプロパティです。  
  
## セキュリティの考慮事項  
 使用する場合の考慮事項は、次のとおり、 <xref:System.Xml.XmlTextReader> クラスです。  
  
-   スローされた例外、 <xref:System.Xml.XmlTextReader> アプリケーションに送られたくないパス情報を開示することができます。 アプリケーションは例外をキャッチし、それらを適切に処理する必要があります。  
  
-   DTD の処理は既定で有効になっています。 サービス拒否攻撃や信頼されていないソースを扱っているかどうかに懸念がある場合は、DTD 処理を無効にします。 設定、 <xref:System.Xml.XmlTextReader.DtdProcessing%2A> プロパティを <xref:System.Xml.DtdProcessing.Prohibit> DTD 処理を無効にします。  
  
     DTD 処理を有効にした場合、<xref:System.Xml.XmlSecureResolver> を使用して <xref:System.Xml.XmlTextReader> でアクセス可能なリソースを制限できます。 また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。 たとえば、ASP.NET アプリケーション内でタイムアウト制限を設定します。  
  
-   XML データには、DTD ファイルなどの外部リソースへの参照を含めることができます。 既定では、外部リソースはユーザー資格情報なしで、<xref:System.Xml.XmlUrlResolver> オブジェクトを使用して解決されます。 この点については、次のいずれかの方法でセキュリティを強化できます。  
  
    -   <xref:System.Xml.XmlTextReader> プロパティを <xref:System.Xml.XmlTextReader.XmlResolver%2A> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。  
  
    -   <xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlTextReader.XmlResolver%2A> に設定することにより、`null` が外部リソースを開けないようにする。  
  
-   XML データには、処理に長時間を要する大量の属性、名前空間宣言、入れ子になった要素などが含まれることがあります。 送信される入力のサイズを制限する、 <xref:System.Xml.XmlTextReader>, 、カスタム IStream 実装を作成し、それを提供、 <xref:System.Xml.XmlTextReader>です。  
  
-   <xref:System.Xml.XmlReader.ReadValueChunk%2A> メソッドは、大量のデータ ストリームを処理するために使用できます。 このメソッドは、値全体に 1 つの文字列を割り当てる代わりに、一度に少数の文字を読みます。  
  
-   既定では、一般エンティティは展開されません。 一般エンティティは <xref:System.Xml.XmlTextReader.ResolveEntity%2A> メソッドを呼び出したときに展開されます。  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>This class has an inheritance demand. Full trust is required to inherit from <see langword="XmlTextReader" />.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlTextReader" />の新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see langword="XmlTextReader" />の新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">読み取る XML データを格納しているストリーム。</param>
        <summary>指定したストリームで <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 <xref:System.Xml.XmlTextReader> を使用してストリームのデコード <xref:System.Text.Encoding?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlTextReader" /> を使用して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ように仮定、 `TextReader` が既に正しいエンコーディングに設定します。 マルチパート MIME シナリオでは、ストリームからの点を開封してクライアントによって使用されます。  
  
   
  
## 例  
 次の例を XML 文字列を読み込みます、 `XmlTextReader` オブジェクトを使用して、 <xref:System.IO.StringReader> クラスです。  
  
 [!code-cpp[XmlTextReader.cctor1\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">XML データを格納しているファイルの URL。<see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
        <summary>指定したファイルで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 アクセス資格情報が必要なリソースには、ファイルが存在する場合は使用して、 <xref:System.Xml.XmlTextReader.XmlResolver%2A> プロパティを必要な資格情報を指定します。  
  
> [!NOTE]
>  Version 1.1 の [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 、部分信頼コードを設定できません、 `XmlResolver` プロパティです。 回避するを作成するには、 <xref:System.Xml.XmlUrlResolver> への URI を渡すために必要な資格情報を持つ、 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> メソッド、および、コンストラクト、 `XmlTextReader` 、その結果を使用して <xref:System.IO.Stream> オブジェクトです。 回避策は、次の c\# コードの説明です。  
  
```  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 この例では、 `items.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">指定したファイルが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ファイル名またはディレクトリの一部が見つかりません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="url" /> が空の文字列です。</exception>
        <exception cref="T:System.Net.WebException">リモートのファイル名を解決することはできません。  
  
 または  
  
 この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="url" /> 有効な URI ではありません。</exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlTextReader" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">読み取る XML データを格納しているストリーム。</param>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定したストリームと <see cref="T:System.Xml.XmlNameTable" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 <xref:System.Xml.XmlTextReader> を使用してストリームのデコード <xref:System.Text.Encoding?displayProperty=fullName>します。  
  
 名前のテーブルを指定すると、このコンス トラクターは、そのテーブル内に既に定義されている名前を使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="input" /> または <paramref name="nt" /> 値は <see langword="null" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定された <see cref="T:System.Xml.XmlTextReader" /> と <see cref="T:System.IO.TextReader" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ように仮定、 `TextReader` が既に正しいエンコーディングに設定します。 マルチパート MIME シナリオでは、ストリームからの点を開封してクライアントによって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="nt" /> 値は <see langword="null" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url">外部リソースを解決するために使用する URL。<see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
        <param name="input">読み取る XML データを格納しているストリーム。</param>
        <summary>指定した URL とストリームで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url">外部リソースを解決するために使用する URL。<see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</param>
        <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
        <summary>指定した URL と <see cref="T:System.IO.TextReader" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ように仮定、 `TextReader` が既に正しいエンコーディングに設定します。 マルチパート MIME シナリオでは、ストリームからの点を開封してクライアントによって使用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">読み取る XML データを格納しているファイルの URL。</param>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定したファイルと <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="nt" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.IO.FileNotFoundException">指定したファイルが見つかりません。</exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">ファイル名またはディレクトリの一部が見つかりません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="url" /> が空の文字列です。</exception>
        <exception cref="T:System.Net.WebException">リモートのファイル名を解決することはできません。  
  
 または  
  
 この要求の処理中にエラーが発生しました。</exception>
        <exception cref="T:System.UriFormatException">
          <paramref name="url" /> 有効な URI ではありません。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">解析する XML フラグメントを含んでいるストリーム。</param>
        <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメントに何を含めることができるかを判断します。 下の表を参照してください。</param>
        <param name="context">
          <c>xmlFragment</c> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c>、および <c>xml:space</c> スコープが含まれます。</param>
        <summary>指定したストリーム、<see cref="T:System.Xml.XmlNodeType" /> および <see cref="T:System.Xml.XmlParserContext" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このコンス トラクターは、XML のフラグメントとして、指定した文字列を解析します。 XML フラグメントが、要素または属性の場合は、整形式 XML ドキュメントのルート レベルのルールをバイパスできます。  
  
 次の表に、有効な値の `fragType`です。  
  
|XmlNodeType|フラグメントが含まれます|  
|-----------------|------------------|  
|`Element`|任意の有効な要素のコンテンツ \(たとえば、要素、コメント、処理命令、CDATA セクションでは、テキスト、およびエンティティ参照の任意の組み合わせなど\)。<br /><br /> XML 宣言を渡すこともできます。 設定することのではなく、XML フラグメントのエンコーディングを指定できます、 <xref:System.Xml.XmlParserContext> オブジェクトです。|  
|`Attribute`|属性 \(引用符の内側の部分\) の値。|  
|`Document`|XML ドキュメント全体のコンテンツ。 これは、ドキュメント レベルの規則を強制します。|  
  
 リーダーは、次を使用して、ストリームのエンコーディングを決定します。  
  
1.  チェック、 <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=fullName> のエンコーディングを決定するプロパティです。  
  
2.  場合、 `Encoding` プロパティは、 `null`, 、リーダーがストリームの先頭にバイト順マークをチェックします。  
  
3.  場合、 `Encoding` プロパティは、 `null`, 、バイト順マークが存在しないと、リーダーは、ストリームが utf\-8 でエンコードされたと想定しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> 要素、属性、またはドキュメントではない <see langword="XmlNodeType" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlFragment" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">外部リソースを解決するために使用する URL。<see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。<c>url</c> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
        <param name="input">読み取る XML データを格納しているストリーム。</param>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定した URL、ストリーム、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="input" /> または <paramref name="nt" /> 値は <see langword="null" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">外部リソースを解決するために使用する URL。<see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。<c>url</c> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</param>
        <param name="input">読み取る XML データを格納している <see langword="TextReader" />。</param>
        <param name="nt">使用する <see langword="XmlNameTable" />。</param>
        <summary>指定した URL、<see cref="T:System.IO.TextReader" />、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ように仮定、 `TextReader` が既に正しいエンコーディングに設定します。 マルチパート MIME シナリオでは、ストリームからの点を開封してクライアントによって使用されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nt" /> 値は <see langword="null" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">解析する XML フラグメントを含んでいる文字列。</param>
        <param name="fragType">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。 これもフラグメント文字列に何を含めることができるかを判断します。 下の表を参照してください。</param>
        <param name="context">
          <c>xmlFragment</c> の解析先の <see cref="T:System.Xml.XmlParserContext" />。 これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c>、および <c>xml:space</c> スコープが含まれます。</param>
        <summary>指定した文字列、<see cref="T:System.Xml.XmlNodeType" />、および <see cref="T:System.Xml.XmlParserContext" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このコンス トラクターは、XML のフラグメントとして、指定した文字列を解析します。 XML フラグメントが、要素または属性の場合は、整形式 XML ドキュメントのルート レベルのルールをバイパスできます。 このコンス トラクターから返される文字列を処理できる <xref:System.Xml.XmlReader.ReadInnerXml%2A>です。  
  
 次の表に、有効な値の `fragType` 、リーダーは異なるノード型のそれぞれの解析方法とします。  
  
|XmlNodeType|フラグメントが含まれます|  
|-----------------|------------------|  
|要素|任意の有効な要素のコンテンツ \(たとえば、要素、コメント、処理命令、CDATA セクションでは、テキスト、およびエンティティ参照の任意の組み合わせなど\)。<br /><br /> XML 宣言を渡すこともできます。 設定することのではなく、XML フラグメントのエンコーディングを指定できます、 <xref:System.Xml.XmlParserContext> オブジェクトです。|  
|属性|属性 \(引用符の内側の部分\) の値。|  
|ドキュメント|XML ドキュメント全体のコンテンツ。 これは、ドキュメント レベルの規則を強制します。|  
  
   
  
## 例  
 次の例では、XML フラグメントを解析します。 使用して、 `XmlParserContext` とその <xref:System.Xml.XmlNamespaceManager> 名前空間の解決を処理します。  
  
 [!code-cpp[XmlTextReader.Cctor\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> <see langword="Element" />, 、<see langword="Attribute" />, 、または <see langword="Document" /><see langword="XmlNodeType" />します。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="xmlFragment" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードにある属性の数を取得します。</summary>
        <value>現在のノードにある属性の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは `Element`, 、`DocumentType` と `XmlDeclaration` ノードのみです。 \(他のノード型属性がありません。\)  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードのベース URI を取得します。</summary>
        <value>現在のノードのベース URI。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ネットワークに接続された XML ドキュメントでは、さまざまな W3C 標準包含機構を使用して集計データのチャンクで構成され、したがって各所に由来するノードが含まれます。 DTD エンティティは、この例が、これは Dtd に限定されません。 ベース URI がわかりますからこれらのノードが付属しています。 返されるノードのベース URI がないかどうか \(たとえば、解析されたメモリ内の文字列から\)、 `String.Empty` が返されます。  
  
   
  
## 例  
 次の例では、各ノードのベース URI を表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 この例では、 `baseuri.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlTextReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</summary>
        <value>バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="false" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</summary>
        <value>リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see langword="XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 This is a change in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] release. In previous versions, the **languageKeyword tag is not supported!!!!**  
 class could not resolve entities and **languageKeyword tag is not supported!!!!**  
 always returned **languageKeyword tag is not supported!!!!**  
.  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Xml.XmlReader.ReadState" /> を <see langword="Closed" /> に変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 This method also releases any resources held while reading. If this reader was constructed using a stream, this method also calls **languageKeyword tag is not supported!!!!**  
 on the underlying stream.  
  
 If **languageKeyword tag is not supported!!!!**  
 has already been called, no action is performed.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ドキュメント内の現在のノードの深さを取得します。</summary>
        <value>XML ドキュメント内の現在のノードの深さ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
   
  
## 例  
 The following example displays each node including its depth, line number, and line position.  
  
 [!code-cpp[XmlTextReader.LineNum\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Xml.DtdProcessing" /> 列挙体を取得または設定します。</summary>
        <value>
          <see cref="T:System.Xml.DtdProcessing" /> 列挙体。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, and <xref:System.Xml.DtdProcessing.Parse> enumerators. <xref:System.Xml.DtdProcessing.Parse> is the default behavior. The <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property replaces the **unmanagedCodeEntityReference tag is not supported!!!!**  
 property and adds the ability to ignore the DOCTYPE element.  
  
> [!IMPORTANT]
>  If the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property is set to <xref:System.Xml.DtdProcessing.Ignore?displayProperty=fullName>, the <xref:System.Xml.XmlTextReader> will not report the DTDs. This means that the DTD\/DOCTYPE will be lost on output.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメントのエンコーディングを取得します。</summary>
        <value>エンコーディング値。 エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF\-8 が使用されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=fullName> class, **languageKeyword tag is not supported!!!!**  
 also supports all encodings supported by that class. The exception to this is any encoding, such as UTF\-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF\-8.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーによるエンティティの処理方法を指定する値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Xml.EntityHandling" /> 値のいずれか。<see langword="EntityHandling" /> が指定されていない場合は、既定で <see langword="EntityHandling.ExpandCharEntities" /> に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.  
  
 When **languageKeyword tag is not supported!!!!**  
 is set to **languageKeyword tag is not supported!!!!**  
, attribute values are only partially normalized. The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.  
  
 To illustrate the difference between the entity handling modes consider the following XML:  
  
```  
<!DOCTYPE doc [<!ENTITY num "123">]>  
    <doc> &#65; &num; </doc>  
```  
  
 When **languageKeyword tag is not supported!!!!**  
 is set to **languageKeyword tag is not supported!!!!**  
 the "doc" element node contains one text node with the expanded entity text:  
  
|Depth|Node type|Name|Value|  
|-----------|---------------|----------|-----------|  
|1|`Text`||A 123|  
  
 When **languageKeyword tag is not supported!!!!**  
 is set to **languageKeyword tag is not supported!!!!**  
, and <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> is set to **languageKeyword tag is not supported!!!!**  
 or **languageKeyword tag is not supported!!!!**  
, the "doc" element expands the character entity and returns the general entity as a node:  
  
|Depth|Node type|Name|Value|  
|-----------|---------------|----------|-----------|  
|1|`Text`||A|  
|1|`EntityReference`|num||  
|1|`SignificantWhitespace`|||  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</summary>
        <value>ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> method to take advantage of new functionality.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>属性の値を取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">属性のインデックス。 インデックスの値は、0 から始まります。 最初の属性のインデックスは 0 です。</param>
        <summary>指定したインデックスの属性の値を取得します。</summary>
        <returns>指定した属性の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは、リーダーを移動しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> パラメーターが 0 またはより小さいより大きいか等しい <see cref="P:System.Xml.XmlTextReader.AttributeCount" />します。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の限定名。</param>
        <summary>指定した名前の属性の値を取得します。</summary>
        <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは、リーダーを移動しません。  
  
 リーダーが配置されている場合、 `DocumentType` ノード、このメソッドを使用して、公開キーとシステム リテラルなどを取得すること `reader.GetAttribute("PUBLIC")`  
  
   
  
## 例  
 次の例では、ISBN 属性の値を取得します。  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 この例では、 `attrs.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <param name="namespaceURI">属性の名前空間 URI。</param>
        <summary>指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</summary>
        <returns>指定した属性の値。 指定した属性が見つからない場合は <see langword="null" /> が返されます。 このメソッドは、リーダーを移動しません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 次の XML には、特定の名前空間内の属性が含まれています。  
  
```  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 検索できる、 `dt:type` 属性の 1 つの引数 \(プレフィックスとローカル名\) または 2 つの引数 \(ローカル名と名前空間 URI\) を使用します。  
  
```  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 参照する、 `xmlns:dt` 属性を次の引数のいずれかを使用します。  
  
```  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 使用してこの情報を取得することも、 <xref:System.Xml.XmlTextReader.Prefix%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
        <summary>現在スコープ内にあるすべての名前空間が含まれたコレクションを取得します。</summary>
        <returns>現在スコープ内にあるすべての名前空間が含まれた <see cref="T:System.Collections.IDictionary" /> オブジェクト。 要素にリーダーが配置されていない場合は、名前空間が含まれていない空のディクショナリが返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ディクショナリは、プレフィックスをキーと名前空間名のコレクションで構成されます。 スコープ内名前空間を列挙するために使用します。 ディクショナリは、リーダーの名前空間の一覧の切断されたコピーです。 リーダーの位置、現在のスコープ内の名前空間の一覧、変更内容は変更されません。  
  
 次の表が、どのように <xref:System.Xml.XmlNamespaceScope> 列挙値に影響を与えますかどうかまたはない、既定値と組み込みの名前空間が返した <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>します。  
  
|XmlNamespaceScope 値|される xmlns:xml|xmlns:xmlns|xmlns \=""|  
|-------------------------|-------------------|-----------------|----------------|  
|`All`|可|no|no|  
|`ExcludeXml`|no|no|no|  
|`Local`|no|no|可|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>バッファー内の XML の剰余を取得します。</summary>
        <returns>バッファー内の XML の剰余を格納している <see cref="T:System.IO.TextReader" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 <xref:System.Xml.XmlTextReader> をバッファーは `Read`, 、データが失われないように、未使用のバッファーの残りの部分を返すできる必要があります。 これにより、パッケージの他のものと同じストリームに XML を \(マルチパート MIME\) などのプロトコルです。  
  
 このメソッドを呼び出した後 <xref:System.Xml.XmlTextReader.EOF%2A> に設定されている `true`します。  
  
   
  
## 例  
 次の例は、XML ドキュメントの最初の部分を読み取り、使用して、 `GetRemainder` を 2 番目のリーダーを使用してドキュメントの読み取りを完了します。  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 この例では、入力 `tworeads.xml`します。  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クラスが行情報を返すことができるかどうかを示す値を取得します。</summary>
        <returns>クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードが <see langword="String.Empty" /> 以外の <see cref="P:System.Xml.XmlTextReader.Value" /> を保持できるかどうかを示す値を取得します。</summary>
        <value>リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 返す値を持つノード型の一覧を次の表に示します。  
  
|ノード型|値|  
|----------|-------|  
|`Attribute`|属性の値。|  
|`CDATA`|CDATA セクションの内容。|  
|`Comment`|コメントの内容。|  
|`DocumentType`|内部サブセット。|  
|`ProcessingInstruction`|ターゲットを除く全内容。|  
|`SignificantWhitespace`|混合コンテンツ モデル内のマークアップ間の空白。|  
|`Text`|テキスト ノードの内容。|  
|`Whitespace`|マークアップ間の空白。|  
|`XmlDeclaration`|宣言の内容。|  
  
   
  
## 例  
 次の例では、値を持つすべてのノードの値を表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 この例では、 `book1.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードが、DTD またはスキーマで定義された既定値から生成された属性であるかどうかを示す値を取得します。</summary>
        <value>このプロパティは常に <see langword="false" /> を返します。 \(<see cref="T:System.Xml.XmlTextReader" /> は既定の属性を展開しません。\)</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、属性ノードのみに適用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードが空の要素 \(<c>&lt;MyElement/&gt;</c> など\) かどうかを示す値を取得します。</summary>
        <value>現在のノードが <c>/&gt;</c> で終わる要素である \(<see cref="P:System.Xml.XmlTextReader.NodeType" /> が <see langword="XmlNodeType.Element" /> に等しい\) 場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティにより、次のことが区別できます。  
  
 `<item num="123"/>` \(`IsEmptyElement` is `true`\).  
  
 `<item num="123">` \(`IsEmptyElement` は `false`, 要素の内容は空には\)。  
  
 対応する `EndElement` 空の要素のノードは生成されません。  
  
 `IsEmptyElement` 単に、ソース ドキュメント内の要素がある終了要素タグかどうかを報告します。  
  
   
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 この例では、 `elems.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の行番号を取得します。</summary>
        <value>現在の行番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、エラーのレポートには最もよく使用は、いつでも呼び出すことができません。 このプロパティは、開始値 `1`です。  
  
 組み合わせて <xref:System.Xml.XmlTextReader.LinePosition%2A>, の値 `1,1` ドキュメントの開始を示します。  
  
   
  
## 例  
 次の例では、各ノードの深さ、行番号、行の位置などが表示されます。  
  
 [!code-cpp[XmlTextReader.LineNum\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の行の位置を取得します。</summary>
        <value>現在の行の位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、エラーのレポートには最もよく使用は、いつでも呼び出すことができません。 プロパティの開始値は `1`です。  
  
 指定された位置は、マークアップのテキストの最初の文字です。  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 前述の XML テキストの最初の行で、 `LinePosition` の `2` 文字に対応 `r`; 行目に、 `LinePosition` の `5` 、文字に対応する `t`; と 3 番目の行に、 `LinePosition` の `3` 、文字に対応する `r`です。  
  
 組み合わせて <xref:System.Xml.XmlTextReader.LineNumber%2A>, の値 `1,1` ドキュメントの開始を示します。  
  
   
  
## 例  
 次の例では、各ノードの深さ、行番号、行の位置などが表示されます。  
  
 [!code-cpp[XmlTextReader.LineNum\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードのローカル名を取得します。</summary>
        <value>プリフィックスを削除した現在のノードの名前。 たとえば、<see langword="LocalName" /> が要素 <c>&lt;bk:book&gt;</c> の <see langword="book" /> です。  
  
 名前を持たないノード型 \(<see langword="Text" />、<see langword="Comment" /> など\) の場合、このプロパティは <see langword="String.Empty" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 この例では、 `book2.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">解決する対象となる名前空間 URI のプレフィックス。 既定の名前空間と一致させるには、空の文字列を渡します。 この文字列は、最小単位に分割する必要はありません。</param>
        <summary>現在の要素のスコープ内の名前空間プリフィックスを解決します。</summary>
        <returns>プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 リーダーが配置されている場合、次の XML で、 `href` 属性は、プレフィックス `a` が呼び出すことによって解決 `reader.LookupNamespace("a")`します。 返される文字列は `urn:456`です。  
  
```  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Xml.XmlTextReader.Namespaces" /> にプロパティが設定されている <see langword="true" /> と <paramref name="prefix" /> 値は <see langword="null" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定された属性に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">属性のインデックス。</param>
        <summary>指定したインデックスを持つ属性に移動します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> パラメーターが 0 またはより小さいより大きいか等しい <see cref="P:System.Xml.XmlReader.AttributeCount" />します。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">属性の限定名。</param>
        <summary>指定した名前を持つ属性へ移動します。</summary>
        <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 呼び出した後 `MoveToAttribute`, 、 <xref:System.Xml.XmlTextReader.Name%2A>, 、<xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 、および <xref:System.Xml.XmlTextReader.Prefix%2A> プロパティには、その属性のプロパティが反映されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">属性のローカル名。</param>
        <param name="namespaceURI">属性の名前空間 URI。</param>
        <summary>指定したローカル名および名前空間 URI の属性に移動します。</summary>
        <returns>属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。<see langword="false" /> の場合、リーダーの位置は変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 呼び出した後 `MoveToAttribute`, 、 <xref:System.Xml.XmlTextReader.Name%2A>, 、<xref:System.Xml.XmlTextReader.NamespaceURI%2A>, 、および <xref:System.Xml.XmlTextReader.Prefix%2A> プロパティには、その属性のプロパティが反映されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の属性ノードを含む要素に移動します。</summary>
        <returns>リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドを使用して、その属性間を移動後に要素を返します。 このメソッドでは、リーダーを移動し、ノード型を次のいずれかに: `Element`, 、`DocumentType`, 、または `XmlDeclaration`です。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最初の属性に移動します。</summary>
        <returns>属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例では、ルート ノードの最初の属性の値を取得します。  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 この例では、 `attrs.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>次の属性に移動します。</summary>
        <returns>次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 現在のノードが要素ノードの場合は、このメソッドは <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>です。 場合 `MoveToNextAttribute` 返します `true`, 、リーダーが次の属性に移動。 それ以外の場合、リーダーの位置は変更されません。  
  
   
  
## 例  
 次の例では、現在のノードですべての属性が表示されます。  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードの限定名を取得します。</summary>
        <value>現在のノードの限定名。 たとえば、<see langword="Name" /> が要素 <c>&lt;bk:book&gt;</c> の <see langword="bk:book" /> です。  
  
 返される名前は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 リストされた値を返すノード型を次に示します。 その他のすべてのノード型は、空の文字列を返します。  
  
 <list type="table">  
<listheader>  
<term> ノード型  
  
 </term>  
<description> 名前  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> 属性の名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> ドキュメントの種類の名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Element" />  
  
 </term>  
<description> タグ名。  
  
 </description>  
</item>  
<item>  
<term> <see langword="EntityReference" />  
  
 </term>  
<description> 参照されたエンティティの名前。  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> 処理命令の対象。  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> リテラル文字列 <see langword="xml" />します。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用して `items.xml`します。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>名前空間をサポートするかどうかを示す値を取得または設定します。</summary>
        <value>名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、リーダーが www.w3.org\/TR\/REC\-xml\-names にある XML 勧告での W3C 名前空間をサポートしているかどうかを決定します。  
  
 `Namespaces` 読み取り操作が行われた後、プロパティを設定できません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">読み取り操作が行われた後にこのプロパティを設定する \(<see cref="P:System.Xml.XmlTextReader.ReadState" /> は <see langword="ReadState.Initial" />\)。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーが配置されているノードの名前空間 URI \(W3C の名前空間の仕様における定義に準拠\) を取得します。</summary>
        <value>現在のノードの名前空間 URI。それ以外の場合は空の文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは `Element` と `Attribute` ノードのみです。  
  
   
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 この例では、 `book2.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</summary>
        <value>ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 すべてのノードと属性名が返される <xref:System.Xml.XmlTextReader> を使用して最小単位に分割されて、 `NameTable`です。 同じ名前に複数回が返される場合 \(たとえば、 `Customer`\)、し、同じ `String` その名前のオブジェクトが返されます。 これにより、オブジェクト比較負荷の高い文字列比較ではなく、これらの文字列で効率的なコードを記述することが可能です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードの種類を取得します。</summary>
        <value>現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、次を返しません `XmlNodeType` の種類: `Document`, 、`DocumentFragment`, 、`Entity`, 、`EndEntity`, 、または `Notation`です。  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用して `items.xml`します。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白と属性値を正規化するかどうかを示す値を取得または設定します。</summary>
        <value>正規化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、いつでも変更でき、次の読み取り操作で有効になります。  
  
> [!NOTE]
>  場合、 <xref:System.Xml.XmlTextReader> 構築に使用される、 <xref:System.Xml.XmlValidatingReader>, 、属性の値を正規化する `Normalization` に設定する必要があります `true`します。  
  
 場合 `Normalization` に設定されている `false`, 、これも数値エンティティの文字範囲チェックが無効になります。 その結果などのエンティティの文字 `&#0;`, 、許可されています。  
  
 属性値の正規化を次に示します。  
  
-   文字参照については、参照されている文字を属性値に追加します。  
  
-   エンティティ参照については、エンティティの置換テキストを再帰的に処理します。  
  
-   空白文字 \(\#x20、\#xD、\#xA、\#x9\) については、正規化された値に \#x20 を追加します。 \(のみ、1 つ \#x20 は外部解析対象エンティティの一部または内部解析対象エンティティのリテラル エンティティ値である"\#xD \#xA"シーケンスに追加されます。\)  
  
-   その他の文字は、正規化された値にそのまま追加します。  
  
-   宣言された値が CDATA でない場合は、すべて先頭および末尾の空白 \(\#x20\) 文字を破棄し、空白 \(\#x20\) 文字のシーケンスを単一の空白 \(\#x20\) 文字に置き換えます。  
  
 `XmlTextReader` 属性または CDATA 正規化を実行するだけです。 内でラップしない限り、DTD に固有の正規化を実行しない、 `XmlValidatingReader`です。  
  
 正規化の詳細については、w3c 勧告 『 XML 1.0 勧告を参照してください。  
  
   
  
## 例  
 次の例では、リーダーの動作を示します正規化をオンにし、オフします。  
  
 [!code-cpp[XmlTextReader.Normalization\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">リーダーが閉じられたときにこのプロパティの設定 \(<see cref="P:System.Xml.XmlTextReader.ReadState" /> は <see langword="ReadState.Closed" />\)。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードに関連付けられた名前空間プリフィックスを取得します。</summary>
        <value>現在のノードに関連付けられた名前空間プリフィックス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 この例では、 `book2.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD 処理を許可するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
        <value>DTD 処理を許可しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 DTD 処理が既定では旧バージョンと有効になって互換性です。 ただし、アプリケーションは、DTD 処理を必要とする場合を除き、この設定を無効にする必要があります。 DTD 処理を無効にすると、一部のサービス不能攻撃の防止に役立つ場合があります。 場合に設定 `true`, 、リーダーのスロー、 <xref:System.Xml.XmlException> 、DTD コンテンツが発生したときにします。  
  
 DTD 処理を有効にした場合は、信頼されていないソースから可能なサービス拒否攻撃の Dtd を含むに留意する必要があります。 使用して、 <xref:System.Xml.XmlSecureResolver> リソースを制限する、 <xref:System.Xml.XmlTextReader> にアクセスできます。 また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。 たとえば、ASP.NET アプリケーションでタイムアウト制限を設定します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性ノードの値を囲むために使用する引用符文字を取得します。</summary>
        <value>属性ノードの値を囲むために使用されている引用符 \(" または '\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、属性ノードのみに適用されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ストリームから次のノードを読み取ります。</summary>
        <returns>次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 リーダーが最初に作成および初期化されるときに情報はありません使用できます。 呼び出す必要があります `Read` を最初のノードを読み取る。  
  
 このメソッドでは、解析を開始するために、データ ストリームから 4 バイト以上が必要です。 4 バイト未満が返され、ストリームに複数のデータはありませんが、このメソッドは失敗します。 ストリームにより多くのデータがある場合、4 番目のバイトを受け取るまで解析メソッドがブロックされます。  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用して `items.xml`します。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</summary>
        <returns>返すノードがある場合は <see langword="true" />。  
  
 初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。  
  
 <c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドを使用して呼び出した後 `MoveToAttribute` に目を通して属性値を構成するテキストまたはエンティティ参照ノード。<xref:System.Xml.XmlReader.Depth%2A> 属性の値のノードの 1 を加えた属性ノードの深さはインクリメントに出入り一般エンティティ参照をステップ実行時に 1 つずつです。  
  
   
  
## 例  
 次の例では、テキストとエンティティのノードと属性を読み取ります。  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
        <param name="offset">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス \(0 から始まる\)。</param>
        <param name="len">バッファーに書き込むバイト数。</param>
        <summary>Base64 をデコードし、デコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadBase64 メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ような [ReadBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadChars%2A>, 、埋め込みのテキストの大量のストリームを読み取るにこのメソッドが連続して呼び出されます。 Base64 のコンテンツをデコードし、デコードされたバイナリ バイトを返します \(たとえば、インライン Base64 エンコード GIF イメージ\) をバッファーします。 RFC 1521 を参照してください。 \(Http:\/\/www.rfc\-editor.org コメントの Web サイトへの要求の Rfc を取得できます\)  
  
   
  
## 例  
 次の例では、Base64、BinHex のデータを含むファイルを読み取ります。  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用します。 `binary.xml`  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">Base64 シーケンスが正しくありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />します。長さ \- <paramref name="offset" />です。</exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">デコードされたバイナリ バイトが書き込まれるバッファーとして機能するバイト配列。</param>
        <param name="offset">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス \(0 から始まる\)。</param>
        <param name="len">バッファーに書き込むバイト数。</param>
        <summary>
          <see langword="BinHex" /> をデコードし、デコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadBinHex メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ような [ReadBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadChars%2A>, 、埋め込みのテキストの大量のストリームを読み取るにこのメソッドが連続して呼び出されます。 デコード `BinHex` コンテンツをデコードされたバイナリ バイトを返します \(たとえば、インライン `BinHex` でエンコードされた GIF イメージ\) をバッファーにします。  
  
   
  
## 例  
 次の例を格納するファイルは読み取り `Base64` と `BinHex` データ。  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用します。 `binary.xml`  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <see langword="BinHex" /> シーケンスが無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="array" /> の値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />します。長さ \- <paramref name="offset" />です。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</param>
        <param name="index">メソッドがテキストの内容の書き込みを開始できる <c>buffer</c> 内の位置。</param>
        <param name="count">
          <c>buffer</c> に書き込む文字数。</param>
        <summary>要素のテキストの内容を文字バッファーに読み取ります。 このメソッドは、連続して呼び出すことによって埋め込みテキストの大量のストリームを読み取るように設計されています。</summary>
        <returns>読み取った文字数。 リーダーが要素に配置されていない場合、または返す対象となるテキストの内容が現在のコンテキスト内にこれ以上ない場合は、<see langword="0" /> になる可能性があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め、.NET Framework 2.0 以降で、[ReadChars メソッド \(Char\<xref:System.Xml.XmlReader>インスタンスを使用して、[ReadChars メソッド \(Char\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName>新機能を活用する方法です。  
  
 これは、XML ドキュメントに埋め込まれたテキストの非常に大量のストリームを処理する最も効率的な方法です。 大きな文字列オブジェクトの割り当てではなく`ReadChars`テキストの内容が一度にバッファーを返します。 このメソッドは、要素ノードでのみ動作するよう設計されています。 その他のノード型は原因`ReadChars`を返す`0`です。  
  
 開始タグにリーダーが配置されている場合、次の XML の`ReadChars`を返します`test`し、終了タグの後、リーダーを配置します。  
  
```  
<Item>test</Item>  
```  
  
 `ReadChars`次の機能があります。  
  
-   このメソッドは、要素ノードのみで機能するよう設計されています。 その他のノード型は原因`ReadChars`0 を返します。  
  
-   このメソッドは、実際の文字のコンテンツを返します。 エンティティ、CDATA、または発生したその他のマークアップを解決することはありません。`ReadChars`開始タグと終了タグは、マークアップを含む間には、すべてのものを返します。  
  
-   `ReadChars`整形式 XML マークアップは無視されます。 たとえば、次の XML 文字列を読み取るとき`<A>1<A>2</A>`、`ReadChars`返します`1<A>2</A>`です。 \(一致する要素のペアからマークアップを返しますおり、他のユーザーは無視されます。\)  
  
-   このメソッドでは、どのような正規化は実行しません。  
  
-   ときに`ReadChars`終わりに達した文字ストリームの値 0 を返し、終了タグの後にリーダーが配置されています。  
  
-   メソッドには使用中には使用できませんの属性を読み取る`ReadChars`です。  
  
 たとえば、次の XML を使用します。  
  
```  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 リーダーが配置されている、 `<item>` while の末尾に要素をループします。  
  
```  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## 例  
 次の例は、XML を使用して読み取ります`ReadChars`です。  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 この例は、`items.xml` ファイルを入力として使用します。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="count" /> が <paramref name="buffer" /> \(バッファー サイズ \- <paramref name="index" />\) で指定した値を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> <see langword="&lt; 0" /> または <paramref name="count" /><see langword="&lt; 0" /> です。</exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>コンテンツを読み取り、<see langword="Base64" /> でデコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは、コンテンツをストリームをデコード、 `Base64` コンテンツ、およびデコードされたバイナリ バイトを返します \(たとえば、インライン `Base64`\-でエンコードされた GIF イメージ\) をバッファーにします。 このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。 詳細については、RFC 1521 を参照してください。"MIME \(Multipurpose Internet Mail Extensions\) パート 1: を指定すると、Internet Message Bodies の形式を記述するための機構"です。 Http:\/\/www.rfc\-editor.org コメントの Web サイトへの要求は、Rfc を取得できます。  
  
> [!NOTE]
>  呼び出しの間でのリーダーのプロパティのいずれかにアクセスする必要がありますできません、 [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> メソッドまで、このメソッドは値 0 を返します。  
  
 このメソッドでは、次の動作があります。  
  
-   [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 操作のバイト ストリームの末尾に到達したときに、値 0 を返します。 最初の非コンテンツ ノードでは、リーダーが配置されます。  
  
-   要求したか、バイトのままになって、ストリーム リーダーよりも正確な数は、現在の位置に留まります。  
  
-   [ReadContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 次の XML ノード型でサポートされていません: `Element`, 、`XmlDeclaration`, 、`None`, 、`Document`, 、`DocumentType`, 、`Notation`, 、`Entity`, 、`DocumentFragment`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> 現在のノードでサポートされていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは、コンテンツをストリームをデコード、 `BinHex` コンテンツ、およびデコードされたバイナリ バイトを返します \(たとえば、インライン `BinHex` でエンコードされた GIF イメージ\) をバッファーにします。 このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。  
  
> [!NOTE]
>  呼び出しの間でのリーダーのプロパティのいずれかにアクセスする必要がありますできません、 [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> メソッドまで、このメソッドは値 0 を返します。  
  
 このメソッドでは、次の動作があります。  
  
-   [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 操作のバイト ストリームの末尾に到達したときに、値 0 を返します。 最初の非コンテンツ ノードでは、リーダーが配置されます。  
  
-   要求したか、バイトのままになって、ストリーム リーダーよりも正確な数は、現在の位置に留まります。  
  
-   [ReadContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 次の XML ノード型でサポートされていません: `Element`, 、`XmlDeclaration`, 、`None`, 、`Document`, 、`DocumentType`, 、`Notation`, 、`Entity`, 、`DocumentFragment`です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> 現在のノードでサポートされていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlTextReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>要素を読み取り、Base64 のコンテンツをデコードします。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは、要素の内容を読み取り、Base64 エンコーディングを使用してデコードし、デコードされたバイナリ バイトを返します \(たとえば、インライン Base64 エンコード GIF イメージ\) をバッファーします。 詳細については、RFC 1521 を参照してください。"MIME \(Multipurpose Internet Mail Extensions\) パート 1: を指定すると、Internet Message Bodies の形式を記述するための機構"です。 Http:\/\/www.rfc\-editor.org コメントの Web サイトへの要求は、Rfc を取得できます。  
  
 このメソッドは、単純なコンテンツの要素を読み取るだけことができます。 要素には、テキスト、空白、有意の空白、CDATA セクション、コメントおよび処理命令を含めることができます。 自動的に展開されるエンティティ参照型を含めることもできます。 要素には、子要素を持つことはできません。  
  
 このメソッドとよく似ていますが、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> する点が異なりますメソッドは、要素ノード型でのみ呼び出すことができます。  
  
 場合、 `count` 値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と等しい場合、または、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader> ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。 次の [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader> メソッドの呼び出しは、ゼロが返されたし、次のノードは、リーダー、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlNodeType.EndElement>です。  
  
 呼び出した場合 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.Read%2A> 最初のコンテンツが読み取られていた場合、リーダーが動作の要素の内容のすべてを使用すると、前にし、 [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlTextReader.Read%2A> メソッドが呼び出されました。 これは、リーダーが、終了要素が出現するまでに、すべてのテキストを読み上げますことを意味します。 終了タグのノードを読み取り、次のノードを読み取り、後続のノード上に自身を配置します。  
  
   
  
## 例  
 参照してください [ReadElementContentAsBase64 メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=fullName> にこのメソッドの使用例を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">現在のノードは、要素ノードではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlTextReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <exception cref="T:System.Xml.XmlException">要素には、混合コンテンツが含まれています。</exception>
        <exception cref="T:System.FormatException">コンテンツは、要求された型に変換できません。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">結果として得られるテキストのコピー先のバッファー。 この値を <see langword="null" /> にすることはできません。</param>
        <param name="index">バッファー内の結果のコピー開始位置を示すオフセット。</param>
        <param name="count">バッファーにコピーする最大バイト数。 コピーされた実際のバイト数は、このメソッドから返されます。</param>
        <summary>要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</summary>
        <returns>バッファーに書き込まれたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader> インスタンスを使用して、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドは要素の内容を使用してデコード `BinHex` のエンコードとデコードされたバイナリ バイトを返します \(たとえば、インライン `BinHex` でエンコードされた GIF イメージ\) バッファーにします。  
  
 このメソッドは、単純なコンテンツの要素を読み取るだけことができます。 要素には、テキスト、空白、有意の空白、CDATA セクション、コメントおよび処理命令を含めることができます。 自動的に展開されるエンティティ参照型を含めることもできます。 要素には、子要素を持つことはできません。  
  
 このメソッドとよく似ていますが、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> する点が異なりますメソッドは、要素ノード型でのみ呼び出すことができます。  
  
 場合、 `count` 値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と等しい場合、または、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader> ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。 次の [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader> メソッドの呼び出しは、ゼロが返されたし、次のノードは、リーダー、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlNodeType.EndElement>です。  
  
 呼び出した場合 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.Read%2A> 最初のコンテンツが読み取られていた場合、リーダーが動作の要素の内容のすべてを使用すると、前にし、 [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlTextReader.Read%2A> メソッドが呼び出されました。 これは、リーダーが、終了要素が出現するまでに、すべてのテキストを読み上げますことを意味します。 終了タグのノードを読み取り、次のノードを読み取り、後続のノード上に自身を配置します。  
  
   
  
## 例  
 参照してください [ReadElementContentAsBinHex メソッド \(Byte\<xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=fullName> にこのメソッドの使用例を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> 値は <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">現在のノードは、要素ノードではありません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">バッファーやインデックス \+ カウントへのインデックスは、割り当てられたバッファーのサイズを超えています。</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlReader" /> 実装はこのメソッドをサポートしていません。</exception>
        <exception cref="T:System.Xml.XmlException">要素には、混合コンテンツが含まれています。</exception>
        <exception cref="T:System.FormatException">コンテンツは、要求された型に変換できません。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーの状態を取得します。</summary>
        <value>
          <see cref="T:System.Xml.ReadState" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</summary>
        <returns>要素ノードまたはテキスト ノードの内容。 要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。  
  
 <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 要素に配置されている場合 `ReadString` テキスト、有意の空白、空白文字を連結し、 `CData` セクション ノード型を連結し、要素の内容として連結されたデータを返します。 コメントを含むや処理命令を任意のマークアップが発生したときに停止します。 これは混合コンテンツ モデル内で、または要素の終了タグが読み込まれると発生します。  
  
 テキスト ノードに配置されている場合 `ReadString` 要素の終了タグへのテキスト ノードから同じ連結を実行します。 リーダーが属性のテキスト ノード上にある場合、`ReadString` は、あたかもリーダーが要素の開始タグ上にあるのと同様に機能します。 連結されたすべての要素テキスト ノードが返されます。  
  
   
  
## 例  
 次の例では、各要素のテキストの内容を表示します。  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 この例では、 `elems.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">XML の解析中にエラーが発生しました。</exception>
        <exception cref="T:System.InvalidOperationException">無効な操作が試行されました。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リーダーの状態を ReadState.Initial にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このメソッドでは、1 つのストリーム内の複数の XML ドキュメントを解析することができます。 XML ドキュメントの最後に到達したときに呼び出す `ResetState` 準備として、次の XML ドキュメント内のリーダーの状態をリセットします。  
  
> [!IMPORTANT]
>  ストリーム内のドキュメントでは、同じエンコーディングを共有する必要があります。 場合、これがない場合と `ResetState` と呼ばれる、 <xref:System.Xml.XmlException> がスローされます。 \(これは、.NET Framework version 1.1 およびそれ以前からの動作の変更です。\)  
  
 次のプロパティに影響されない `ResetState`します。  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## 例  
 次の例では、1 つのストリーム内の 2 つの XML ドキュメントを解析します。  
  
 [!code-cpp[XmlTextReader.ResetState\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出す <see langword="ResetState" /> リーダーを使用して構築した場合、 <see cref="T:System.Xml.XmlParserContext" />です。</exception>
        <exception cref="T:System.Xml.XmlException">1 つのストリーム内のドキュメントは、同じエンコードを共有していません。</exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 リーダーが配置されている場合、 `EntityReference` ノード \(`XmlNodeType.EntityReference`\) 場合は、 <xref:System.Xml.XmlTextReader.Read%2A> 呼び出し元がこのメソッドでは、エンティティの置換テキストは解析後に呼び出されます。 エンティティの置換テキストが完了すると、 `EndEntity` エンティティ参照のスコープを閉じるノードが返されます。  
  
> [!NOTE]
>  このメソッドを呼び出した後、エンティティが属性の値の一部である場合、呼び出す必要があります <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> エンティティにステップ インします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のノードの子をスキップします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 次の XML の入力にリーダーが配置されているかどうか、 `<a>` ノードまたはその属性は、呼び出しのいずれかの `Skip` 、リーダーを `<b>` ノードです。  
  
 リーダーがリーフ ノードに既に配置されているかどうか \(など、 `<x>` ノードまたはテキスト ノード `abc`\) を呼び出す `Skip` 呼び出しと同じには、 <xref:System.Xml.XmlTextReader.Read%2A>です。  
  
```  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 このメソッドは、整形式の XML を確認します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」を参照してください。</summary>
        <returns>現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Xml.XmlTextReader> のインスタンスが <xref:System.Xml.IXmlNamespaceResolver> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">検索対象の名前空間 URI を持つプレフィックス。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />」を参照してください。</summary>
        <returns>プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Xml.XmlTextReader> のインスタンスが <xref:System.Xml.IXmlNamespaceResolver> インターフェイスにキャストされる場合にのみ、使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">検索対象のプレフィックスを持つ名前空間 URI。</param>
        <summary>このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」を参照してください。</summary>
        <returns>名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードのテキスト値を取得します。</summary>
        <value>返される値は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。 返す値を持つノード型の一覧を次の表に示します。 これ以外のノード型はすべて <see langword="String.Empty" /> を返します。  
  
 <list type="table">  
<listheader>  
<term> ノード型  
  
 </term>  
<description> 値  
  
 </description>  
</listheader>  
<item>  
<term> <see langword="Attribute" />  
  
 </term>  
<description> 属性の値。  
  
 </description>  
</item>  
<item>  
<term> <see langword="CDATA" />  
  
 </term>  
<description> CDATA セクションの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Comment" />  
  
 </term>  
<description> コメントの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="DocumentType" />  
  
 </term>  
<description> 内部サブセット。  
  
 </description>  
</item>  
<item>  
<term> <see langword="ProcessingInstruction" />  
  
 </term>  
<description> ターゲットを除く全内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="SignificantWhitespace" />  
  
 </term>  
<description> 内の空白、 <see langword="xml:space" />\= 'preserve' スコープ。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Text" />  
  
 </term>  
<description> テキスト ノードの内容。  
  
 </description>  
</item>  
<item>  
<term> <see langword="Whitespace" />  
  
 </term>  
<description> マークアップ間の空白。  
  
 </description>  
</item>  
<item>  
<term> <see langword="XmlDeclaration" />  
  
 </term>  
<description> 宣言の内容。  
  
 </description>  
</item>  
</list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例では、XML ファイルを読み取りし、各ノードを表示します。  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 このサンプルは、ファイルを使用して `items.xml`します。  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>空白の処理方法を指定する値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Xml.WhitespaceHandling" /> 値のいずれか。 既定値は <see langword="WhitespaceHandling.All" /> で、<see langword="Whitespace" /> と <see langword="SignificantWhitespace" /> ノードを返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティは、いつでも変更でき、次の読み取り操作で有効になります。  
  
 `XmlTextReader` は、使用可能な DTD 情報がない `SignificantWhitepsace` 内のノードが返される、 `xml:space='preserve'` スコープ。  
  
   
  
## 例  
 次の例では、XML フラグメントを読み取ります。  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定された値が無効です。</exception>
        <exception cref="T:System.InvalidOperationException">リーダーが閉じられたときにこのプロパティの設定 \(<see cref="P:System.Xml.XmlTextReader.ReadState" /> は <see langword="ReadState.Closed" />\)。</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see langword="xml:lang" /> スコープを取得します。</summary>
        <value>現在の <see langword="xml:lang" /> スコープ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 このプロパティを表す、 `xml:lang` 内で、現在のノードが存在するスコープします。 たとえばでの XML フラグメントをここでは `xml:lang` ルート要素に米国英語に設定します。  
  
 \< ルート xml:lang \="en\-私たち"\>  
  
 \< 名前 \> Fred \<\/name \>  
  
 \<\/ルート \>  
  
 リーダーが配置されている場合、 `name` 要素では、このプロパティを使用できます、米国英語版のスコープ内にある検索 `xml:lang` 属性です。  
  
   
  
## 例  
 次の例を表示、 `xml:lang` の各ノードの値。  
  
 [!code-cpp[XmlTextReader.XmlLang\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD 参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
        <value>使用する <see langword="XmlResolver" />。<see langword="null" /> に設定されていると、外部リソースが解決されません。  
  
 .NET Framework バージョン 1.1 では、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
 リーダーは `XmlResolver` をリーダーに読み込むファイルの場所を解決するのには、DTD 参照を解決するのにはさらにします。 例では、XML には、DOCTYPE 宣言が含まれている場合の `<!DOCTYPE book SYSTEM book.dtd>` リーダーは、この外部ファイルを解決し、DTD が整形式になるようにします。 読者は、検証のため、DTD を使用しません。  
  
 このプロパティは、いつでも変更でき、次の読み取り操作で有効になります。 このプロパティ設定されている場合 `null`, 、リーダーで発生したすべての外部 DTD 参照は解決されません。  
  
 Version 1.1 の [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], 、アプリケーションの信頼レベルが既定の動作を決定するこのプロパティが設定されていない場合。  
  
 `Fully trusted code:` リーダーは、既定値を使用 <xref:System.Xml.XmlUrlResolver> をユーザーの資格情報なし。 認証のネットワーク リソースへのアクセスが必要な場合に使用して、 `XmlResolver` プロパティを指定する、 `XmlResolver` ために必要な資格情報を使用します。  
  
 `Semi-trusted code:` `XmlResolver` にプロパティが設定されている `null`します。 外部リソースは解決されません。  
  
   
  
## 例  
 次の例では、 `XmlResolver` プロパティをネットワーク上のファイルにアクセスするために必要な資格情報を指定します。  
  
 [!code-cpp[XmlTextReader.XmlResolver\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の <see langword="xml:space" /> スコープを取得します。</summary>
        <value>
          <see cref="T:System.Xml.XmlSpace" /> 値のいずれか。<see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  作成することお勧め以降、.NET Framework 2.0 では、 <xref:System.Xml.XmlReader> インスタンスを使用して、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> の新しい機能を利用する方法です。  
  
   
  
## 例  
 次の例は、ファイルを解析し、有意の空白を返す場合、 `xml:space='preserve'` スコープを検出します。  
  
 [!code-cpp[XmlTextReader.XmlSpace\#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 この例では、 `authors.xml`, 、入力として。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>