<Type Name="XmlAttribute" FullName="System.Xml.XmlAttribute">
  <TypeSignature Language="C#" Value="public class XmlAttribute : System.Xml.XmlNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlAttribute extends System.Xml.XmlNode" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.XmlDocument</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>1 つの属性を表します。 属性の有効値と既定値は、ドキュメント型定義 \(DTD\) またはスキーマの中で定義されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 属性は要素に関連付けできます。 使用して、 <xref:System.Xml.XmlAttribute.OwnerElement%2A> を取得するプロパティ、 <xref:System.Xml.XmlElement> 属性が属しています。  
  
 `XmlElement` クラスに属性ノードにアクセスできるようにするいくつかのメソッドがあります \(<xref:System.Xml.XmlElement.GetAttribute%2A?displayProperty=fullName>, 、<xref:System.Xml.XmlElement.SetAttribute%2A?displayProperty=fullName>, 、<xref:System.Xml.XmlElement.RemoveAttribute%2A?displayProperty=fullName>, など\)。 さらに、呼び出すことができます、 <xref:System.Xml.XmlElement.Attributes%2A?displayProperty=fullName> を返すプロパティ、 <xref:System.Xml.XmlAttributeCollection> コレクションから別の名前またはインデックスの属性にアクセスすることが可能です。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlAttribute (string prefix, string localName, string namespaceURI, System.Xml.XmlDocument doc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string prefix, string localName, string namespaceURI, class System.Xml.XmlDocument doc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
        <Parameter Name="doc" Type="System.Xml.XmlDocument" />
      </Parameters>
      <Docs>
        <param name="prefix">名前空間プレフィックス。</param>
        <param name="localName">属性のローカル名。</param>
        <param name="namespaceURI">名前空間の uniform resource identifier \(URI\)。</param>
        <param name="doc">親 XML ドキュメント。</param>
        <summary>
          <see cref="T:System.Xml.XmlAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス化しないで、 <xref:System.Xml.XmlAttribute> 直接。 代わりに、などのメソッドの使用 <xref:System.Xml.XmlDocument.CreateAttribute%2A>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode AppendChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode AppendChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">追加する <see cref="T:System.Xml.XmlNode" />。</param>
        <summary>このノードの子ノードのリストの末尾に、指定したノードを追加します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を追加します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `newChild` は既にツリーで、最初に削除されます。  
  
 挿入されるノードは、別のドキュメントから作成された場合、は、使用 <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> を現在のドキュメントにノードをインポートします。 インポートされたノードは、現在のドキュメントに挿入できます。  
  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.AppendChild%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.AppendChild%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このノードの子の型のノードを許可しない型が、 <paramref name="newChild" /> ノードです。  
  
 <paramref name="newChild" /> はこのノードの先祖であります。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newChild" /> が、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
 このノードは、読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ベース統一リソース識別子 \(URI\) のノードを取得します。</summary>
        <value>ノードの読み込み元の場所。ノードにベース URI がない場合は String.Empty。 属性ノードでは、その所有者要素と同じ基本 URI を持ちます。 属性ノードが、所有者要素を持たない場合 <see langword="BaseURI" /> は String.Empty を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ネットワークに接続された XML ドキュメントでは、さまざまな World Wide Web Consortium \(W3C\) 標準的な信頼メカニズムを使用して集計データのチャンクで構成され、したがって各所に由来するノードが含まれます。`BaseURI` これらのノードの元の場所がわかります。  
  
 その他について `BaseURI` と他のノード型の動作にどのように表示 <xref:System.Xml.XmlNode.BaseURI%2A?displayProperty=fullName>します。  
  
 このプロパティは、ドキュメント オブジェクト モデル \(DOM\) の Microsoft 拡張機能です。  
  
   
  
## 例  
 次の例では、ベース URI を含む、属性ノードの情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.BaseURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.BaseURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.BaseURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.BaseURI Example/VB/source.vb#1)]  
  
 サンプルは、ファイルを使用して `baseuri.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlAttribute.BaseURI Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlAttribute.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlAttribute.OwnerElement" />
      </Docs>
    </Member>
    <Member MemberName="CloneNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode CloneNode (bool deep);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode CloneNode(bool deep) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deep" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="deep">
          <see langword="true" /> 再帰的に指定したノードの下にあるサブツリーのクローン作成します。 <see langword="false" /> ノードだけのクローンを作成するには</param>
        <summary>このノードの複製を作成します。</summary>
        <returns>複製されたノード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ノードのコピー コンス トラクターとして機能します。 複製されたノードが親を持たない \(<xref:System.Xml.XmlAttribute.ParentNode%2A> 返します `null`\)。  
  
 指定した属性指定されていない属性の複製を返します \(<xref:System.Xml.XmlAttribute.Specified%2A> 返します `true`\)。  
  
   
  
## 例  
 次の例では使用 `CloneNode` に 2 つの異なる要素ノードに属性を追加します。  
  
 [!code-cpp[Classic WebData XmlAttribute.CloneNode Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.CloneNode Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.CloneNode Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.CloneNode Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.CloneNode Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.CloneNode Example/VB/source.vb#1)]  
  
 この例では、 `2elems.xml`, 、入力として。  
  
 [!code-xml[Classic WebData XmlAttribute.CloneNode Example\#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlAttribute.CloneNode Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlElement" />
      </Docs>
    </Member>
    <Member MemberName="InnerText">
      <MemberSignature Language="C#" Value="public override string InnerText { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerText" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.InnerText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ノードとそのすべての子の連結された値を設定します。</summary>
        <value>ノードとすべての子の連結された値。 属性ノードのこのプロパティが、同じ機能を持ち、 <see cref="P:System.Xml.XmlAttribute.Value" /> プロパティです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、指定された文字列の解析されたコンテンツですべての子が置き換えられます。  
  
 このプロパティは、ドキュメント オブジェクト モデル \(DOM\) の Microsoft 拡張機能です。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlAttribute.InnerXml" />
        <altmember cref="P:System.Xml.XmlNode.OuterXml" />
      </Docs>
    </Member>
    <Member MemberName="InnerXml">
      <MemberSignature Language="C#" Value="public override string InnerXml { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InnerXml" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.InnerXml" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性の値を設定します。</summary>
        <value>属性値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ドキュメント オブジェクト モデル \(DOM\) の Microsoft 拡張機能です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">このプロパティの設定時に指定される XML は、整形式ではありません。</exception>
        <altmember cref="P:System.Xml.XmlAttribute.InnerText" />
        <altmember cref="P:System.Xml.XmlNode.OuterXml" />
      </Docs>
    </Member>
    <Member MemberName="InsertAfter">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode InsertAfter (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode InsertAfter(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
        <param name="refChild">
          <see cref="T:System.Xml.XmlNode" /> 参照ノードであります。<c>newChild</c> 後に置かれます、 <c>refChild</c>です。</param>
        <summary>指定したノードを指定した参照ノードの直後に挿入します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を挿入します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `refChild` は `null`, 、挿入 `newChild` 子ノードのリストの先頭にします。 場合 `newChild` は、 <xref:System.Xml.XmlDocumentFragment> オブジェクト、その子ノードは、同じ順序で後に挿入 `refChild`します。 場合、 `newChild` は既にツリーで、最初に削除されます。  
  
 挿入されるノードは、別のドキュメントから作成された場合、は、使用 <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> を現在のドキュメントにノードをインポートします。 インポートされたノードは、現在のドキュメントに挿入できます。  
  
 このメソッドは、ドキュメント オブジェクト モデル \(DOM\) に Microsoft 拡張機能です。  
  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.InsertAfter%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.InsertAfter%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このノードの子の型のノードを許可しない型が、 <paramref name="newChild" /> ノードです。  
  
 <paramref name="newChild" /> はこのノードの先祖であります。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newChild" /> が、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
 <paramref name="refChild" /> このノードの子ではありません。  
  
 このノードは、読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertBefore">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode InsertBefore (System.Xml.XmlNode newChild, System.Xml.XmlNode refChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode InsertBefore(class System.Xml.XmlNode newChild, class System.Xml.XmlNode refChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="refChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">挿入する <see cref="T:System.Xml.XmlNode" />。</param>
        <param name="refChild">
          <see cref="T:System.Xml.XmlNode" /> 参照ノードであります。<c>newChild</c> はこのノードの前に配置されます。</param>
        <summary>指定したノードを指定した参照ノードの直前に挿入します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を挿入します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `refChild` は `null`, 、挿入 `newChild` 子ノードのリストの末尾にします。 場合 `newChild` は、 <xref:System.Xml.XmlDocumentFragment> オブジェクト、その子ノードが挿入、同じ順序で前に `refChild`します。 場合、 `newChild` は既にツリーで、最初に削除されます。  
  
 挿入されるノードは、別のドキュメントから作成された場合、は、使用 <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> を現在のドキュメントにノードをインポートします。 インポートされたノードは、現在のドキュメントに挿入できます。  
  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.InsertBefore%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.InsertBefore%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のノードの子の型のノードを許可しない型が、 <paramref name="newChild" /> ノードです。  
  
 <paramref name="newChild" /> はこのノードの先祖であります。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newChild" /> が、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
 <paramref name="refChild" /> このノードの子ではありません。  
  
 このノードは、読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ノードのローカル名を取得します。</summary>
        <value>プリフィックスを削除した属性ノードの名前。 次の例では &lt; たとえば \= '斬新な' &gt;、 <see langword="LocalName" /> 属性は <see langword="genre" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ノードには、プレフィックスがない場合 `LocalName` と同じ <xref:System.Xml.XmlAttribute.Name%2A>します。  
  
   
  
## 例  
 次の例では、各属性のコレクション内のノードで情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ノードの限定名を取得します。</summary>
        <value>属性ノードの修飾名。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、各属性のコレクション内のノードで情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.Name Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.Name Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.Name Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.Name Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlAttribute.LocalName" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このノードの名前空間 URI を取得します。</summary>
        <value>このノードの名前空間 URI。 属性が名前空間が明示的に与えられない場合、このプロパティは String.Empty を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 属性は、要素にアタッチされてから、名前空間を継承しません。 属性が名前空間が明示的に与えられない場合、名前空間 URI が String.Empty と見なされます。  
  
   
  
## 例  
 次の例では、各属性のコレクション内のノードで情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のノードの種類を取得します。</summary>
        <value>ノード型 <see langword="XmlAttribute" /> ノードは XmlNodeType.Attribute です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="OwnerDocument">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlDocument OwnerDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlDocument OwnerDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.OwnerDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このノードが属する <see cref="T:System.Xml.XmlDocument" /> を取得します。</summary>
        <value>このノードが属している XML ドキュメントです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、属性を作成し、表示、 `OwnerDocument`です。  
  
 [!code-cpp[Classic WebData XmlAttribute.OwnerDocument Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.OwnerDocument Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.OwnerDocument Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OwnerElement">
      <MemberSignature Language="C#" Value="public virtual System.Xml.XmlElement OwnerElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlElement OwnerElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.OwnerElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Xml.XmlElement" /> 属性が属しています。</summary>
        <value>
          <see langword="XmlElement" /> 属性が属するまたは <see langword="null" /> この属性がない場合の一部では、 <see langword="XmlElement" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、属性を作成し、表示、 `OwnerElement` 属性のです。  
  
 [!code-cpp[Classic WebData XmlAttribute.OwnerElement Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.OwnerElement Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.OwnerElement Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.OwnerElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentNode">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ParentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNode ParentNode" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.ParentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このノードの親を取得します。<see langword="XmlAttribute" /> ノード、このプロパティは常に返します <see langword="null" />します。</summary>
        <value>
          <see langword="XmlAttribute" /> ノード、このプロパティは常に返します <see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Xml.XmlAttribute.OwnerElement%2A> を取得するプロパティ、 <xref:System.Xml.XmlElement> 属性が属しています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このノードの名前空間プリフィックスを取得または設定します。</summary>
        <value>このノードの名前空間プリフィックス。 プリフィックスがない場合、このプロパティは String.Empty を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 属性のプレフィックスを変更しても、名前空間 URI が変更されないため、既定値を持つことがわかっている属性のプレフィックスを変更するは作成されません新しい属性した既定値と元のプレフィックス。  
  
   
  
## 例  
 次の例では、各属性のコレクション内のノードで情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">このノードは、読み取り専用です。</exception>
        <exception cref="T:System.Xml.XmlException">指定したプレフィックスに無効な文字が含まれています。  
  
 指定されたプリフィックスの書式が正しくありません。  
  
 このノードの属性の namespaceURI が <see langword="null" /> です。  
  
 指定したプレフィックスは"xml"いて、このノードの名前空間 Uri が"http:\/\/www.w3.org\/XML\/1998\/namespace"から異なっています。  
  
 このノードが属性で、指定したプレフィックスは"xmlns"およびこのノードの名前空間 Uri とは異なる"http:\/\/www.w3.org\/2000\/xmlns\/"です。  
  
 このノードは、属性であり、このノードの qualifiedName は"xmlns"\[名前空間\] です。</exception>
      </Docs>
    </Member>
    <Member MemberName="PrependChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode PrependChild (System.Xml.XmlNode newChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode PrependChild(class System.Xml.XmlNode newChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">追加する <see cref="T:System.Xml.XmlNode" />。 ある場合、 <see cref="T:System.Xml.XmlDocumentFragment" />, 、ドキュメント フラグメントの内容全体がこのノードの子リストに移動されます。</param>
        <summary>このノードの子ノードのリストの先頭に、指定したノードを追加します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を追加します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `newChild` は既にツリーで、最初に削除されます。  
  
 挿入されるノードは、別のドキュメントから作成された場合、は、使用 <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> を現在のドキュメントにノードをインポートします。 インポートされたノードは、現在のドキュメントに挿入できます。  
  
 このメソッドは、ドキュメント オブジェクト モデル \(DOM\) に Microsoft 拡張機能です。  
  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.PrependChild%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.PrependChild%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このノードの子の型のノードを許可しない型が、 <paramref name="newChild" /> ノードです。  
  
 <paramref name="newChild" /> はこのノードの先祖であります。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newChild" /> が、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
 このノードは、読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RemoveChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode RemoveChild (System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode RemoveChild(class System.Xml.XmlNode oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="oldChild">削除する <see cref="T:System.Xml.XmlNode" />。</param>
        <summary>指定した子ノードを削除します。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を削除します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.RemoveChild%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.RemoveChild%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="oldChild" /> このノードの子ではありません。 または、このノードは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplaceChild">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNode ReplaceChild (System.Xml.XmlNode newChild, System.Xml.XmlNode oldChild);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Xml.XmlNode ReplaceChild(class System.Xml.XmlNode newChild, class System.Xml.XmlNode oldChild) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newChild" Type="System.Xml.XmlNode" />
        <Parameter Name="oldChild" Type="System.Xml.XmlNode" />
      </Parameters>
      <Docs>
        <param name="newChild">新しい子 <see cref="T:System.Xml.XmlNode" />します。</param>
        <param name="oldChild">
          <see cref="T:System.Xml.XmlNode" /> を置き換えます。</param>
        <summary>指定された新しい子ノードで指定された子ノードを置き換えます。</summary>
        <returns>
          <see cref="T:System.Xml.XmlNode" /> を交換してください。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `newChild` は既にツリーで、最初に削除されます。  
  
 場合、 `newChild` が作成された別のドキュメントからを使用して <xref:System.Xml.XmlDocument.ImportNode%2A?displayProperty=fullName> を現在のドキュメントにノードをインポートします。  
  
   
  
## 例  
 例については、 <xref:System.Xml.XmlAttribute.ReplaceChild%2A> メソッドを参照してください、 <xref:System.Xml.XmlNode.ReplaceChild%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このノードの子の型のノードを許可しない型が、 <paramref name="newChild" /> ノードです。  
  
 <paramref name="newChild" /> はこのノードの先祖であります。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="newChild" /> が、このノードを作成したドキュメントとは異なるドキュメントから作成されました。  
  
 このノードは、読み取り専用です。  
  
 <paramref name="oldChild" /> このノードの子ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaInfo">
      <MemberSignature Language="C#" Value="public override System.Xml.Schema.IXmlSchemaInfo SchemaInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.IXmlSchemaInfo SchemaInfo" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.SchemaInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.IXmlSchemaInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>後のスキーマの検証の情報セットがスキーマ検証の結果には、このノードに割り当てられているを取得します。</summary>
        <value>
          <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> 、後スキーマの検証\-の情報セットこのノードにはが含まれています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlAttribute.SchemaInfo%2A> このノードが検証されるときにプロパティが設定されています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Specified">
      <MemberSignature Language="C#" Value="public virtual bool Specified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Specified" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.Specified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>属性の値が明示的に設定されているかどうかを示す値を取得します。</summary>
        <value>
          <see langword="true" /> この属性が、元のインスタンス ドキュメントで、値を明示的に指定した場合それ以外の場合、 <see langword="false" />です。 値 <see langword="false" /> 属性の値が、DTD のものであることを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実装では、ユーザーではなく、このプロパティを担当します。 \(既定値または固定値と同じ値になった場合でも\) の属性の値を変更すると場合、指定したフラグは自動的に反転に `true`します。 DTD の既定値または固定値として属性を再指定するには、ユーザーは、属性を削除する必要があります。 新しい属性は、指定されているセットで使用できる実装し、 `false` し、既定値または固定値の 1 つ存在する場合\)。  
  
 概要:  
  
1.  属性に割り当てられた値がある場合は、ドキュメントで `Specified` は `true`, 、値は、割り当てられた値。  
  
2.  属性は、ドキュメントに割り当てられた値が存在しないと、DTD では、既定値または固定値を持つ場合 `Specified` は `false`, 、値は、DTD 内で既定値または固定値とします。  
  
3.  それ以外の場合、属性は、ドキュメントの構造体のモデルでは表示されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ノードの値を取得または設定します。</summary>
        <value>返される値は、ノードの <see cref="P:System.Xml.XmlNode.NodeType" /> によって異なります。<see langword="XmlAttribute" /> ノード、このプロパティは、属性の値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、各属性のコレクション内のノードで情報を表示します。  
  
 [!code-cpp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlAttribute.NamespaceURI Example\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlAttribute.NamespaceURI Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">ノードは読み取り専用と、set 操作が呼び出されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteContentTo">
      <MemberSignature Language="C#" Value="public override void WriteContentTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteContentTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">保存先の <see langword="XmlWriter" />。</param>
        <summary>指定した <see cref="T:System.Xml.XmlWriter" /> にノードのすべての子を保存します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ドキュメント オブジェクト モデル \(DOM\) に Microsoft 拡張機能です。 機能的には、 <xref:System.Xml.XmlAttribute.InnerXml%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteTo">
      <MemberSignature Language="C#" Value="public override void WriteTo (System.Xml.XmlWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteTo(class System.Xml.XmlWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.XmlDocument</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.Xml.XmlWriter" />
      </Parameters>
      <Docs>
        <param name="w">保存先の <see langword="XmlWriter" />。</param>
        <summary>ノードを指定した保存 <see cref="T:System.Xml.XmlWriter" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、ドキュメント オブジェクト モデル \(DOM\) に Microsoft 拡張機能です。 機能的には、 <xref:System.Xml.XmlNode.OuterXml%2A?displayProperty=fullName> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>