<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>サポートする機能のセットを示す、 <see cref="T:System.Xml.XmlWriter" /> によって作成されたオブジェクト、 <see cref="Overload:System.Xml.XmlWriter.Create" /> メソッドです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Xml.XmlWriter.Create%2A> メソッドを取得するための推奨メカニズムは、 <xref:System.Xml.XmlWriter> インスタンス。<xref:System.Xml.XmlWriter.Create%2A> メソッドの使用方法、 <xref:System.Xml.XmlWriterSettings> クラスで実装する機能を指定する、 <xref:System.Xml.XmlWriter> 作成されるオブジェクトです。  
  
> [!NOTE]
>  使用している場合、 <xref:System.Xml.XmlWriter> オブジェクトを <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> メソッドを使用してください、 <xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> を取得するプロパティ、 <xref:System.Xml.XmlWriterSettings> 正しい設定を持つオブジェクト。 これにより、作成された <xref:System.Xml.XmlWriter> オブジェクトには、正しい出力設定します。  
  
 <xref:System.Xml.XmlWriterSettings> クラスはそのコントロールのデータの一致と出力形式のプロパティを提供します。  
  
 データ一致チェックと自動修正では、これらのプロパティを使用します。  
  
|プロパティ|指定内容|値|既定|  
|-----------|----------|-------|--------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|セットは、W3C で定義されている文字が有効な XML のことを確認するかどうか文字です。|`true` または `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|出力が整形式 XML 1.0 ドキュメントやフラグメントのことを確認するかどうか。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName> \(ドキュメント レベル\)、 <xref:System.Xml.ConformanceLevel.Fragment> \(フラグメント レベル\)、または <xref:System.Xml.ConformanceLevel.Auto> \(自動検出\)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=fullName> \(ドキュメント レベルの一致\)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|タグと終了タグをすべて閉じられていない要素に追加するかどうかと、 <xref:System.Xml.XmlWriter.Close%2A> メソッドが呼び出されます。|`true` または `false`|`true`|  
  
 出力形式を指定するには、これらのプロパティを使用します。  
  
|プロパティ|指定内容|値|既定|  
|-----------|----------|-------|--------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|使用するテキスト エンコーディングします。|<xref:System.Text.Encoding?displayProperty=fullName> の値|<xref:System.Text.Encoding.UTF8?displayProperty=fullName>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|要素をインデントするかどうか|`true` または `false`|`false` \(インデントなし\)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|文字のインデントに使用する文字列 \(際に使用される <xref:System.Xml.XmlWriterSettings.Indent%2A> に設定されている `true`\)。|String|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|改行に使用する文字を指定します。|String|`\r\n` \(キャリッジ リターン、ライン フィード\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|改行文字を処理する方法。|<xref:System.Xml.NewLineHandling?displayProperty=fullName> 値: <xref:System.Xml.NewLineHandling.Entitize> \(正規化\) <xref:System.Xml.NewLineHandling.Replace> \(置換\)、または <xref:System.Xml.NewLineHandling.None> \(未変更のままに\)|<xref:System.Xml.NewLineHandling.Replace> \(で指定された文字に置き換える <xref:System.Xml.XmlWriterSettings.NewLineChars%2A>\)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|個々 の行に属性を書き込むかどうか \(持たないされるときに有効 <xref:System.Xml.XmlWriterSettings.Indent%2A> は `false`\)。|`true` または `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 宣言を書き込むかどうか。|`true` または `false`|`false`|  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> を XML ファイルに書き込み、新しい行に各属性を書き込みます。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、のインスタンスの初期プロパティ値を示しています。 <xref:System.Xml.XmlWriterSettings>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペースです。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` \(キャリッジ リターン、改行\) です。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> インデントのタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定を示す値を取得または非同期かどうか <see cref="T:System.Xml.XmlWriter" /> メソッドは、特定のでは使用できる <see cref="T:System.Xml.XmlWriter" /> インスタンス。</summary>
        <value>
          <see langword="true" /> 非同期メソッドを使用する場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値を設定する必要があります `true` 新規に作成するときに <xref:System.Xml.XmlWriter> 非同期を使用する場合にインスタンス <xref:System.Xml.XmlWriter> そのインスタンス上のメソッドです。 後に、 <xref:System.Xml.XmlWriter> のインスタンスを作成、 <xref:System.Xml.XmlWriterSettings.Async%2A> プロパティは読み取り専用です。 このプロパティの既定値は `false` です。  
  
 このフラグは無視されます、 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> オーバー ロードします。 つまり、新規に作成する場合 <xref:System.Xml.XmlWriter> 既存の <xref:System.Xml.XmlWriter>, 、非同期動作は、入力に依存 <xref:System.Xml.XmlWriter>, 、使用することはできませんし、 <xref:System.Xml.XmlWriterSettings.Async%2A> 非同期動作を変更するフラグ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ライターがチェック ドキュメント内のすべての文字が W3C の「2.2 文字」セクションに準拠するいることを確認するどうかを示す値を取得または [XML 1.0 Recommendation](http://www.w3.org/TR/REC-xml/#charsets)します。</summary>
        <value>
          <see langword="true" /> 文字をチェックします。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Xml.XmlWriter> オブジェクトは、文字のチェックをサポートしている、任意の文字が W3C の「2.2 文字」セクションで指定された有効な XML 文字の範囲を超える場合は、例外をスロー [XML 1.0 Recommendation](http://www.w3.org/TR/REC-xml/#charsets)します。  
  
 文字のチェックは、XML 名に無効な文字に関するチェックまたはすべての XML 名が有効であるかをチェックは含まれません。 これらのチェックの一致チェックの一部であり、常に実行します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
        <returns>複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 複製された <xref:System.Xml.XmlWriterSettings> オブジェクトを元のオブジェクトの設定の影響を与えずに変更できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Xml.XmlWriter" /> 基になるストリームを閉じる必要がありますもまたは <see cref="T:System.IO.TextWriter" /> ときに、 <see cref="M:System.Xml.XmlWriter.Close" /> メソッドが呼び出されます。</summary>
        <value>
          <see langword="true" /> 基になるストリームを閉じるか、 <see cref="T:System.IO.TextWriter" />。 そうしないと、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この設定は、XML をストリームに書き込みおよびストリームの末尾に追加情報を追加する場合に便利です、 <xref:System.Xml.XmlWriter> 書き込みを終了しました。  
  
 このプロパティは、 <xref:System.Xml.XmlWriter> をストリームに XML を出力インスタンスのコンテンツまたは <xref:System.IO.TextWriter>。 そうしないと、この設定は無視されます。  
  
   
  
## 例  
 次の例では、XML フラグメントをメモリ ストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ライターが XML 出力をチェックする準拠のレベルを取得または設定します。</summary>
        <value>準拠のレベル \(ドキュメント、フラグメント、自動検出\) を指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=fullName> property configures the XML writer to check and guarantee that the stream being written complies with a certain set of rules. The XML data can be checked to see that it conforms to the rules for a well\-formed XML 1.0 document or a document fragment. The following table describes the three settings. The default is document\-level conformance.  
  
|Setting|Description|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Ensures that the XML output conforms to the [rules for a well\-formed XML 1.0 document](http://www.w3.org/TR/REC-xml/#sec-well-formed) and can be processed by any conforming processor.<br /><br /> The document conformance checks include most of the fragment\-level checks and also ensure the following:<br /><br /> -   The top\-level item doesn't have any nodes other than XML Declaration, DTD, element, comment, white space, or processing instruction.<br />-   The XML data has one and only one top\-level element node.<br /><br /> The XML writer doesn't parse DTD information that is written. The user is responsible for ensuring that the DTD is well\-formed.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Ensures that the XML output conforms to the [rules for a well\-formed XML 1.0 document fragment](http://www.w3.org/TR/REC-xml/#wf-entities).<br /><br /> This setting accepts XML data that has multiple root elements or text nodes at the top level. This level of checking ensures that any processor can consume the stream being read as an XML 1.0 external parsed entity.<br /><br /> DTD information isn't allowed in document fragments.|  
|<xref:System.Xml.ConformanceLevel.Auto>|Specifies that the XML writer should determine the level of conformance checking based on the incoming data. This setting can be useful when you don't know whether the generated XML will be a well\-formed XML document or a fragment.<br /><br /> Document conformance checking is applied in the following cases:<br /><br /> -   If the <xref:System.Xml.XmlWriter.WriteStartDocument%2A> method is called.<br />-   If DTD information is written.<br /><br /> Fragment conformance checking is applied if the XML data contains one of these:<br /><br /> -   Text, CDATA, or EntityReference node at the root level.<br />-   More than one element at the root level.<br />-   No element at the root level.<br /><br /> An <xref:System.Xml.XmlException> is thrown if there is a conflict, such as when you try to write a text node and a DTD at the root level.<br /><br /> If you are wrapping another <xref:System.Xml.XmlWriter> object, the outer object doesn't do any additional conformance checking; this is left to the underlying object.|  
  
 If the XML writer detects any information that would violate the specified level of conformance, it throws an exception. In some cases, the XML writer automatically corrects the conformance error. For example, the writer closes an unclosed attribute without throwing an exception. The following table shows how various conformance violations are handled in each setting.  
  
|Condition|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD information is found.|Not a violation for this setting. However, the XML writer doesn't check the DTD; the user must ensure that the DTD is well\-formed.|<xref:System.Xml.XmlException> is thrown.|Document conformance checking is applied.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> is called.|Not considered a violation for this setting.|<xref:System.Xml.XmlException> is thrown.|Document conformance checking is applied.|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> is called multiple times.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|A text value appears at the top level \(not below an element or attribute node\).|<xref:System.Xml.XmlException> is thrown.|Not considered a violation.|Fragment conformance checking is applied.|  
|Multiple elements or no elements appear at the top level.|<xref:System.Xml.XmlException> is thrown.|Not considered a violation.|Fragment conformance checking is applied.|  
|Top\-level item is white space.|Not considered a violation.|Not considered a violation.|Not considered a violation.|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> isn't called to end an attribute node.|Fixed by XML writer.|Fixed by XML writer.|Fixed by XML writer.|  
|The XML writer is in an improperly nested state \(for example, a <xref:System.Xml.XmlWriter.WriteStartElement%2A> call is followed by a <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>\).|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|Top\-level item is an attribute.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|Multiple, contiguous text nodes are found.|Not considered a violation, but it's the responsibility of the user to concatenate the text nodes.|Not considered a violation, but it's the responsibility of the user to concatenate the text nodes.|Not considered a violation, but it's the responsibility of the user to concatenate the text nodes.|  
|The same namespace prefix is declared twice in an element.|The XML writer generates a new prefix for the second namespace.|The XML writer generates a new prefix for the second namespace.|The XML writer generates a new prefix for the second namespace.|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> specifies a prefix and a namespace that isn't declared within that scope, or the prefix is associated with a different namespace.|The XML writer writes the necessary namespace node.|The XML writer writes the necessary namespace node.|The XML writer writes the necessary namespace node.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> specifies a prefix and a namespace that isn't declared within that scope.|The XML writer writes the necessary namespace node.|The XML writer writes the necessary namespace node.|The XML writer writes the necessary namespace node.|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> specifies a prefix and a namespace, but the prefix is associated with a different in\-scope namespace.|The XML writer ignores the specified prefix and either looks up the correct prefix or generates a new prefix.|The XML writer ignores the specified prefix and either looks up the correct prefix or generates a new prefix.|The XML writer ignores the specified prefix and either looks up the correct prefix or generates a new prefix.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> is used to write element content by using a namespace that doesn't exist within the scope.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> is used to write attribute content by using a namespace that doesn't exist within the scope.|The XML writer writes the necessary namespace declaration.|The XML writer writes the necessary namespace declaration.|The XML writer writes the necessary namespace declaration.|  
|The **languageKeyword tag is not supported!!!!**<br /> attribute doesn't contain a valid value.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|An invalid name is encountered.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|The **languageKeyword tag is not supported!!!!**<br /> prefix isn't matched to a URI.|The XML writer doesn't check for this type of violation.|The XML writer doesn't check for this type of violation.|The XML writer doesn't check for this type of violation.|  
|The **languageKeyword tag is not supported!!!!**<br /> prefix isn't matched to the http:\/\/www.w3.org\/XML\/1998\/namespace URI.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
|The **languageKeyword tag is not supported!!!!**<br /> prefix or local name isn't matched to a URI.|The XML writer doesn't check for this type of violation.|The XML writer doesn't check for this type of violation.|The XML writer doesn't check for this type of violation.|  
|The **languageKeyword tag is not supported!!!!**<br /> prefix or local name isn't matched to the http:\/\/www.w3.org\/2000\/xmlns URI.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|<xref:System.Xml.XmlException> is thrown.|  
  
   
  
## 例  
 The following example writes an XML fragment to a memory stream.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Xml.XmlWriter" /> URI 属性をエスケープしません。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Xml.XmlWriter" /> URI 属性をエスケープしません。 そうしないと、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用するテキスト エンコーディングの種類を取得または設定します。</summary>
        <value>使用するテキスト エンコーディング。 既定値は、<see langword="Encoding.UTF8" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Xml.XmlWriter> encodes a buffer of characters all at once, rather than character by character. An exception is thrown when the <xref:System.Xml.XmlWriter.Flush%2A> method is called if any encoding errors are encountered.  
  
 The <xref:System.Xml.XmlWriterSettings.Encoding%2A> property only applies to the <xref:System.Xml.XmlWriter> instances that are created either with the specified <xref:System.IO.Stream> or with the specified file name. If the <xref:System.Xml.XmlWriter> instance is created with the specified <xref:System.IO.TextWriter>, the <xref:System.Xml.XmlWriterSettings.Encoding%2A> property is overridden by the encoding of the underlying <xref:System.IO.TextWriter>. For example, if this property is set to Unicode \(UTF\-16\) for a particular <xref:System.Xml.XmlWriter>, but the underlying writer is a <xref:System.IO.StreamWriter> \(which derives from <xref:System.IO.TextWriter>\) with its encoding set to UTF8, the output will be UTF\-8 encoded.  
  
 If the <xref:System.Xml.XmlWriter> instance is created with other output parameters, the <xref:System.Xml.XmlWriterSettings.Encoding%2A> property is ignored.  
  
 In the following example:  
  
-   The default value of <xref:System.Xml.XmlWriterSettings.Encoding%2A> is **languageKeyword tag is not supported!!!!**  
    .  
  
-   The <xref:System.IO.StreamWriter> is set to **languageKeyword tag is not supported!!!!**  
     and the <xref:System.IO.StreamWriter>’s encoding overrides the <xref:System.Xml.XmlWriterSettings.Encoding%2A> setting.  
  
-   The output will be **languageKeyword tag is not supported!!!!**  
    .  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  Do not accept an <xref:System.Text.Encoding> object from an untrusted source.  
  
   
  
## 例  
 The following example writes an XML fragment to a memory stream.  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 個々 の要素を書き込むを新しい行にインデントします。それ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 <xref:System.Xml.XmlWriter> インスタンスは、テキストの内容を出力をそれ以外の場合、この設定は無視されます。  
  
 要素に混合コンテンツが含まれていない限り、要素がインデントされます。 1 回、 <xref:System.Xml.XmlWriter.WriteString%2A> または <xref:System.Xml.XmlWriter.WriteWhitespace%2A> 混合要素コンテンツを記述するメソッドが呼び出された、 <xref:System.Xml.XmlWriter> インデントを停止します。 インデントするには、混合コンテンツ要素を閉じた後が再開されます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> インデントのタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インデント処理を行うときに使用する文字列を取得または設定します。 この設定が使用されるときに、 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> にプロパティが設定されている <see langword="true" />します。</summary>
        <value>インデント処理を行うときに使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は 2 つのスペースです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 <xref:System.Xml.XmlWriter> インスタンスは、テキストの内容を出力をそれ以外の場合、この設定は無視されます。<xref:System.Xml.XmlWriter> インデント文字が無効な XML になる場合は例外をスローします。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> インデントのタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">割り当てられた値、 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはを示す値を設定するかどうか、 <see cref="T:System.Xml.XmlWriter" /> XML コンテンツを書き込むときに、重複する名前空間宣言を削除する必要があります。 既定の動作では、ライターの名前空間リゾルバーに存在するすべての名前空間宣言がライターによって出力されます。</summary>
        <value>
          <see cref="T:System.Xml.NamespaceHandling" /> で重複する名前空間宣言を削除するかどうかを指定するための列挙、 <see cref="T:System.Xml.XmlWriter" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>改行に使用する文字列を取得または設定します。</summary>
        <value>改行に使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は <c>\r\n</c> \(キャリッジ リターン、改行\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 <xref:System.Xml.XmlWriter> インスタンスは、テキストの内容を出力をそれ以外の場合、この設定は無視されます。<xref:System.Xml.XmlWriter> 、改行文字が無効な XML になる場合は例外をスローします。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">割り当てられた値、 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> は <see langword="null" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Xml.NewLineHandling" /> 値のいずれか。 既定値は、<see cref="F:System.Xml.NewLineHandling.Replace" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この設定は、テキストの内容または属性の値を書き込むときに適用されます。 各、 <xref:System.Xml.NewLineHandling> 値が以下で説明します。  
  
-   <xref:System.Xml.NewLineHandling.Entitize> 設定は、 <xref:System.Xml.XmlWriter> をそれ以外の場合で維持されない場合、正規化を改行文字を置き換える <xref:System.Xml.XmlReader> 文字エン ティティにします。 これは、正規化の出力の読み取りがラウンド トリップのシナリオで役立ちます <xref:System.Xml.XmlReader>します。 以降トリップ ラウンドと属性値の追加の正規化ルールを適用 `\t`, 、`\n` と `\r` で正規化と属性値にスペースを置き換え、 <xref:System.Xml.XmlReader>です。  
  
-   <xref:System.Xml.NewLineHandling.Replace> 設定は、 <xref:System.Xml.XmlWriter> で改行文字を置き換える `\r\n`, 、Microsoft Windows オペレーティング システムで使用される新しい行形式であります。 これにより、メモ帳や Microsoft Word のアプリケーションで、ファイルを正しく表示されるようにします。 この設定は、属性に新しい行を文字を保持する文字エン ティティに置き換えられます。 これが既定値です。  
  
-   <xref:System.Xml.NewLineHandling.None> 設定は、 <xref:System.Xml.XmlWriter> 変更されていない入力のままにします。 この設定は、新しい行の処理をしない場合に使用されます。 によって、出力が読み取られるときに便利ですが、 <xref:System.Xml.XmlReader> はどのような正規化を行わない \(たとえば、 <xref:System.Xml.XmlTextReader> 既定の設定でします\)。  
  
 次の表の出力を表示する、 <xref:System.Xml.XmlWriter.WriteString%2A> メソッドによって、入力値に指定すると、 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> プロパティの設定です。 テーブルは、テキスト コンテンツの書き込み時に出力を表示および属性値を作成するとき。  
  
 `Text Node Value:`  
  
||\\r\\n|\\n|\\r|\\t|  
|-|------------|---------|---------|---------|  
|含ま|& \#D \\n。|\\n|& \#D です。|\\t|  
|置換|\\r\\n|\\r\\n|\\r\\n|\\t|  
|なし|\\r\\n|\\n|\\r|\\t|  
  
 `Attribute Value:`  
  
||\\r\\n|\\n|\\r|\\t|  
|-|------------|---------|---------|---------|  
|含ま|&\#D; & \#A です。|& \#A です。|& \#D です。|&\#9;|  
|置換|&\#D; & \#A です。|& \#A です。|& \#D です。|&\#9;|  
|なし|\\r\\n|\\n|\\r|\\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter> CDATA セクション、コメント、または処理命令内のコンテンツを作成するときに、次の動作を持ちます。 新しい行は、文字エン ティティに置き換えられません場合でも、 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> にプロパティが設定されている <xref:System.Xml.NewLineHandling.Entitize>します。 これは、文字エン ティティは CDATA セクション、コメント、または処理命令で認識されないためです。 場合、 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A> にプロパティが設定されている <xref:System.Xml.NewLineHandling.None> または <xref:System.Xml.NewLineHandling.Replace>, 、テキスト ノードの値を作成するときと同じ動作です。  
  
 次の表は、どのような正規化を示して <xref:System.Xml.XmlReader> 入力各空白文字を返します。 詳細については、2.11 および W3C の 『 3.3.3 のセクションを参照してください。 [XML 1.0 Recommendation](http://www.w3.org/TR/REC-xml/)します。  
  
> [!NOTE]
>  正規化のリーダーは、いずれかの <xref:System.Xml.XmlReader> によって作成されたオブジェクト、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName> メソッドです。 これらのオブジェクトは、常に、改行の正規化と属性の完全な正規化を実行します。<xref:System.Xml.XmlTextReader> オブジェクトこともできます正規化リーダーである場合 <xref:System.Xml.XmlTextReader.Normalization%2A> にプロパティが設定されている `true`します。  
  
||\\r\\n|\\n|\\r|\\t|  
|-|------------|---------|---------|---------|  
|テキスト ノードの値|\\n|\\n|\\n|\\t|  
|属性値|単一の空白|単一の空白|単一の空白|単一の空白|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> 個々 の行に属性を書き込むそれ以外の場合、 <see langword="false" />です。 既定値は、<see langword="false" /> です。  
  
 <block subset="none" type="note">  
<para>  
 この設定は \[いいえされるときに有効、 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティの値が <see langword="false" />です。  
  
</para>  
</block>  
  
 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> に設定されている <see langword="true" />, 、各属性は、新しい行で、1 レベル深くインデントを前に付加されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 <xref:System.Xml.XmlWriter> インスタンスは、テキストの内容を出力をそれ以外の場合、この設定は無視されます。  
  
   
  
## 例  
 次の例を作成し、 <xref:System.Xml.XmlWriter> を XML ファイルに書き込み、新しい行に各属性を書き込みます。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 宣言を省略するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see langword="true" /> XML 宣言を省略するにはそれ以外の場合、 <see langword="false" />です。 既定値は <see langword="false" />, 、XML 宣言が書き込まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、 <xref:System.Xml.XmlWriter> インスタンスは、テキストの内容を出力をそれ以外の場合、この設定は無視されます。  
  
 場合 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> に設定されている `false`, 、XML 宣言が自動的に書き込まれます  
  
 場合に XML 宣言が常に書き込まれる <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> に設定されている <xref:System.Xml.ConformanceLevel.Document>, 場合でも、 <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> に設定されている `true`します。  
  
 場合に XML 宣言が書き込まれない <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> に設定されている <xref:System.Xml.ConformanceLevel.Fragment>します。 呼び出すことができます <xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A> XML 宣言を明示的に記述します。  
  
   
  
## 例  
 次の例では、XML フラグメントをメモリ ストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput\#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シリアル化するために使用するメソッドを取得、 <see cref="T:System.Xml.XmlWriter" /> 出力します。</summary>
        <value>
          <see cref="T:System.Xml.XmlOutputMethod" /> 値のいずれか。 既定値は、<see cref="F:System.Xml.XmlOutputMethod.Xml" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、出力をシリアル化に使用する方法を指定します。 出力は、HTML のルールでは、XML 1.0 規則およびなどを使用してシリアル化できます。 この設定は、XSLT プロセッサによって設定され、Visual Studio によって内部的に使用されます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定クラスのメンバーを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 次の表は、既定のインスタンスのプロパティの値を示しています <xref:System.Xml.XmlWriterSettings>します。  
  
|プロパティ|初期値|  
|-----------|---------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペースです。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定を示す値かどうか、 <see cref="T:System.Xml.XmlWriter" /> は追加タグを終了タグをすべて閉じられていない要素に、 <see cref="M:System.Xml.XmlWriter.Close" /> メソッドが呼び出されます。</summary>
        <value>
          <see langword="true" /> アウトしてください。 すべての閉じられていない要素タグが閉じられる場合それ以外の場合、 <see langword="false" />です。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフラグを設定すると `false`, 、出力 XML ファイルを適切な形式にすることはできません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>