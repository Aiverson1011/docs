<Type Name="ConfigurationConverterBase" FullName="System.Configuration.ConfigurationConverterBase">
  <TypeSignature Language="C#" Value="public abstract class ConfigurationConverterBase : System.ComponentModel.TypeConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConfigurationConverterBase extends System.ComponentModel.TypeConverter" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.ConfigurationConverterBase" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.TypeConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>構成コンバーターの型の基本クラス。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Configuration.ConfigurationConverterBase> は構成の種類、コンバーターの基本クラスです。 これらは文字列に変換する型と関連する厳密に型指定されたプロパティの間、構成ファイルに格納します。  
  
   
  
## 例  
 次のコード例から派生させる方法を示して、 <xref:System.Configuration.ConfigurationConverterBase> カスタムを作成するクラス <xref:System.TimeSpan> コンバーターの型。 また、例では、カスタム セクションでこの型を使用する方法を示します。  
  
 次のコード例は、カスタムを作成する方法を示しています。 <xref:System.TimeSpan> コンバーターの型から、 <xref:System.Configuration.ConfigurationConverterBase> クラスです。  
  
 [!code-csharp[System.Configuration.TimeSpanMinutesConverter\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/CS/TimeSpanMinutesConverter.cs#1)]
 [!code-vb[System.Configuration.TimeSpanMinutesConverter\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/VB/TimeSpanMinutesConverter.vb#1)]  
  
 次のコード例は、以前のユーザー設定を使用するカスタム セクションを定義する方法を示しています。 <xref:System.TimeSpan> コンバーターです。  
  
 [!code-csharp[System.Configuration.ConfigurationConvertersCustomSection\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationConvertersCustomSection/CS/ConfigurationConvertersCustomSection.cs#1)]
 [!code-vb[System.Configuration.ConfigurationConvertersCustomSection\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationConvertersCustomSection/VB/ConfigurationConvertersCustomSection.vb#1)]  
  
 次のコード例では、作成し、前のカスタム セクションを使用して構成ファイルを変更する方法を示します。  
  
 [!code-csharp[System.Configuration.ConfigurationConverterBase\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationConverterBase/CS/ConfigurationConverterBase.cs#1)]
 [!code-vb[System.Configuration.ConfigurationConverterBase\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationConverterBase/VB/ConfigurationConverterBase.vb#1)]  
  
 前の例で使用されている構成の抜粋を次に示します。  
  
```  
<?xml version="1.0" encoding="utf-8"?>  
<configuration>  
  <configSections>  
    <section name="CustomSection"   
      type="Samples.AspNet.CustomSection,   
      ConfigurationConverters,   
      Version=1.0.0.0, Culture=neutral,   
      PublicKeyToken=null"   
      allowDefinition="Everywhere"   
      allowExeDefinition="MachineToApplication"   
      restartOnExternalChanges="true" />  
  </configSections>  
  <CustomSection fileName="default.txt" maxIdleTime="90" />  
</configuration>  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.CommaDelimitedStringCollectionConverter" />
    <altmember cref="T:System.Configuration.GenericEnumConverter" />
    <altmember cref="T:System.Configuration.InfiniteIntConverter" />
    <altmember cref="T:System.Configuration.InfiniteTimeSpanConverter" />
    <altmember cref="T:System.Configuration.TimeSpanMinutesConverter" />
    <altmember cref="T:System.Configuration.TimeSpanMinutesOrInfiniteConverter" />
    <altmember cref="T:System.Configuration.TimeSpanSecondsConverter" />
    <altmember cref="T:System.Configuration.TimeSpanSecondsOrInfiniteConverter" />
    <altmember cref="T:System.Configuration.TypeNameConverter" />
    <altmember cref="T:System.Configuration.WhiteSpaceTrimStringConverter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfigurationConverterBase ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationConverterBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Configuration.ConfigurationConverterBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Because you normally use the converter types provided by the system, the only time you need the <xref:System.Configuration.ConfigurationConverterBase.%23ctor%2A> constructor is when you must create your own conversion type.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertFrom">
      <MemberSignature Language="C#" Value="public override bool CanConvertFrom (System.ComponentModel.ITypeDescriptorContext ctx, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertFrom(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationConverterBase.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">
          <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> オブジェクトの型変換のために使用します。</param>
        <param name="type">
          <see cref="T:System.Type" /> から変換します。</param>
        <summary>変換が許可されているかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 変換が使用できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Configuration.ConfigurationConverterBase.CanConvertFrom%2A> メソッドでは、厳密に型指定のプロパティを取得して、構成ファイルで使用される値の文字列に変換を実行できるかどうかを判断します。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Configuration.ConfigurationConverterBase.CanConvertFrom%2A> カスタムを作成する方法 <xref:System.TimeSpan> コンバーターの型。 また、カスタム セクションでこの型を使用する方法を示します。  
  
 [!code-csharp[System.Configuration.TimeSpanMinutesConverter\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/CS/TimeSpanMinutesConverter.cs#3)]
 [!code-vb[System.Configuration.TimeSpanMinutesConverter\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/VB/TimeSpanMinutesConverter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext ctx, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext ctx, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationConverterBase.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ctx">
          <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> 型変換に使用するオブジェクト。</param>
        <param name="type">変換後の型。</param>
        <summary>変換が許可されているかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 変換が使用できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Configuration.ConfigurationConverterBase.CanConvertFrom%2A> メソッドでは、構成ファイルに含まれている文字列を関連する厳密に型指定されたプロパティに変換できるかどうかを判断します。  
  
   
  
## 例  
 次のコード例は、オーバーライドする方法を示します、 <xref:System.Configuration.ConfigurationConverterBase.CanConvertFrom%2A> カスタムを作成する方法 <xref:System.TimeSpan> コンバーターの型。 また、カスタム セクションでこの型を使用する方法を示します。  
  
 [!code-csharp[System.Configuration.TimeSpanMinutesConverter\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/CS/TimeSpanMinutesConverter.cs#2)]
 [!code-vb[System.Configuration.TimeSpanMinutesConverter\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.TimeSpanMinutesConverter/VB/TimeSpanMinutesConverter.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>