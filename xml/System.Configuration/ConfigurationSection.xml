<Type Name="ConfigurationSection" FullName="System.Configuration.ConfigurationSection">
  <TypeSignature Language="C#" Value="public abstract class ConfigurationSection : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ConfigurationSection extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.ConfigurationSection" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>構成ファイル内のセクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する、 <xref:System.Configuration.ConfigurationSection> カスタム セクション型を実装するクラス。 拡張、 <xref:System.Configuration.ConfigurationSection> 処理をカスタマイズし、カスタム構成セクションにプログラムでアクセスを提供するクラス。 方法については、カスタム構成セクションを使用して、参照してください [How to: Create Custom Configuration Sections Using ConfigurationSection](http://msdn.microsoft.com/ja-jp/febaca98-c727-4017-95ed-82e2fb6cf234)します。  
  
 セクションでは、その処理の型を登録のエントリで、 `configSections` 要素。 例については、「使用例に示すように構成ファイル抜粋を参照してください。  
  
> [!NOTE]
>  .NET Framework の以前のバージョンで構成セクション ハンドラーは、構成設定を変更に使用されたプログラムを使用しています。 既定の構成セクションを拡張するクラスによって表される、 <xref:System.Configuration.ConfigurationSection> クラスです。  
  
   
  
## 例  
 次の例では、プログラムを使用してカスタム セクションを実装する方法を示します。  
  
 実装して、属性付きモデルを使用して実装されたカスタム セクションを使用する方法を示す完全な例については <xref:System.Configuration.ConfigurationElement>です。  
  
 [!code-csharp[System.Configuration.ConfigurationSection\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#1)]
 [!code-vb[System.Configuration.ConfigurationSection\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#1)]  
  
 次の例は、前の例に適用される構成ファイルの抜粋です。  
  
 `<?xml version="1.0" encoding="utf-8"?>`  
  
 `<configuration>`  
  
 `<configSections>`  
  
 `<section name="CustomSection" type="Samples.AspNet. CustomSection, CustomConfigurationSection, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" allowDefinition="Everywhere" allowExeDefinition="MachineToApplication" restartOnExternalChanges="true" />`  
  
 `</configSections>`  
  
 `<CustomSection fileName="default.txt" maxUsers="1000" maxIdleTime="00:15:00" />`  
  
 `</configuration>`  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>You can use a programmatic or a declarative (attributed) coding model to create custom configuration sections:  
  
-   Programmatic model. This model requires that for each section attribute you create a property to get or set its value and add it to the internal property bag of the underlying <see cref="T:System.Configuration.ConfigurationElement" /> base class.  
  
-   Declarative model. This simpler model, also called the attributed model, allows you to define a section attribute by using a property and decorating it with attributes. These attributes instruct the ASP.NET configuration system about the property types and their default values. With this information, obtained through reflection, the ASP.NET configuration system creates the section property objects and performs the required initialization.  
  
 The <see cref="T:System.Configuration.Configuration" /> class allows programmatic access for editing configuration files. You can access these files for reading or writing as follows:  
  
-   Reading. You use <see cref="M:System.Configuration.Configuration.GetSection(System.String)" /> or <see cref="M:System.Configuration.Configuration.GetSectionGroup(System.String)" /> to read configuration information. Note that the user or process that reads must have the following permissions:  
  
    -   Read permission on the configuration file at the current configuration hierarchy level.  
  
    -   Read permissions on all the parent configuration files.  
  
     If your application needs read-only access to its own configuration, it is recommended you use the <see cref="Overload:System.Web.Configuration.WebConfigurationManager.GetSection" /> overloaded methods in the case of Web applications, or the <see cref="M:System.Configuration.ConfigurationManager.GetSection(System.String)" /> method in the case of client applications.  
  
     These methods provide access to the cached configuration values for the current application, which has better performance than the <see cref="T:System.Configuration.Configuration" /> class.  
  
 <block subset="none" type="note"><para>  
 If you use a static <see langword="GetSection" /> method that takes a <paramref name="path" /> parameter, the <paramref name="path" /> parameter must refer to the application in which the code is running; otherwise, the parameter is ignored and configuration information for the currently-running application is returned.  
  
</para></block>  
  
-   Writing. You use one of the <see cref="Overload:System.Configuration.Configuration.Save" /> methods to write configuration information. Note that the user or process that writes must have the following permissions:  
  
    -   Write permission on the configuration file and directory at the current configuration hierarchy level.  
  
    -   Read permissions on all the configuration files.</para>
    </block>
    <altmember cref="T:System.Configuration.Configuration" />
    <altmember cref="T:System.Configuration.SectionInformation" />
    <altmember cref="T:System.Configuration.ConfigurationElement" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConfigurationSection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Configuration.ConfigurationSection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To use the <xref:System.Configuration.ConfigurationSection.%23ctor%2A> constructor, you need to define a custom section type first. For an example see the <xref:System.Configuration.ConfigurationSection> class overview.  
  
   
  
## 例  
 The following example shows how to use the <xref:System.Configuration.ConfigurationSection.%23ctor%2A> constructor. This example assumes that you have created a custom section class named `CustomSection`. For an example of such a class, see the <xref:System.Configuration.ConfigurationSection> class overview.  
  
 [!code-csharp[System.Configuration.ConfigurationSection\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#2)]
 [!code-vb[System.Configuration.ConfigurationSection\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeserializeSection">
      <MemberSignature Language="C#" Value="protected virtual void DeserializeSection (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void DeserializeSection(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.DeserializeSection(System.Xml.XmlReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see cref="T:System.Xml.XmlReader" /> オブジェクトで、構成ファイルから読み取ります。</param>
        <summary>構成ファイルから XML を読み取ります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 逆シリアル化は、構成ファイル、リアルタイムのデータに変換およびオブジェクトにその記憶域からの XML データの読み取りを指します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="reader" /> 構成ファイル内の要素が見つかりません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRuntimeObject">
      <MemberSignature Language="C#" Value="protected virtual object GetRuntimeObject ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance object GetRuntimeObject() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.GetRuntimeObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、カスタム オブジェクトを返します。</summary>
        <returns>セクションを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Configuration.Configuration.GetSection%2A> メソッドが実行時に呼び出されると、構成システムは、最初の適切なインスタンスを作成、 <xref:System.Configuration.ConfigurationSection> クラス、およびから取得するオブジェクトを返す、 <xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A> メソッドです。  
  
 既定では、 <xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A> だけを表すオブジェクトを返す、 <xref:System.Configuration.ConfigurationSection> から呼び出されます。  
  
   
  
## 例  
 <xref:System.Configuration.ConfigurationSection.GetRuntimeObject%2A> メソッドを使用する方法の例を次に示します。  
  
 [!code-csharp[System.Configuration.ConfigurationSection\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#4)]
 [!code-vb[System.Configuration.ConfigurationSection\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You can override the <see cref="M:System.Configuration.ConfigurationSection.GetRuntimeObject" /> method to return a custom type at run time.  
  
 For example, to restrict runtime modification of the settings in the <see cref="T:System.Configuration.ConfigurationSection" /> class, you can override <see cref="M:System.Configuration.ConfigurationSection.GetRuntimeObject" /> and return a custom type that enforces restrictions on which settings can be modified, if any.  
  
 If the runtime object is internal only, the returned object cannot be used outside the assembly that defines it. One way to create an object that derives from <see cref="T:System.Configuration.ConfigurationSection" /> and can only be accessed by code in your assembly at run time is to create an internal runtime object that has a method that returns your <see cref="T:System.Configuration.ConfigurationSection" /> implementation.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsModified">
      <MemberSignature Language="C#" Value="protected override bool IsModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool IsModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.IsModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最後に保存された、または派生クラスで実装された場合に読み込まれるために、この構成要素が変更されたかどうかを示します。</summary>
        <returns>要素が変更された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetModified">
      <MemberSignature Language="C#" Value="protected override void ResetModified ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void ResetModified() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ResetModified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="M:System.Configuration.ConfigurationElement.IsModified" /> メソッドの値が派生クラスに実装されたときに、<see langword="false" /> にリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionInformation">
      <MemberSignature Language="C#" Value="public System.Configuration.SectionInformation SectionInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.SectionInformation SectionInformation" />
      <MemberSignature Language="DocId" Value="P:System.Configuration.ConfigurationSection.SectionInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.SectionInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Configuration.SectionInformation" /> カスタマイズ不可能な情報との機能を含むオブジェクト、 <see cref="T:System.Configuration.ConfigurationSection" /> オブジェクトです。</summary>
        <value>A <see cref="T:System.Configuration.SectionInformation" /> カスタマイズ不可能な情報との機能を含む、 <see cref="T:System.Configuration.ConfigurationSection" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 <xref:System.Configuration.ConfigurationSection.SectionInformation%2A> プロパティを使用する方法を次の例に示します。  
  
 [!code-csharp[System.Configuration.ConfigurationSection\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/CS/CustomConfigurationSection.cs#3)]
 [!code-vb[System.Configuration.ConfigurationSection\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.ConfigurationSection/VB/CustomConfigurationSection.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.SectionInformation" />
      </Docs>
    </Member>
    <Member MemberName="SerializeSection">
      <MemberSignature Language="C#" Value="protected virtual string SerializeSection (System.Configuration.ConfigurationElement parentElement, string name, System.Configuration.ConfigurationSaveMode saveMode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance string SerializeSection(class System.Configuration.ConfigurationElement parentElement, string name, valuetype System.Configuration.ConfigurationSaveMode saveMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.SerializeSection(System.Configuration.ConfigurationElement,System.String,System.Configuration.ConfigurationSaveMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parentElement" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="saveMode" Type="System.Configuration.ConfigurationSaveMode" />
      </Parameters>
      <Docs>
        <param name="parentElement">
          <see cref="T:System.Configuration.ConfigurationElement" /> 解除マージを実行するときに、親として使用するインスタンス。</param>
        <param name="name">作成するセクションの名前。</param>
        <param name="saveMode">
          <see cref="T:System.Configuration.ConfigurationSaveMode" /> 文字列への書き込み時に使用するインスタンス。</param>
        <summary>マージされていないビューを含む XML 文字列を作成、 <see cref="T:System.Configuration.ConfigurationSection" /> オブジェクト ファイルへの書き込みを 1 つのセクションとして。</summary>
        <returns>マージされたビューを含む XML 文字列、 <see cref="T:System.Configuration.ConfigurationSection" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル化は、XML 形式、構成ファイルに保存する、オブジェクトに含まれる、リアルタイムのデータの変換を指します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeElementInTargetVersion">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeElementInTargetVersion (System.Configuration.ConfigurationElement element, string elementName, System.Runtime.Versioning.FrameworkName targetFramework);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeElementInTargetVersion(class System.Configuration.ConfigurationElement element, string elementName, class System.Runtime.Versioning.FrameworkName targetFramework) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializeElementInTargetVersion(System.Configuration.ConfigurationElement,System.String,System.Runtime.Versioning.FrameworkName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="System.Configuration.ConfigurationElement" />
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
      </Parameters>
      <Docs>
        <param name="element">
          <see cref="T:System.Configuration.ConfigurationElement" /> シリアル化の候補となるオブジェクト。</param>
        <param name="elementName">名前、 <see cref="T:System.Configuration.ConfigurationElement" /> オブジェクトの XML で現在発生しています。</param>
        <param name="targetFramework">目的のバージョンの .NET Frameworkです。</param>
        <summary>構成オブジェクトの階層が指定されたターゲット バージョンのシリアル化する場合に、指定した要素をシリアル化するかどうかを示す、 .NET Frameworkです。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="element" /> シリアル化された、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 に対して作成された各構成セクション、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降のバージョンは明示的にこのメソッドをオーバーライドしてとを返す `true`, 、指定した要素が指定されたバージョンの有効な場合にのみ、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]です。 以前のバージョン用に作成された既存の構成セクション、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] を変更する必要はありません。  
  
 基本データ型には、常に返す、このメソッドの既定の実装が含まれています。 `true`します。 構成セクションを実装し、すべてのバージョンのフレームワーク構成セクションに含まれているすべての構成要素をシリアル化は既定では、このメソッドをオーバーライドしていない場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializePropertyInTargetVersion">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializePropertyInTargetVersion (System.Configuration.ConfigurationProperty property, string propertyName, System.Runtime.Versioning.FrameworkName targetFramework, System.Configuration.ConfigurationElement parentConfigurationElement);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializePropertyInTargetVersion(class System.Configuration.ConfigurationProperty property, string propertyName, class System.Runtime.Versioning.FrameworkName targetFramework, class System.Configuration.ConfigurationElement parentConfigurationElement) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializePropertyInTargetVersion(System.Configuration.ConfigurationProperty,System.String,System.Runtime.Versioning.FrameworkName,System.Configuration.ConfigurationElement)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="property" Type="System.Configuration.ConfigurationProperty" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
        <Parameter Name="parentConfigurationElement" Type="System.Configuration.ConfigurationElement" />
      </Parameters>
      <Docs>
        <param name="property">
          <see cref="T:System.Configuration.ConfigurationProperty" /> シリアル化の候補となるオブジェクト。</param>
        <param name="propertyName">名前、 <see cref="T:System.Configuration.ConfigurationProperty" /> オブジェクトの XML で現在発生しています。</param>
        <param name="targetFramework">目的のバージョンの .NET Frameworkです。</param>
        <param name="parentConfigurationElement">プロパティの親要素です。</param>
        <summary>構成オブジェクトの階層が指定されたターゲット バージョンのシリアル化する場合に、指定したプロパティをシリアル化するかどうかを示す、 .NET Frameworkです。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="property" /> シリアル化された、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 に対して作成された各構成セクション、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降のバージョンは明示的にこのメソッドをオーバーライドしてとを返す `true`, 、指定したプロパティが指定されたバージョンの有効な場合にのみ、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]です。 以前のバージョン用に作成された既存の構成セクション、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] を変更する必要はありません。  
  
 基本データ型には、常に返す、このメソッドの既定の実装が含まれています。 `true`します。 構成セクションを実装し、すべてのバージョンのフレームワーク構成セクションに含まれているすべての構成プロパティをシリアル化は既定では、このメソッドをオーバーライドしていない場合。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeSectionInTargetVersion">
      <MemberSignature Language="C#" Value="protected virtual bool ShouldSerializeSectionInTargetVersion (System.Runtime.Versioning.FrameworkName targetFramework);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ShouldSerializeSectionInTargetVersion(class System.Runtime.Versioning.FrameworkName targetFramework) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.ConfigurationSection.ShouldSerializeSectionInTargetVersion(System.Runtime.Versioning.FrameworkName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetFramework" Type="System.Runtime.Versioning.FrameworkName" />
      </Parameters>
      <Docs>
        <param name="targetFramework">目的のバージョンの .NET Frameworkです。</param>
        <summary>示すかどうか、現在 <see cref="T:System.Configuration.ConfigurationSection" /> 構成オブジェクトの階層が指定されたターゲット バージョンのシリアル化する場合は、インスタンスをシリアル化される必要があります、 .NET Frameworkです。</summary>
        <returns>
          <see langword="true" /> 現在のセクションをシリアル化する場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 に対して作成された各構成セクション、 [!INCLUDE[net_v40_long](~/includes/net-v40-long-md.md)] 以降のバージョンは明示的にこのメソッドをオーバーライドしてとを返す `true`, 、構成セクションが指定されたバージョンの有効な場合にのみ、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]です。 以前のバージョン用に作成された既存の構成セクション、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] を変更する必要はありません。  
  
 基本データ型には、常に返す、このメソッドの既定の実装が含まれています。 `true`します。 構成セクションを実装し、このメソッドをオーバーライドしていない場合は、既定では構成セクションはシリアル化すべてのバージョンのフレームワーク。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>