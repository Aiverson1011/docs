<Type Name="IntegerValidator" FullName="System.Configuration.IntegerValidator">
  <TypeSignature Language="C#" Value="public class IntegerValidator : System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit IntegerValidator extends System.Configuration.ConfigurationValidatorBase" />
  <TypeSignature Language="DocId" Value="T:System.Configuration.IntegerValidator" />
  <AssemblyInfo>
    <AssemblyName>System.Configuration</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationValidatorBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>検証を提供する <see cref="T:System.Int32" /> 値。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Configuration.IntegerValidator> クラスを使用して、整数値が特定の条件を満たしていることを確認します。 インスタンスに検証の基準が確立される、 <xref:System.Configuration.IntegerValidator> クラスを作成します。<xref:System.Configuration.IntegerValidator.%23ctor%2A> 2 つのパラメーターを持つコンス トラクターにより、検証する整数が最小と最大値の両方に準拠しています。<xref:System.Configuration.IntegerValidator.%23ctor%2A> 3 つのパラメーターを持つコンス トラクターは、最小値と最大値の両方をチェック <xref:System.Int32> 検証する値が指定した範囲がかどうかだけでなく、値します。<xref:System.Configuration.IntegerValidator.%23ctor%2A> 4 つのパラメーターを持つコンス トラクター チェック前の 3 つのパラメーターともチェックするかどうか、 <xref:System.Int32> 値は特定の解像度と同じです。  
  
 <xref:System.Configuration.IntegerValidator.CanValidate%2A> メソッドでは、予期される型が検証されるオブジェクトの種類に一致するかどうかを判断します。 検証するオブジェクトがのパラメーターとして渡される、 <xref:System.Configuration.IntegerValidator.Validate%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Configuration.IntegerValidator> 型です。  
  
 [!code-csharp[System.Configuration.IntegerValidator\#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#1)]
 [!code-vb[System.Configuration.IntegerValidator\#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">
          <see cref="T:System.Int32" /> 最小値を指定するオブジェクト。</param>
        <param name="maxValue">
          <see cref="T:System.Int32" /> 最大値を指定するオブジェクト。</param>
        <summary>
          <see cref="T:System.Configuration.IntegerValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 <xref:System.Configuration.IntegerValidator.%23ctor%2A> コンス トラクターにより、検証する整数が最小値、最大長の両方に準拠しています。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="minValue">
          <see cref="T:System.Int32" /> 最小値を指定するオブジェクト。</param>
        <param name="maxValue">
          <see cref="T:System.Int32" /> 最大値を指定するオブジェクト。</param>
        <param name="rangeIsExclusive">
          <see langword="true" /> 検証の範囲が排他的であることを指定します。 指定した範囲内で包括的な手段、値を検証する必要があります。排他的な最小値を下回ってまたは最大値より大きい必要があるしていることを意味します。</param>
        <summary>
          <see cref="T:System.Configuration.IntegerValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンスを作成するときに、 <xref:System.Configuration.IntegerValidator> クラスでこの <xref:System.Configuration.IntegerValidator.%23ctor%2A> コンス トラクターは、最小値と最大値の両方をチェック <xref:System.Int32> 検証範囲が排他的かどうかだけでなく、値します。 ときに、 `rangeIsExclusive` にパラメーターが設定されている `true`, 、 <xref:System.Int32> 値がでなければなりません、 `minValue` と `maxValue` パラメーターの値。  
  
   
  
## 例  
 次のコード例では、使用して、 <xref:System.Configuration.IntegerValidator.%23ctor%2A> コンス トラクターです。 このコード例が示されている例の一部は、 <xref:System.Configuration.IntegerValidator> クラスです。  
  
 [!code-csharp[System.Configuration.IntegerValidator\#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#2)]
 [!code-vb[System.Configuration.IntegerValidator\#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IntegerValidator (int minValue, int maxValue, bool rangeIsExclusive, int resolution);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 minValue, int32 maxValue, bool rangeIsExclusive, int32 resolution) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.#ctor(System.Int32,System.Int32,System.Boolean,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="minValue" Type="System.Int32" />
        <Parameter Name="maxValue" Type="System.Int32" />
        <Parameter Name="rangeIsExclusive" Type="System.Boolean" />
        <Parameter Name="resolution" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="minValue">
          <see cref="T:System.Int32" /> 整数値の最小の長さを指定するオブジェクト。</param>
        <param name="maxValue">
          <see cref="T:System.Int32" /> 整数値の最大長を指定するオブジェクト。</param>
        <param name="rangeIsExclusive">A <see cref="T:System.Boolean" /> 検証範囲が排他的かどうかを指定する値。</param>
        <param name="resolution">
          <see cref="T:System.Int32" /> 従う必要がある値を指定するオブジェクト。</param>
        <summary>
          <see cref="T:System.Configuration.IntegerValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Int32> 検証する値でなければなりません、 `resolution` 検証に合格するための値。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="resolution" /> は <see langword="0" /> より小さい値です。  
  
 または  
  
 <paramref name="minValue" /> が <paramref name="maxValue" /> より大きくなっています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CanValidate">
      <MemberSignature Language="C#" Value="public override bool CanValidate (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanValidate(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.CanValidate(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">オブジェクトの型。</param>
        <summary>オブジェクトの型を検証できるかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="type" /> パラメーターと一致する、 <see cref="T:System.Int32" /> 値。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、<xref:System.Configuration.IntegerValidator.CanValidate%2A> メソッドの使用方法を示します。 このコード例が示されている例の一部は、 <xref:System.Configuration.IntegerValidator> クラスです。  
  
 [!code-csharp[System.Configuration.IntegerValidator\#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#3)]
 [!code-vb[System.Configuration.IntegerValidator\#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public override void Validate (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Validate(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Configuration.IntegerValidator.Validate(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Configuration.ConfigurationManager</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">検証する値。</param>
        <summary>オブジェクトの値が有効かどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Configuration.IntegerValidator> オブジェクトには、整数オブジェクトを検証するためのルールが含まれています。 インスタンスには、規則が確立、 <xref:System.Configuration.IntegerValidator> クラスを作成します。 検証対象の整数オブジェクトがのパラメーターとして渡される、 <xref:System.Configuration.IntegerValidator.Validate%2A> メソッドです。  
  
   
  
## 例  
 次のコード例は、<xref:System.Configuration.IntegerValidator.Validate%2A> メソッドの使用方法を示します。 このコード例が示されている例の一部は、 <xref:System.Configuration.IntegerValidator> クラスです。  
  
 [!code-csharp[System.Configuration.IntegerValidator\#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Configuration.IntegerValidator/CS/IntegerValidator.cs#4)]
 [!code-vb[System.Configuration.IntegerValidator\#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Configuration.IntegerValidator/VB/IntegerValidator.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Configuration.ConfigurationValidatorBase" />
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Configuration</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Configuration.IntegerValidator" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>