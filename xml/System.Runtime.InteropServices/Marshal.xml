<Type Name="Marshal" FullName="System.Runtime.InteropServices.Marshal">
  <TypeSignature Language="C#" Value="public static class Marshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Marshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.Marshal" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>アンマネージ コードを扱うときに使用できるさまざまなメソッドを提供します。これらのメソッドを使用すると、アンマネージ メモリの割り当て、アンマネージ メモリ ブロックのコピー、マネージ型からアンマネージ型への変換などができます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 `static` で定義されたメソッド、 <xref:System.Runtime.InteropServices.Marshal> クラスがアンマネージ コードを操作するために不可欠です。 通常、このクラスで定義されているほとんどのメソッドは、マネージとアンマネージのプログラミング モデル間のブリッジを提供する必要のある開発者が使用されます。 たとえば、 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> メソッドは、アンマネージ ヒープ内のバッファーに \(マネージ ヒープ\) に指定した文字列から ANSI 文字をコピーします。 また、適切なサイズのコピー先のヒープを割り当てます。  
  
 共通言語ランタイムは、特定のマーシャ リング機能を提供します。 マーシャ リングの動作の詳細については、「 [Interop Marshaling](http://msdn.microsoft.com/ja-jp/115f7a2f-d422-4605-ab36-13a8dd28142a)します。  
  
 `Read` と `Write` 内のメソッド、 <xref:System.Runtime.InteropServices.Marshal> クラス両方に配置しアライメントされていないアクセスをサポートします。  
  
   
  
## 例  
 次の例で定義されているさまざまなメソッドを使用する方法を示しています、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#1)]
 [!code-csharp[Marshal\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#1)]
 [!code-vb[Marshal\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddRef">
      <MemberSignature Language="C#" Value="public static int AddRef (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 AddRef(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk">インクリメントするインターフェイスの参照カウント。</param>
        <summary>指定したインターフェイスの参照カウントをインクリメントします。</summary>
        <returns>参照の新しい値に頼って、 <paramref name="pUnk" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムは、このメソッドを直接使用する必要がないようにする COM オブジェクトの参照カウントを管理します。 まれに、カスタム マーシャラーのテストなどでかもしれませんオブジェクトの有効期間を手動で操作するために必要なです。 呼び出した後 <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, などのメソッドを使用して、参照カウントをデクリメントする必要があります <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>します。 戻り値に依存しない <xref:System.Runtime.InteropServices.Marshal.AddRef%2A>, なる場合がありますしない安定してください。  
  
 呼び出すことができます <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, 、<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, 、または <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> させることが、 <xref:System.IntPtr> を表す値、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイス ポインター。 これらのメソッドを使用することも、 <xref:System.Runtime.InteropServices.Marshal.AddRef%2A> マネージ オブジェクトの COM 呼び出し可能ラッパーによって表される COM インターフェイスを取得する管理オブジェクト上のメソッドです。 このラッパー型の詳細に慣れていない場合は、次を参照してください。 [&#91;\<topic:\/\/cpconcomcallablewrapper\>&#93;](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AllocCoTaskMem">
      <MemberSignature Language="C#" Value="public static IntPtr AllocCoTaskMem (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocCoTaskMem(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">割り当てるメモリ ブロックのサイズ。</param>
        <summary>COM タスク メモリ アロケーターから、指定したサイズのメモリ ブロックを割り当てます。</summary>
        <returns>割り当てられたメモリ ブロックのアドレスを表す整数。 このメモリを解放する必要があります <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> API メソッドには、2 つのメモリ割り当ての 1 つ、 <xref:System.Runtime.InteropServices.Marshal> クラスです。 \(<xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A?displayProperty=fullName> は、その他\)。 返される最初のメモリ コンテンツが定義されていないと、割り当てられたメモリが要求されたバイト数より大きくすることができます。 このメソッドは、COM を公開する [CoTaskMemAlloc](http://go.microsoft.com/fwlink/?LinkId=148626) 関数で、COM タスク メモリ アロケーターと呼びます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="AllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr AllocHGlobal (int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocHGlobal(int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cb">メモリ内で必要なバイト数。</param>
        <summary>指定したバイト数を使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
        <returns>新しく割り当てられたメモリへのポインター。 使用してこのメモリを解放する必要があります、 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 2 つのメモリ割り当て方法の 1 つ、 <xref:System.Runtime.InteropServices.Marshal> クラスです。 \(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> は、その他\)。 このメソッドを公開、Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkId=148628) Kernel32.dll から関数です。  
  
 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 呼び出し `LocalAlloc`, を渡す、 `LMEM_FIXED` フラグは、割り当てられたメモリの場所でロックを発生します。 また、割り当てられたメモリはないゼロで埋められます。  
  
   
  
## 例  
 次の例では、通話、 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>メソッドです。 このコード例が示されている例の一部は、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]
 [!code-csharp[Marshal\#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]
 [!code-vb[Marshal\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="AllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr AllocHGlobal (IntPtr cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int AllocHGlobal(native int cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cb" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="cb">メモリ内で必要なバイト数。</param>
        <summary>指定したバイト数へのポインターを使用して、プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
        <returns>新しく割り当てられたメモリへのポインター。 使用してこのメモリを解放する必要があります、 <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> メソッドです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 2 つのメモリ割り当て方法の 1 つ、 <xref:System.Runtime.InteropServices.Marshal> クラスです。 \(<xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A?displayProperty=fullName> は、その他\)。 このメソッドを公開、Win32 [LocalAlloc](http://go.microsoft.com/fwlink/?LinkID=148628) Kernel32.dll から関数です。  
  
 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> 呼び出し `LocalAlloc`, を渡す、 `LMEM_FIXED` フラグは、割り当てられたメモリの場所でロックを発生します。 また、割り当てられたメモリはないゼロで埋められます。  
  
 コード例は、「 <xref:System.Runtime.InteropServices.Marshal> と <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="AreComObjectsAvailableForCleanup">
      <MemberSignature Language="C#" Value="public static bool AreComObjectsAvailableForCleanup ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool AreComObjectsAvailableForCleanup() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>任意のコンテキストからのランタイム呼び出し可能ラッパー \(RCW: Runtime Callable Wrapper\) をクリーンアップに使用できるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> クリーンアップの使用可能な任意の Rcw がある場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 多数の詳細な依存関係グラフを使用してマネージ コードとネイティブ コード間の参照がある場合をクリーンアップするすべてのオブジェクトの長い時間がかかります。 いくつかの基になる COM オブジェクトを解放は Rcw を解放して、GC が実行されるたびにします。 これらの COM オブジェクトは、マネージ参照を解放しより多くのオブジェクト クリーンアップできる、次回プロセスを開始、GC の実行で再びします。  
  
 <xref:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup%2A> メソッドは、アプリケーションの GC のサイクルの数を決定する手段を提供します。収集、GC。WaitForPendingFinalizers をすべてクリーンアップするために行う必要があります。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="BindToMoniker">
      <MemberSignature Language="C#" Value="public static object BindToMoniker (string monikerName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object BindToMoniker(string monikerName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monikerName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="monikerName">必要なインターフェイス ポインターに対応するモニカー。</param>
        <summary>指定したモニカーによって識別されるインターフェイス ポインターを取得します。</summary>
        <returns>
          <paramref name="monikerName" /> パラメーターによって識別されるインターフェイス ポインターへの参照を格納しているオブジェクト。 モニカーは名前であり、この場合、モニカーはインターフェイスによって定義されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.BindToMoniker%2A> exposes the COM `BindToMoniker` method, which produces an object that you can cast to any COM interface you require. This method provides the same functionality as the `GetObject` method in Visual Basic 6.0 and [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)].  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">アンマネージド <see langword="BindToMoniker" /> メソッドから、認識されない HRESULT が返されました。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="BufferToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr BufferToBSTR (Array ptr, int slen);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int BufferToBSTR(class System.Array ptr, int32 slen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.BufferToBSTR(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Array" />
        <Parameter Name="slen" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <param name="slen">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeWrapperHandleStrength">
      <MemberSignature Language="C#" Value="public static void ChangeWrapperHandleStrength (object otp, bool fIsWeak);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangeWrapperHandleStrength(object otp, bool fIsWeak) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otp" Type="System.Object" />
        <Parameter Name="fIsWeak" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="otp">参照カウント付きハンドルを保持する CCW を持つオブジェクト。 CCW の参照カウントがゼロを超える場合はハンドルが strong。それ以外の場合は weak。</param>
        <param name="fIsWeak">
          <see langword="true" /> ハンドルの強さに変更する、 <c>otp</c> を weak に参照カウントに関係なくパラメーター <see langword="false" /> 上のハンドルの強さをリセットする <c>otp</c> カウントされた参照であります。</param>
        <summary>オブジェクトの強度を変更 [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78) \(CCW\) ハンドル。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength%2A> オブジェクト プール機能が使用され、直接ユーザー コードによって呼び出されることはありません。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="CleanupUnusedObjectsInCurrentContext">
      <MemberSignature Language="C#" Value="public static void CleanupUnusedObjectsInCurrentContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CleanupUnusedObjectsInCurrentContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコンテキストで割り当てられたすべての[ランタイム呼び出し可能ラッパー](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW: Runtime Callable Wrapper\) をクリーンアップすることをランタイムに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The interop system pumps messages while it attempts to clean up RCWs. This ensures that cleanup for single\-threaded apartment \(STA\) RCWs happens in all applications, including applications that do not pump often enough. However, some applications that do pump appropriately are very sensitive to where pumping occurs. When the interop system pumps messages in these applications, in places that are unexpected, , the application can encounter reentrancy issues that are difficult to diagnose. Therefore, applications need to be able to control their own pumping for a particular STA and to control the clean\-up of RCWs.  
  
 However, developers often only control a subset of the threads in their application and thus cannot ensure that all threads are pumping appropriately.  
  
 To solve this problem:  
  
1.  Use the <xref:System.Threading.Thread.DisableComObjectEagerCleanup%2A?displayProperty=fullName> method to turn off automatic cleanup of RCWs, and the message pumping that occurs, on a per\-thread basis. This allows developers to opt out of automatic clean\-up, and the corresponding message pumping.  
  
2.  Use the <xref:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext%2A> method to notify the runtime to clean up all RCWs that are allocated in the current context. This companion method allows developers to precisely control when the runtime performs cleanup in the current context.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (byte[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(unsigned int8[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の 8 ビット符号なし整数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーを使用して、[Copy メソッド \(Byte\<xref:System.Runtime.InteropServices.Marshal.Copy%28System.Byte%5B%5D%2CSystem.Int32%2CSystem.IntPtr%2CSystem.Int32%29>過負荷、およびマネージ メモリに再度アンマネージ配列を使用して、コピー、[Copy メソッド \(Byte\<xref:System.Runtime.InteropServices.Marshal.Copy%28System.IntPtr%2CSystem.Byte%5B%5D%2CSystem.Int32%2CSystem.Int32%29>オーバー ロードします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-byte\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-byte\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (char[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(char[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の文字列のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-char\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-char\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (double[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(float64[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Double[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の倍精度浮動小数点数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-double\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-double\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (short[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int16[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int16[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の 16 ビット符号付き整数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int16\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int16\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (int[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int32[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int32[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の 32 ビット符号付き整数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 You can use this method to copy a subset of a one\-dimensional managed array to an unmanaged C\-style array.  
  
   
  
## 例  
 The following example copies an array to unmanaged memory and then copies the unmanaged array back to managed memory.  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="startIndex" /> または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (long[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(int64[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int64[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の 64 ビット符号付き整数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int64\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int64\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, byte[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, unsigned int8[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Byte[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを 8 ビット符号なし整数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-byte\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-byte\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-byte/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, char[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, char[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Char[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを文字列のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-char\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-char\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-char/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, double[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, float64[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Double[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを倍精度浮動小数点数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-double\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-double\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-double/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, short[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int16[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int16[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを 16 ビット符号付き整数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int16\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int16\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int16/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, int[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int32[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int32[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを 32 ビット符号付き整数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, long[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, int64[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Int64[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを 64 ビット符号付き整数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターは、その利便性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
   
  
## 例  
 次の例では、アンマネージ メモリに配列をコピーし、マネージ メモリに再度アンマネージ配列をコピーします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.Copy\-int64\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.Copy\-int64\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.Copy-int64/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, IntPtr[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, native int[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.IntPtr[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータをマネージ <see cref="T:System.IntPtr" /> 配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するアンマネージ データ、そのため、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 呼び出しの前に、適切なサイズでマネージ配列を初期化する必要があります、[Copy メソッド \(IntPtr, IntPtr\<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr source, float[] destination, int startIndex, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int source, float32[] destination, int32 startIndex, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr" />
        <Parameter Name="destination" Type="System.Single[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元のメモリ ポインター。</param>
        <param name="destination">コピー先の配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー先の配列内の 0 から始まるインデックス。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>アンマネージ メモリ ポインターのデータを単精度浮動小数点数のマネージ配列にコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アンマネージ、C スタイルの配列にが含まれていませんが原因で境界情報には、`startIndex`と`length`パラメーターを検証するからです。 対応するために、アンマネージ データ、`source`パラメーターがその有用性に関係なく、マネージ配列を設定します。 このメソッドを呼び出す前に、適切なサイズでマネージ配列を初期化する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (IntPtr[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(native int[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.IntPtr[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の <see cref="T:System.IntPtr" /> マネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用するには管理されている 1 次元のサブセットをコピーする[Copy メソッド \(IntPtr\<xref:System.IntPtr>アンマネージ C スタイル配列への配列。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="destination" />、<paramref name="startIndex" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public static void Copy (float[] source, int startIndex, IntPtr destination, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Copy(float32[] source, int32 startIndex, native int destination, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Single[]" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="destination" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">コピー元の 1 次元配列。</param>
        <param name="startIndex">コピーの開始位置となる、コピー元の配列内の 0 から始まるインデックス。</param>
        <param name="destination">コピー先のメモリ ポインター。</param>
        <param name="length">コピーする配列要素の数。</param>
        <summary>1 次元の単精度浮動小数点数のマネージ配列のデータをアンマネージ メモリ ポインターにコピーします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、1 次元のマネージ配列のサブセットをアンマネージ C スタイル配列にコピーします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> および <paramref name="length" /> が有効ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" />、<paramref name="startIndex" />、<paramref name="destination" />、または <paramref name="length" /> が <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateAggregatedObject">
      <MemberSignature Language="C#" Value="public static IntPtr CreateAggregatedObject (IntPtr pOuter, object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateAggregatedObject(native int pOuter, object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pOuter" Type="System.IntPtr" />
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="pOuter">外部 <see langword="IUnknown" /> ポインター。</param>
        <param name="o">集約するオブジェクト。</param>
        <summary>指定した COM オブジェクトを使用してマネージ オブジェクトを集約します。</summary>
        <returns>マネージ オブジェクトの内部 <see langword="IUnknown" /> ポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> method aggregates the inner managed pointer of a managed object with the specified outer pointer, and then returns an inner [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer of the managed object.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateAggregatedObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr CreateAggregatedObject&lt;T&gt; (IntPtr pOuter, T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateAggregatedObject&lt;T&gt;(native int pOuter, !!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pOuter" Type="System.IntPtr" />
        <Parameter Name="o" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">マネージ オブジェクトの種類を集計します。</typeparam>
        <param name="pOuter">外側 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) ポインター。</param>
        <param name="o">管理対象のオブジェクトを集計します。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 指定した COM オブジェクトに指定した型のマネージ オブジェクトを集約します。</summary>
        <returns>内部 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) マネージ オブジェクトのポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.CreateAggregatedObject%2A> メソッドは、指定した外部ポインターに指定した型のマネージ オブジェクトの内部マネージ ポインターを集約し、内部を返す [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) マネージ オブジェクトのポインター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="o" /> は Windows ランタイム オブジェクト。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="CreateWrapperOfType">
      <MemberSignature Language="C#" Value="public static object CreateWrapperOfType (object o, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object CreateWrapperOfType(object o, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">ラップされるオブジェクト。</param>
        <param name="t">作成するラッパーの型。</param>
        <summary>指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
        <returns>指定した型のインスタンスとなる新しくラップされたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%2A> converts one COM class type, typically the generic `__ComObject` type, to another COM class type. The input COM object, represented by parameter `o`, is a [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\).  
  
 Both the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters must be classes whose signatures are attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName>. The [Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) tool applies this attribute for you when it imports a type library. If you create the RCW manually in source code, you should apply this attribute to the managed signature that represents the original coclass to signify its COM origins.  
  
 Tlbimp.exe imports a COM [coclass](http://msdn.microsoft.com/ja-jp/333d0904-ffa2-4d25-878d-7422bcd40582) as a managed class and an interface. The coclass interface has the same name as the original coclass, and the managed class has the original coclass name appended with "Class". For example, a coclass called `MyCoclass` becomes a coclass interface called `MyCoclass` and a managed class called `MyCoclassClass`. Since **parameterReference tag is not supported!!!!**  
 must be a class, not an interface, be sure to specify the managed class \(`MyCoclassClass`\) and not the coclass interface.  
  
> [!NOTE]
>  You lose the identity of the input COM object because a new RCW instance wraps the [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) pointer exposed by the original RCW.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> は <see langword="__ComObject" /> から派生する必要があります。  
  
 または  
  
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> はすべての必要なインターフェイスをサポートしていないため、ソース オブジェクトをターゲットの型に変換することはできません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CreateWrapperOfType&lt;T,TWrapper&gt;">
      <MemberSignature Language="C#" Value="public static TWrapper CreateWrapperOfType&lt;T,TWrapper&gt; (T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TWrapper CreateWrapperOfType&lt;T, TWrapper&gt;(!!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TWrapper</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TWrapper" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">ラップするオブジェクトの型。</typeparam>
        <typeparam name="TWrapper">返すオブジェクトの型。</typeparam>
        <param name="o">ラップするオブジェクト。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 指定した型のオブジェクト内の、指定した COM オブジェクトをラップします。</summary>
        <returns>新しくラップされたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.CreateWrapperOfType%60%602%28%60%600%29> 型の COM オブジェクトに変換 `T` に、 `TWrapper` COM クラスの型。 入力の COM オブジェクトは、パラメーターによって表される `o`, は、 [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\)。  
  
 両方の `T`ジェネリック型パラメーター、および `o` パラメーターはクラスのシグネチャを持つ、属性を設定する必要があります、 <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> 属性です。[Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) ツールは、タイプ ライブラリをインポートするときのこの属性を適用します。 ソース コードで、RCW を手動で作成する場合は、この属性を元の COM のことを示すには、元のコクラスを表すマネージ シグネチャに適用する必要があります。  
  
 Tlbimp.exe でインポート COM [コクラス](http://msdn.microsoft.com/ja-jp/333d0904-ffa2-4d25-878d-7422bcd40582) マネージ クラスとインターフェイスします。 コクラスのインターフェイスは、元のコクラスと同じ名前を持つマネージ クラス、名前を持つ元コクラス"Class"を追加します。 たとえば、コクラスと呼ばれる `MyCoclass` と呼ばれるコクラス インターフェイスになります `MyCoclass` という名前のマネージ クラスと `MyCoclassClass`です。`T` クラス、インターフェイスではなくするマネージ クラスを指定することを確認する必要があります \(`MyCoclassClass`\) および not、 `coclass` インターフェイスです。  
  
> [!NOTE]
>  新しい RCW インスタンスでラップするので、入力の COM オブジェクトの識別情報が失われる、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) 元 RCW によって公開されているポインター。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="T" /> 派生する必要があります <see langword="__ComObject" />します。  
  
 または  
  
 <paramref name="T" /> Windows ランタイム 型です。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> 変換できない、 <paramref name="TWrapper" /> 必要なすべてのインターフェイスはサポートされていません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="DestroyStructure">
      <MemberSignature Language="C#" Value="public static void DestroyStructure (IntPtr ptr, Type structuretype);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DestroyStructure(native int ptr, class System.Type structuretype) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structuretype" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <param name="structuretype">書式指定クラスの型。 これにより、バッファーを削除するために必要なレイアウト情報、 <c>ptr</c> パラメーター。</param>
        <summary>指定したアンマネージ メモリ ブロックが指す、すべてのサブ構造体を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、アンマネージ構造体の文字列などの参照型のフィールドを解放します。 そのフィールドとは異なり、構造体は値型または参照型を指定できます。 値型のフィールド \(すべて blittable\) を含む値型の構造体には、メモリを解放する必要があります参照がありません。<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> メソッドでは、このメソッドを使用して、構造体によって占有されていたメモリを再利用する場合は、メモリ リークを防止します。  
  
 <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> COM を呼び出す [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) 関数が、割り当てられた文字列を解放します。  
  
 他に、 <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A>, 、 <xref:System.Runtime.InteropServices.Marshal> クラスには他の 2 つのメモリの解放メソッド: <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> と <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="structureType" /> 自動レイアウトを持ちます。 代わりに、シーケンシャルまたは明示的なを使用します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void DestroyStructure&lt;T&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DestroyStructure&lt;T&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">形式構造体の型です。 これにより、バッファーを削除するために必要なレイアウト情報、 <c>ptr</c> パラメーター。</typeparam>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定したアンマネージ メモリ ブロックが指す、指定した型のすべてのサブ構造体を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用すると、参照型のフィールドをアンマネージ構造体の文字列などを解放します。 そのフィールドとは異なり、構造体は値型または参照型を指定できます。 値型のフィールド \(すべて blittable\) を含む値型の構造体には、メモリを解放する必要があります参照がありません。<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A?displayProperty=fullName> メソッドでは、このメソッドを使用して、構造体によって占有されていたメモリを再利用する場合は、メモリ リークを防止します。  
  
 <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> COM を呼び出す [SysFreeString](http://go.microsoft.com/fwlink/?LinkId=148633) 関数が、割り当てられた文字列を解放します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="T" /> 自動レイアウトを持ちます。 代わりに、シーケンシャルまたは明示的なを使用します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="FinalReleaseComObject">
      <MemberSignature Language="C#" Value="public static int FinalReleaseComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 FinalReleaseComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">解放する RCW。</param>
        <summary>すべての参照を解放、 [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\) で、参照カウントを 0 に設定します。</summary>
        <returns>RCW の参照カウントの新しい値に関連付けられている、 <paramref name="o" />リリースが成功した場合は 0 \(ゼロ\) のパラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> メソッドが COM オブジェクトへのマネージ参照を解放します。 このメソッドを呼び出すことは、呼び出すことと同じ、 <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> 0 \(ゼロ\) が返されるまで、ループ内のメソッドです。  
  
 COM オブジェクトの参照カウントには、0 になると、COM オブジェクトは、通常解放されますが、この COM オブジェクトの実装に依存しておりがランタイムの対象外とします。 ただし、RCW できます引き続き存在し、ガベージ コレクションを待機しています。  
  
 基になる RCW から分離された後、COM オブジェクトを使用できません。 参照カウントが 0 になった後に、RCW でメソッドを呼び出すしようとすると、 <xref:System.Runtime.InteropServices.InvalidComObjectException> がスローされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="o" /> 有効な COM オブジェクトではありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" />
        <altmember cref="T:System.NullReferenceException" />
      </Docs>
    </Member>
    <Member MemberName="FreeBSTR">
      <MemberSignature Language="C#" Value="public static void FreeBSTR (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeBSTR(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">解放する BSTR のアドレス。</param>
        <summary>解放、 <see langword="BSTR" /> 、COM を使用して [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) 関数です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ような <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A?displayProperty=fullName>, 、このメソッドを使用してメモリの割り当てを解除することができます。<xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A> COM を呼び出す [SysFreeString](http://go.microsoft.com/fwlink/?LinkID=148633) 関数で、次のアンマネージ メソッドのいずれかによって割り当てられたメモリを解放します。 `SysAllocString`, 、`SysAllocStringByteLen`, 、`SysAllocStringLen`, 、`SysReAllocString`, 、`SysReAllocStringLen`です。 プラットフォーム呼び出しなど、アンマネージ メソッドを呼び出すことができます。 詳細については、「[&#91;\<topic:\/\/cpconconsumingunmanageddllfunctions\>&#93;](http://msdn.microsoft.com/ja-jp/eca7606e-ebfb-4f47-b8d9-289903fdc045)」を参照してください。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="FreeCoTaskMem">
      <MemberSignature Language="C#" Value="public static void FreeCoTaskMem (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeCoTaskMem(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">解放するメモリのアドレス。</param>
        <summary>アンマネージ COM タスク メモリ アロケーターによって割り当てられたメモリ ブロックを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> によって割り当てられたメモリを解放する <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A>, 、<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A>, 、または、それと同等のアンマネージ メソッドです。 場合、 `ptr` パラメーターは `null`, 、何も実行します。  
  
 <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A> COM に公開する [CoTaskMemFree](http://go.microsoft.com/fwlink/?LinkId=148638) 関数で、不要になったメモリを使用できるように、すべてのバイトを解放する、 `ptr` パラメーターが指し示します。  
  
 他に、 <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>, 、 <xref:System.Runtime.InteropServices.Marshal> クラスには他の 2 つのメモリの解放メソッド: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> と <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>です。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="FreeHGlobal">
      <MemberSignature Language="C#" Value="public static void FreeHGlobal (IntPtr hglobal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void FreeHGlobal(native int hglobal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hglobal" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hglobal">元の一致する呼び出しから返されたハンドル <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />します。</param>
        <summary>以前にプロセスのアンマネージ メモリから割り当てられたメモリを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> によって割り当てられたグローバル ヒープからメモリを解放する <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A>, 、<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A>, 、または、それと同等のアンマネージ API のメソッドです。 場合、 `hglobal` パラメーターは <xref:System.IntPtr.Zero?displayProperty=fullName> 何も実行します。  
  
 <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> 公開する、 [LocalFree](http://go.microsoft.com/fwlink/?LinkId=148640) 関数を不要になったメモリを使用できるように、すべてのバイトを解放 Kernel32.DLL から指す `hglobal`します。  
  
 他に、 <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>, 、 <xref:System.Runtime.InteropServices.Marshal> クラスには他の 2 つのメモリの解放 API メソッド: <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> と <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>です。  
  
   
  
## 例  
 次の例では、<xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A> メソッドを呼び出す方法を示しています。 このコード例が示されている例の一部は、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#4](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#4)]
 [!code-csharp[Marshal\#4](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#4)]
 [!code-vb[Marshal\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#4)]  
  
 次の例では、マネージの内容を変換 <xref:System.String> クラスのアンマネージ メモリにし、完了時に、アンマネージ メモリの破棄します。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]
 [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GenerateGuidForType">
      <MemberSignature Language="C#" Value="public static Guid GenerateGuidForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GenerateGuidForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">GUID 生成の対象となる型。</param>
        <summary>指定した型のグローバル一意識別子 \(GUID: Globally Unique Identifier\) を返すか、タイプ ライブラリ エクスポーター \(Tlbexp.exe\) で使用されるアルゴリズムを使用して GUID を生成します。</summary>
        <returns>指定した型の識別子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型では、メタデータに GUID が含まれる場合が返されます。 それ以外の場合、GUID は自動的に生成されます。 このメソッドを使用すると、プログラムを使用して、COM 参照不可能な型を含む、任意のマネージ型の COM GUID を確認します。 クラス インターフェイスは、マネージ型に対応していない唯一の例外です。<xref:System.Runtime.InteropServices.Marshal.GenerateGuidForType%2A> 同じ機能を提供、 <xref:System.Type.GUID%2A?displayProperty=fullName> プロパティです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="P:System.Type.GUID" />
      </Docs>
    </Member>
    <Member MemberName="GenerateProgIdForType">
      <MemberSignature Language="C#" Value="public static string GenerateProgIdForType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GenerateProgIdForType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">ProgID を取得する対象の型。</param>
        <summary>指定した型のプログラム ID \(ProgID\) を返します。</summary>
        <returns>指定した型の ProgID。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 型では、メタデータに ProgID が含まれる場合は、その ProgID が返されます。 それ以外の場合、ProgID は、型の完全修飾名に基づいて生成されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="type" /> パラメーターは、COM で作成できるクラスではありません このクラスは、パブリックであるおり、パブリックの既定のコンス トラクターを持つ、com 参照可能。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetActiveObject">
      <MemberSignature Language="C#" Value="public static object GetActiveObject (string progID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetActiveObject(string progID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetActiveObject(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="progID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="progID">要求されたオブジェクトのプログラム ID \(ProgId\)。</param>
        <summary>ランニング オブジェクト テーブル \(ROT: Running Object Table\) から指定したオブジェクトの実行中のインスタンスを取得します。</summary>
        <returns>要求されたオブジェクト。それ以外の場合は、<see langword="null" />。 このオブジェクトは、サポートされる任意の COM インターフェイスにキャストできます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> COM に公開する [GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx) OLEAUT32 から関数です。DLL です。ただし、後者が必要ですがクラス id \(CLSID\) プログラム識別子ではなく \(`ProgID`\) このメソッドで想定されています。 なし、登録されている COM オブジェクトの実行中のインスタンスを取得する `ProgID`, 、使用するプラットフォーム呼び出しを COM を定義する [GetActiveObject](https://msdn.microsoft.com/library/ms221467\(v=vs.85\).aspx) 関数です。 プラットフォームの詳細については呼び出しは、「 [&#91;\<topic:\/\/cpconconsumingunmanageddllfunctions\>&#93;](http://msdn.microsoft.com/ja-jp/eca7606e-ebfb-4f47-b8d9-289903fdc045)します。  
  
## ProgID と CLSID  
 レジストリの HKEY\_CLASSES\_ROOT サブツリー内のキーには、さまざまな種類のサブキーが含まれます。 サブキーのほとんどは、Progid、CLSID がわかりやすい文字列です。 多くの場合、アプリケーションは、数値の Clsid の代わりにこれらのユーザーが判読できる文字列を使用します。 多くの場合、コンポーネントのシステムにインストールされているコンポーネントの最新バージョンにマップされているバージョンに依存しない ProgID であります。  
  
 アプリケーションとコンポーネントの Progid を使用、主に対応する Clsid を取得できます。  
  
   
  
## 例  
 次の例は、Microsoft Word の実行中のインスタンスが構成されているコンピューターで実行されました。 実行している Microsoft Excel のインスタンスがありませんでした。  
  
 呼び出しの例 <xref:System.Runtime.InteropServices.Marshal.GetActiveObject%2A> 2 回クリックします。 最初の呼び出しは、Microsoft Word のインスタンスへの参照の取得を試みます \(のインスタンス、 `Word.Application` オブジェクト\)。 2 番目の呼び出しは Microsoft Excel のインスタンスへの参照を取得しようとしています \(のインスタンス、 `Excel.Application` オブジェクト\)。  
  
 コードでは、正常に Microsoft Word のインスタンスへの参照を取得します。 ただし、Microsoft Excel が実行されていないため、取得しようとする 2 番目のオブジェクトを発生させる、 <xref:System.Runtime.InteropServices.COMException>です。  
  
 [!code-csharp[System.Runtime.InteropServices.Marshal.GetActiveObject\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/cs/marshal.getactiveobject.cs#1)]
 [!code-vb[System.Runtime.InteropServices.Marshal.GetActiveObject\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.marshal.getactiveobject/vb/marshal.getactiveobject.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.COMException">オブジェクトが見つかりませんでした。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject (object o, Type T);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject(object o, class System.Type T) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="T" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">インターフェイスを提供するオブジェクト。</param>
        <param name="T">要求されるインターフェイスの型。</param>
        <summary>ポインターを返す、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) 指定したオブジェクトの指定されたインターフェイスを表すインターフェイスです。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
        <returns>オブジェクトの指定したインターフェイスを表すインターフェイス ポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したオブジェクトに対して要求されたインターフェイスを表すインターフェイス ポインターを返します。 これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。 このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントとします。 常に使用する <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> ポインターが完了したら、参照カウントをデクリメントします。 生の COM インターフェイス ポインターを使用する場合は、COM で定義されている規則に従う必要があります。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利です、 <xref:System.IntPtr> 型、またはカスタム マーシャ リングします。 マネージ オブジェクトでこのメソッドを使用すると、一般的ではありませんが、オブジェクトの COM 呼び出し可能ラッパーへのポインターを取得します。 たとえば、使用 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> は com インターフェイス ポインターの取得にエクスポートされるマネージ オブジェクトで <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>します。 2 番目のパラメーターに渡すための対応する型がないために、クラス インターフェイスへのポインターを取得することはできません \(`t`\)。 代わりに、 <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> 自動ディスパッチ クラス インターフェイスは、通常 COM 呼び出し可能ラッパーの既定のインターフェイスにメンバーを呼び出す。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> メソッドのオーバー ロードは、既定ではクエリ インターフェイスのカスタマイズを使用します。 クエリ インターフェイスのカスタマイズを適用するかどうかを指定するには、使用、 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> メソッドのオーバー ロードします。  
  
 詳細については、次を参照してください。、 [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78), 、[Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4), 、および [クラス インターフェイスの概要](http://msdn.microsoft.com/ja-jp/733c0dd2-12e5-46e6-8de1-39d5b25df024) トピックです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="T" /> パラメーターは、インターフェイスではありません。  
  
 または  
  
 型が COM から参照  
  
 または  
  
 <paramref name="T" /> パラメーターは、ジェネリック型。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> パラメーターが要求されたインターフェイスをサポートしていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="T" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMIConnectionPointContainer" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject (object o, Type T, System.Runtime.InteropServices.CustomQueryInterfaceMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject(object o, class System.Type T, valuetype System.Runtime.InteropServices.CustomQueryInterfaceMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="T" Type="System.Type" />
        <Parameter Name="mode" Type="System.Runtime.InteropServices.CustomQueryInterfaceMode" />
      </Parameters>
      <Docs>
        <param name="o">インターフェイスを提供するオブジェクト。</param>
        <param name="T">要求されるインターフェイスの型。</param>
        <param name="mode">適用するかどうかを示す列挙値のいずれか、 <see langword="IUnknown::QueryInterface" /> によって提供されるカスタマイズ、 <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />です。</param>
        <summary>ポインターを返す、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) 指定したオブジェクトの指定されたインターフェイスを表すインターフェイスです。 カスタム クエリ インターフェイス アクセスは、指定したカスタマイズ モードで制御されます。</summary>
        <returns>オブジェクトのインターフェイスを表すインターフェイス ポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29>クエリ インターフェイスのカスタマイズを適用するかどうかを指定できます。 使用して、 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%29> のオーバー ロードを既定ではクエリ インターフェイスのカスタマイズを適用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="T" /> パラメーターは、インターフェイスではありません。  
  
 または  
  
 型が COM から参照  
  
 または  
  
 <paramref name="T" /> パラメーターは、ジェネリック型。</exception>
        <exception cref="T:System.InvalidCastException">オブジェクト <paramref name="o" /> 要求されたインターフェイスをサポートしません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="T" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObject&lt;T,TInterface&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObject&lt;T,TInterface&gt; (T o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObject&lt;T, TInterface&gt;(!!T o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TInterface" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="o" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <c>o</c> の型。</typeparam>
        <typeparam name="TInterface">返すインターフェイスの型。</typeparam>
        <param name="o">インターフェイスを提供するオブジェクト。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 ポインターを返す、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) を指定した型のオブジェクトで指定されたインターフェイスを表すインターフェイスです。 カスタム クエリ インターフェイス アクセスは既定で有効になっています。</summary>
        <returns>表すインターフェイス ポインター、 <paramref name="TInterface" /> インターフェイスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを表すインターフェイス ポインターを返します、 `TInterface` 指定したオブジェクトのインターフェイスです。 これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。 このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントとします。 常に使用する、 <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName>ポインターが完了したら、参照カウントをデクリメントします。 生の COM インターフェイス ポインターを使用する場合は、COM で定義されている規則に従う必要があります。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利です、 <xref:System.IntPtr> 型、またはカスタム マーシャ リングします。 オブジェクトの COM 呼び出し可能ラッパーへのポインターを取得するのにマネージ オブジェクトでは、これはあまり一般的では、このメソッドを使用できますもします。 たとえば、使用<xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> は com インターフェイス ポインターの取得にエクスポートされるマネージ オブジェクトで <xref:System.Runtime.InteropServices.UCOMIConnectionPointContainer?displayProperty=fullName>します。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%60%602%28%60%600%29> メソッドのオーバー ロードは、既定ではクエリ インターフェイスのカスタマイズを使用します。 クエリ インターフェイスのカスタマイズを適用するかどうかを指定するには、使用、 <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%28System.Object%2CSystem.Type%2CSystem.Runtime.InteropServices.CustomQueryInterfaceMode%29> メソッドのオーバー ロードします。  
  
 詳細については、次を参照してください。、 [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78), 、[Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4), 、および [クラス インターフェイスの概要](http://msdn.microsoft.com/ja-jp/733c0dd2-12e5-46e6-8de1-39d5b25df024) トピックです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="TInterface" /> パラメーターは、インターフェイスではありません。  
  
 または  
  
 型が COM から参照  
  
 または  
  
 <paramref name="T" /> パラメーターは、オープン ジェネリック型。</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> パラメーターはサポートされません、 <paramref name="TInterface" /> インターフェイスです。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetComInterfaceForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetComInterfaceForObjectInContext (object o, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetComInterfaceForObjectInContext(object o, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">インターフェイスを提供するオブジェクト。</param>
        <param name="t">要求されるインターフェイスの型。</param>
        <summary>呼び出し元がオブジェクトと同じコンテキストに存在する場合に、そのオブジェクトの指定したインターフェイスを表すインターフェイス ポインターを返します。</summary>
        <returns>指定されたインターフェイス ポインター <paramref name="t" /> を表す、指定したオブジェクトのインターフェイスまたは <see langword="null" /> 場合は、呼び出し元がオブジェクトと同じコンテキストではありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、同じ <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A> が `null` 場合は、呼び出し元がオブジェクトと同じコンテキストではありません。 これは、インターフェイス ポインターを渡す必要があるアンマネージ メソッドがある場合に特に役立ちます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> インターフェイスではありません。  
  
 または  
  
 型が COM から参照</exception>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> 要求されたインターフェイスはサポートしません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="t" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMIConnectionPointContainer" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComObjectData">
      <MemberSignature Language="C#" Value="public static object GetComObjectData (object obj, object key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetComObjectData(object obj, object key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">目的のデータを格納している COM オブジェクト。</param>
        <param name="key">データの取得対象となる <c>obj</c> の内部ハッシュ テーブルにあるキー。</param>
        <summary>指定した COM オブジェクトから、指定したキーによって参照されているデータを取得します。</summary>
        <returns>
          <paramref name="obj" /> パラメーターの内部ハッシュ テーブルにある <paramref name="key" /> パラメーターで表されるデータ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 All COM objects wrapped in a [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) have an associated hash table, which <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A> retrieves. <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A?displayProperty=fullName> adds data to the hash table. You should never have to call either method from your code.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> はCOM オブジェクトではありません。  
  
 または  
  
 <paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetComSlotForMethodInfo">
      <MemberSignature Language="C#" Value="public static int GetComSlotForMethodInfo (System.Reflection.MemberInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetComSlotForMethodInfo(class System.Reflection.MemberInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="m">インターフェイス メソッドを表すオブジェクト。</param>
        <summary>指定した仮想関数テーブル \(v テーブルまたは VTBL\) のスロットを取得 <see cref="T:System.Reflection.MemberInfo" /> その型が COM に公開されたときに入力</summary>
        <returns>VTBL スロット <paramref name="m" /> COM に公開されるときに識別子</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 3 つのこのメソッドが返される 0 から始まるスロット番号 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) 可能性がある 4 つと [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) のメソッドの最初の使用可能なスロットの値、3 または 7 です。<xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> 反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName>します。  
  
 このメソッドを使用すると、COM から認識されないインターフェイスのメンバーおよびプライベート インターフェイスのメンバーのスロット番号を取得します。 スロット番号が返されるが、型が COM に公開されている場合に予約される v テーブルの番号に対応します。 COM 参照不可能なメンバーは、COM クライアントが、スロットを使用できない場合でも実際に公開されている v テーブル内のスロットを占有します。 使用することはできません <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A> を渡すことによって、クラス インターフェイスで <xref:System.Reflection.MemberInfo> クラスからです。 詳細については、次を参照してください。 [クラス インターフェイスの概要](http://msdn.microsoft.com/ja-jp/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="m" /> パラメーターがない、 <see cref="T:System.Reflection.MemberInfo" /> オブジェクトです。  
  
 または  
  
 <paramref name="m" /> パラメーターは、インターフェイス メソッドではありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Reflection.MemberInfo" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetDelegateForFunctionPointer">
      <MemberSignature Language="C#" Value="public static Delegate GetDelegateForFunctionPointer (IntPtr ptr, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Delegate GetDelegateForFunctionPointer(native int ptr, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Delegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ptr">変換するアンマネージ関数ポインター。</param>
        <param name="t">返されるデリゲートの型。</param>
        <summary>アンマネージ関数ポインターをデリゲートに変換します。</summary>
        <returns>適切なデリゲート型にキャストできるデリゲート インスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 バージョン 1.0 および 1.1 の .NET Framework では、関数ポインターを通じてマネージ メソッドを呼び出すコードがアンマネージ関数ポインターとしてアンマネージ コードへのマネージ メソッドを表すデリゲートに渡される可能性があります。 アンマネージ コードにその関数ポインターをマネージ コードに渡すこともできましたし、ポインターは、基になるマネージ メソッドに正しく解決されました。  
  
 .NET Framework 2.0 およびそれ以降のバージョンで使用することができます、 <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> と <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> を双方向でデリゲートをマーシャ リングするメソッドです。<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A>, 、`ptr` としてインポート、 <xref:System.IntPtr?displayProperty=fullName>です。 A <xref:System.IntPtr?displayProperty=fullName> マネージ デリゲートで呼び出すことによって取得できる <xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%2A> およびパラメーターとして渡されたことから呼び出せるアンマネージ メソッド内です。 パラメーター マーシャラーを関数ポインターを .NET Framework 2.0 およびそれ以降のバージョンでデリゲートをマーシャ リングも注意してください。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%2A> メソッドには、次の制限。  
  
-   相互運用シナリオでは、ジェネリックはサポートされていません。  
  
-   無効な関数ポインターは、このメソッドに渡すことはできません。  
  
-   このメソッドは、純粋なアンマネージ関数ポインターでのみ使用できます。  
  
-   C\+\+ またはから関数ポインターでこのメソッドを使用することはできません、 <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> メソッドです。  
  
-   このメソッドを使用して、別のマネージ デリゲートを関数ポインターからデリゲートを作成することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> パラメーターはデリゲートではないか、ジェネリックであります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ptr" /> パラメーターが <see langword="null" /> です。  
  
 または  
  
 <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateForFunctionPointer&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static TDelegate GetDelegateForFunctionPointer&lt;TDelegate&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TDelegate GetDelegateForFunctionPointer&lt;TDelegate&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">返すデリゲートの型。</typeparam>
        <param name="ptr">変換するアンマネージ関数ポインター。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定した型のデリゲートをアンマネージ関数ポインターに変換します。</summary>
        <returns>指定したデリゲート型のインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、<xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> と<xref:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate%60%601%28%60%600%29>を双方向でデリゲートをマーシャ リングするメソッドです。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer%60%601%28System.IntPtr%29> メソッドには、次の制限。  
  
-   無効な関数ポインターは、このメソッドに渡すことはできません。  
  
-   このメソッドは、純粋なアンマネージ関数ポインターでのみ使用できます。  
  
-   C\+\+ またはから関数ポインターでこのメソッドを使用することはできません、 <xref:System.RuntimeMethodHandle.GetFunctionPointer%2A> メソッドです。  
  
-   このメソッドを使用して、別のマネージ デリゲートを関数ポインターからデリゲートを作成することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="TDelegate" /> 以外に、デリゲートでのジェネリック パラメーターをまたはオープン ジェネリック型であります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ptr" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetEndComSlot">
      <MemberSignature Language="C#" Value="public static int GetEndComSlot (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetEndComSlot(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">インターフェイスまたはクラスを表す型。</param>
        <summary>型が COM に公開されたときの仮想テーブル \(V テーブルまたは VTBL\) の最後のスロットを取得します。</summary>
        <returns>COM に公開されたときのインターフェイスの最後の VTBL スロット。 場合、 <paramref name="t" /> パラメーターはクラスで、返された VTBL スロットは、クラスから生成されるインターフェイスの最後のスロット。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、インターフェイスまたはクラスの 0 から始まる v テーブル数を返します。 クラスで使用すると、返されるスロット番号は、クラスのクラス インターフェイスを参照します。 クラス インターフェイスがデュアル自動の場合は、このメソッドは常にディスパッチ専用インターフェイスがマネージ クライアントに v テーブルを公開しないことを示すために\-1 を返します。 使用することができます <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A> と <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> と共に <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> を指定した範囲内のスロットを渡します。 詳細については、次を参照してください。 [クラス インターフェイスの概要](http://msdn.microsoft.com/ja-jp/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetExceptionCode">
      <MemberSignature Language="C#" Value="public static int GetExceptionCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetExceptionCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>発生した例外の型を識別するコードを取得します。</summary>
        <returns>例外の型。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetExceptionCode%2A> コンパイラのサポート構造化例外処理 \(SEH\) のみに公開します。 例外がスローされる前にこのメソッドが呼び出される場合は、0x0 を返します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetExceptionForHR">
      <MemberSignature Language="C#" Value="public static Exception GetExceptionForHR (int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception GetExceptionForHR(int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="errorCode">変換される HRESULT。</param>
        <summary>指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
        <returns>変換後の HRESULT を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> 取得するメソッド、 <xref:System.Exception> を呼び出さずに HRESULT に基づいて、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> メソッドと、例外をキャッチします。  
  
 現在 [IErrorInfo](http://msdn.microsoft.com/ja-jp/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) インターフェイスは、例外の作成に使用します。  
  
 各 HRESULT から .NET Framework での同等の例外クラスへのマッピングを参照してください。 [How to: Map HRESULTs and Exceptions](http://msdn.microsoft.com/ja-jp/610b364b-2761-429d-9c4a-afbc3e66f1b9)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="Overload:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR" />
      </Docs>
    </Member>
    <Member MemberName="GetExceptionForHR">
      <MemberSignature Language="C#" Value="public static Exception GetExceptionForHR (int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Exception GetExceptionForHR(int32 errorCode, native int errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
        <Parameter Name="errorInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="errorCode">変換される HRESULT。</param>
        <param name="errorInfo">エラーの詳細情報を提供する <see langword="IErrorInfo" /> インターフェイスへのポインター。<c>IntPtr(0)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを使用できます。または <c>IntPtr(-1)</c> を指定すると、現在の <see langword="IErrorInfo" /> インターフェイスを無視し、エラー コードだけを使用して例外を構築できます。</param>
        <summary>例外オブジェクトの [IErrorInfo](http://msdn.microsoft.com/ja-jp/4dda6909-2d9a-4727-ae0c-b5f90dcfa447) インターフェイスに渡された追加エラー情報を使用して、指定した HRESULT エラー コードを対応する <see cref="T:System.Exception" /> オブジェクトに変換します。</summary>
        <returns>変換された HRESULT と <paramref name="errorInfo" /> から取得した情報を表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 <xref:System.Runtime.InteropServices.Marshal.GetExceptionForHR%2A> 取得するメソッド、 <xref:System.Exception> を呼び出さずに HRESULT に基づいて、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> メソッドと \(対応するパフォーマンス オーバーヘッドが生じない\) 例外をキャッチします。`errorInfo` パラメーターは、その説明のテキストとエラーを定義するインターフェイスのグローバル一意識別子 \(GUID\) など、エラーに関する追加情報を提供します。  
  
 変換時に提供する必要のあるカスタム エラー情報がある場合は、このメソッドのオーバー ロードを使用します。  
  
 各 HRESULT から .NET Framework での同等の例外クラスへのマッピングを参照してください。 [How to: Map HRESULTs and Exceptions](http://msdn.microsoft.com/ja-jp/610b364b-2761-429d-9c4a-afbc3e66f1b9)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="Overload:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR" />
      </Docs>
    </Member>
    <Member MemberName="GetExceptionPointers">
      <MemberSignature Language="C#" Value="public static IntPtr GetExceptionPointers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetExceptionPointers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>例外発生時に、コンピューターに依存しない例外の記述、およびスレッドに対して存在した状態に関する情報を取得します。</summary>
        <returns>ポインター、 [EXCEPTION\_POINTERS](http://go.microsoft.com/fwlink/?LinkId=148648) 構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetExceptionPointers%2A> コンパイラのサポート構造化例外処理 \(SEH\) のみに公開します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionPointerForDelegate">
      <MemberSignature Language="C#" Value="public static IntPtr GetFunctionPointerForDelegate (Delegate d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetFunctionPointerForDelegate(class System.Delegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="d">アンマネージ コードに渡されるデリゲート。</param>
        <summary>アンマネージ コードから呼び出すことができる関数ポインターにデリゲートを変換します。</summary>
        <returns>アンマネージ コードに渡すことができる値。アンマネージ コードはこの値を使用して、基になるマネージ デリゲートを呼び出すことができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲート `d` を使用してアンマネージ コードに渡すことができる関数ポインターに変換されますが、 [\_\_stdcall](http://msdn.microsoft.com/ja-jp/e212594b-1827-4d07-9527-7d412b300df8) 呼び出し規約です。  
  
 デリゲートは、マネージ コードからガベージ コレクターによって収集されるから手動で管理しなければなりません。 ガベージ コレクターは、アンマネージ コードへの参照を追跡しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="d" /> パラメーターは、ジェネリック型。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetFunctionPointerForDelegate&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr GetFunctionPointerForDelegate&lt;TDelegate&gt; (TDelegate d);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetFunctionPointerForDelegate&lt;TDelegate&gt;(!!TDelegate d) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="d" Type="TDelegate" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">変換するデリゲートの型。</typeparam>
        <param name="d">アンマネージ コードに渡されるデリゲート。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 指定した型のデリゲートをアンマネージ コードから呼び出すことができる関数ポインターに変換します。</summary>
        <returns>アンマネージ コードに渡すことができる値。アンマネージ コードはこの値を使用して、基になるマネージ デリゲートを呼び出すことができます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 デリゲート `d` できますに渡すことによって、アンマネージ コードを使用して関数ポインターに変換されますが、 [\_\_stdcall](http://msdn.microsoft.com/ja-jp/e212594b-1827-4d07-9527-7d412b300df8) 呼び出し規約です。  
  
 デリゲートは、マネージ コードからガベージ コレクターによって収集されるから手動で管理しなければなりません。 ガベージ コレクターは、アンマネージ コードへの参照を追跡しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="d" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetHINSTANCE">
      <MemberSignature Language="C#" Value="public static IntPtr GetHINSTANCE (System.Reflection.Module m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetHINSTANCE(class System.Reflection.Module m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.Module" />
      </Parameters>
      <Docs>
        <param name="m">目的の HINSTANCE を持つモジュール。</param>
        <summary>指定したモジュールのインスタンス ハンドル \(HINSTANCE\) を返します。</summary>
        <returns>HINSTANCE <paramref name="m" />; またはモジュールに HINSTANCE がない場合は\-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 動的またはメモリ内のモジュールに HINSTANCE がありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetHRForException">
      <MemberSignature Language="C#" Value="public static int GetHRForException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHRForException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">HRESULT に変換する例外。</param>
        <summary>指定した例外を HRESULT に変換します。</summary>
        <returns>提供された例外に割り当てられる HRESULT。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> 設定しても、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) COM GetErrorInfoNEEDGUID 関数を呼び出すことによって取得できる例外のインターフェイスです。 この関数を使用するを適用することが、COM インターフェイスのマネージ クラス実装では、HRESULT 値を返す、 <xref:System.Runtime.InteropServices.PreserveSigAttribute> 属性です。 属性付きメソッドが例外をすべてキャッチがあり、使用して、 <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> を適切な HRESULT 値を返すメソッド。 メソッドの外部に反映されるまで、例外を許可するには、不適切な動作が生成されます。 \(実際には、共通言語ランタイムに失敗する v テーブルからのようなメソッドを呼び出す COM クライアントに例外を渡すことです。\)  
  
 注意してください、 <xref:System.Runtime.InteropServices.Marshal.GetHRForException%2A> メソッドのセット、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) 、現在のスレッドのインターフェイスです。 これは、ようなメソッドに予期しない結果になることができます、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> 既定が使用するメソッド、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) 設定されている場合は、現在のスレッドのです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetHRForLastWin32Error">
      <MemberSignature Language="C#" Value="public static int GetHRForLastWin32Error ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetHRForLastWin32Error() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>最後に対応する Win32 コードを使用して実行によって発生したエラーの HRESULT を返します <see cref="T:System.Runtime.InteropServices.Marshal" />します。</summary>
        <returns>最終 Win32 エラー コードに対応する HRESULT。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 対象の関数が必要があるが、 `setLastError` メタデータ フラグを設定します。 たとえば、 `SetLastError` のフィールド、 <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> する必要があります `true`します。 このフラグを設定するプロセスには、使用するソース言語によって異なります。 c\# および C\+\+ では `false` 既定では、が、 `Declare` Visual Basic でのステートメントは `true`です。  
  
   
  
## 例  
 次の例では、使用する Win32 エラー コードに対応する HRESULT を取得する方法、 <xref:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error%2A> メソッドです。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetHRForLastWin32Error\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetHRForLastWin32Error\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetHRForLastWin32Error/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetIDispatchForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetIDispatchForObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIDispatchForObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">オブジェクトが <see langword="IDispatch" /> インターフェイスを要求します。</param>
        <summary>返します。、 [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) インターフェイスがマネージ オブジェクトから取得します。</summary>
        <returns>
          <see langword="IDispatch" /> へのポインター、 <paramref name="o" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マネージ コードのほとんどを直接操作する、 `IDispatch` インターフェイスです。 ただし、 <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> として COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利ですが <xref:System.IntPtr> 型、またはカスタム マーシャ リングします。 このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントとします。 常に使用する <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> ポインターが完了したら、参照カウントをデクリメントします。  
  
 オブジェクトの COM 呼び出し可能ラッパーへのインターフェイス ポインターを取得するのにマネージ オブジェクトでこのメソッドを使用することもできます。 詳細については、「[&#91;\<topic:\/\/cpconcomcallablewrapper\>&#93;](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> 要求されたインターフェイスはサポートしません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetIDispatchForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetIDispatchForObjectInContext (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIDispatchForObjectInContext(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObjectInContext(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">オブジェクトが <see langword="IDispatch" /> インターフェイスを要求します。</param>
        <summary>返します。、 [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) インターフェイス ポインターからマネージ オブジェクトを呼び出し元がそのオブジェクトと同じコンテキストである場合。</summary>
        <returns>
          <see langword="IDispatch" /> 指定したオブジェクトのインターフェイス ポインターまたは <see langword="null" /> 場合は、呼び出し元が指定したオブジェクトと同じコンテキストではありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、同じ <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A> が `null` 場合は、呼び出し元がオブジェクトと同じコンテキストではありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">
          <paramref name="o" /> 要求されたインターフェイスはサポートしません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetITypeInfoForType">
      <MemberSignature Language="C#" Value="public static IntPtr GetITypeInfoForType (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetITypeInfoForType(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">要求されている <see langword="ITypeInfo" /> インターフェイスを持つ型。</param>
        <summary>マネージ型から <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeInfo" /> インターフェイスを返します。</summary>
        <returns>
          <paramref name="t" /> パラメーターの <see langword="ITypeInfo" /> インターフェイスへのポインター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method returns a pointer to an **languageKeyword tag is not supported!!!!**  
 implementation that is based on the original type. Calling an object with <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> causes the reference count to increment on the interface pointer before the pointer is returned. Always use <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> to decrement the reference count once you have finished with the pointer. You can apply the <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> to replace standard interop marshaling behavior with this custom marshaler.  
  
   
  
## 例  
 The following example demonstrates how to retrieve a pointer to the **languageKeyword tag is not supported!!!!**  
 interface for a type using the <xref:System.Runtime.InteropServices.Marshal.GetITypeInfoForType%2A> method.  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetITypeInfoForType\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetITypeInfoForType\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetITypeInfoForType/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> は COM から参照できる型ではありません。  
  
 または  
  
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
        <exception cref="T:System.Runtime.InteropServices.COMException">型を格納するアセンブリのタイプ ライブラリが登録されていますが、型定義が見つかりません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownForObject">
      <MemberSignature Language="C#" Value="public static IntPtr GetIUnknownForObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIUnknownForObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">オブジェクトが <see langword="IUnknown" /> インターフェイスを要求します。</param>
        <summary>返します。、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスがマネージ オブジェクトから取得します。</summary>
        <returns>
          <see langword="IUnknown" /> へのポインター、 <paramref name="o" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マネージ コードのほとんどを直接操作する、 `IUnknown` インターフェイスです。 ただし、 <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> として COM オブジェクトのパラメーターを公開するメソッドを呼び出している場合に便利ですが <xref:System.IntPtr> 型、またはカスタム マーシャ リングします。 このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントとします。 常に使用する <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> ポインターが完了したら、参照カウントをデクリメントします。 このメソッドは、の反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A?displayProperty=fullName> メソッドです。  
  
 インターフェイス ポインターを取得するマネージ オブジェクトでこのメソッドを使用することもできる、 [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78) オブジェクトのです。  
  
   
  
## 例  
 次の例では、取得、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスを使用してマネージ オブジェクトを <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> メソッドです。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject\-release\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject\-release\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetIUnknownForObjectInContext">
      <MemberSignature Language="C#" Value="public static IntPtr GetIUnknownForObjectInContext (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetIUnknownForObjectInContext(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">オブジェクトが <see langword="IUnknown" /> インターフェイスを要求します。</param>
        <summary>返します。、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスのマネージ オブジェクトから、呼び出し元がそのオブジェクトと同じコンテキストにある場合。</summary>
        <returns>
          <see langword="IUnknown" /> 、指定されたオブジェクトへのポインターまたは <see langword="null" /> 場合は、呼び出し元が指定したオブジェクトと同じコンテキストではありません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、同じ <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> が `null` 場合は、呼び出し元がオブジェクトと同じコンテキストではありません。  
  
   
  
## 例  
 次の例では、取得、 `IUnknown` インターフェイスを使用してマネージ オブジェクトを <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext%2A> メソッドです。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext\-release\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext\-release\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObjectInContext-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetLastWin32Error">
      <MemberSignature Language="C#" Value="public static int GetLastWin32Error ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetLastWin32Error() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>プラットフォームを使用して呼び出された最後のアンマネージ関数によって返されたエラー コードを返します。 呼び出しを持つ、 <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> フラグが設定されます。</summary>
        <returns>最後のエラー コードは、Win32 への呼び出しによって設定 [SetLastError](http://go.microsoft.com/fwlink/?LinkId=148656) 関数です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> Win32 の公開 [GetLastError](http://go.microsoft.com/fwlink/?LinkId=148657) Kernel32.DLL から関数です。 呼び出し直接プラットフォームを作成しても安全ではないために、このメソッドが存在する `GetLastError` この情報を取得します。 このエラー コードにアクセスする場合は、呼び出す必要があります <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A> 独自のプラットフォーム呼び出しの定義を作成する代わりに `GetLastError` および呼び出しです。 共通言語ランタイムは、上書き Api への内部の呼び出しを行うことが、 `GetLastError` オペレーティング システムによって維持されます。  
  
 このメソッドを使用するには適用する場合にのみ、エラー コードを取得する、 <xref:System.Runtime.InteropServices.DllImportAttribute?displayProperty=fullName> にメソッド シグネチャを設定し、 <xref:System.Runtime.InteropServices.DllImportAttribute.SetLastError> フィールドを`true`します。 このプロセスが使用するソース言語によって異なります。 c\# と C\+\+ `false` 既定では、が、 `Declare` Visual Basic でのステートメントは `true`です。  
  
   
  
## 例  
 次の例では、通話、 <xref:System.Runtime.InteropServices.Marshal.GetLastWin32Error%2A>メソッドです。 例では、エラーのないでメソッドを呼び出すことは、まずし、\[エラーの存在を持つメソッドを呼び出す方法を示します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetLastWin32Error\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetLastWin32Error\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetLastWin32Error/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.DllImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetManagedThunkForUnmanagedMethodPtr">
      <MemberSignature Language="C#" Value="public static IntPtr GetManagedThunkForUnmanagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetManagedThunkForUnmanagedMethodPtr(native int pfnMethodToWrap, native int pbSignature, int32 cbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pfnMethodToWrap" Type="System.IntPtr" />
        <Parameter Name="pbSignature" Type="System.IntPtr" />
        <Parameter Name="cbSignature" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pfnMethodToWrap">マーシャリングするメソッドへのポインター。</param>
        <param name="pbSignature">メソッド シグネチャへのポインター。</param>
        <param name="cbSignature">バイト数 <c>pbSignature</c>します。</param>
        <summary>マネージ コードからアンマネージ コードに呼び出しをマーシャリングする、ランタイムによって生成される関数へのポインターを取得します。</summary>
        <returns>呼び出しをマーシャ リングは関数へのポインター、 <paramref name="pfnMethodToWrap" /> アンマネージ コードへのパラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetManagedThunkForUnmanagedMethodPtr%2A> コンパイラのサポートのみに公開します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetMethodInfoForComSlot">
      <MemberSignature Language="C#" Value="public static System.Reflection.MemberInfo GetMethodInfoForComSlot (Type t, int slot, ref System.Runtime.InteropServices.ComMemberType memberType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Reflection.MemberInfo GetMethodInfoForComSlot(class System.Type t, int32 slot, valuetype System.Runtime.InteropServices.ComMemberType memberType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
        <Parameter Name="slot" Type="System.Int32" />
        <Parameter Name="memberType" Type="System.Runtime.InteropServices.ComMemberType&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="t">対象の型、 <see cref="T:System.Reflection.MemberInfo" /> を取得します。</param>
        <param name="slot">VTBL スロット。</param>
        <param name="memberType">正常に返された場合は、メンバーの型を指定する列挙値の 1 つ。</param>
        <summary>取得、 <see cref="T:System.Reflection.MemberInfo" /> 指定された仮想関数テーブル \(v テーブルまたは VTBL\) のスロットのオブジェクト。</summary>
        <returns>指定した VTBL スロットのメンバーを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値である、 <xref:System.Reflection.FieldInfo>, 、<xref:System.Reflection.MethodInfo>, 、または <xref:System.Reflection.PropertyInfo> オブジェクトです。 戻り値は、特定の COM スロット内に存在する管理対象のメンバーの種類によって異なります \(汎用化された戻り値の型したがって <xref:System.Reflection.MemberInfo> 3 つの派生元とすべて\)。  
  
 このメソッドによって返されるスロットの 0 から始まる番号が 3 つのアカウント [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) 可能性がある 4 つと [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) のメソッドの最初の使用可能なスロットの値か 3 または 7 です。<xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> 反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo%2A?displayProperty=fullName>します。 使用することができます <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A?displayProperty=fullName> と共に <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A> を指定した範囲内のスロットを渡します。  
  
 `memberType` パラメーターが戻るときにのみ重要です。 返されたに対応する COM メンバー \(通常のメソッドまたはプロパティのアクセサー\) の型が含まれている <xref:System.Reflection.MemberInfo> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> COM から表示されていません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComSlotForMethodInfo(System.Reflection.MemberInfo)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.ComMemberType" />
      </Docs>
    </Member>
    <Member MemberName="GetNativeVariantForObject">
      <MemberSignature Language="C#" Value="public static void GetNativeVariantForObject (object obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetNativeVariantForObject(object obj, native int pDstNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="pDstNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="obj">COM VARIANT の取得対象となるオブジェクト。</param>
        <param name="pDstNativeVariant">
          <c>obj</c> パラメーターに対応する VARIANT を受け取るポインター。</param>
        <summary>オブジェクトを COM VARIANT に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pDstNativeVariant` パラメーターは、結果として得られるバリアントを格納するための十分なメモリを指す必要があります。 また、このメソッドの実装を呼び出す、 [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) 生のメモリ上の関数を `pDstNativeVariant` パラメーターが指し示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> パラメーターは、ジェネリック型。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetNativeVariantForObject&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void GetNativeVariantForObject&lt;T&gt; (T obj, IntPtr pDstNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetNativeVariantForObject&lt;T&gt;(!!T obj, native int pDstNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="obj" Type="T" />
        <Parameter Name="pDstNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">変換対象のオブジェクトの型。</typeparam>
        <param name="obj">COM VARIANT の取得対象となるオブジェクト。</param>
        <param name="pDstNativeVariant">
          <c>obj</c> パラメーターに対応する VARIANT を受け取るポインター。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 指定した型のオブジェクトを COM VARIANT に変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `pDstNativeVariant` パラメーターは、結果として得られるバリアントを格納するための十分なメモリを指す必要があります。 また、このメソッドの実装を呼び出す [VariantInit](https://msdn.microsoft.com/library/ms221402\(v=vs.85\).aspx) 生のメモリ上の関数を `pDstNativeVariant` パラメーターが指し示します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetObjectForIUnknown (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObjectForIUnknown(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk">ポインター、 <see langword="IUnknown" /> インターフェイスです。</param>
        <summary>指すポインターにより、COM オブジェクトを表す型のインスタンスを返す、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスです。</summary>
        <returns>指定したアンマネージ COM オブジェクトを表すオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドはラップ `IUnknown` マネージ オブジェクトにします。 これにより、COM コンポーネントの参照カウントをインクリメントの効果があります。 ランタイムは、COM オブジェクトを表すマネージ オブジェクトでガベージ コレクションを実行するときに、参照カウントがデクリメントされます。  
  
 `pUnk` パラメーターを表す、 `IUnknown` インターフェイス ポインター。 ただし、すべての COM インターフェイスから直接または間接的にを派生するため `IUnknown`, 、任意の COM インターフェイスをこのメソッドに渡すことができます。 によって返されるオブジェクト <xref:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown%2A> は、 [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4), 、他のマネージ オブジェクトは、共通言語ランタイムでは、として管理します。 このラッパーの型がジェネリックでは多くの場合、 `System.__ComObject` ラッパー型があいまいな場合に使用する非表示の種類の型。 COM オブジェクトが実装する限り、このようなジェネリック型に遅延バインディング呼び出しをかけることができます、 [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5) インターフェイスです。 同様に、返されたオブジェクトを適切な COM インターフェイスをキャストすることができます。  
  
 ラップするオブジェクトの特定のマネージ クラス型 \(と汎用ラッパー型ではなく\) では、以下の要件に従う必要があります。  
  
-   実装、 [IProvideClassInfo](http://go.microsoft.com/fwlink/?LinkID=148012) COM オブジェクトのインターフェイスです。  
  
-   格納しているアセンブリを登録、 [Assembly Registration Tool \(Regasm.exe\)](http://msdn.microsoft.com/ja-jp/e190e342-36ef-4651-a0b4-0e8c2c0281cb)です。  
  
 または、これらの要件を回避し、まだを使用して特定のマネージ クラス型でラップするオブジェクトを取得、 <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectForNativeVariant">
      <MemberSignature Language="C#" Value="public static object GetObjectForNativeVariant (IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetObjectForNativeVariant(native int pSrcNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pSrcNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pSrcNativeVariant">COM VARIANT へのポインター。</param>
        <summary>COM VARIANT をオブジェクトに変換します。</summary>
        <returns>オブジェクトに対応する、 <paramref name="pSrcNativeVariant" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> 生のポインターをアンマネージのバリアント型に相当するマネージ オブジェクトを返します。 バリアント型をマネージ コードを公開するときに、interopmarshaler はまったく同じ変換を実行します。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> 反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%2A?displayProperty=fullName>します。  
  
 バリアント型が VT\_ERROR、 <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%2A> 型のオブジェクトを返す `Int32` の代わりに `UInt32`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
          <paramref name="pSrcNativeVariant" /> 無効な VARIANT 型ではありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="pSrcNativeVariant" /> サポートされていない型があります。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="GetObjectForNativeVariant&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetObjectForNativeVariant&lt;T&gt; (IntPtr pSrcNativeVariant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetObjectForNativeVariant&lt;T&gt;(native int pSrcNativeVariant) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="pSrcNativeVariant" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">COM VARIANT の変換先となる型。</typeparam>
        <param name="pSrcNativeVariant">COM VARIANT へのポインター。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定した型のオブジェクトを COM VARIANT に変換します。</summary>
        <returns>対応する指定した型のオブジェクト、 <paramref name="pSrcNativeVariant" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> 型のマネージ オブジェクトを返す `T` 生のポインターをアンマネージのバリアント型に対応します。 バリアント型をマネージ コードを公開するときに、interopmarshaler はまったく同じ変換を実行します。  
  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant%60%601%28System.IntPtr%29> 反対側の機能を提供<xref:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject%60%601%28%60%600%2CSystem.IntPtr%29>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
          <paramref name="pSrcNativeVariant" /> 無効な VARIANT 型ではありません。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="pSrcNativeVariant" /> サポートされていない型があります。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectsForNativeVariants">
      <MemberSignature Language="C#" Value="public static object[] GetObjectsForNativeVariants (IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] GetObjectsForNativeVariants(native int aSrcNativeVariant, int32 cVars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aSrcNativeVariant" Type="System.IntPtr" />
        <Parameter Name="cVars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="aSrcNativeVariant">COM VARIANT の配列の最初の要素へのポインター。</param>
        <param name="cVars">内の COM Variant の数 <c>aSrcNativeVariant</c>します。</param>
        <summary>COM の配列変換 [VARIANTs](http://go.microsoft.com/fwlink/?LinkId=148670) オブジェクトの配列にします。</summary>
        <returns>対応するオブジェクト配列 <paramref name="aSrcNativeVariant" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%2A> 生のポインターをアンマネージのバリアント型の C スタイル配列に対応するマネージ オブジェクトの配列を返します。 バリアント型をマネージ コードを公開するときに、interopmarshaler はまったく同じ変換を実行します。 メソッドを返しますが、空の配列、 `cVars` パラメーターが 0 です。  
  
 オブジェクトの配列 \(戻り値\) では、通常どおりガベージ コレクトを取得します。 アンマネージの入力配列または入力配列内の個々 のバリアントは解放されません。 したがって、それらを適切に解放する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="cVars" /> 負の数です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetObjectsForNativeVariants&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] GetObjectsForNativeVariants&lt;T&gt; (IntPtr aSrcNativeVariant, int cVars);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] GetObjectsForNativeVariants&lt;T&gt;(native int aSrcNativeVariant, int32 cVars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="aSrcNativeVariant" Type="System.IntPtr" />
        <Parameter Name="cVars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">返される配列の型。</typeparam>
        <param name="aSrcNativeVariant">COM VARIANT の配列の最初の要素へのポインター。</param>
        <param name="cVars">内の COM Variant の数 <c>aSrcNativeVariant</c>します。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 COM Variant の配列を指定した型の配列に変換します。</summary>
        <returns>配列 <paramref name="T" /> オブジェクトに対応する <paramref name="aSrcNativeVariant" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants%60%601%28System.IntPtr%2CSystem.Int32%29> 配列を返します `T` 生のポインターをアンマネージのバリアント型の C スタイル配列に対応します。 バリアント型をマネージ コードを公開するときに、interopmarshaler はまったく同じ変換を実行します。 メソッドを返しますが、空の配列、 `cVars` パラメーターが 0 です。  
  
 返される配列はガベージ コレクトされる通常どおりです。 アンマネージの入力配列または入力配列内の個々 のバリアントは解放されません。 したがって、必要に応じてそれらを解放するユーザーの責任です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="cVars" /> 負の数です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetStartComSlot">
      <MemberSignature Language="C#" Value="public static int GetStartComSlot (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetStartComSlot(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">インターフェイスを表す型。</param>
        <summary>ユーザー定義のメソッドを格納している、仮想関数テーブル \(V テーブルまたは VTBL\) の最初のスロットを取得します。</summary>
        <returns>ユーザー定義のメソッドを格納している最初の VTBL スロット。 インターフェイスに基づいている場合、最初のスロットは 3 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003), 、および 7 の場合は、インターフェイスに基づいて [IDispatch](http://msdn.microsoft.com/ja-jp/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、インターフェイスまたはクラスの 0 から始まる v\-table から番号を返します。 クラスで使用すると、返されるスロット番号は、クラスのクラス インターフェイスを参照します。 クラス インターフェイスが自動ディスパッチの場合は、このメソッドは常にディスパッチ専用インターフェイスがマネージ クライアントに v テーブルを公開しないことを示すために\-1 を返します。 使用することができます <xref:System.Runtime.InteropServices.Marshal.GetStartComSlot%2A> と <xref:System.Runtime.InteropServices.Marshal.GetEndComSlot%2A?displayProperty=fullName> と共に <xref:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot%2A?displayProperty=fullName> を指定した範囲内のスロットを渡します。 詳細については、次を参照してください。 [クラス インターフェイスの概要](http://msdn.microsoft.com/ja-jp/733c0dd2-12e5-46e6-8de1-39d5b25df024)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> COM から表示されていません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)" />
      </Docs>
    </Member>
    <Member MemberName="GetThreadFromFiberCookie">
      <MemberSignature Language="C#" Value="public static System.Threading.Thread GetThreadFromFiberCookie (int cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Thread GetThreadFromFiberCookie(int32 cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetThreadFromFiberCookie(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Thread</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="cookie">ファイバー クッキーを表す整数。</param>
        <summary>ファイバー クッキーに対応する変換 <see cref="T:System.Threading.Thread" /> インスタンス。</summary>
        <returns>対応するスレッド、 <paramref name="cookie" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ファイバー cookie とは、そのファイバーのスケジュールを決定する共通言語ランタイムに警告するときに、ホストによって使用される非透過トークンです。 スタックで構成されている、コンテキストを登録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="cookie" /> パラメーターが 0 です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Threading.Thread" />
      </Docs>
    </Member>
    <Member MemberName="GetTypedObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetTypedObjectForIUnknown (IntPtr pUnk, Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetTypedObjectForIUnknown(native int pUnk, class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="pUnk">アンマネージ オブジェクトの <see langword="IUnknown" />インターフェイスへのポインター。</param>
        <param name="t">要求されたマネージ クラスの型。</param>
        <summary>COM オブジェクトを表す、指定した型のマネージ オブジェクトを返します。</summary>
        <returns>要求されたアンマネージ COM オブジェクトを表す、<see cref="T:System.Type" /> オブジェクトに対応するクラスのインスタンス。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **parameterReference tag is not supported!!!!**  
 parameter must be either a COM\-imported type or a subtype of a COM\-imported type. In addition, **parameterReference tag is not supported!!!!**  
 must be a type whose metadata was imported by the [Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) tool. This type must be a class and not an associated coclass interface, which carries the name of the COM class. For example, if Tlbimp.exe imports `Myclass` as a class called `MyclassClass` and as a coclass interface called `Myclass`, you must use `MyclassClass` \(not `Myclass`\) with this method. For additional information about imported classes and coclass interfaces, see [Imported Type Conversion](http://msdn.microsoft.com/ja-jp/cb1ee67d-8ef0-4e40-b2a5-13714b9f33c3).  
  
 If an object has already been obtained for the **parameterReference tag is not supported!!!!**  
 parameter, **parameterReference tag is not supported!!!!**  
 is ignored and the existing object is returned. **parameterReference tag is not supported!!!!**  
 represents an[IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) interface pointer; however, because all COM interfaces derive directly or indirectly from **languageKeyword tag is not supported!!!!**  
, you can pass any COM interface to this method. The object returned by <xref:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown%2A> is a [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\), which the common language runtime manages as it does any other managed object.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> は <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />を持つ属性ではありません。  
  
 または  
  
 <paramref name="t" /> は Windows ランタイム 型です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeForITypeInfo">
      <MemberSignature Language="C#" Value="public static Type GetTypeForITypeInfo (IntPtr piTypeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeForITypeInfo(native int piTypeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="piTypeInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="piTypeInfo">
          <see langword="ITypeInfo" /> をマーシャ リングするインターフェイスです。</param>
        <summary>アンマネージ変換 [ITypeInfo](http://msdn.microsoft.com/ja-jp/f3356463-3373-4279-bae1-953378aa2680) オブジェクトをマネージ <see cref="T:System.Type" /> オブジェクトです。</summary>
        <returns>マネージ型を表すアンマネージ <see langword="ITypeInfo" /> オブジェクトです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> 返します、 <xref:System.Type?displayProperty=fullName> 元の型に基づいているインスタンス。 適用できる、 <xref:System.Runtime.InteropServices.MarshalAsAttribute?displayProperty=fullName> に標準の相互運用マーシャ リング動作をこのカスタム マーシャラーに置き換えます。[Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) ツールを使用して、カスタム マーシャラー変換 `ITypeInfo` パラメーター <xref:System.Type?displayProperty=fullName> パラメーター。 ただし、取得した場合、 `ITypeInfo` によってインターフェイスは Tlbimp.exe 以外の場合、使用することができます <xref:System.Runtime.InteropServices.Marshal.GetTypeForITypeInfo%2A> 同じ変換を手動で実行します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetITypeInfoForType(System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeFromCLSID">
      <MemberSignature Language="C#" Value="public static Type GetTypeFromCLSID (Guid clsid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetTypeFromCLSID(valuetype System.Guid clsid) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clsid" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="clsid">返す型の CLSID。</param>
        <summary>指定したクラス id \(CLSID\) に関連付けられている型を返します。</summary>
        <returns>CLSID が有効かどうかに関係なく <see langword="System.__ComObject" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoName">
      <MemberSignature Language="C#" Value="public static string GetTypeInfoName (System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeInfoName(class System.Runtime.InteropServices.ComTypes.ITypeInfo typeInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeInfo" Type="System.Runtime.InteropServices.ComTypes.ITypeInfo" />
      </Parameters>
      <Docs>
        <param name="typeInfo">表すオブジェクト、 <see langword="ITypeInfo" /> ポインター。</param>
        <summary>によって表される型の名前を取得、 [ITypeInfo](http://msdn.microsoft.com/ja-jp/f3356463-3373-4279-bae1-953378aa2680) オブジェクトです。</summary>
        <returns>型の名前を <paramref name="typeInfo" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって表される型の名前を取得することも、 `ITypeInfo` を呼び出して、 <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> メソッドと最初のパラメーターの場合は\-1 を渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeInfo" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoName">
      <MemberSignature Language="C#" Value="public static string GetTypeInfoName (System.Runtime.InteropServices.UCOMITypeInfo pTI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeInfoName(class System.Runtime.InteropServices.UCOMITypeInfo pTI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.UCOMITypeInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTI" Type="System.Runtime.InteropServices.UCOMITypeInfo" />
      </Parameters>
      <Docs>
        <param name="pTI">表すオブジェクト、 <see langword="ITypeInfo" /> ポインター。</param>
        <summary>によって表される型の名前を取得、 [ITypeInfo](http://msdn.microsoft.com/ja-jp/f3356463-3373-4279-bae1-953378aa2680) オブジェクトです。</summary>
        <returns>型の名前を <paramref name="pTI" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって表される型の名前を取得することも、 `ITypeInfo` オブジェクトを呼び出して、 <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> メソッドと最初のパラメーターの場合は\-1 を渡します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibGuid">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuid(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" />
      </Parameters>
      <Docs>
        <param name="typelib">LIBID を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリのライブラリ ID \(LIBID\) を取得します。</summary>
        <returns>指定したタイプ ライブラリの LIBID。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 既存のタイプ ライブラリから直接 LIBID を抽出します。 ものとは異なり、この操作、 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> べき LIBID を計算するメソッド、現在のアセンブリに基づいています。  
  
 ライブラリの識別子の詳細については、次を参照してください。 [アセンブリへのエクスポート変換](http://msdn.microsoft.com/ja-jp/3fffd8db-240f-4fde-a558-a5bcc01e1a86)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
        <altmember cref="T:System.Runtime.InteropServices.ComTypes.ITypeLib" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibGuid">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuid(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" />
      </Parameters>
      <Docs>
        <param name="pTLB">LIBID を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリのライブラリ ID \(LIBID\) を取得します。</summary>
        <returns>タイプ ライブラリの LIBID を <paramref name="pTLB" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 既存のタイプ ライブラリから直接 LIBID を抽出します。 ものとは異なり、この操作、 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A?displayProperty=fullName> べき LIBID を計算するメソッド、現在のアセンブリに基づいています。  
  
 ライブラリの識別子の詳細については、次を参照してください。 [アセンブリへのエクスポート変換](http://msdn.microsoft.com/ja-jp/3fffd8db-240f-4fde-a558-a5bcc01e1a86)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
        <altmember cref="T:System.Runtime.InteropServices.UCOMITypeLib" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibGuidForAssembly">
      <MemberSignature Language="C#" Value="public static Guid GetTypeLibGuidForAssembly (System.Reflection.Assembly asm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Guid GetTypeLibGuidForAssembly(class System.Reflection.Assembly asm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly(System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asm" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="asm">タイプ ライブラリのエクスポート元のアセンブリ。</param>
        <summary>指定したアセンブリからエクスポートされるときにタイプ ライブラリに割り当てられるライブラリ ID \(LIBID\) を取得します。</summary>
        <returns>指定したアセンブリからエクスポートされるときにタイプ ライブラリに割り当てられる LIBID。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アセンブリがタイプ ライブラリにエクスポートされると、タイプ ライブラリには、LIBID が割り当てられます。 LIBID を明示的に設定するには適用することで、 <xref:System.Runtime.InteropServices.GuidAttribute?displayProperty=fullName> にアセンブリ レベル、またはそのことができますが自動的に生成します。[Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) ツールは、アセンブリの id に基づく LIBID 値を計算します。<xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> 関連付けられている LIBID を取得、 <xref:System.Runtime.InteropServices.GuidAttribute>, 属性が適用されている場合、します。 それ以外の場合、 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuidForAssembly%2A> 計算値を返します。 また、使用することができます、 <xref:System.Runtime.InteropServices.Marshal.GetTypeLibGuid%2A> メソッドを既存のタイプ ライブラリから実際の LIBID を抽出します。  
  
 参照してください、 [アセンブリへのエクスポート変換](http://msdn.microsoft.com/ja-jp/3fffd8db-240f-4fde-a558-a5bcc01e1a86) ライブラリの識別子の詳細についてはトピックです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asm" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.GuidAttribute" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetTypeLibGuid(System.Runtime.InteropServices.UCOMITypeLib)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibLcid">
      <MemberSignature Language="C#" Value="public static int GetTypeLibLcid (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetTypeLibLcid(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" />
      </Parameters>
      <Docs>
        <param name="typelib">LCID を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリの LCID を取得します。</summary>
        <returns>タイプ ライブラリの LCID を <paramref name="typelib" /> パラメーターをポイントします。</returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibLcid">
      <MemberSignature Language="C#" Value="public static int GetTypeLibLcid (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetTypeLibLcid(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibLcid(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" />
      </Parameters>
      <Docs>
        <param name="pTLB">LCID を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリの LCID を取得します。</summary>
        <returns>タイプ ライブラリの LCID を <paramref name="pTLB" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibName">
      <MemberSignature Language="C#" Value="public static string GetTypeLibName (System.Runtime.InteropServices.ComTypes.ITypeLib typelib);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeLibName(class System.Runtime.InteropServices.ComTypes.ITypeLib typelib) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.ComTypes.ITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typelib" Type="System.Runtime.InteropServices.ComTypes.ITypeLib" />
      </Parameters>
      <Docs>
        <param name="typelib">名前を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリの名前を取得します。</summary>
        <returns>タイプ ライブラリの名前を <paramref name="typelib" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される名前は、Microsoft ADO タイプ ライブラリの ADODB などのライブラリ ステートメントで使用する識別子です。 名は、ファイル名ではありません。  
  
 呼び出すことによって、タイプ ライブラリ名を取得することも、 <xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> メソッドと最初のパラメーターの場合は\-1 を渡します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typelib" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibName">
      <MemberSignature Language="C#" Value="public static string GetTypeLibName (System.Runtime.InteropServices.UCOMITypeLib pTLB);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetTypeLibName(class System.Runtime.InteropServices.UCOMITypeLib pTLB) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibName(System.Runtime.InteropServices.UCOMITypeLib)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pTLB" Type="System.Runtime.InteropServices.UCOMITypeLib" />
      </Parameters>
      <Docs>
        <param name="pTLB">名前を取得するタイプ ライブラリ。</param>
        <summary>タイプ ライブラリの名前を取得します。</summary>
        <returns>タイプ ライブラリの名前を <paramref name="pTLB" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドによって返される名前は、Microsoft ADO タイプ ライブラリの ADODB などのライブラリ ステートメントで使用する識別子です。 名は、ファイル名ではありません。  
  
 呼び出すことによって、タイプ ライブラリ名を取得することも、<xref:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation%2A?displayProperty=fullName> メソッドと最初のパラメーターの場合は\-1 を渡します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeLibVersionForAssembly">
      <MemberSignature Language="C#" Value="public static void GetTypeLibVersionForAssembly (System.Reflection.Assembly inputAssembly, out int majorVersion, out int minorVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetTypeLibVersionForAssembly(class System.Reflection.Assembly inputAssembly, int32 majorVersion, int32 minorVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetTypeLibVersionForAssembly(System.Reflection.Assembly,System.Int32@,System.Int32@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputAssembly" Type="System.Reflection.Assembly" />
        <Parameter Name="majorVersion" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="minorVersion" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="inputAssembly">マネージ アセンブリ。</param>
        <param name="majorVersion">メジャー バージョン番号。</param>
        <param name="minorVersion">マイナー バージョン番号。</param>
        <summary>指定したアセンブリからエクスポートされるタイプ ライブラリのバージョン番号を取得します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用してアセンブリをエクスポートする前に <xref:System.Runtime.InteropServices.TypeLibExporterFlags> で、 `CallerResolvedReferences` 値、アセンブリからタイプ ライブラリ バージョンを取得するこのメソッドを使用することができます。  
  
 適用しない場合、 <xref:System.Runtime.InteropServices.TypeLibVersionAttribute> 生成されたタイプ ライブラリのバージョン番号の属性を明示的に制御のエクスポート時のアセンブリをタイプ ライブラリのアセンブリと同じバージョン番号になります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputAssembly" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.TypeLibExporterFlags" />
        <altmember cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" />
        <altmember cref="T:System.Runtime.InteropServices.ITypeLibConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetUniqueObjectForIUnknown">
      <MemberSignature Language="C#" Value="public static object GetUniqueObjectForIUnknown (IntPtr unknown);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object GetUniqueObjectForIUnknown(native int unknown) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unknown" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="unknown">指すマネージ ポインター、 <see langword="IUnknown" /> インターフェイスです。</param>
        <summary>一意な作成 [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\) のオブジェクトを指定された [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイスです。</summary>
        <returns>指定された一意の RCW <see langword="IUnknown" /> インターフェイスです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown%2A> メソッドは一致しないため、一意の RCW が表示されることを確認、 `IUnknown` 既存のオブジェクトへのポインター。 呼び出すその他のコードの影響を受けません一意の RCW を作成するときに、このメソッドを使用して、 <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="GetUnmanagedThunkForManagedMethodPtr">
      <MemberSignature Language="C#" Value="public static IntPtr GetUnmanagedThunkForManagedMethodPtr (IntPtr pfnMethodToWrap, IntPtr pbSignature, int cbSignature);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetUnmanagedThunkForManagedMethodPtr(native int pfnMethodToWrap, native int pbSignature, int32 cbSignature) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr(System.IntPtr,System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pfnMethodToWrap" Type="System.IntPtr" />
        <Parameter Name="pbSignature" Type="System.IntPtr" />
        <Parameter Name="cbSignature" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pfnMethodToWrap">マーシャリングするメソッドへのポインター。</param>
        <param name="pbSignature">メソッド シグネチャへのポインター。</param>
        <param name="cbSignature">バイト数 <c>pbSignature</c>します。</param>
        <summary>アンマネージ コードからマネージ コードに呼び出しをマーシャリングする、ランタイムによって生成される関数へのポインターを取得します。</summary>
        <returns>呼び出しをマーシャ リングする関数へのポインター <paramref name="pfnMethodToWrap" /> マネージ コードにします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.GetUnmanagedThunkForManagedMethodPtr%2A> コンパイラのサポートのみに公開します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="IsComObject">
      <MemberSignature Language="C#" Value="public static bool IsComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">確認する対象のオブジェクト。</param>
        <summary>指定したオブジェクトが COM オブジェクトを表すかどうかを示します。</summary>
        <returns>
          <paramref name="o" /> パラメーターが COM 型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.IsComObject%2A> returns `true` if the class type of the instance is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute?displayProperty=fullName> or if it derives directly or indirectly from a class attributed with <xref:System.Runtime.InteropServices.ComImportAttribute>. The [Tlbimp.exe \(Type Library Importer\)](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) tool applies this attribute for you when it imports a type library.  
  
 Two other methods also determine whether a specified object represents a COM object, but the requirements for returning **languageKeyword tag is not supported!!!!**  
 differ from this method's requirements. <xref:System.Type.IsImport%2A?displayProperty=fullName> returns **languageKeyword tag is not supported!!!!**  
 if the class \(or interface\) is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> directly; it does not return **languageKeyword tag is not supported!!!!**  
 for derived types. <xref:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType%2A?displayProperty=fullName> returns **languageKeyword tag is not supported!!!!**  
 if the type is attributed with <xref:System.Runtime.InteropServices.ComImportAttribute> or derives from a type with the same GUID.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="o" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Runtime.InteropServices.ComImportAttribute" />
        <altmember cref="P:System.Type.IsImport" />
        <altmember cref="M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="IsTypeVisibleFromCom">
      <MemberSignature Language="C#" Value="public static bool IsTypeVisibleFromCom (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTypeVisibleFromCom(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">COM の参照可能範囲を確認する対象の型。</param>
        <summary>型が COM クライアントに表示されるかどうかを示します。</summary>
        <returns>
          <see langword="true" /> 型が COM; から参照できる場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom%2A> 1 つの手順で COM の参照範囲を確認できます。 表示されていない型を COM から使用できません。 型がである場合に表示されている `public` に隠ぺいされていない、 <xref:System.Runtime.InteropServices.ComVisibleAttribute?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
      </Docs>
    </Member>
    <Member MemberName="NumParamBytes">
      <MemberSignature Language="C#" Value="public static int NumParamBytes (System.Reflection.MethodInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 NumParamBytes(class System.Reflection.MethodInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.NumParamBytes(System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="m">チェックするメソッド。</param>
        <summary>指定したメソッドのパラメーターを保持するために必要なアンマネージ メモリ内のバイト数を計算します。</summary>
        <returns>メソッドのパラメーターを表すために必要なアンマネージ メモリ内のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.NumParamBytes%2A> メソッドをアンマネージ メモリ内のメソッド シグネチャのパラメーターを表すために必要なバイト単位でスタック サイズを返します。  
  
 このメソッドの戻り値は、プラットフォームに依存することに注意してください。 たとえば、1 つの整数パラメーターへの署名は、32 ビット プラットフォームと 64 ビット プラットフォーム上で 8 の値を 4 の値を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="m" /> パラメーターがない、 <see cref="T:System.Reflection.MethodInfo" /> オブジェクトです。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="OffsetOf">
      <MemberSignature Language="C#" Value="public static IntPtr OffsetOf (Type t, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int OffsetOf(class System.Type t, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="t">マネージ クラスを指定する値型または書式指定参照型。 適用する必要があります、 <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスにします。</param>
        <param name="fieldName">内のフィールド、 <c>t</c> パラメーター。</param>
        <summary>マネージ クラスのアンマネージ フォームのフィールド オフセットを返します。</summary>
        <returns>オフセット \(バイト単位\) を <paramref name="fieldName" /> プラットフォームで宣言されている、指定したクラス内のパラメーターを起動します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> 必ずしもマネージ構造体レイアウトのオフセットに対応しないアンマネージ構造体レイアウトの観点からのオフセットを提供します。 構造体をマーシャ リング、レイアウトを変換し、オフセットを変更できます。`t` パラメーター値の型または書式指定参照型 \(いずれかを順次または明示的なレイアウトで\) 指定できます。 使用して全体のレイアウトのサイズを取得できます、 <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A?displayProperty=fullName> メソッドです。 詳細については、次を参照してください。 [既定値の型のマーシャ リング](http://msdn.microsoft.com/ja-jp/4d9a876c-e05a-40ba-bd85-bd22877f984a)します。  
  
> [!NOTE]
>  .NET Framework version 2.0 で始まる <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> プライベート フィールドを公開することがあります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">構造体としてクラスをエクスポートできませんまたは、このフィールドはパブリックでないです。 以降、.NET Framework version 2.0 では、フィールドはプライベートあります。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OffsetOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr OffsetOf&lt;T&gt; (string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int OffsetOf&lt;T&gt;(string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">マネージ値型または書式指定参照型。<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> 属性をクラスに適用する必要があります。</typeparam>
        <param name="fieldName">
          <c>T</c> 型内のフィールドの名前。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 指定されたマネージ クラスのアンマネージ フォームのフィールド オフセットを返します。</summary>
        <returns>プラットフォーム呼び出しによって宣言される指定したクラス内の <paramref name="fieldName" /> パラメーターのバイト単位のオフセット。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.OffsetOf%60%601%28System.String%29> provides the offset in terms of the unmanaged structure layout, which does not necessarily correspond to the offset of the managed structure layout. Marshaling the structure can transform the layout and alter the offset. The `T` generic type parameter can be a value type or a formatted reference type \(with either a sequential or explicit layout\). You can obtain the size of the entire layout by using the <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> method. For additional information, see [Default Marshaling for Value Types](http://msdn.microsoft.com/ja-jp/4d9a876c-e05a-40ba-bd85-bd22877f984a).  
  
> [!NOTE]
>  Beginning with the .NET Framework version 2.0, <xref:System.Runtime.InteropServices.Marshal.OffsetOf%2A> may expose private fields.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)" />
      </Docs>
    </Member>
    <Member MemberName="Prelink">
      <MemberSignature Language="C#" Value="public static void Prelink (System.Reflection.MethodInfo m);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Prelink(class System.Reflection.MethodInfo m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="m">チェックするメソッド。</param>
        <summary>メソッドを呼び出さずに、一度だけ実行されるメソッド セットアップ タスクを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セットアップ タスクは、初期の初期化を提供し、ターゲット メソッドが呼び出されたときに自動的に実行されます。 最初の作業を以下に示します。  
  
-   確認するプラットフォーム呼び出しのメタデータの書式が正しい。  
  
-   関数を呼び出すすべてのマネージ型がプラットフォームの有効なパラメーターであることを確認します。  
  
-   検索して、プロセスへのアンマネージ DLL の読み込み。  
  
-   プロセスのエントリ ポイントを検索しています。  
  
 呼び出す <xref:System.Runtime.InteropServices.Marshal.Prelink%2A> プラットフォームの外部メソッドの呼び出しも何も起こりません。 すべてのプラットフォーム上でタスクが使用して、型でメソッドを呼び出すセットアップを実行する <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="m" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="m" /> パラメーターがない、 <see cref="T:System.Reflection.MethodInfo" /> オブジェクトです。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)" />
        <altmember cref="T:System.Reflection.MethodInfo" />
      </Docs>
    </Member>
    <Member MemberName="PrelinkAll">
      <MemberSignature Language="C#" Value="public static void PrelinkAll (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PrelinkAll(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">メソッドをチェックするクラス。</param>
        <summary>クラスのすべてのメソッドに対してリンク前の確認を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> メソッドを呼び出す <xref:System.Runtime.InteropServices.Marshal.Prelink%2A?displayProperty=fullName> 特定の型のすべてのメソッドにします。<xref:System.Runtime.InteropServices.Marshal.Prelink%2A> 各メソッドを呼び出さずに 1 回限りメソッド セットアップ タスクを実行します。 使用する <xref:System.Runtime.InteropServices.Marshal.PrelinkAll%2A> プラットフォームでのみ呼び出しを実行します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="c" /> パラメーターが <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAnsi">
      <MemberSignature Language="C#" Value="public static string PtrToStringAnsi (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAnsi(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
        <summary>コピーするマネージ文字列をアンマネージ ANSI から最初の null 文字までのすべての文字 <see cref="T:System.String" />, 、各 ANSI 文字を Unicode に拡大変換とします。</summary>
        <returns>アンマネージ ANSI 文字列のコピーを保持するマネージ文字列。 場合 <paramref name="ptr" /> は <see langword="null" />, 、null 文字列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。 このメソッドは、の反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> アンマネージからマネージ文字列を作成するメソッド `char` 配列。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi\-IntPtr\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAnsi">
      <MemberSignature Language="C#" Value="public static string PtrToStringAnsi (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAnsi(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
        <param name="len">コピーする入力文字列のバイト数。</param>
        <summary>マネージ割り当てます <see cref="T:System.String" />, 、そこに、アンマネージ ANSI 文字列から指定数の文字をコピー、および各 ANSI 文字を Unicode に拡大変換します。</summary>
        <returns>ネイティブの ANSI のコピーを保持するマネージ文字列の文字列の値、 <paramref name="ptr" /> パラメーターがない <see langword="null" />。 そうしないと、このメソッドが戻る <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。 このメソッドは、の反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A> アンマネージからマネージ文字列を作成するメソッド`char` 配列。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.PtrToStringAnsi\-IntPtr\-int\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStringAnsi-IntPtr-int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="len" /> が 0 未満です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAuto">
      <MemberSignature Language="C#" Value="public static string PtrToStringAuto (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAuto(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  
  
 または  
  
 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、アンマネージ メモリに格納された文字列の最初の null 文字までのすべての文字をコピーします。</summary>
        <returns>
          <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合はアンマネージ文字列のコピーを保持するマネージ文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のプラットフォームは、Unicode と、各 ANSI 文字が Unicode 文字に拡大変換およびこのメソッドを呼び出す <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>します。 それ以外の場合、このメソッドを呼び出す <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>します。  
  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> 反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringAuto">
      <MemberSignature Language="C#" Value="public static string PtrToStringAuto (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringAuto(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">Unicode プラットフォームの場合は、先頭の Unicode 文字のアドレス。  
  
 または  
  
 ANSI プラットフォームの場合は、先頭の ANSI 文字のアドレス。</param>
        <param name="len">コピーする文字数。</param>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこにアンマネージ メモリに格納されている文字列から指定された文字数をコピーします。</summary>
        <returns>場合に、ネイティブの文字列のコピーを保持するマネージ文字列の値、 <paramref name="ptr" /> パラメーターがない <see langword="null" />。 そうしないと、このメソッドが戻る <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Unicode プラットフォームの場合は、このメソッドを呼び出す <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A>; ANSI プラットフォームの場合は、呼び出す <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A>します。 これらのメソッドが呼び出される前に、変換は行われません。  
  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。<xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A> 反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="len" /> が 0 未満です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringBSTR">
      <MemberSignature Language="C#" Value="public static string PtrToStringBSTR (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringBSTR(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
        <summary>マネージ割り当てます<see cref="T:System.String" />し、コピー、 [binary string \(BSTR\)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx)をアンマネージ メモリに格納されています。</summary>
        <returns>アンマネージ文字列のコピーを保持するマネージ文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てられた文字列でのみこのメソッドを呼び出すと、アンマネージ[SysAllocString](https://msdn.microsoft.com/library/ms221458\(v=vs.85\).aspx)と[SysAllocStringLen](https://msdn.microsoft.com/library/ms221639\(v=vs.85\).aspx)関数。  
  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A>カスタム マーシャ リング用、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成しため、必要に応じて、元の文字列を解放する必要があります。 このメソッドは、の反対側の機能を提供、<xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A?displayProperty=fullName>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ptr" /> と <see cref="F:System.IntPtr.Zero" /> は等しい。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUni">
      <MemberSignature Language="C#" Value="public static string PtrToStringUni (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUni(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこに、アンマネージ Unicode 文字列から最初の null 文字までのすべての文字をコピーします。</summary>
        <returns>
          <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合はアンマネージ文字列のコピーを保持するマネージ文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> マネージ コードとアンマネージ コードを混在している場合は、カスタム マーシャ リングするため、または使用するために便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。 このメソッドは、の反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUni">
      <MemberSignature Language="C#" Value="public static string PtrToStringUni (IntPtr ptr, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUni(native int ptr, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ文字列の最初の文字のアドレス。</param>
        <param name="len">コピーする Unicode 文字の数。</param>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこに、アンマネージ Unicode 文字列から指定数の文字をコピーします。</summary>
        <returns>
          <paramref name="ptr" /> パラメーターの値が <see langword="null" /> でない場合はアンマネージ文字列のコピーを保持するマネージ文字列。それ以外の場合、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、アンマネージ文字列の内容のコピーを作成するため、必要に応じて、元の文字列を解放する必要があります。 このメソッドは、の反対側の機能を提供、 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A?displayProperty=fullName> と <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A?displayProperty=fullName> メソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUTF8">
      <MemberSignature Language="C#" Value="public static string PtrToStringUTF8 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUTF8(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PtrToStringUTF8">
      <MemberSignature Language="C#" Value="public static string PtrToStringUTF8 (IntPtr ptr, int byteLen);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string PtrToStringUTF8(native int ptr, int32 byteLen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="byteLen" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">To be added.</param>
        <param name="byteLen">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure">
      <MemberSignature Language="C#" Value="public static void PtrToStructure (IntPtr ptr, object structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PtrToStructure(native int ptr, object structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <param name="structure">データのコピー先のオブジェクト。 これは、書式指定クラスのインスタンスである必要があります。</param>
        <summary>アンマネージ メモリ ブロックからマネージ オブジェクトにデータをマーシャリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> COM では必要では多くの場合、相互運用性とプラットフォーム呼び出しとして構造体パラメーターが表示されるとき、 <xref:System.IntPtr?displayProperty=fullName> 値。 値型では、このオーバー ロード メソッドを使用できません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">構造体レイアウトは、シーケンシャルか明示的ではありません。  
  
 または  
  
 構造は、ボックス化された値型です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure">
      <MemberSignature Language="C#" Value="public static object PtrToStructure (IntPtr ptr, Type structureType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object PtrToStructure(native int ptr, class System.Type structureType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structureType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <param name="structureType">作成するオブジェクトの型。 このオブジェクトは、書式指定クラスまたは構造体を表す必要があります。</param>
        <summary>アンマネージ メモリ ブロックから、指定した型の、新しく割り当てられたマネージ オブジェクトにデータをマーシャリングします。</summary>
        <returns>データを含むマネージ オブジェクトが指す、 <paramref name="ptr" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> COM では必要では多くの場合、相互運用性とプラットフォーム呼び出しとして構造体パラメーターが表示されるとき、 <xref:System.IntPtr?displayProperty=fullName> 値。 値型は、このオーバー ロード メソッドに渡すことができます。 この場合、返されたオブジェクトは、ボックス化されたインスタンスです。  
  
   
  
## 例  
 次の例は、マネージ構造体を作成、アンマネージ メモリに転送し、マネージ メモリの使用に転送した、 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> メソッドです。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 次の例では、マネージ構造体を使用して、メモリのアンマネージ ブロックをマーシャ リングする方法、 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> メソッドです。  
  
> [!IMPORTANT]
>  このコードでは、32 ビットのコンパイルと仮定します。 64 ビット コンパイラを使用する前に置き換える <xref:System.IntPtr.ToInt32%2A?displayProperty=fullName> と <xref:System.IntPtr.ToInt64%2A?displayProperty=fullName>です。  
  
 [!code-cpp[PtrToStructure\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PtrToStructure/CPP/pts.cpp#1)]
 [!code-csharp[PtrToStructure\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PtrToStructure/CS/pts.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="structureType" /> パラメーター レイアウトはシーケンシャルか明示的ではありません。  
  
 または  
  
 <paramref name="structureType" /> パラメーターは、ジェネリック型。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="structureType" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.MissingMethodException">指定されたクラス <paramref name="structureType" /> アクセス可能な既定のコンス トラクターがありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)" />
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T PtrToStructure&lt;T&gt; (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T PtrToStructure&lt;T&gt;(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">データをコピーする先のオブジェクトの型。 これは、書式指定クラスまたは構造体である必要があります。</typeparam>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 アンマネージ メモリ ブロックから、ジェネリック型パラメーターによって指定された型の、新しく割り当てられたマネージ オブジェクトにデータをマーシャリングします。</summary>
        <returns>データを格納するマネージ オブジェクトを <paramref name="ptr" /> パラメーターをポイントします。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%29> COM では必要では多くの場合、相互運用性とプラットフォーム呼び出し構造体パラメーターとして表現された <xref:System.IntPtr?displayProperty=fullName> 値。 値型は、このメソッドのオーバー ロードに渡すことができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">レイアウト <paramref name="T" /> シーケンシャルまたは明示的なではありません。</exception>
        <exception cref="T:System.MissingMethodException">指定されたクラス <paramref name="T" /> アクセス可能な既定のコンス トラクターがありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="PtrToStructure&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void PtrToStructure&lt;T&gt; (IntPtr ptr, T structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void PtrToStructure&lt;T&gt;(native int ptr, !!T structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="structure" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <c>structure</c> の型。 書式が設定されたクラスである必要があります。</typeparam>
        <param name="ptr">アンマネージ メモリ ブロックへのポインター。</param>
        <param name="structure">データのコピー先のオブジェクト。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 アンマネージ メモリ ブロックから指定した型のマネージ オブジェクトにデータをマーシャ リングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%60%601%28System.IntPtr%2C%60%600%29> COM では必要では多くの場合、相互運用性とプラットフォーム呼び出し構造体パラメーターとして表現された <xref:System.IntPtr> 値。 値型では、このメソッドのオーバー ロードを使用できません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">構造体レイアウトは、シーケンシャルか明示的ではありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="QueryInterface">
      <MemberSignature Language="C#" Value="public static int QueryInterface (IntPtr pUnk, ref Guid iid, out IntPtr ppv);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 QueryInterface(native int pUnk, valuetype System.Guid iid, native int ppv) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
        <Parameter Name="iid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="ppv" Type="System.IntPtr&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pUnk">照会するインターフェイス。</param>
        <param name="iid">要求したインターフェイスのインターフェイス ID \(IID: Interface Identifier\)。</param>
        <param name="ppv">このメソッドが返されるときに、返されたインターフェイスへの参照を格納します。</param>
        <summary>COM オブジェクトから指定したインターフェイスへのポインターを要求します。</summary>
        <returns>呼び出しの成功または失敗を示す HRESULT。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.QueryInterface%2A> メソッドを公開、 [IUnknown::QueryInterface](http://go.microsoft.com/fwlink/?LinkID=144867) を特定のインターフェイス ポインターを取得しようとする COM オブジェクトのメソッドです。 使用して `QueryInterface` com オブジェクトは、マネージ コードでのキャスト操作を実行した場合と同じです。 このメソッドを使用してオブジェクトを呼び出すと、ポインターが返される前に、インターフェイス ポインターをインクリメントする参照カウントとします。 常に使用する <xref:System.Runtime.InteropServices.Marshal.Release%2A?displayProperty=fullName> ポインターが完了したら、参照カウントをデクリメントします。 取得する、 <xref:System.IntPtr> を表す値、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイス ポインターを呼び出すことができます <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, 、<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, 、または <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
        <summary>アンマネージ メモリから 1 バイトを読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られたバイト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> 0 の暗黙的なオフセットが含まれています。 このメソッドのアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との直接操作できます \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例は、アンマネージ メモリのブロックを作成、バイトをアンマネージ メモリに書き込み、アンマネージ メモリからのバイトを読み取り、およびアンマネージ メモリを破棄をします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.ReadByte \- WriteByte\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.ReadByte \- WriteByte\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> アンマネージ文字の値を読み取ります。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadByte\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリから、指定したオフセット \(またはインデックス\) の 1 バイトを読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> 直接のアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> アンマネージ文字の値を読み取ります。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadByte\-IntPtr\-int\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte-IntPtr-int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) のバイト オフセット プラス \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public static byte ReadByte (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8 ReadByte(object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリから、指定したオフセット \(またはインデックス\) の 1 バイトを読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られたバイト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadByte%2A> 直接のアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
        <summary>アンマネージ メモリから 16 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られた 16 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> 0 の暗黙的なオフセットが含まれています。 このメソッドにより、アンマネージ C スタイルとは直接やり取り `Int16` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> アンマネージの値を読み取るメソッド `short` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> アンマネージの値を読み取るメソッド `short` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt16\-IntPtr\-Int\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt16-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt16">
      <MemberSignature Language="C#" Value="public static short ReadInt16 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int16 ReadInt16(object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 16 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた 16 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) のバイト オフセット プラス \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
        <summary>アンマネージ メモリから 32 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> 0 の暗黙的なオフセットが含まれています。 このメソッドにより、アンマネージ C スタイルとは直接やり取り `Int32` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> アンマネージの値を読み取るメソッド `int` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られた 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> 直接管理されていない 32 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A>メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> アンマネージの値を読み取るメソッド `int` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt32\-IntPtr\-Int\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt32-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt32">
      <MemberSignature Language="C#" Value="public static int ReadInt32 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReadInt32(object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 32 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた 32 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> アンマネージ 32 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
        <summary>アンマネージ メモリから 64 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られた 64 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> 0 の暗黙的なオフセットが含まれています。 このメソッドにより、アンマネージ C スタイルとは直接やり取り `Int64` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> アンマネージの値を読み取るメソッド `__int64` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> 直接管理されていない 64 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> アンマネージの値を読み取るメソッド `__int64` 変数です。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.ReadInt64\-IntPtr\-Int\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadInt64-IntPtr-Int/cpp/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) のバイト オフセット プラス \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadInt64">
      <MemberSignature Language="C#" Value="public static long ReadInt64 (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 ReadInt64(object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットから 64 ビット符号付き整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた 64 ビット符号付き整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> 直接管理されていない 64 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (IntPtr ptr);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr(native int ptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のアドレス。</param>
        <summary>アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
        <returns>アンマネージ メモリから読み取られた整数。 32 ビット コンピューター上では 32 ビット整数が返され、64 ビット コンピューター上では 64 ビット整数が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> 0 の暗黙的なオフセットが含まれています。 このメソッドにより、アンマネージ C スタイルとは直接やり取り `IntPtr` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (IntPtr ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr(native int ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">読み込み元となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリの指定されたオフセットからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> アンマネージ C スタイルとの対話を直接有効 `IntPtr` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadIntPtr">
      <MemberSignature Language="C#" Value="public static IntPtr ReadIntPtr (object ptr, int ofs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReadIntPtr(object ptr, int32 ofs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">ソース オブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 読み取る前にパラメーター。</param>
        <summary>アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。</summary>
        <returns>アンマネージ メモリの指定されたオフセットから読み取られた整数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> アンマネージ C スタイルとの対話を直接有効 `IntPtr` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を読み取る前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置からの読み取りはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) のバイト オフセット プラス \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReAllocCoTaskMem">
      <MemberSignature Language="C#" Value="public static IntPtr ReAllocCoTaskMem (IntPtr pv, int cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReAllocCoTaskMem(native int pv, int32 cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.IntPtr" />
        <Parameter Name="cb" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pv">割り当てられたメモリへのポインター <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />します。</param>
        <param name="cb">割り当てられたブロックの新しいサイズ。</param>
        <summary>以前に割り当てられたメモリ ブロックのサイズを変更 <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />します。</summary>
        <returns>再割り当てされたメモリ ブロックのアドレスを表す整数。 このメモリを解放する必要があります <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A> 2 つのメモリ割り当ての変更方法の 1 つ、 <xref:System.Runtime.InteropServices.Marshal> クラスです。 \(<xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> は、その他\)。 再割り当てされたメモリの内容の先頭は、元のコンテンツと同じただし、全体のメモリ ブロックは、別の場所にできます。 このメソッドは、COM を公開する [CoTaskMemRealloc](http://go.microsoft.com/fwlink/?LinkId=148778) 関数で、COM タスク メモリ アロケーターと呼びます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ReAllocHGlobal">
      <MemberSignature Language="C#" Value="public static IntPtr ReAllocHGlobal (IntPtr pv, IntPtr cb);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int ReAllocHGlobal(native int pv, native int cb) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pv" Type="System.IntPtr" />
        <Parameter Name="cb" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pv">
          <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリへのポインター。</param>
        <param name="cb">割り当てられたブロックの新しいサイズ。 これはポインターではありません。<see cref="T:System.IntPtr" /> 型にキャストされた、要求しているバイト数です。 ポインターを渡すと、サイズとして扱われます。</param>
        <summary>以前に <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> を使用して割り当てられたメモリ ブロックのサイズを変更します。</summary>
        <returns>再割り当てされたメモリへのポインター。 このメモリは、<see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> を使用して解放する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ReAllocHGlobal%2A> is one of two memory reallocation API methods in the <xref:System.Runtime.InteropServices.Marshal> class. \(<xref:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem%2A?displayProperty=fullName> is the other.\)  
  
 This method exposes the Win32 [GlobalReAlloc](http://go.microsoft.com/fwlink/?LinkId=148780) function from Kernel32.dll. The returned pointer can differ from the original. If it is different, the contents of the original memory block have been copied to the new block, and the original memory block has been freed.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メモリが不足しているため要求を満たせません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="Release">
      <MemberSignature Language="C#" Value="public static int Release (IntPtr pUnk);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Release(native int pUnk) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pUnk" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pUnk">解放するインターフェイス。</param>
        <summary>指定したインターフェイスの参照カウントをデクリメントします。</summary>
        <returns>指定されたインターフェイスの参照の新しい値がカウント、 <paramref name="pUnk" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムは、このメソッドを直接使用する必要がないようにする COM オブジェクトの参照カウントを管理します。 テスト目的でのみこの値を使用します。 まれに、カスタム マーシャラーのテストなどでかもしれませんオブジェクトの有効期間を手動で操作するために必要なです。 その呼び出しをプログラムのみ <xref:System.Runtime.InteropServices.Marshal.AddRef%2A?displayProperty=fullName> 呼び出す必要があります <xref:System.Runtime.InteropServices.Marshal.Release%2A>します。 呼び出す <xref:System.Runtime.InteropServices.Marshal.Release%2A> 参照カウントに達した後に 0、未定義の動作です。  
  
 呼び出すことができます <xref:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject%2A?displayProperty=fullName>, 、<xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A?displayProperty=fullName>, 、または <xref:System.Runtime.InteropServices.Marshal.GetIDispatchForObject%2A?displayProperty=fullName> させることが、 <xref:System.IntPtr> を表す値、 [IUnknown](http://go.microsoft.com/fwlink/?LinkId=148003) インターフェイス ポインターを解放します。 これらのメソッドを使用することも、 <xref:System.Runtime.InteropServices.Marshal.Release%2A> メソッド、マネージ オブジェクトによって表される COM インターフェイスを解放するマネージ オブジェクトを [COM Callable Wrapper](http://msdn.microsoft.com/ja-jp/d04be3b5-27b9-4f5b-8469-a44149fabf78)します。  
  
   
  
## 例  
 次の例では、取得、 `IUnknown` インターフェイスを使用してマネージ オブジェクトを <xref:System.Runtime.InteropServices.Marshal.GetIUnknownForObject%2A> メソッドです。 例を呼び出してインターフェイス ポインターも解放し、 <xref:System.Runtime.InteropServices.Marshal.Release%2A> メソッドです。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.GetIUnknownForObject\-release\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.GetIUnknownForObject\-release\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.GetIUnknownForObject-release/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseComObject">
      <MemberSignature Language="C#" Value="public static int ReleaseComObject (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 ReleaseComObject(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">解放する COM オブジェクト。</param>
        <summary>指定した COM オブジェクトに関連付けられている指定した [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW: Runtime Callable Wrapper\) の参照カウントをデクリメントします。</summary>
        <returns>
          <paramref name="o" /> に関連付けられている RCW の参照カウントの新しい値。 この値は通常 0 です。RCW は、ラップされた COM オブジェクトへの参照を、それを呼び出しているマネージ クライアントの数に関係なく、1 つしか保持しないためです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is used to explicitly control the lifetime of a COM object used from managed code. You should use this method to free the underlying COM object that holds references to resources in a timely manner or when objects must be freed in a specific order.  
  
 Every time a COM interface pointer enters the common language runtime \(CLR\), it is wrapped in an RCW.  
  
 The RCW has a reference count that is incremented every time a COM interface pointer is mapped to it. The <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method decrements the reference count of an RCW. When the reference count reaches zero, the runtime releases all its references on the unmanaged COM object, and throws a <xref:System.NullReferenceException?displayProperty=fullName> if you attempt to use the object further. If the same COM interface is passed more than one time from unmanaged to managed code, the reference count on the wrapper is incremented every time, and calling <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> returns the number of remaining references.  
  
 This method enables you to force an RCW reference count release so that it occurs precisely when you want it to. However, improper use of <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> may cause your application to fail, or may cause an access violation.  
  
 Consider a scenario in which managed code in an application domain is holding onto an RCW that represents a COM component. If you call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the RCW, the managed code will be unable to access the RCW and will raise an <xref:System.Runtime.InteropServices.InvalidComObjectException> exception.  
  
 A more serious error may occur if a call to the RCW is executing when the RCW is released. In this case, there is a good chance that the thread making the call will cause an access violation. However, process memory may become corrupted, and the process may continue to run until it fails for reasons that are very difficult to debug.  
  
 This risk is compounded when the COM component that is being used is a singleton, for the following reason: The CLR activates COM components by calling the COM [CoCreateInstance](http://go.microsoft.com/fwlink/?LinkID=142894) function, which returns the same interface pointer every time it is called for singleton COM components. Thus, separate and independent pieces of managed code in an application domain can be using the same RCW for a singleton COM component, and if either one calls the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method on the COM component, the other will be broken.  
  
 Therefore, use the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> only if it is absolutely required. If you want to call this method to ensure that a COM component is released at a determined time, consider using the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method instead. <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> will release the underlying COM component regardless of how many times it has re\-entered the CLR. The internal reference count of the RCW is incremented by one every time the COM component re\-enters the CLR. Therefore, you could call the <xref:System.Runtime.InteropServices.Marshal.ReleaseComObject%2A> method in a loop until the value returned is zero. This achieves the same result as the <xref:System.Runtime.InteropServices.Marshal.FinalReleaseComObject%2A> method.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="o" /> は有効な COM オブジェクトではありません。</exception>
        <exception cref="T:System.NullReferenceException">
          <paramref name="o" /> は <see langword="null" /> です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)" />
        <altmember cref="T:System.NullReferenceException" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseThreadCache">
      <MemberSignature Language="C#" Value="public static void ReleaseThreadCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReleaseThreadCache() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ReleaseThreadCache" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スレッドのキャッシュを解放します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToBSTR (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToBSTR(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ オブジェクト。</param>
        <summary>アンマネージ割り当てます [binary string \(BSTR\)](https://msdn.microsoft.com/library/ms221069\(v=vs.85\).aspx) マネージの内容をコピー <see cref="T:System.Security.SecureString" /> オブジェクトにします。</summary>
        <returns>
          <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> と混在させるマネージ コードとアンマネージ コードまたは方法がカスタム マーシャ リングするために便利です。 このメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため常に解放、 `BSTR` を呼び出して完了すると、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <block subset="none" type="usage">
          <para>This method is supported only on computers running Windows 2000 Service Pack 3 or later.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToCoTaskMemAnsi (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToCoTaskMemAnsi(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ オブジェクト。</param>
        <summary>マネージの内容をコピー <see cref="T:System.Security.SecureString" /> アンマネージ COM タスク アロケーターから割り当てられたメモリ ブロックへのオブジェクト。</summary>
        <returns>
          <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> と混在させるマネージ コードとアンマネージ コードまたは方法がカスタム マーシャ リングするために便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A>です。 文字列の文字は、ANSI 文字としてコピーされます。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> マーシャ リングし、内容の暗号化を解除する方法、 <xref:System.Security.SecureString> アンマネージ メモリ ブロックへのオブジェクト。 次を使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> をゼロにし、アンマネージ ブロックを破棄します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <block subset="none" type="usage">
          <para>This method is supported only on computers running Windows 2000 Service Pack 3 or later.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToCoTaskMemUnicode">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToCoTaskMemUnicode (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToCoTaskMemUnicode(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ オブジェクト。</param>
        <summary>アンマネージ COM タスク アロケーターから割り当てられたメモリ ブロックに、マネージ <see cref="T:System.Security.SecureString" /> オブジェクトの内容をコピーします。</summary>
        <returns>
          <paramref name="s" /> パラメーターのコピー先となったアンマネージ メモリ内のアドレス。null オブジェクトが指定された場合は 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method is useful for custom marshaling or when mixing managed and unmanaged code. Because this method allocates the unmanaged memory required for a string, always free the memory by calling the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method. The characters of the string are copied as Unicode characters.  
  
   
  
## 例  
 The following example uses the <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> method to marshal and decrypt the contents of a <xref:System.Security.SecureString> object to a block of unmanaged memory. It then uses the <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> method to zero out and dispose the unmanaged block.  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <block subset="none" type="usage">
          <para>This method is supported only on computers running Windows 2000 Service Pack 3 or later.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToGlobalAllocAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToGlobalAllocAnsi (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToGlobalAllocAnsi(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ オブジェクト。</param>
        <summary>マネージの内容をコピー <see cref="T:System.Security.SecureString" /> アンマネージ メモリにコピーされる際に、ANSI 形式に変換します。</summary>
        <returns>位置へのアンマネージ メモリ内のアドレス、 <paramref name="s" /> パラメーターのコピー、または null のオブジェクトが指定された場合は 0 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> と混在させるマネージ コードとアンマネージ コードまたは方法がカスタム マーシャ リングするために便利です。 このメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ために呼び出すことによって、メモリを解放常に、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> マーシャ リングし、内容の暗号化を解除する方法、 <xref:System.Security.SecureString> アンマネージ メモリ ブロックへのオブジェクト。 次を使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> をゼロにし、アンマネージ ブロックを破棄します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <block subset="none" type="usage">
          <para>This method is supported only on computers running Windows 2000 Service Pack 3 or later.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SecureStringToGlobalAllocUnicode">
      <MemberSignature Language="C#" Value="public static IntPtr SecureStringToGlobalAllocUnicode (System.Security.SecureString s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int SecureStringToGlobalAllocUnicode(class System.Security.SecureString s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ オブジェクト。</param>
        <summary>マネージの内容をコピー <see cref="T:System.Security.SecureString" /> をアンマネージ メモリのオブジェクト。</summary>
        <returns>アンマネージ メモリ内のアドレス、 <paramref name="s" /> がコピー、または 0 の場合 <paramref name="s" /> は、 <see cref="T:System.Security.SecureString" /> オブジェクトの長さは 0 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> メソッドは、マネージし、アンマネージ コードの混在させる場合、カスタム マーシャ リングするため、または使用するために便利です。 このメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ために呼び出すことによって、メモリを解放常に、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> メソッドをアンマネージ `LogonUser` を使用して偽装を実行する関数、 <xref:System.Security.SecureString> クラスです。 使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> をゼロにし、アンマネージ文字列の参照を解放します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.NotSupportedException">現在のコンピューターは、Microsoft Windows 2000 Service Pack 3 以降を実行していません。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <block subset="none" type="usage">
          <para>This method is supported only on computers running Windows 2000 Service Pack 3 or later.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetComObjectData">
      <MemberSignature Language="C#" Value="public static bool SetComObjectData (object obj, object key, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetComObjectData(object obj, object key, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">データを格納する COM オブジェクト。</param>
        <param name="key">データを格納する COM オブジェクトの内部ハッシュ テーブルにあるキー。</param>
        <param name="data">設定するデータ。</param>
        <summary>指定した COM オブジェクトに、指定したキーで参照するデータを設定します。</summary>
        <returns>データが正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 All COM objects wrapped in a [Runtime Callable Wrapper](http://msdn.microsoft.com/ja-jp/7e542583-1e31-4e10-b523-8cf2f29cb4a4) \(RCW\) have an associated hash table, to which <xref:System.Runtime.InteropServices.Marshal.SetComObjectData%2A> adds data. <xref:System.Runtime.InteropServices.Marshal.GetComObjectData%2A?displayProperty=fullName> retrieves data from the hash table. You should never have to call either method from your code.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="obj" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="obj" /> はCOM オブジェクトではありません。  
  
 または  
  
 <paramref name="obj" /> は Windows ランタイム オブジェクト。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SizeOf">
      <MemberSignature Language="C#" Value="public static int SizeOf (object structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf(object structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structure" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="structure">サイズが返されるオブジェクト。</param>
        <summary>オブジェクトのアンマネージ サイズをバイト単位で返します。</summary>
        <returns>アンマネージ コードの指定したオブジェクトのサイズ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、参照型またはボックス化された値型であることができます構造体のインスタンスを受け取ります。 シーケンシャルまたは明示的なレイアウトがあります。  
  
 返されるサイズは、アンマネージ オブジェクトのサイズです。 オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。 文字型のサイズの影響を受ける、 <xref:System.Runtime.InteropServices.CharSet> そのクラスに適用される値。  
  
 使用することができます、 <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> 割り当てを使用してアンマネージ メモリの量を決定する方法、 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> と <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> メソッドです。  
  
   
  
## 例  
 次の例は、マネージ構造体を作成し、アンマネージ メモリに転送して、マネージ メモリに転送します。 この例では、 <xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> メソッドをアンマネージ メモリの量を割り当てることを確認します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="SizeOf">
      <MemberSignature Language="C#" Value="public static int SizeOf (Type t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf(class System.Type t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="t">サイズが返される型。</param>
        <summary>アンマネージ型のサイズを返します \(バイト単位\)。</summary>
        <returns>アンマネージ コードの指定した型のサイズ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構造体があるない場合は、このメソッドを使用できます。 シーケンシャルまたは明示的なレイアウトがあります。  
  
 返されるサイズは、アンマネージ型のサイズです。 オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。 文字型のサイズの影響を受ける、 <xref:System.Runtime.InteropServices.CharSet> そのクラスに適用される値。  
  
   
  
## 例  
 次の例では、<xref:System.Runtime.InteropServices.Marshal.SizeOf%2A> メソッドを呼び出す方法を示しています。 このコード例が示されている例の一部は、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#3](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#3)]
 [!code-csharp[Marshal\#3](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#3)]
 [!code-vb[Marshal\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="t" /> パラメーターは、ジェネリック型。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="t" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf``1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">サイズが返される型。</typeparam>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 アンマネージ型のサイズを返します \(バイト単位\)。</summary>
        <returns>サイズをバイト単位で指定された型で、 <paramref name="T" /> ジェネリック型パラメーターです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構造体があるない場合は、このメソッドを使用できます。 シーケンシャルまたは明示的なレイアウトがあります。  
  
 返されるサイズは、アンマネージ型のサイズです。 オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。 文字型のサイズの影響を受ける、 <xref:System.Runtime.InteropServices.CharSet> そのクラスに適用される値。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeOf&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static int SizeOf&lt;T&gt; (T structure);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SizeOf&lt;T&gt;(!!T structure) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="structure" Type="T" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <c>structure</c> パラメーターの型。</typeparam>
        <param name="structure">サイズが返されるオブジェクト。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定した型のオブジェクトのアンマネージ サイズをバイト単位で返します。</summary>
        <returns>アンマネージ コードの指定したオブジェクトのサイズ \(バイト単位\)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、参照型またはボックス化された値型であることができます構造体のインスタンスを受け取ります。 シーケンシャルまたは明示的なレイアウトがあります。  
  
 返されるサイズは、アンマネージ オブジェクトのサイズです。 オブジェクトのアンマネージ コードとマネージのサイズが異なることができます。 文字型のサイズの影響を受ける、 <xref:System.Runtime.InteropServices.CharSet> そのクラスに適用される値。  
  
 使用することができます、 <xref:System.Runtime.InteropServices.Marshal.SizeOf%60%601%28%60%600%29> を使用して割り当てるアンマネージ メモリの量を決定する方法、 <xref:System.Runtime.InteropServices.Marshal.AllocHGlobal%2A> と <xref:System.Runtime.InteropServices.Marshal.AllocCoTaskMem%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="structure" /> パラメーターが <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="StringToBSTR">
      <MemberSignature Language="C#" Value="public static IntPtr StringToBSTR (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToBSTR(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーするマネージ文字列。</param>
        <summary>割り当てる、 [BSTR](https://msdn.microsoft.com/library/ms221069.aspx) マネージの内容をコピー <see cref="T:System.String" /> にします。</summary>
        <returns>
          <see langword="BSTR" /> へのアンマネージ ポインター。<paramref name="s" /> が null の場合は 0。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToBSTR%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 このメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため常に解放、 `BSTR` を呼び出して完了すると <xref:System.Runtime.InteropServices.Marshal.FreeBSTR%2A?displayProperty=fullName>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringBSTR%2A?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">使用可能なメモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">長さは、 <paramref name="s" /> が範囲外です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemAnsi (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemAnsi(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> アンマネージ COM タスク アロケーターから割り当てられたメモリ ブロックにします。</summary>
        <returns>場合は、文字列、または 0 に割り当てられたメモリ ブロックへのポインターを表す整数を <paramref name="s" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>します。 文字列の文字は、ANSI 文字としてコピーされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> パラメーターは、オペレーティング システムで許可された最大の長さを超えています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemAuto">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemAuto (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemAuto(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> アンマネージ COM タスク アロケーターから割り当てられたメモリ ブロックにします。</summary>
        <returns>0 の場合、または割り当てられたメモリ ブロック <paramref name="s" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto%2A> マネージ コードとアンマネージ コードを混在している場合は、カスタム マーシャ リングするため、または使用するために便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>します。  
  
 文字列の文字は、コードを実行しているオペレーティング システムに応じて、ANSI または Unicode の文字としてコピーされます。 Windows 98 では、文字は、ANSI 文字としてコピーされます。 Windows NT 4.0、Windows 2000、Windows XP および Windows Server 2003 ファミリでは、文字が Unicode 文字としてコピーされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">長さは、 <paramref name="s" /> が範囲外です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemUni">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemUni (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemUni(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> アンマネージ COM タスク アロケーターから割り当てられたメモリ ブロックにします。</summary>
        <returns>S の場合は、文字列、または 0 に割り当てられたメモリ ブロックへのポインターを表す整数を <see langword="null" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni%2A> マネージ コードとアンマネージ コードを混在している場合は、カスタム マーシャ リングするため、または使用するために便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeCoTaskMem%2A?displayProperty=fullName>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>します。 文字列の文字は、Unicode 文字としてコピーされます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> パラメーターは、オペレーティング システムで許可された最大の長さを超えています。</exception>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToCoTaskMemUTF8">
      <MemberSignature Language="C#" Value="public static IntPtr StringToCoTaskMemUTF8 (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToCoTaskMemUTF8(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalAnsi">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalAnsi (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalAnsi(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> アンマネージ メモリにコピーされる際に、ANSI 形式に変換します。</summary>
        <returns>位置へのアンマネージ メモリ内のアドレス <paramref name="s" /> がコピー、または 0 の場合 <paramref name="s" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> カスタム マーシャ リングするため、またはマネージ コードとアンマネージ コードを混在している場合に便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>です。<xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi%2A> 反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAnsi%2A?displayProperty=fullName>します。  
  
 このメソッドは埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。  
  
   
  
## 例  
 次の例では、マネージの内容を変換 <xref:System.String> クラスのアンマネージ メモリにし、完了時に、アンマネージ メモリの破棄します。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/CPP/stringtohglobalansi.cpp#1)]
 [!code-csharp[Runtime.InteropServices.Marshal.StringToHGlobalAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAnsi/cs/stringtohglobalansi.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> パラメーターは、オペレーティング システムで許可された最大の長さを超えています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalAuto">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalAuto (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalAuto(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> をアンマネージ メモリの必要な場合に ANSI 形式に変換します。</summary>
        <returns>0 の場合、文字列のコピー先またはアンマネージ メモリ内のアドレス <paramref name="s" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto%2A> マネージ コードとアンマネージ コードを混在している場合は、カスタム マーシャ リングするため、または使用するために便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringAuto%2A?displayProperty=fullName>します。  
  
 このメソッドは埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。  
  
   
  
## 例  
 次の例では、マネージの内容を変換 <xref:System.String> クラスのアンマネージ メモリにし、完了時に、アンマネージ メモリの破棄します。  
  
 [!code-cpp[Runtime.InteropServices.Marshal.StringToHGlobalAuto\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.StringToHGlobalAuto/CPP/sample.cpp#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">使用できるメモリが不足しています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StringToHGlobalUni">
      <MemberSignature Language="C#" Value="public static IntPtr StringToHGlobalUni (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int StringToHGlobalUni(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">コピーされるマネージ文字列。</param>
        <summary>マネージの内容をコピー <see cref="T:System.String" /> をアンマネージ メモリにします。</summary>
        <returns>位置へのアンマネージ メモリ内のアドレス、 <paramref name="s" /> がコピー、または 0 の場合 <paramref name="s" /> は <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.StringToHGlobalUni%2A> マネージ コードとアンマネージ コードを混在している場合は、カスタム マーシャ リングするため、または使用するために便利です。 呼び出して、メモリ解放常にこのメソッドは、文字列に必要なアンマネージ メモリを割り当てられる、ため <xref:System.Runtime.InteropServices.Marshal.FreeHGlobal%2A>です。 このメソッドは、の反対側の機能を提供 <xref:System.Runtime.InteropServices.Marshal.PtrToStringUni%2A?displayProperty=fullName>します。  
  
 このメソッドは埋め込まれた null 文字をコピーし、終端の null 文字が含まれています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">メソッドは、ネイティブ ヒープに十分なメモリを割り当てられませんでした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> パラメーターは、オペレーティング システムで許可された最大の長さを超えています。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="StructureToPtr">
      <MemberSignature Language="C#" Value="public static void StructureToPtr (object structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StructureToPtr(object structure, native int ptr, bool fDeleteOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="structure" Type="System.Object" />
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="fDeleteOld" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="structure">マーシャリングするデータを保持すマネージ オブジェクト。 このオブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
        <param name="ptr">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
        <param name="fDeleteOld">このメソッドがデータをコピーする前に、<c>ptr</c> パラメーターに対して <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> メソッドを呼び出す場合は <see langword="true" />。 ブロックには有効なデータを含める必要があります。 メモリ ブロックに既にデータが格納されているときに <see langword="false" /> を渡すと、メモリ リークが発生する可能性があることに注意してください。</param>
        <summary>マネージ オブジェクトからアンマネージ メモリ ブロックにデータをマーシャリングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If **parameterReference tag is not supported!!!!**  
 is a value type, it can be boxed or unboxed. If it is boxed, it is unboxed before copying.  
  
 A formatted class is a reference type whose layout is specified by the <xref:System.Runtime.InteropServices.StructLayoutAttribute> attribute, as either <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName> or <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName>.  
  
 <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> copies the contents of `structure` to the pre\-allocated block of memory that the `ptr` parameter points to. If `structure` contains reference types that marshal to COM interface pointers \(interfaces, classes without layout, and <xref:System.Object?displayProperty=fullName>\), the managed objects are kept alive with reference counts. All other reference types \(for example, strings and arrays\) are marshaled to copies. To release these managed or unmanaged objects, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A?displayProperty=fullName>method before you free the memory block.  
  
 If you use the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method to copy a different instance to the memory block at a later time, specify **languageKeyword tag is not supported!!!!**  
 for **parameterReference tag is not supported!!!!**  
 to remove reference counts for reference types in the previous instance. Otherwise, the managed reference typesand unmanaged copies are effectively leaked.  
  
 The overall pattern for using <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> is as follows:  
  
1.  On the first call to the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A>method after a memory block has been allocated, **parameterReference tag is not supported!!!!**  
    must be**languageKeyword tag is not supported!!!!**  
    , because there are no contents to clear.  
  
    > [!IMPORTANT]
    >  Specify **languageKeyword tag is not supported!!!!**  
    >  for **parameterReference tag is not supported!!!!**  
    >  only if the block contains valid data.  
  
2.  If you copy a different instance to the memory block, and the object contains reference types, **parameterReference tag is not supported!!!!**  
     must be **languageKeyword tag is not supported!!!!**  
     to free reference types in the old contents.  
  
3.  If the object contains reference types, you must call the <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> method before you free the memory block.  
  
> [!NOTE]
>  To pin an existing structure instead of copying it, use the <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> type to create a pinned handle for the structure. For details on how to pin, see [Copying and Pinning](http://msdn.microsoft.com/ja-jp/0059f576-e460-4e70-b257-668870e420b8).  
  
   
  
## 例  
 The following example creates a managed structure, transfers it to unmanaged memory using the <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> method, and then transfers it back to managed memory using the <xref:System.Runtime.InteropServices.Marshal.PtrToStructure%2A> method.  
  
 [!code-csharp[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.PtrToStructure\-SizeOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.PtrToStructure-SizeOf/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="structure" /> は書式指定クラスではない参照型です。  
  
 または  
  
 <paramref name="structure" /> はジェネリック型です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="StructureToPtr&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void StructureToPtr&lt;T&gt; (T structure, IntPtr ptr, bool fDeleteOld);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void StructureToPtr&lt;T&gt;(!!T structure, native int ptr, bool fDeleteOld) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="structure" Type="T" />
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="fDeleteOld" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="T">マネージ オブジェクトの型。</typeparam>
        <param name="structure">マーシャリングするデータを保持すマネージ オブジェクト。 オブジェクトは、書式指定クラスの構造体またはインスタンスである必要があります。</param>
        <param name="ptr">このメソッドを呼び出す前に割り当てる必要があるアンマネージ メモリ ブロックへのポインター。</param>
        <param name="fDeleteOld">
          <see langword="true" /> 呼び出して、 <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> メソッドを <c>ptr</c> パラメーターの前に、このメソッドは、データをコピーします。 ブロックには有効なデータを含める必要があります。 渡すことに注意してください <see langword="false" /> データをメモリ リークにつながるメモリ ブロックが既に含まれている場合。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定した型のマネージ オブジェクトからアンマネージ メモリ ブロックにデータをマーシャ リングします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書式指定クラスは参照型で指定されたレイアウトを持つ、 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 属性のいずれかとして <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName> または <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName>です。  
  
 <xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> 内容をコピー `structure` 事前に割り当てられたメモリ ブロックにする、 `ptr` パラメーターをポイントします。 場合 `structure` COM インターフェイス ポインターをマーシャ リングされる参照型が含まれています \(インターフェイス、レイアウト、せずクラスと <xref:System.Object?displayProperty=fullName>\)、管理対象のオブジェクトは、参照カウントが維持されます。 他のすべての参照型 \(たとえば、文字列および配列\) は、コピーにマーシャ リングされます。 これらのマネージまたはアンマネージ オブジェクトを解放するを呼び出す必要があります、 <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%60%601%28System.IntPtr%29> メソッドは、メモリ ブロックを解放する前にします。  
  
 使用する場合、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> 後で別のインスタンスをメモリ ブロックにコピーする方法を指定する `true` の `fDeleteOld` 参照を削除する参照型の前のインスタンスでカウントされます。 それ以外の場合、マネージ参照型とアンマネージのコピーは効率的にリークされています。  
  
 使用するための全体的なパターン<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%60%601%28%60%600%2CSystem.IntPtr%2CSystem.Boolean%29> は次のようになります。  
  
1.  初めて呼び出したときに、<xref:System.Runtime.InteropServices.Marshal.StructureToPtr%2A> メモリ ブロックを割り当てた後に `fDeleteOld` する必要があります `false`, をオフに内容がないため、します。  
  
    > [!IMPORTANT]
    >  指定 `true` の `fDeleteOld` ブロックには、有効なデータが含まれている場合のみです。  
  
2.  メモリ ブロックを別のインスタンスにコピーするオブジェクトには、参照型が含まれている場合 `fDeleteOld` する必要があります `true` に古い内容の種類の参照を解放します。  
  
3.  呼び出すオブジェクトに参照型が含まれている場合、 <xref:System.Runtime.InteropServices.Marshal.DestroyStructure%2A> メソッドは、メモリ ブロックを解放する前にします。  
  
> [!NOTE]
>  コピーせずに既存の構造をピン留めを使用して、 <xref:System.Runtime.InteropServices.GCHandle?displayProperty=fullName> 構造体の固定ハンドルを作成する型。 ピン留めする方法の詳細については、「 [Copying and Pinning](http://msdn.microsoft.com/ja-jp/0059f576-e460-4e70-b257-668870e420b8)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="structure" /> 書式指定クラスではない参照型です。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" />
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="SystemDefaultCharSize">
      <MemberSignature Language="C#" Value="public static readonly int SystemDefaultCharSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 SystemDefaultCharSize" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>システムの既定の文字サイズを表します。Unicode システムの既定の文字サイズは 2 で、ANSI システムの場合は 1 です。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、 <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> フィールドです。 このコード例が示されている例の一部は、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]
 [!code-csharp[Marshal\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]
 [!code-vb[Marshal\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SystemMaxDBCSCharSize">
      <MemberSignature Language="C#" Value="public static readonly int SystemMaxDBCSCharSize;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int32 SystemMaxDBCSCharSize" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のオペレーティング システムでの 2 バイト文字セット \(DBCS\) サイズの上限をバイト単位で表します。 このフィールドは読み取り専用です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、 <xref:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize> フィールドです。 このコード例が示されている例の一部は、 <xref:System.Runtime.InteropServices.Marshal> クラスです。  
  
 [!code-cpp[Marshal\#2](~/samples/snippets/cpp/VS_Snippets_CLR/Marshal/cpp/marshal.cpp#2)]
 [!code-csharp[Marshal\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Marshal/CS/Marshal.cs#2)]
 [!code-vb[Marshal\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Marshal/VB/Marshal.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ThrowExceptionForHR">
      <MemberSignature Language="C#" Value="public static void ThrowExceptionForHR (int errorCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ThrowExceptionForHR(int32 errorCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="errorCode">必要な例外に対応する HRESULT。</param>
        <summary>特定の失敗 HRESULT 値を使用して例外をスローします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したエラーの HRESULT の例外オブジェクトを作成します。 HRESULT が 0 または正の値 \(成功コード\) の場合は、作成または例外をスローせず、メソッドを返します。  
  
 注意してください、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%28System.Int32%29> メソッドに基づいて例外を返し、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) 設定されている場合は、現在のスレッドのインターフェイスです。 この場合、 `errorCode` パラメーターは無視されます。  
  
 いくつかのエラー Hresult は、しないものに定義された例外にマップします。 HRESULT は、定義済みの例外にマップされている場合 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> 例外のインスタンスを作成し、スローされます。 インスタンスを作成する場合は、 <xref:System.Runtime.InteropServices.COMException>, 、hresult エラー コード\] フィールドを初期化し、その例外をスローします。<xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> はアンマネージを使用して、エラーに関する追加情報の取得を試みますが呼び出される [GetErrorInfo](https://msdn.microsoft.com/library/ms221032\(v=vs.85\).aspx) 関数です。  
  
 各 HRESULT から .NET Framework での同等の例外クラスへのマッピングを参照してください。 [How to: Map HRESULTs and Exceptions](http://msdn.microsoft.com/ja-jp/610b364b-2761-429d-9c4a-afbc3e66f1b9)します。  
  
 場合によっては、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> 前の COM 呼び出しから例外を返す場合があります。 この場合は、次の回避策を使用し、渡す `IntPtr(-1)` 2 番目のパラメーター \(`errorInfo`\)。  
  
```  
[SecurityPermissionAttribute(SecurityAction.LinkDemand, Flags = SecurityPermissionFlag.UnmanagedCode)]  
public static void ThrowExceptionForHR(interrorCode,IntPtrerrorInfo)  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.COMException" />
      </Docs>
    </Member>
    <Member MemberName="ThrowExceptionForHR">
      <MemberSignature Language="C#" Value="public static void ThrowExceptionForHR (int errorCode, IntPtr errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ThrowExceptionForHR(int32 errorCode, native int errorInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="errorCode" Type="System.Int32" />
        <Parameter Name="errorInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="errorCode">必要な例外に対応する HRESULT。</param>
        <param name="errorInfo">ポインター、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) 、エラーの詳細情報を提供するインターフェイスです。 指定できます <c>IntPtr(0)</c> 現在を使用する [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイス、または <c>IntPtr(-1)</c> 現在を無視する [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスし、エラー コードから例外を作成します。</param>
        <summary>特定のエラー HRESULT を使用して例外がスローされるに基づいて、指定した [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定したエラーの HRESULT の例外オブジェクトを作成します。 HRESULT が 0 または正の値 \(成功コード\) の場合は、作成または例外をスローせず、メソッドを返します。  
  
 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> メソッド リリース、 `errorInfo` パラメーター、減少、COM 参照の数、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) インターフェイスです。  
  
 注意してください、 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> メソッドに基づいて例外を返し、 [IErrorInfo](https://msdn.microsoft.com/library/ms221233\(v=vs.85\).aspx) 設定されている場合は、現在のスレッドのインターフェイスです。 この場合、 `errorCode` パラメーターは無視されます。  
  
 いくつかのエラー Hresult は、しないものに定義された例外にマップします。 HRESULT は、定義済みの例外にマップされている場合 <xref:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR%2A> 例外のインスタンスを作成し、スローされます。 インスタンスを作成する場合は、 <xref:System.Runtime.InteropServices.COMException?displayProperty=fullName>, 、hresult エラー コード\] フィールドを初期化し、その例外をスローします。`errorInfo` パラメーターは、エラーに関する追加情報を取得するために使用します。  
  
 各 HRESULT から .NET Framework での同等の例外クラスへのマッピングを参照してください。 [How to: Map HRESULTs and Exceptions](http://msdn.microsoft.com/ja-jp/610b364b-2761-429d-9c4a-afbc3e66f1b9)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.COMException" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeAddrOfPinnedArrayElement">
      <MemberSignature Language="C#" Value="public static IntPtr UnsafeAddrOfPinnedArrayElement (Array arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int UnsafeAddrOfPinnedArrayElement(class System.Array arr, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arr" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="arr">目的の要素を格納している配列。</param>
        <param name="index">内のインデックス、 <c>arr</c> 目的の要素のパラメーターです。</param>
        <summary>指定した配列内の、指定したインデックス位置にある要素のアドレスを取得します。</summary>
        <returns>アドレス <paramref name="index" /> 内 <paramref name="arr" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して配列を固定表示する必要があります、 <xref:System.Runtime.InteropServices.GCHandle> このメソッドに渡されます。 パフォーマンスを最大にするには、このメソッドでは検証されません。 渡された配列予期しない動作と、このことができます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="UnsafeAddrOfPinnedArrayElement&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static IntPtr UnsafeAddrOfPinnedArrayElement&lt;T&gt; (T[] arr, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int UnsafeAddrOfPinnedArrayElement&lt;T&gt;(!!T[] arr, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="arr" Type="T[]" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">配列の型。</typeparam>
        <param name="arr">目的の要素を格納している配列。</param>
        <param name="index">必要な要素のインデックス、 <c>arr</c> 配列。</param>
        <summary>\[.NET Framework 4.5.1 以上でサポート\]  
  
 指定した型の配列で指定したインデックス位置の要素のアドレスを取得します。</summary>
        <returns>アドレス <paramref name="index" /> で <paramref name="arr" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して配列を固定する必要があります、 [UnsafeAddrOfPinnedArrayElement\(T\) メソッド \(T\<xref:System.Runtime.InteropServices.GCHandle> このメソッドに渡されます。 パフォーマンスを最大にするには、このメソッドでは検証されません。 渡された配列予期しない動作と、このことができます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="T:System.Runtime.InteropServices.GCHandle" />
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (IntPtr ptr, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte(native int ptr, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>1 バイト値をアンマネージ メモリに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> 直接のアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
   
  
## 例  
 次の例は、アンマネージ メモリのブロックを作成、バイトをアンマネージ メモリに書き込み、アンマネージ メモリからのバイトを読み取り、およびアンマネージ メモリを破棄をします。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.ReadByte \- WriteByte\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/cs/example.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.ReadByte \- WriteByte\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.ReadByte - WriteByte/vb/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (IntPtr ptr, int ofs, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte(native int ptr, int32 ofs, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加されている、追加のバイト オフセット、<c>ptr</c>書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A>有効とは直接やり取りのアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列 \(を使用して<xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に、個別のマネージ配列にします。  
  
   
  
## 例  
 次の例で使用して、アンマネージの配列を読み書きする方法、<xref:System.Runtime.InteropServices.Marshal.ReadByte%2A>と<xref:System.Runtime.InteropServices.Marshal.WriteByte%2A>メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#3)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) のバイト オフセット プラス \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteByte">
      <MemberSignature Language="C#" Value="public static void WriteByte (object ptr, int ofs, byte val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteByte(object ptr, int32 ofs, unsigned int8 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>1 バイトをアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteByte%2A> 直接のアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>文字を 16 ビット整数としてアンマネージ メモリに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリに 16 ビット整数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A>メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, int ofs, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int32 ofs, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるネイティブ ヒープ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (IntPtr ptr, int ofs, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(native int ptr, int32 ofs, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>16 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt16%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#4)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (object ptr, int ofs, char val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(object ptr, int32 ofs, char val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt16">
      <MemberSignature Language="C#" Value="public static void WriteInt16 (object ptr, int ofs, short val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt16(object ptr, int32 ofs, int16 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>16 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt16%2A> アンマネージ 16 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を直接有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (IntPtr ptr, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32(native int ptr, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリに 32 ビット符号付き整数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> 直接管理されていない 32 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (IntPtr ptr, int ofs, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32(native int ptr, int32 ofs, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>32 ビット符号付き整数をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> 直接管理されていない 32 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt32%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#5)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt32">
      <MemberSignature Language="C#" Value="public static void WriteInt32 (object ptr, int ofs, int val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt32(object ptr, int32 ofs, int32 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>32 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt32%2A> 直接管理されていない 32 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (IntPtr ptr, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64(native int ptr, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリに 64 ビット符号付き整数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> 直接管理されていない 64 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (IntPtr ptr, int ofs, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64(native int ptr, int32 ofs, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> 直接管理されていない 64 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadInt64%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#6)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteInt64">
      <MemberSignature Language="C#" Value="public static void WriteInt64 (object ptr, int ofs, long val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteInt64(object ptr, int32 ofs, int64 val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>64 ビット符号付き整数値をアンマネージ メモリの指定されたオフセット位置に書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteInt64%2A> 直接管理されていない 64 ビット符号付き配列、アンマネージ配列全体のコピーのコストが削減との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (IntPtr ptr, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr(native int ptr, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のアドレス。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> アンマネージ C スタイルとの対話を直接有効 `IntPtr` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">
          <paramref name="ptr" /> 認識されている形式ではありません。  
  
 または  
  
 <paramref name="ptr" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="ptr" /> が正しくありません。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (IntPtr ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr(native int ptr, int32 ofs, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.IntPtr" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">書き込み先となるアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリの指定されたオフセット位置にプロセッサ ネイティブ サイズの整数値を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、32 ビットのシステムと 64 ビット システムで 64 ビットの整数で、32 ビット整数を書き込みます。  
  
 <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> アンマネージ C スタイルとの対話を直接有効 `IntPtr` のアンマネージ配列全体のコピーのコストが削減配列 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
   
  
## 例  
 次の例では、アンマネージ配列を使用して、読み書きする方法、 <xref:System.Runtime.InteropServices.Marshal.ReadIntPtr%2A> と <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> メソッドです。  
  
 [!code-csharp[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/cs/sample.cs#2)]
 [!code-vb[System.Runtime.interopServices.Marshal.Read\-Write val\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.interopServices.Marshal.Read-Write val/vb/sample.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
        <altmember cref="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)" />
      </Docs>
    </Member>
    <Member MemberName="WriteIntPtr">
      <MemberSignature Language="C#" Value="public static void WriteIntPtr (object ptr, int ofs, IntPtr val);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIntPtr(object ptr, int32 ofs, native int val) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ptr" Type="System.Object" />
        <Parameter Name="ofs" Type="System.Int32" />
        <Parameter Name="val" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="ptr">対象のオブジェクトのアンマネージ メモリ内のベース アドレス。</param>
        <param name="ofs">追加される追加のバイト オフセット、 <c>ptr</c> 書き込みの前にパラメーター。</param>
        <param name="val">書き込む値。</param>
        <summary>アンマネージ メモリにプロセッサ ネイティブ サイズの整数を書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.WriteIntPtr%2A> 直接のアンマネージ配列全体のコピーのコストが削減、アンマネージ C スタイルのバイト配列との対話を有効 \(を使用して <xref:System.Runtime.InteropServices.Marshal.Copy%2A?displayProperty=fullName>\)、要素の値を設定する前に別のマネージ配列にします。  
  
 アライメントされていないメモリ位置への書き込みはサポートされています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.AccessViolationException">ベース アドレス \(<paramref name="ptr" />\) バイトのオフセットと \(<paramref name="ofs" />\) null または無効なアドレスを生成します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ptr" /> は <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> オブジェクトです。 このメソッドは受け付けません <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> パラメーター。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeBSTR">
      <MemberSignature Language="C#" Value="public static void ZeroFreeBSTR (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeBSTR(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">解放する <see langword="BSTR" /> のアドレス。</param>
        <summary>解放、 [BSTR](https://msdn.microsoft.com/library/ms221069.aspx)ポインターを使用して割り当てられた、<see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A>メソッドは、最初には、0、BSTR の内容を設定し、BSTR を解放します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemAnsi">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemAnsi (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemAnsi(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">解放するアンマネージ文字列のアドレス。</param>
        <summary>使用して割り当てられたアンマネージ文字列ポインターを解放、 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> メソッドは、最初はゼロ \(0\) クリアしを使用して割り当てられたアンマネージ メモリを解放し、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A> マーシャ リングし、内容の暗号化を解除する方法、 <xref:System.Security.SecureString> アンマネージ メモリ ブロックへのオブジェクト。 次を使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A> をゼロにし、アンマネージ ブロックを破棄します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/cs/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemUnicode">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemUnicode (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemUnicode(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">解放するアンマネージ文字列のアドレス。</param>
        <summary>使用して割り当てられたアンマネージ文字列ポインターを解放、 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A> メソッドは、最初はゼロ \(0\) クリアしを使用して割り当てられたアンマネージ メモリを解放し、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeCoTaskMemUTF8">
      <MemberSignature Language="C#" Value="public static void ZeroFreeCoTaskMemUTF8 (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeCoTaskMemUTF8(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeGlobalAllocAnsi">
      <MemberSignature Language="C#" Value="public static void ZeroFreeGlobalAllocAnsi (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeGlobalAllocAnsi(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">解放するアンマネージ文字列のアドレス。</param>
        <summary>使用して割り当てられたアンマネージ文字列ポインターを解放、 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> メソッドは、最初はゼロ \(0\) クリアしを使用して割り当てられたアンマネージ メモリを解放し、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A> マーシャ リングし、内容の暗号化を解除する方法、 <xref:System.Security.SecureString> アンマネージ メモリ ブロックへのオブジェクト。 次を使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A> をゼロにし、アンマネージ ブロックを破棄します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalAnsi/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="ZeroFreeGlobalAllocUnicode">
      <MemberSignature Language="C#" Value="public static void ZeroFreeGlobalAllocUnicode (IntPtr s);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ZeroFreeGlobalAllocUnicode(native int s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="s">解放するアンマネージ文字列のアドレス。</param>
        <summary>使用して割り当てられたアンマネージ文字列ポインターを解放、 <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" /> メソッドです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> メソッドは、最初はゼロ \(0\) クリアしを使用して割り当てられたアンマネージ メモリを解放し、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> メソッドです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode%2A> メソッドをアンマネージ `LogonUser` を使用して偽装を実行する関数、 <xref:System.Security.SecureString> クラスです。 使用して、 <xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A> をゼロにし、アンマネージ文字列の参照を解放します。  
  
 [!code-csharp[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/CS/sample.cs#1)]
 [!code-vb[Runtime.InteropServices.Marshal.SecureStringToHGlobalUni\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Runtime.InteropServices.Marshal.SecureStringToHGlobalUni/VB/sample.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="SizeOf">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クラスのアンマネージ サイズを返します \(バイト単位\)。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetTypeLibGuid">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイプ ライブラリのライブラリ ID \(LIBID\) を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ThrowExceptionForHR">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>特定の失敗 HRESULT 値を使用して例外をスローします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリに 32 ビット符号付き整数を書き込みます。 アライメントされていないメモリ位置への書き込みはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetComInterfaceForObject">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトのインターフェイスを表すインターフェイス ポインターを返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PtrToStructure">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリ ブロックからマネージ オブジェクトにデータをマーシャリングします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PtrToStringUni">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこに、アンマネージ Unicode 文字列の一部または全部をコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadInt32">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリから 32 ビット符号付き整数を読み取ります。 アライメントされていないメモリ位置からの読み取りはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリから 64 ビット符号付き整数を読み取ります。 アライメントされていないメモリ位置からの読み取りはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteIntPtr">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリにプロセッサ ネイティブ サイズの整数値を書き込みます。 32 ビット システム上では 32 ビット整数が書き込まれ、64 ビット システム上では 64 ビット整数が書き込まれます。 アライメントされていないメモリ位置への書き込みはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteInt64">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリに 64 ビット符号付き整数を書き込みます。 アライメントされていないメモリ位置への書き込みはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>1 バイト値をアンマネージ メモリに書き込みます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetExceptionForHR">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>対応する HRESULT エラー コードを変換 <see cref="T:System.Exception" /> オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetTypeLibName">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイプ ライブラリの名前を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="AllocHGlobal">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>プロセスのアンマネージ メモリからメモリを割り当てます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PtrToStringAuto">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこに、アンマネージ文字列の一部または全部をコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Copy">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マネージ配列からアンマネージ メモリ ポインター、またはアンマネージ メモリ ポインターからマネージ配列にデータをコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリから 16 ビット符号付き整数を読み取ります。 アライメントされていないメモリ位置からの読み取りはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadByte">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリから 1 バイトを読み取ります。 アライメントされていないメモリ位置からの読み取りはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="ReadIntPtr">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリからプロセッサ ネイティブ サイズの整数を読み取ります。 アライメントされていないメモリ位置からの読み取りはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="PtrToStringAnsi">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>マネージ割り当てます <see cref="T:System.String" /> し、そこに、アンマネージ ANSI 文字列の一部または全部をコピーします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetTypeLibLcid">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>タイプ ライブラリの LCID を取得します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="WriteInt16">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>アンマネージ メモリに 16 ビット符号付き整数を書き込みます。 アライメントされていないメモリ位置への書き込みはサポートされています。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetTypeInfoName">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>によって表される型の名前を取得、 [ITypeInfo](http://msdn.microsoft.com/ja-jp/f3356463-3373-4279-bae1-953378aa2680) オブジェクトです。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>