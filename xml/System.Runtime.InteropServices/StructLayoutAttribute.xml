<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>メモリ内のクラスまたは構造体のデータ フィールドの物理的なレイアウトを制御できます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 この属性は、クラスまたは構造体に適用できます。  
  
 共通言語ランタイムは、クラスまたは構造体マネージ メモリのデータ フィールドの物理的なレイアウトを制御します。 ただし、アンマネージ コードに、型を渡す場合を使えば、 <xref:System.Runtime.InteropServices.StructLayoutAttribute> アンマネージ型のレイアウトを制御する属性です。 指定された属性で <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName> メンバーの順序で連続して配置します。<xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName> 両方のマネージ メモリにレイアウトとアンマネージ メモリ内のレイアウトを制御します。 非 blittable 型のクラスまたは構造体には、アンマネージ コードにマーシャ リングが、マネージ メモリにレイアウトを制御せずレイアウトを制御します。 指定された属性で <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName> を各データ メンバーの正確な位置を制御します。 Blittable 型と非 blittable 型の両方の種類のマネージ コードとアンマネージの両方のレイアウトに影響します。 使用して <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName> を使用する、 <xref:System.Runtime.InteropServices.FieldOffsetAttribute> 型内の各フィールドの位置を示す属性です。  
  
 C\#、Visual Basic および C\+\+ コンパイラの適用、 <xref:System.Runtime.InteropServices.LayoutKind.Sequential> 既定では構造体へのレイアウトの値。 クラスについては、適用する必要があります、 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName> 値を明示的にします。[&#91;\<topic:\/\/cpgrfTypeLibraryImporterTlbimpexe\>&#93;](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) も適用されます、 <xref:System.Runtime.InteropServices.StructLayoutAttribute> 属性は、常に適用されます、 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName> タイプ ライブラリをインポートするときの値します。  
  
   
  
## 例  
 マネージ宣言を次の例に示します、 `GetSystemTime` 関数し、定義 `MySystemTime` クラス <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName> レイアウトします。`GetSystemTime` システム時刻を取得し、コンソールに出力します。  
  
 [!code-cpp[StructLayoutAttribute\#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute\#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値の 1 つを表す 16 ビット整数。</param>
        <summary>指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターは、基になる 16 ビット整数を表す各 <xref:System.Runtime.InteropServices.LayoutKind> 列挙体のメンバーです。[&#91;\<topic:\/\/cpgrfTypeLibraryImporterTlbimpexe\>&#93;](http://msdn.microsoft.com/ja-jp/ec0a8d63-11b3-4acd-b398-da1e37e97382) このコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">クラスまたは構造体を整列させる方法を指定する列挙値の 1 つ。</param>
        <summary>指定した <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 列挙体メンバーを使用して、<see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り可能なコードでエラーが発生しにくくなりました、常にこのコンス トラクターを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラス内の文字列データ フィールドを既定で <see langword="LPWSTR" /> または <see langword="LPSTR" /> としてマーシャリングするかどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the **languageKeyword tag is not supported!!!!**  
 field is set to <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=fullName>, all string arguments are converted to Unicode characters \(**languageKeyword tag is not supported!!!!**  
\) before they are passed to the unmanaged implementation. If the field is set to <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=fullName>, the strings are converted to ANSI strings \(**languageKeyword tag is not supported!!!!**  
\). If the **languageKeyword tag is not supported!!!!**  
 field is set to <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=fullName>, the conversion is platform\-dependent \(ANSI on Windows 98 and Windows Me, and Unicode on later versions\).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メモリ内のクラスまたは構造体のデータ フィールドのアライメントを制御します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドは、メモリ内の型のフィールドのアラインメントを制御します。  これは、影響を受ける両方 <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=fullName> と <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=fullName>です。 既定では、値は 0、既定のパッキング サイズは現在のプラットフォーム用ができます。 値 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 0、1、2、4、8、16、32、64、または 128 にする必要があります。  
  
 型のインスタンスのフィールドを配置するには、次の規則を使用します。  
  
-   型のアラインメントは、最も大きな要素のサイズ \(1、2、4、8 などのバイト数\) または指定したパッキング サイズの小さい方です。  
  
-   各フィールドは、自分のサイズのフィールドで従う必要があります \(1、2、4、8 などのバイト数\)、または、型のアラインメントどちらか小さい方です。  その他のすべてのフィールドの長さ以下では、その最大の要素のサイズである型の既定の配置は通常、サイズを使用してフィールドを配置すること。 などの場合でも、型の最大のフィールドでは、64 ビット \(8 バイト\) の整数またはパック フィールドは 8 に設定、 <xref:System.Byte> フィールドが 1 バイトの境界に揃える <xref:System.Int16> フィールドが 2 バイト境界に配置および <xref:System.Int32> フィールドは、4 バイト境界に配置します。  
  
-   配置の要件を満たすためにフィールドの間の余白が追加されます。  
  
 たとえば、次の構造は 2 つから成る <xref:System.Byte> フィールドと 1 つ <xref:System.Int32> フィールドに、さまざまな値を使用しているときに、 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドです。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  C\# のコード例を正常にコンパイルするには、指定する必要があります、 `/unsafe` コンパイラ スイッチです。  
  
 既定のパッキング サイズを指定すると、構造体のサイズは 8 バイトになります。 2 バイトは、バイトが 1 バイト境界に配置する必要がありますので、メモリの最初の 2 バイトを占有します。 型の既定の配置が 4 バイトの最大フィールドのサイズであるため `i3`, 、2 つのバイトの整数フィールドでの後に埋め込みがあります。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 場合 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 設定は、2、構造体のサイズは 6 バイトです。 する前に、2 つのバイトを占有するメモリの最初の 2 バイト。 フィールドが 2 バイト境界に一致するようになりました、ために、2 番目のバイトと整数間の余白はありません。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 場合 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 設定されている構造体のサイズでは 4 には、既定では、型の配置がその最大フィールドのサイズによって定義されていると同じ `i3`, 、これは 4 です。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 場合 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 設定されている構造体のサイズが静止画は、8 ため、既定値と同じ場合、 `i3` フィールドがパック フィールドで指定されている 8 バイト境界より小さい、4 バイトの境界上に配置します。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 別の例を実行するには、次の構造は、2 バイト フィールド、1 つの 32 ビット符号付き整数フィールド、1 つの単一要素のバイト配列、および 10 進値で構成を検討します。 既定のパッキング サイズでは、構造体のサイズは、28 バイトです。 2 バイトの後に、整数の余白の後に、メモリの最初の 2 バイトを占有する 2 つのバイト数。 次には、次の 3 つのバイトの埋め込みを続けて 1 バイトの配列。 最後に、 <xref:System.Decimal> フィールドに、d5 が 4 つの 10 進値を構成するために 4 バイト境界でに揃えて配置 <xref:System.Int32> 、アラインメントは、最大のサイズに基づいているため、フィールドのサイズではなく、そのフィールドの <xref:System.Decimal> 全体の構造体。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 場合 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 設定は、2、構造体のサイズは 24 バイトです。 既定の配置と照らし合わせながらは、2 つのバイト数および整数間の余白の 2 バイトを 2 ではなく、4、型の配置が、終了するために削除されています。 次の 3 つのバイトの後に埋め込み `a4` ので、パディングの 1 バイトに置き換えられている `d5` 4 バイト境界ではなく、2 バイト境界上に配置ようになりました。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 場合 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> 設定は、8 構造体のサイズと同じ既定の場合、この構造体の配置の要件をすべてが 8 未満であるためです。  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> フィールドは、構造はディスク作成時にエクスポートし、ネットワークの書き込み操作時に頻繁に使用します。 プラットフォームの中に、フィールドの使用も頻繁に呼び出すと相互運用機能の操作です。  
  
 場合によっては、フィールドを使用してより厳しいパッキング サイズを作成してメモリの要件を減らします。 ただし、この使用法は、実際のハードウェアの制約の慎重に検討を必要とし、パフォーマンスが低下する可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラスまたは構造体の絶対サイズを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このフィールドは、\(バイト単位\) クラスまたは構造体のメンバーの合計サイズ以上にする必要があります。 このフィールドは、主にアンマネージに直接アクセスできるように構造体によって占有されていたメモリを拡張するコンパイラの作成者向けです。 たとえば、メタデータで直接表されない共用体を使用する場合は、このフィールドを使用することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>クラスまたは構造体を整列する方法を指定する <see cref="T:System.Runtime.InteropServices.LayoutKind" /> 値を取得します。</summary>
        <value>クラスまたは構造体を整列する方法を指定する列挙値の 1 つ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>