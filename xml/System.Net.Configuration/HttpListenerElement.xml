<Type Name="HttpListenerElement" FullName="System.Net.Configuration.HttpListenerElement">
  <TypeSignature Language="C#" Value="public sealed class HttpListenerElement : System.Configuration.ConfigurationElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed HttpListenerElement extends System.Configuration.ConfigurationElement" />
  <TypeSignature Language="DocId" Value="T:System.Net.Configuration.HttpListenerElement" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.ConfigurationElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>構成ファイルで HttpListener 要素を表します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスは、\< httpListener \> 要素 \(ネットワーク設定\) の構成要素に対応します。 このクラスは、構成ファイルに格納できる情報にプログラムでアクセスを提供します。  
  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> プロパティは、場合を示します。 <xref:System.Net.HttpListener> 変換された URI でパーセント エンコード値を変換し、その他の正規化手順は実行ではなく生のエスケープ解除された URI を使用します。  
  
 ときに、 <xref:System.Net.HttpListener> インスタンスを介して要求を受け取ると、 `http.sys` により指定された URI 文字列のインスタンスを作成して、サービス `http.sys`, 、としてそれを公開し、 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> プロパティです。  
  
 `http.sys` サービスは 2 つの要求 URI の文字列を公開します。  
  
-   生の URI  
  
-   変換された URI  
  
 生の URI は、 <xref:System.Uri?displayProperty=fullName> HTTP 要求の要求の行で提供されます。  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 によって提供される生 URI `http.sys` 、上記で説明した要求は「パス\/」です。 これは、次の HTTP 動詞をネットワーク経由で送信された文字列を表します。  
  
 `http.sys` サービスは、HTTP 要求ラインで指定されている URI を使用して、要求で指定された情報から、変換された URI を作成しに元のサーバーを決定するホスト ヘッダーを転送する必要があります。 これは、一連の登録済みの URI プレフィックスの要求からの情報を比較することによって行います。 HTTP サーバー SDK のドキュメントとして変換されたこの URI を指す、 [HTTP\_COOKED\_URL](http://go.microsoft.com/fwlink/?LinkID=166108) 構造体。  
  
 登録されている URI プレフィックスを持つ要求を比較できるようにするには、するために、要求にいくつかの正規化を実行する必要があります。 変換された URI 上のサンプルでは、次になります。  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` サービスの結合、 <xref:System.Uri.Host%2A?displayProperty=fullName> プロパティの値と、変換された URI を作成する要求の行の文字列です。 さらに、 `http.sys` と <xref:System.Uri?displayProperty=fullName> クラスも、次の操作します。  
  
-   エスケープを解除すべてパーセントでエンコードされた値。  
  
-   Utf\-16 文字表現に非 ASCII 文字をパーセントでエンコードに変換します。 Unicode 文字 \(Unicode エンコード %uxxxx 形式を使用して\) だけでなく、utf\-8、ANSI や DBCS 文字がサポートされていることに注意してください。  
  
-   パスの圧縮など、他の正規化の手順を実行します。  
  
 要求にはで値のパーセント エンコードに使用されるエンコーディングに関する情報が含まれていないためには、値のパーセント エンコード解析だけで正しいエンコーディングを判別ことはできません。  
  
 そのため `http.sys` プロセスを変更するための 2 つのレジストリ キーを提供します。  
  
|レジストリ キー|既定値|説明|  
|--------------|---------|--------|  
|EnableNonUTF8|1|0 の場合、 `http.sys` UTF エンコード Url のみを受け入れます。<br /><br /> 0 以外の場合 `http.sys` も要求で ANSI でエンコードされた、DBCS でエンコードされた Url を受け取ります。|  
|FavorUTF8|1|0 以外の場合 `http.sys` し、その変換が失敗するし、EnableNonUTF8 は 0 以外に utf\-8 として URL を先にデコードすると常に、Http.sys ANSI または DBCS とデコードを試みます。<br /><br /> 0 の場合 \(および EnableNonUTF8 は 0 以外\)、 `http.sys` その場合は、ANSI または DBCS とデコードを試行が失敗したを utf\-8 変換を試みます。|  
  
 <xref:System.Net.HttpListener> は、要求を受け取るから変換された URI を使用して `http.sys` への入力として、 <xref:System.Net.HttpListenerRequest.Url%2A> プロパティです。  
  
 Uri の文字と数字以外の文字をサポートする必要があります。 例としては、次の URI は、顧客の顧客情報の取得に使用される「1\/3812」の番号します。  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri \(2 f %\) のパーセント エンコード スラッシュに注意してください。 これは、ここではスラッシュ文字を表し、データはパス区切り記号ではないため、必要に応じて。  
  
 Uri のコンス トラクターに文字列を渡すことにつながるよう、次の URI。  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 パスをそのセグメントに分割すると、次の要素が表示されます。  
  
 `Customer('1`  
  
 `3812')`  
  
 これは、要求の送信元の目的ではありません。  
  
 場合、 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> プロパティが false に設定されていると、 <xref:System.Net.HttpListener> は、要求を受け取るから変換された URI ではなく生の URI を使用して、 `http.sys` への入力として、 <xref:System.Net.HttpListenerRequest.Url%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Net.HttpListener" />
    <altmember cref="P:System.Net.HttpListenerRequest.Url" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HttpListenerElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Configuration.HttpListenerElement.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Net.Configuration.HttpListenerElement" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="protected override System.Configuration.ConfigurationPropertyCollection Properties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Configuration.ConfigurationPropertyCollection Properties" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Properties" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Configuration.ConfigurationPropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timeouts">
      <MemberSignature Language="C#" Value="public System.Net.Configuration.HttpListenerTimeoutsElement Timeouts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Configuration.HttpListenerTimeoutsElement Timeouts" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.Timeouts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("timeouts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Configuration.HttpListenerTimeoutsElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>既定値に使用するタイムアウト要素を取得、 <see cref="T:System.Net.HttpListener" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" /> を返します。  
  
 使用するタイムアウトの要素、 <see cref="T:System.Net.HttpListener" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="T:System.Net.HttpListenerTimeoutManager" />
        <altmember cref="T:System.Net.Configuration.HttpListenerTimeoutsElement" />
      </Docs>
    </Member>
    <Member MemberName="UnescapeRequestUrl">
      <MemberSignature Language="C#" Value="public bool UnescapeRequestUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UnescapeRequestUrl" />
      <MemberSignature Language="DocId" Value="P:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Configuration.ConfigurationProperty("unescapeRequestUrl", DefaultValue=Mono.Cecil.CustomAttributeArgument, IsRequired=false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>どうかを示す値を取得 <see cref="T:System.Net.HttpListener" /> 変換された URI ではなく生のエスケープ解除された URI を使用します。</summary>
        <value>どうかを示すブール値 <see cref="T:System.Net.HttpListener" /> は変換された URI ではなく生のエスケープ解除された URI を使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> プロパティは、場合を示します。 <xref:System.Net.HttpListener> 変換された URI でパーセント エンコード値を変換し、その他の正規化手順は実行ではなく生のエスケープ解除された URI を使用します。  
  
 ときに、 <xref:System.Net.HttpListener> インスタンスを介して要求を受け取ると、 `http.sys` により指定された URI 文字列のインスタンスを作成して、サービス `http.sys`, 、としてそれを公開し、 <xref:System.Net.HttpListenerRequest.Url%2A?displayProperty=fullName> プロパティです。  
  
 `http.sys` サービスは 2 つの要求 URI の文字列を公開します。  
  
-   生の URI  
  
-   変換された URI  
  
 生の URI は、 <xref:System.Uri?displayProperty=fullName> HTTP 要求の要求の行で提供されます。  
  
 `GET /path/`  
  
 `Host: www.contoso.com`  
  
 によって提供される生 URI `http.sys` 、上記で説明した要求は「パス\/」です。 これは、次の HTTP 動詞をネットワーク経由で送信された文字列を表します。  
  
 `http.sys` サービスは、HTTP 要求ラインで指定されている URI を使用して、要求で指定された情報から、変換された URI を作成しに元のサーバーを決定するホスト ヘッダーを転送する必要があります。 これは、一連の登録済みの URI プレフィックスの要求からの情報を比較することによって行います。 HTTP サーバー SDK のドキュメントとして変換されたこの URI を指す、 [HTTP\_COOKED\_URL](http://go.microsoft.com/fwlink/?LinkID=166108) 構造体。  
  
 登録されている URI プレフィックスを持つ要求を比較できるようにするには、するために、要求にいくつかの正規化を実行する必要があります。 変換された URI 上のサンプルでは、次になります。  
  
 `http://www.contoso.com/path/`  
  
 `http.sys` サービスの結合、 <xref:System.Uri.Host%2A?displayProperty=fullName> プロパティの値と、変換された URI を作成する要求の行の文字列です。 さらに、 `http.sys` と <xref:System.Uri?displayProperty=fullName> クラスも、次の操作します。  
  
-   エスケープを解除すべてパーセントでエンコードされた値。  
  
-   Utf\-16 文字表現に非 ASCII 文字をパーセントでエンコードに変換します。 Unicode 文字 \(Unicode エンコード %uxxxx 形式を使用して\) だけでなく、utf\-8、ANSI や DBCS 文字がサポートされていることに注意してください。  
  
-   パスの圧縮など、他の正規化の手順を実行します。  
  
 要求にはで値のパーセント エンコードに使用されるエンコーディングに関する情報が含まれていないためには、値のパーセント エンコード解析だけで正しいエンコーディングを判別ことはできません。  
  
 そのため `http.sys` プロセスを変更するための 2 つのレジストリ キーを提供します。  
  
|レジストリ キー|既定値|説明|  
|--------------|---------|--------|  
|EnableNonUTF8|1|0 の場合、 `http.sys` UTF エンコード Url のみを受け入れます。<br /><br /> 0 以外の場合 `http.sys` も要求で ANSI でエンコードされた、DBCS でエンコードされた Url を受け取ります。|  
|FavorUTF8|1|0 以外の場合 `http.sys` し、その変換が失敗するし、EnableNonUTF8 は 0 以外に utf\-8 として URL を先にデコードすると常に、Http.sys ANSI または DBCS とデコードを試みます。<br /><br /> 0 の場合 \(および EnableNonUTF8 は 0 以外\)、 `http.sys` その場合は、ANSI または DBCS とデコードを試行が失敗したを utf\-8 変換を試みます。|  
  
 <xref:System.Net.HttpListener> は、要求を受け取るから変換された URI を使用して `http.sys` への入力として、 <xref:System.Net.HttpListenerRequest.Url%2A> プロパティです。  
  
 Uri の文字と数字以外の文字をサポートする必要があります。 例としては、次の URI は、顧客の顧客情報の取得に使用される「1\/3812」の番号します。  
  
 `http://www.contoso.com/Customer('1%2F3812')/`  
  
 Uri \(2 f %\) のパーセント エンコード スラッシュに注意してください。 これは、ここではスラッシュ文字を表し、データはパス区切り記号ではないため、必要に応じて。  
  
 Uri のコンス トラクターに文字列を渡すことにつながるよう、次の URI。  
  
 `http://www.contoso.com/Customer('1/3812')/`  
  
 パスをそのセグメントに分割すると、次の要素が表示されます。  
  
 `Customer('1`  
  
 `3812')`  
  
 これは、要求の送信元の目的ではありません。  
  
 場合、 <xref:System.Net.Configuration.HttpListenerElement.UnescapeRequestUrl%2A> プロパティが false に設定されていると、 <xref:System.Net.HttpListener> は、要求を受け取るから変換された URI ではなく生の URI を使用して、 `http.sys` への入力として、 <xref:System.Net.HttpListenerRequest.Url%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.HttpListener" />
        <altmember cref="P:System.Net.HttpListenerRequest.Url" />
      </Docs>
    </Member>
  </Members>
</Type>