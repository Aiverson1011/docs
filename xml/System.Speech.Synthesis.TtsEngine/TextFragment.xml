<Type Name="TextFragment" FullName="System.Speech.Synthesis.TtsEngine.TextFragment">
  <TypeSignature Language="C#" Value="public class TextFragment" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit TextFragment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TextFragment" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>音声 synthsizer エンジンで使用するためのテキスト、音声の属性情報が含まれています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声プラットフォーム インフラストラクチャ SSML 入力し、構成要素の XML ベースの構造をアンパックし <xref:System.Speech.Synthesis.TtsEngine.TextFragment> オブジェクトです。  
  
 音声コンテンツは、使用、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 、および <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> のプロパティ、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンス。  
  
 音声の属性については、強調、ピッチ、および速度がから取得したなど、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返されるオブジェクト、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment><xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> プロパティです。  
  
   
  
## 例  
 次の例から継承するカスタムの音声合成の実装の一部である <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, の使用を使用して <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, 、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, 、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 、および <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>です。  
  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る <xref:System.Speech.Synthesis.TtsEngine.TextFragment> をインスタンス化し、新しい配列を作成 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> に渡されるインスタンス、 `Speak` メソッドを基になる合成エンジン。  
  
     尊重に特に注意が使用される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 元の <xref:System.Speech.Synthesis.TtsEngine.TextFragment> を作成するとき、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 、新しい <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンス。  
  
2.  場合、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> から列挙値がで検出、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> の各プロパティ <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスが <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 、実装では、  
  
    -   テキストを読み上げるに Britishisms に Americanism を変換します。  
  
    -   場合、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 実装のサポートを提供するインターフェイス、 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> イベントの種類、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> シンセサイザー進行状況バーが作成されるドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声認識のレンダリング エンジンが呼び出され、変更されたと <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFragment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TextFragment.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see langword="TextFragment" /> の新しいインスタンスを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のコンス トラクター <xref:System.Speech.Synthesis.TtsEngine.TextFragment>します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public System.Speech.Synthesis.TtsEngine.FragmentState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Synthesis.TtsEngine.FragmentState State" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Synthesis.TtsEngine.FragmentState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識属性情報を取得または設定、 <see langword="TextFragment" />です。</summary>
        <value>A <see cref="T:System.Speech.Synthesis.TtsEngine.FragmentState" /> インスタンスが返される、または音声の属性情報を設定するために使用する <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は `null` です。  
  
 インスタンスから prosody 情報を取得する <xref:System.Speech.Synthesis.TtsEngine.Prosody> によって返される、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Prosody%2A> のインスタンスのプロパティを <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A>です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public int TextLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または音声テキストの長さをフラグメントに設定します。</summary>
        <value>
          <see langword="int" /> 返されるか、再生するには、このフラグメントに関連付けられているテキスト文字列の文字の長さを設定するためことができます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は 0 です。  
  
   
  
## 例  
 次の例から継承するカスタムの音声合成の実装の一部である <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, の使用を使用して <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, 、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, 、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 、および <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>です。  
  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る <xref:System.Speech.Synthesis.TtsEngine.TextFragment> をインスタンス化し、新しい配列を作成 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> に渡されるインスタンス、 `Speak` メソッドを基になる合成エンジン。  
  
     尊重に特に注意が使用される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 元の <xref:System.Speech.Synthesis.TtsEngine.TextFragment> を作成するとき、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 、新しい <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンス。  
  
2.  場合、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> から列挙値がで検出、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> の各プロパティ <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスが <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 、実装では、  
  
    -   テキストを読み上げるに Britishisms に Americanism を変換します。  
  
    -   場合、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 実装のサポートを提供するインターフェイス、 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> イベントの種類、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> シンセサイザー進行状況バーが作成されるドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声認識のレンダリング エンジンが呼び出され、変更されたと <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextOffset">
      <MemberSignature Language="C#" Value="public int TextOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextOffset" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはフラグメント内のテキストの開始位置を設定します。</summary>
        <value>
          <see langword="int" /> 返されるか、再生するには、このフラグメントに関連付けられているテキスト文字列の一部の文字の開始位置を設定するために使用できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は 0 です。  
  
   
  
## 例  
 次の例から継承するカスタムの音声合成の実装の一部である <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, の使用を使用して <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, 、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, 、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 、および <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>です。  
  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る <xref:System.Speech.Synthesis.TtsEngine.TextFragment> をインスタンス化し、新しい配列を作成 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> に渡されるインスタンス、 `Speak` メソッドを基になる合成エンジン。  
  
     尊重に特に注意が使用される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 元の <xref:System.Speech.Synthesis.TtsEngine.TextFragment> を作成するとき、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 、新しい <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンス。  
  
2.  場合、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> から列挙値がで検出、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> の各プロパティ <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスが <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 、実装では、  
  
    -   テキストを読み上げるに Britishisms に Americanism を変換します。  
  
    -   場合、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 実装のサポートを提供するインターフェイス、 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> イベントの種類、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> シンセサイザー進行状況バーが作成されるドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声認識のレンダリング エンジンが呼び出され、変更されたと <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextToSpeak">
      <MemberSignature Language="C#" Value="public string TextToSpeak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextToSpeak" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定またはフラグメントの音声テキストを取得します。</summary>
        <value>A <see langword="System.String" /> 返されるか、オーディオの出力を生成する音声複合エンジンで使用する音声テキストを設定するために使用できます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの既定値は `System.String.Empty` です。  
  
 アプリケーションは完全の値を変更する自由 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A>します。  
  
 値をリセット <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> の値は変更されません <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A> と <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A>です。  
  
   
  
## 例  
 次の例から継承するカスタムの音声合成の実装の一部である <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, の使用を使用して <xref:System.Speech.Synthesis.TtsEngine.TextFragment>, 、<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, 、<xref:System.Speech.Synthesis.TtsEngine.FragmentState>, 、および <xref:System.Speech.Synthesis.TtsEngine.TtsEventId>です。  
  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る <xref:System.Speech.Synthesis.TtsEngine.TextFragment> をインスタンス化し、新しい配列を作成 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> に渡されるインスタンス、 `Speak` メソッドを基になる合成エンジン。  
  
     尊重に特に注意が使用される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextOffset%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextLength%2A> 元の <xref:System.Speech.Synthesis.TtsEngine.TextFragment> を作成するとき、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.TextToSpeak%2A> 、新しい <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンス。  
  
2.  場合、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> から列挙値がで検出、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される、 <xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> の各プロパティ <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスが <xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 、実装では、  
  
    -   テキストを読み上げるに Britishisms に Americanism を変換します。  
  
    -   場合、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> プロパティを <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 実装のサポートを提供するインターフェイス、 <xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> イベントの種類、 <xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> シンセサイザー進行状況バーが作成されるドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声認識のレンダリング エンジンが呼び出され、変更されたと <xref:System.Speech.Synthesis.TtsEngine.TextFragment> 配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
  
  _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>