<Type Name="TtsEngineSsml" FullName="System.Speech.Synthesis.TtsEngine.TtsEngineSsml">
  <TypeSignature Language="C#" Value="public abstract class TtsEngineSsml" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit TtsEngineSsml extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>すべてのテキストを音声合成エンジンによって実装される抽象基本クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 常に実装するアプリケーション必要があります抽象基本クラスから派生したクラス、カスタムのテキストを音声エンジンを構築するには、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>です。  
  
 正しく登録されている実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> として使用できます、 `Synthesizer``Voice` によって <xref:System.Speech.Synthesis> ベースのアプリケーションの名前空間。  
  
 オブジェクトから継承する <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> メンバーをオーバーライドする必要があります: <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.%23ctor%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>, 、<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> と <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>です。  
  
 最も重要なメンバー、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> を実装するクラスは、 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> メソッドです。  
  
 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A> 受信インフラストラクチャ テキスト パーサーによって呼び出されます。  
  
1.  参照、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> キューでも、オーディオの出力の書き込みなどのシステム サービスへのアクセスを提供するインターフェイスです。  
  
2.  配列 <xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスによって生成された音声合成のマークアップ言語 \(SSML\) 入力します。 表示されるテキストを音声入力として、だけでなく、SSML の解析で音声認識の要求された属性に関する情報を格納、 <xref:System.Speech.Synthesis.TtsEngine.FragmentState> 各着信に関連付けられたインスタンス <xref:System.Speech.Synthesis.TtsEngine.TextFragment> オブジェクトです。  
  
 音声シンセサイザー アプリケーションで、実装することでの指定した出力形式の要求を行うことが必要に応じてできます <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat%2A> 正しいオーディオ出力を提供するときに、プラットフォームによって呼び出されます。  
  
 実装する側の実装を発音、または辞書の外部の定義を管理のサポートも提供 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> と <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A>です。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TtsEngineSsml (string registryKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(string registryKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="registryKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="registryKey">完全な名前のレジストリ キーの音声トークンに関連付けられたの <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 実装します。 エンジンです。</param>
        <summary>新しいインスタンスを構築 <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> 適切な音声トークン レジストリ キーに基づきます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの呼び出しは生成通常 <xref:System.Speech.Synthesis> ベースのアプリケーションを選択すると、 `Synthesizer``Voice` のインスタンスによって使用される <xref:System.Speech.Synthesis.SpeechSynthesizer>します。  
  
 A <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Microsoft\\Speech\\Voices\\Tokens レジスタをする必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddLexicon">
      <MemberSignature Language="C#" Value="public abstract void AddLexicon (Uri uri, string mediaType, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddLexicon(class System.Uri uri, string mediaType, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="mediaType" Type="System.String" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">有効なインスタンス <see langword="System.Uri" /> 辞書情報の場所を示します。</param>
        <param name="mediaType">辞書のメディアの種類を含む文字列。 メディアの種類は、大文字小文字を区別します。</param>
        <param name="site">参照、 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> プラットフォーム インフラストラクチャと対話するためのインターフェイスです。</param>
        <summary>辞書を追加、 <see langword="Synthesizer" /><see langword="Voice" /> 現在によって実装される <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発音辞書は、単語または語句とその発音を適切な読み方アルファベットを使用して指定のコレクションです。  
  
 通常、このメソッドはプラットフォーム インフラストラクチャに応答して呼び出されます、 <xref:System.Speech.Synthesis> ベースのアプリケーションを呼び出す <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> を使用して、 `Synthesizer``Voice` 現在によって実装される <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> インスタンス。  
  
 値 `mediaType` SSML の仕様は、メディアの仕様について MIME を使用する、MIME 仕様では通常です。  
  
   
  
## 例  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon%2A> を使用して、 <xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> インターフェイスに渡されるリソースから辞書を読み込みます。 格納、 `System.IO.Stream` の辞書を `System.Collections.Generic.Dictionary` インスタンス、辞書の URI でインデックスが作成されます。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />. The implementation must also keep track and manage the lifetimes of all lexicons it adds.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetOutputFormat">
      <MemberSignature Language="C#" Value="public abstract IntPtr GetOutputFormat (System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, IntPtr targetWaveFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int GetOutputFormat(valuetype System.Speech.Synthesis.TtsEngine.SpeakOutputFormat speakOutputFormat, native int targetWaveFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="speakOutputFormat" Type="System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" />
        <Parameter Name="targetWaveFormat" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="speakOutputFormat">有効なメンバー、 <see cref="T:System.Speech.Synthesis.TtsEngine.SpeakOutputFormat" /> 要求されたオーディオ出力形式の種類を示す列挙値。</param>
        <param name="targetWaveFormat">ポインター、 <see langword="struct" /> によって要求されたオーディオ形式の種類の詳細設定を含む、 <c>speakOutputFormat</c> 引数。</param>
        <summary>最も適した特定の出力形式のサポートをシンセサイザー エンジンへの要求に指定された synthesize エンジン応答でサポートされているオーディオの出力を返します。</summary>
        <returns>返す有効な <see langword="IntPtr" /> インスタンスを参照する、 <see langword="struct" /> 出力形式に関する詳細な情報を格納します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 として使用する構造体 `targetWaveFormat` によって返されると、メソッドと互換性のある必要があります、 `WAVEFORMATEX` SAPI で使用可能な返される値を使用して割り当てる必要があると `CoTaskMemAlloc`です。  
  
 `struct` に相当する機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## 例  
 次のサンプルの実装では、許容範囲内にある場合、それらを使用して、それ以外の場合の既定値を使用して、選択した入力を検証します。  
  
```  
public IntPtr GetOutputFormat(SpeakOutputFormat format, IntPtr targetWaveFormat) {  
    WaveFormat waveFormat = new WaveFormat();  
    WaveFormat rq=new WaveFormat();  
    Marshal.PtrToStructure(targetWaveFormat,rq);  
  
    waveFormat.AvgBytesPerSec = AvgBytesPerSec Min < rq.AvgBytesPerSec && rq.AvgBytesPerSec < AvgBytesPerSecMax? rq.AvgBytesPerSec : 3200;  
    waveFormat.BitsPerSample = BitsPerSampleMin < rq.AvgBytesPerSec && rq.BitsPerSample < BitsPerSampleMax ? rq.AvgBytesPerSec : 3200; 16;  
    waveFormat.BlockAlign = 2;  
    waveFormat.Channels = 1;  
    waveFormat.FormatTag = 1;  
    waveFormat.SamplesPerSec = 16000;  
    waveFormat.Size = 0;  
  
    IntPtr wfx = Marshal.AllocCoTaskMem(Marshal.SizeOf(waveFormat));  
    Marshal.StructureToPtr(waveFormat, wfx, false);  
  
    //Console.WriteLine ("GetOutputFormat called");  
    return wfx;  
}  
internal struct WaveFormat {  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> should examine the requested output format as specified by <paramref name="targetWaveFormat" /> and return the closest format that it supports.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RemoveLexicon">
      <MemberSignature Language="C#" Value="public abstract void RemoveLexicon (Uri uri, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveLexicon(class System.Uri uri, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uri" Type="System.Uri" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="uri">有効なインスタンス <see langword="System.Uri" /> 辞書情報の場所を示します。</param>
        <param name="site">参照、 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インフラストラクチャ リソースへのアクセスを許可するように、プラットフォーム インフラストラクチャによって渡されるインターフェイスです。</param>
        <summary>によって現在読み込まれている辞書を削除、 <see langword="Synthesizer" /><see langword="Voice" /> 現在によって実装される <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 発音辞書は、単語または語句とその発音を適切な読み方アルファベットを使用して指定のコレクションです。  
  
 通常、このメソッドはへの応答で呼び出されます、 <xref:System.Speech.Synthesis> ベースのアプリケーションを呼び出す <xref:System.Speech.Synthesis.SpeechSynthesizer.RemoveLexicon%2A> を使用して、 `Synthesizer``Voice` 現在によって実装される <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml> インスタンス。  
  
   
  
## 例  
 実装 <xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon%2A> 辞書 URI を使用してインスタンスを照会 `System.Collections.Generic.Dictionary` の `System.IO.Stream`, ストリームを閉じ、および、辞書を参照する uri を削除します。  
  
```  
public static Dictionary<Uri, Stream> _aLexicons = new Dictionary<Uri, Stream>();  
  
 public void AddLexicon(Uri uri, string mediaType, ITtsEngineSite site) {  
    Stream stream = site.LoadResource(uri, mediaType);  
    _aLexicons.Add(uri, stream);  
}  
  
 public void RemoveLexicon(Uri uri, ITtsEngineSite site) {  
     Stream stream;  
     if (_aLexicons.TryGetValue(uri, out stream)) {  
         stream.Close();  
         _aLexicons.Remove(uri);  
     }  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>It is the responsibility of the implementation to be fully familiar with and be able to process the lexicon stored at <paramref name="uri" />. The implementation must also keep track and manage the lifetimes of all lexicons it removes.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Speak">
      <MemberSignature Language="C#" Value="public abstract void Speak (System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, IntPtr waveHeader, System.Speech.Synthesis.TtsEngine.ITtsEngineSite site);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Speak(class System.Speech.Synthesis.TtsEngine.TextFragment[] fragment, native int waveHeader, class System.Speech.Synthesis.TtsEngine.ITtsEngineSite site) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragment" Type="System.Speech.Synthesis.TtsEngine.TextFragment[]" />
        <Parameter Name="waveHeader" Type="System.IntPtr" />
        <Parameter Name="site" Type="System.Speech.Synthesis.TtsEngine.ITtsEngineSite" />
      </Parameters>
      <Docs>
        <param name="fragment">配列 <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> を音声に変換するテキストを含むインスタンス。</param>
        <param name="waveHeader">
          <see langword="IntPtr" /> オーディオ出力形式を含む構造体をポイントします。</param>
        <param name="site">参照、 <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> インフラストラクチャ リソースへのアクセスを許可するように、プラットフォーム インフラストラクチャによって渡されるインターフェイスです。</param>
        <summary>指定されたレンダリング <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> 指定した出力形式の配列。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 として使用する構造体 `waveHeader` によって返されると、メソッドと互換性のある、 `WAVEFORMATEX` SAPI で使用可能なです。  
  
 `struct` に相当する機能を提供する必要があります。  
  
```  
internal struct WaveFormat  
{  
    public Int16 FormatTag;  
    public Int16 Channels;  
    public int SamplesPerSec;  
    public int AvgBytesPerSec;  
    public Int16 BlockAlign;  
    public Int16 BitsPerSample;  
    public Int16 Size;  
}  
```  
  
   
  
## 例  
 次の例から継承するカスタムの音声合成の実装の一部である [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml>, の使用を使用して [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment>, 、[Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo>, 、[Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.FragmentState>, と [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEventId>  
  
 実装 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak%2A>  
  
1.  配列を受け取る [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment> をインスタンス化し、新しい配列を作成 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment> に渡されるインスタンス、 `Speak` メソッドを基になる合成エンジン。  
  
2.  場合、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction> から列挙値がで検出、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.FragmentState.Action%2A> プロパティを [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.FragmentState> によって返される、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment.State%2A> の各プロパティ [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment> インスタンスが [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEngineAction.Speak>, 、実装では、  
  
    -   テキストを読み上げるに Britishisms に Americanism を変換します。  
  
    -   場合、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite.EventInterest%2A> プロパティを [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.ITtsEngineSite> 実装のサポートを提供するインターフェイス、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TtsEventId.WordBoundary> イベントの種類、 [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.SpeechEventInfo> シンセサイザー進行状況バーが作成されるドライブにイベントを作成するインスタンスを使用します。  
  
3.  音声認識のレンダリング エンジンが呼び出され、変更されたと [Speak メソッド \(TextFragment\<xref:System.Speech.Synthesis.TtsEngine.TextFragment> 配列。  
  
```  
private const int WordBoundaryFlag = 1 << (int)TtsEventId.WordBoundary;  
private readonly char[] spaces = new char[] { ' ', '\t', '\r', '\n' };  
internal struct UsVsUk  
{  
  internal string UK;  
  internal string US;  
}  
  
override public void Speak (TextFragment [] frags, IntPtr wfx, ITtsEngineSite site)  
{  
  TextFragment [] newFrags=new TextFragment[frags.Length];  
  
  for (int i=0;i<frags.Length;i++){  
    newFrags[i].State=frags[i].State;  
    //truncate  
    newFrags[i].TextToSpeak = frags[i].TextToSpeak.Substring(frags[i].TextOffset,  
                               frags[i].TextLength);  
    newFrags[i].TextLength = newFrags[i].TextToSpeak.Length;  
    newFrags[i].TextOffset = 0;  
    if (newFrags[i].State.Action == TtsEngineAction.Speak) {  
      //Us to UK conversion  
      foreach (UsVsUk term in TransList) {  
      newFrags[i].TextToSpeak.Replace(term.US, term.UK);  
      }  
      //Generate progress meter events if supported  
      if ((site.EventInterest & WordBoundaryFlag) != 0) {  
      string[] subs = newFrags[i].TextToSpeak.Split(spaces);  
  
      foreach (string s in subs) {  
        int offset = newFrags[i].TextOffset;  
        SpeechEventInfo spEvent = new SpeechEventInfo((Int16)TtsEventId.WordBoundary,   
                (Int16)EventParameterType.Undefined,   
                 s.Length, new IntPtr(offset));  
        offset += s.Length;  
        if (s.Trim().Length > 0) {  
          SpeechEventInfo[] events = new SpeechEventInfo[1];  
          events[0] = spEvent;  
          site.AddEvents(events, 1);  
        }  
      }  
      }  
    }  
  }  
    _baseSynthesize.Speak(newFrags, wfx, site);  
  
}  
```  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Custom speech synthesizer implements using <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> work as filters or intermediaries between synthesizer applications constructed using the platform infrastructure through the members of the <see cref="N:System.Speech.Synthesis" /> namespace and underlying system speech synthesis engines.  
  
 A <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" /> implementation:  
  
1.  Traps or modify aspects of the incoming <see cref="T:System.Speech.Synthesis.TtsEngine.TextFragment" /> objects  
  
2.  Generates any necessary events using the site reference to a <see cref="T:System.Speech.Synthesis.TtsEngine.ITtsEngineSite" /> instance  
  
3.  Generates the actual synthesized speech.  
  
 Generation of speech is most typically done by calling <c>Speak</c> on one of the speech rendering engines provided by the operating system.  
  
 If one of the available speech rendering engines is not used, a object inheriting from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" /> must create its own speech rendering engine.  
  
 Access to the <c>Speak</c> method on obtained using the registry and reflection. .  
  
 When you inherit from <see cref="T:System.Speech.Synthesis.TtsEngine.TtsEngineSsml" />, you must override the following members: <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.#ctor(System.String)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.AddLexicon(System.Uri,System.String,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.RemoveLexicon(System.Uri,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />, <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.GetOutputFormat(System.Speech.Synthesis.TtsEngine.SpeakOutputFormat,System.IntPtr)" />, and <see cref="M:System.Speech.Synthesis.TtsEngine.TtsEngineSsml.Speak(System.Speech.Synthesis.TtsEngine.TextFragment[],System.IntPtr,System.Speech.Synthesis.TtsEngine.ITtsEngineSite)" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>