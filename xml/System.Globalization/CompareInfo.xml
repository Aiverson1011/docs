<Type Name="CompareInfo" FullName="System.Globalization.CompareInfo">
  <TypeSignature Language="C#" Value="public class CompareInfo : System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompareInfo extends System.Object implements class System.Runtime.Serialization.IDeserializationCallback" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.CompareInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>カルチャごとに異なる文字列比較を行うための一連のメソッドを実装します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 Conventions for comparing and sorting data vary from culture to culture. For example, sort order may be based on phonetics or on the visual representation of characters. In East Asian languages, characters are sorted by the stroke and radical of ideographs. Sorting also depends on the order languages and cultures use for the alphabet. For example, the Danish language has an "Æ" character that it sorts after "Z" in the alphabet. In addition, comparisons may be case\-sensitive or case\-insensitive, and casing rules may also differ by culture. The <xref:System.Globalization.CompareInfo> class is responsible for maintaining this culture\-sensitive string comparison data and for performing culture\-sensitive string operations.  
  
 Typically, you do not have to instantiate a <xref:System.Globalization.CompareInfo> object directly, because one is used implicitly by all non\-ordinal string comparison operations, including calls to the <xref:System.String.Compare%2A?displayProperty=fullName> method. However, if you do want to retrieve a <xref:System.Globalization.CompareInfo> object, you can do it in one of these ways:  
  
-   By retrieving the value of the <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> property for a particular culture.  
  
-   By calling the static <xref:System.Globalization.CompareInfo.GetCompareInfo%2A> method with a culture name. This allows for late\-bound access to a <xref:System.Globalization.CompareInfo> object.  
  
## Ignored search values  
 Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture\-sensitive comparison. Comparison methods such as <xref:System.Globalization.CompareInfo.IndexOf%2A> and <xref:System.Globalization.CompareInfo.LastIndexOf%2A> do not consider such characters when they perform a culture\-sensitive comparison. Ignorable characters include:  
  
-   <xref:System.String.Empty?displayProperty=fullName>. Culture\-sensitive comparison methods will always find an empty string at the beginning \(index zero\) of the string being searched.  
  
-   A character or string consisting of characters with code points that are not considered in the operation because of comparison options, In particular, the  <xref:System.Globalization.CompareOptions.IgnoreNonSpace?displayProperty=fullName> and <xref:System.Globalization.CompareOptions.IgnoreSymbols?displayProperty=fullName> options produce searches in which symbols and nonspacing combining characters are ignored.  
  
-   A string with code points that have no linguistic significance. For example, a soft hyphen \(U\+00AD\) is always ignored in a culture\-sensitive string comparison.  
  
## Security considerations  
 If a security decision depends on a string comparison or a case change, you should use the <xref:System.Globalization.CultureInfo.InvariantCulture%2A> property to ensure that the behavior is consistent, regardless of the culture settings of the operating system.  
  
> [!NOTE]
>  When possible, you should use string comparison methods that have a parameter of type <xref:System.Globalization.CompareOptions> to specify the kind of comparison expected. As a general rule, use linguistic options \(using the current culture\) for comparing strings displayed in the user interface and specify <xref:System.Globalization.CompareOptions.Ordinal> or <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> for security comparisons.  
  
   
  
## 例  
 The following example shows how the <xref:System.Globalization.CompareInfo> object associated with a <xref:System.Globalization.CultureInfo> object affects string comparison.  
  
 [!code-cpp[CompareInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <summary>2 つの文字列を比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、比較を使用して実行 <xref:System.Globalization.CompareOptions.None?displayProperty=fullName>します。 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例は、異なる 2 つの文字列の一部を比較 <xref:System.Globalization.CompareInfo> オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソート \(スペイン語\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えとスペイン語 \(スペイン\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 次の例では、<xref:System.Globalization.CompareInfo.Compare%2A> メソッドを呼び出す方法を示しています。  
  
 [!code-cpp[CompareInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String)" /> method does not consider such characters when it performs a culture-sensitive comparison. For instance, a culture-sensitive comparison of "animal" with "ani-mal" (using a soft hyphen, or U+00AD) indicates that the two strings are equivalent, as the following example shows.  
  
 [!code-vb[System.Globalization.CompareInfo.Compare#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.compare/vb/compare1.vb#1)]  
  
 To recognize ignorable characters in a string comparison, call the <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> method and supply a value of either <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, string string2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, string string2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="options">値を定義する方法 <c>string1</c> と <c>string2</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, 、および <see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>指定された 2 つの文字列を比較 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="string1" /> は <paramref name="string2" /> より小さい値です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="string1" /> が <paramref name="string2" /> より大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、異なる 2 つの文字列 <xref:System.Globalization.CompareOptions> 設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStrOpt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CPP/comparestrstropt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStrOpt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/CS/comparestrstropt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStrOpt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStrOpt/VB/comparestrstropt.vb#1)]  
  
 次の例では、通話、 <xref:System.Globalization.CompareInfo.Compare%2A> メソッドです。  
  
 [!code-cpp[CompareInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)" /> method does not consider such characters when it performs a culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス <c>string1</c> 比較を開始する位置を示す。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス <c>string2</c> 比較を開始する位置を示す。</param>
        <summary>文字列の末尾部分と別の文字列の末尾部分とを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも小さい <paramref name="string2" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも大きい <paramref name="string2" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例は、異なる 2 つの文字列の一部を比較 <xref:System.Globalization.CompareInfo> オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソート \(スペイン語\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えとスペイン語 \(スペイン\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CPP/comparestrintstrint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/CS/comparestrintstrint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrInt/VB/comparestrintstrint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" /> 文字数以上 <paramref name="string1" />します。  
  
 または  
  
 <paramref name="offset2" /> 文字数以上 <paramref name="string2" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, call the <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, string string2, int offset2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, string string2, int32 offset2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス <c>string1</c> 比較を開始する位置を示す。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス <c>string2</c> 比較を開始する位置を示す。</param>
        <param name="options">値を定義する方法 <c>string1</c> と <c>string2</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, 、および <see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>指定されたを使用して別の文字列の末尾部分文字列の末尾部分と比較 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも小さい <paramref name="string2" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも大きい <paramref name="string2" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、異なる 2 つの文字列の部分 <xref:System.Globalization.CompareOptions> 設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CPP/comparestrintstrintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntStrIntOpt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/CS/comparestrintstrintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntStrIntOpt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntStrIntOpt/VB/comparestrintstrintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="offset2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" /> 文字数以上 <paramref name="string1" />します。  
  
 または  
  
 <paramref name="offset2" /> 文字数以上 <paramref name="string2" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive comparison. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)" /> method does not consider such characters when performing a culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス <c>string1</c> 比較を開始する位置を示す。</param>
        <param name="length1">連続する文字数 <c>string1</c> を比較します。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス <c>string2</c> 比較を開始する位置を示す。</param>
        <param name="length2">連続する文字数 <c>string2</c> を比較します。</param>
        <summary>文字列のセクションと別の文字列のセクションとを比較します。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも小さい <paramref name="string2" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも大きい <paramref name="string2" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  型のパラメーターを持つ文字列比較メソッドを使用する必要があります可能であれば、 <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例は、異なる 2 つの文字列の一部を比較 <xref:System.Globalization.CompareInfo> オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソート \(スペイン語\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えとスペイン語 \(スペイン\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CPP/comparestrintintstrintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/CS/comparestrintintstrintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntInt/VB/comparestrintintstrintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="length1" /> または <paramref name="offset2" /> または <paramref name="length2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" /> 文字数以上 <paramref name="string1" />します。  
  
 または  
  
 <paramref name="offset2" /> 文字数以上 <paramref name="string2" />します。  
  
 または  
  
 <paramref name="length1" /> 文字の数よりも大きい <paramref name="offset1" /> の末尾に <paramref name="string1" />します。  
  
 または  
  
 <paramref name="length2" /> 文字の数よりも大きい <paramref name="offset2" /> の末尾に <paramref name="string2" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)" /> method does not consider these characters when it performs a linguistic or culture-sensitive comparison. To recognize ignorable characters in your comparison, call the <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method and supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public virtual int Compare (string string1, int offset1, int length1, string string2, int offset2, int length2, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Compare(string string1, int32 offset1, int32 length1, string string2, int32 offset2, int32 length2, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
        <Parameter Name="offset1" Type="System.Int32" />
        <Parameter Name="length1" Type="System.Int32" />
        <Parameter Name="string2" Type="System.String" />
        <Parameter Name="offset2" Type="System.Int32" />
        <Parameter Name="length2" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="string1">比較する最初の文字列。</param>
        <param name="offset1">内の文字の 0 から始まるインデックス <c>string1</c> 比較を開始する位置を示す。</param>
        <param name="length1">連続する文字数 <c>string1</c> を比較します。</param>
        <param name="string2">比較する 2 番目の文字列。</param>
        <param name="offset2">内の文字の 0 から始まるインデックス <c>string2</c> 比較を開始する位置を示す。</param>
        <param name="length2">連続する文字数 <c>string2</c> を比較します。</param>
        <param name="options">値を定義する方法 <c>string1</c> と <c>string2</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, 、および <see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>1 つの文字列のセクションを指定して別の文字列のセクションでの比較 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>2 つの比較対照値の構文上の関係を示す 32 ビット符号付き整数。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> ゼロ  
  
 </term>  
<description> 2 つの文字列は等価。  
  
 </description>  
</item>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも小さい <paramref name="string2" />します。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> 指定されたセクションの <paramref name="string1" /> の指定部分よりも大きい <paramref name="string2" />します。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、異なる 2 つの文字列の部分 <xref:System.Globalization.CompareOptions> 設定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CPP/comparestrintintstrintintopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/CS/comparestrintintstrintintopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrIntIntStrIntIntOpt/VB/comparestrintintstrintintopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset1" /> または <paramref name="length1" /> または <paramref name="offset2" /> または <paramref name="length2" /> が 0 未満です。  
  
 または  
  
 <paramref name="offset1" /> 文字数以上 <paramref name="string1" />します。  
  
 または  
  
 <paramref name="offset2" /> 文字数以上 <paramref name="string2" />します。  
  
 または  
  
 <paramref name="length1" /> 文字の数よりも大きい <paramref name="offset1" /> の末尾に <paramref name="string1" />します。  
  
 または  
  
 <paramref name="length2" /> 文字の数よりも大きい <paramref name="offset2" /> の末尾に <paramref name="string2" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters. The <see cref="M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method does not consider these characters when it performs a culture-sensitive comparison. To recognize ignorable characters in your comparison, supply a value of <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" /> for the <paramref name="options" /> parameter.</para>
        </block>
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在の <see cref="T:System.Globalization.CompareInfo" /> と比較するオブジェクト。</param>
        <summary>指定したオブジェクトが、現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 指定したオブジェクトが現在に等しい場合 <see cref="T:System.Globalization.CompareInfo" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つ <xref:System.Globalization.CompareInfo> オブジェクトが等しい場合は、 <xref:System.Globalization.CompareInfo.LCID%2A> と <xref:System.Globalization.CompareInfo.Name%2A> のプロパティは等価です。  
  
 このメソッドは <xref:System.Object.Equals%2A?displayProperty=fullName>です。  
  
 セキュリティに関する決定は、文字列の比較や大文字に依存する場合、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A> プロパティをオペレーティング システムのカルチャ設定に関係なく一貫した動作であることを確認します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <summary>新しい初期化 <see cref="T:System.Globalization.CompareInfo" /> 指定した識別子のカルチャに関連付けられているオブジェクト。</summary>
        <returns>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている <see cref="T:System.Reflection.Assembly" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、異なる 2 つの文字列の一部を比較 <xref:System.Globalization.CompareInfo> オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソート \(スペイン語\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えとスペイン語 \(スペイン\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <summary>新しい初期化 <see cref="T:System.Globalization.CompareInfo" /> 指定した名前、カルチャに関連付けられているオブジェクト。</summary>
        <returns>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている <see cref="T:System.Reflection.Assembly" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、異なる 2 つの文字列の一部を比較 <xref:System.Globalization.CompareInfo> オブジェクト。  
  
-   <xref:System.Globalization.CompareInfo> インターナショナル ソート \(スペイン語\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> 従来の並べ替えとスペイン語 \(スペイン\) のカルチャに関連付けられているオブジェクト  
  
-   <xref:System.Globalization.CompareInfo> オブジェクトに関連付けられている、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A>  
  
 [!code-cpp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CPP/comparestrstr.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/CS/comparestrstr.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.CompareStrStr\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.CompareStrStr/VB/comparestrstr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 無効なカルチャ名です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (int culture, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(int32 culture, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.Int32,System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="culture" Type="System.Int32" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="culture">カルチャ識別子を表す整数。</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> を含む文字列比較メソッドを使用します。</param>
        <summary>新しい初期化 <see cref="T:System.Globalization.CompareInfo" /> オブジェクトの指定したカルチャに関連付けられていると、指定した文字列比較メソッドを使用する <see cref="T:System.Reflection.Assembly" />です。</summary>
        <returns>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている <see cref="T:System.Reflection.Assembly" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 このアセンブリの入力を受け取らないメソッドのバージョンを使用するアプリケーションのことをお勧めします。  
  
 `assembly` パラメーターと同じ型でなければなりません <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="assembly" /> 無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetCompareInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.CompareInfo GetCompareInfo (string name, System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.CompareInfo GetCompareInfo(string name, class System.Reflection.Assembly assembly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetCompareInfo(System.String,System.Reflection.Assembly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CompareInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="name">カルチャ名を表す文字列。</param>
        <param name="assembly">
          <see cref="T:System.Reflection.Assembly" /> を含む文字列比較メソッドを使用します。</param>
        <summary>新しい初期化 <see cref="T:System.Globalization.CompareInfo" /> オブジェクトの指定したカルチャに関連付けられていると、指定した文字列比較メソッドを使用する <see cref="T:System.Reflection.Assembly" />です。</summary>
        <returns>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトが、指定した識別子と文字列比較メソッドを使用して、現在のカルチャに関連付けられている <see cref="T:System.Reflection.Assembly" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  このメソッドの動作は予測できません。 このアセンブリの入力を受け取らないメソッドのバージョンを使用することをお勧めします。  
  
 `assembly` パラメーターと同じ型でなければなりません <xref:System.Reflection.Module.Assembly%2A?displayProperty=fullName>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> が <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="assembly" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="name" /> 無効なカルチャ名です。  
  
 または  
  
 <paramref name="assembly" /> 無効な型です。</exception>
        <altmember cref="P:System.Reflection.Module.Assembly" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ関数として機能 <see cref="T:System.Globalization.CompareInfo" /> ハッシュ アルゴリズムやデータ構造でハッシュ テーブルのようにします。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> のハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.Object.GetHashCode%2A?displayProperty=fullName>です。  
  
 このメソッドは、<xref:System.Globalization.CompareInfo.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.CompareInfo.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public virtual int GetHashCode (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">ハッシュ コードが返される文字列。</param>
        <param name="options">文字列の比較方法を決定する値。</param>
        <summary>指定した比較オプションに基づいて、文字列のハッシュ コードを取得します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 動作 <xref:System.Globalization.CompareInfo.GetHashCode%2A> はその実装は、変更される、共通言語ランタイムの 1 つのバージョンとは 1 つの .NET Framework プラットフォームからに別に依存します。  
  
> [!IMPORTANT]
>  2 つの文字列オブジェクトが等しい場合、 <xref:System.Globalization.CompareInfo.GetHashCode%2A> メソッドと同じ値を返します。 ただし、一意の文字列値ごとに一意のハッシュ コード値はありません。 別の文字列には、同じハッシュ コードを返すことができます。  
>   
>  ハッシュ コード自体は、安定しているは保証されません。 同一の文字列のハッシュ コードは、.NET Framework のバージョンと .NET Framework の 1 つのバージョン \(32 ビットおよび 64 ビット\) などのプラットフォーム全体に異なります。 場合によっては、アプリケーション ドメインによっても異なることができます。  
>   
>  その結果、ハッシュが作成された、アプリケーション ドメインの外部コードを使用しないで、コレクション内のキー フィールドとして使用すべきことはありませんし、永続化することはありません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">文字列、 <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得します。</param>
        <summary>指定した文字列の並べ替えキーを取得します。</summary>
        <returns>
          <see cref="T:System.Globalization.SortKey" /> を指定した文字列の並べ替えキーを含むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の各文字には、スクリプト、アルファベット順、大文字、並べ替えのウエイトと発音の区別のいくつかのカテゴリが指定します。 並べ替えキーとは、特定の文字列をこれらの規則のリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。<xref:System.Globalization.CompareInfo.GetSortKey%2A> メソッドは、Windows API メソッドに相当する `LCMapString` LCMAP\_SORTKEY フラグを設定しています。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortKey" />
      </Docs>
    </Member>
    <Member MemberName="GetSortKey">
      <MemberSignature Language="C#" Value="public virtual System.Globalization.SortKey GetSortKey (string source, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.SortKey GetSortKey(string source, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.SortKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">文字列、 <see cref="T:System.Globalization.SortKey" /> オブジェクトを取得します。</param>
        <param name="options">並べ替えキーの計算方法を定義する次の列挙値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />, 、および <see cref="F:System.Globalization.CompareOptions.StringSort" />です。</param>
        <summary>取得、 <see cref="T:System.Globalization.SortKey" /> オブジェクトを指定して、指定した文字列 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>
          <see cref="T:System.Globalization.SortKey" /> を指定した文字列の並べ替えキーを含むオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 文字列内の各文字には、スクリプト、アルファベット順、大文字、並べ替えのウエイトと発音の区別のいくつかのカテゴリが指定します。 並べ替えキーとは、特定の文字列をこれらの規則のリポジトリです。 たとえば、並べ替えキーにはアルファベット順ウェイトの文字列、大文字小文字のウェイトの文字列などが特定の順序で格納されています。<xref:System.Globalization.CompareInfo.GetSortKey%2A> メソッドは、Windows API メソッドに相当する `LCMapString` LCMAP\_SORTKEY フラグを設定しています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <altmember cref="T:System.Globalization.SortKey" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内で最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />以外の場合、\-1 です。 0 \(ゼロ\) を返します <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、文字列の末尾に、文字列の先頭からのソース文字列を検索します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 場合 `value` Unicode 文字でような合字の「Æ」\(U \+ 00 C 6\)、その見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索を表します \(u\+0041、u\+0045\)、カルチャによって異なります。 序数に基づく \(カルチャに依存しない\) 検索を実行する型のパラメーターがあります文字と見なされる別の文字と等価の Unicode コード ポイントが同じ場合は、必要があります、オーバー ロードを呼び出すことだけ <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> 値。 異なり <xref:System.Globalization.CompareInfo.IndexOf%2A?displayProperty=fullName>, のオーバー ロードにより、カルチャに依存した比較を実行する、 <xref:System.String.IndexOf%2A?displayProperty=fullName> メソッドを検索する文字は、序数に基づく比較を実行し、文字列を検索するオーバー ロードは、カルチャに依存した比較を実行します。  
  
> [!NOTE]
>  型のパラメーターを持つ文字列比較メソッドを使用する必要があります可能であれば、 <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" /> method is used to find the soft hyphen (U+00AD) in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.String.IndexOf(System.Char)" />
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />以外の場合、\-1 です。 0 \(ゼロ\) を返します <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列は、前方の文字列の先頭から始まると、文字列の末尾で終了が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索 Unicode 値を比較、型のパラメーターを持つオーバー ロードのいずれかを使用する必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. In each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <paramref name="value" />. When searching for a soft hyphen only, the method returns 0 (zero) to indicate that it has found a match at the beginning of the string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="options">文字列の比較方法を定義する値。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定して全体のソース文字列内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかると、内部 <paramref name="source" />, 、指定した比較オプションを使用してそれ以外の場合、\-1 です。 0 \(ゼロ\) を返します <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列は、前方の文字列の先頭から始まると、文字列の末尾で終了が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.IndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  型のパラメーターを持つ文字列比較メソッドを使用する必要があります可能であれば、 <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> method is used to search for a soft hyphen (U+00AD) in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns 0 (zero) to indicate that it has found a match at the beginning of the string. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、範囲内で見つかった <paramref name="source" /> からまで <paramref name="startIndex" /> の末尾に <paramref name="source" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` 、その文字列の末尾で終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索が、文字と見なされる別の一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。 オーバー ロード <xref:System.String.IndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32)" /> method is used to find a soft hyphen (U+00AD) after an "n" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns 1 to indicate that it has found a match at the position of the "n".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、指定して全体のソース文字列内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかると、内部 <paramref name="source" />, 、指定した比較オプションを使用してそれ以外の場合、\-1 です。 0 \(ゼロ\) を返します <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列は、前方の文字列の先頭から始まると、文字列の末尾で終了が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> method always returns 0 (zero) to indicate that the match is found at the beginning of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. Because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから文字列の末尾までの範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、範囲内で見つかった <paramref name="source" /> からまで <paramref name="startIndex" /> の末尾に <paramref name="source" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` 、その文字列の末尾で終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索ユニコード値と比較して、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable13.cs#14)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable13.vb#14)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定したインデックスから指定して、文字列の末尾に拡張するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> からまで <paramref name="startIndex" /> の末尾に <paramref name="source" />, 、指定した比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` 、その文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.IndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, the character position at which the search first began. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the soft hyphen (U+00AD) after an "n" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns 1 to indicate that it has found a match at the position of the "n". An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その文字が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> から始まり <paramref name="startIndex" /> によって指定される要素の数を含んでいる <paramref name="count" />以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` で終わる `startIndex` \+ `count` \- 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索が、文字と見なされる別の一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。 オーバー ロード <xref:System.String.IndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search first began. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)" /> method is used to find a soft hyphen (U+00AD) after an "n" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns 1 to indicate that it has found a match at the position of the "n".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、指定したインデックスから指定して、文字列の末尾に拡張するソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> からまで <paramref name="startIndex" /> の末尾に <paramref name="source" />, 、指定した比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` 、その文字列の末尾で終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting with the third character position in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m". The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスから始まり、指定した数の要素を含んでいる範囲内で、その部分文字列が最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> から始まり <paramref name="startIndex" /> によって指定される要素の数を含んでいる <paramref name="count" />以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` で終わる `startIndex` \+ `count` \- 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索 Unicode 値と比較して、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定したインデックス位置の始まりを指定して要素の指定した数を含んでいるソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> から始まり <paramref name="startIndex" /> によって指定される要素の数を含んでいる <paramref name="count" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` で終わる `startIndex` \+ `count` \- 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.IndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search first began. In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the soft hyphen (U+00AD) after an "n" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns 1 to indicate that it has found a match at the position of the "n". An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象の範囲内にある要素の数。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、指定したインデックス位置の始まりを指定して要素の指定した数を含んでいるソース文字列の範囲内で最初に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最初に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> から始まり <paramref name="startIndex" /> によって指定される要素の数を含んでいる <paramref name="count" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送を開始位置として、元の文字列を検索 `startIndex` で終わる `startIndex` \+ `count` \- 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" starting in the third through sixth character positions in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. When it performs an ordinal comparison, however, it finds the substring only in the first string. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison. The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  
  
 [!code-csharp[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/ignorable15.cs#16)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/ignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">先頭と比較する文字列 <c>source</c>します。</param>
        <summary>指定した検索対象文字列が指定したプリフィックスで始まるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 場合の長さ <paramref name="prefix" /> の長さ以下 <paramref name="source" /> と <paramref name="source" /> で始まる <paramref name="prefix" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空の部分文字列で終わりますしたすべての文字列 \(""\) です。そのため場合、 `prefix` 空の文字列は、このメソッドが戻る `true`します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例は、文字列がプレフィックスまたはサフィックスを別の文字列であるかどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsPrefix">
      <MemberSignature Language="C#" Value="public virtual bool IsPrefix (string source, string prefix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsPrefix(string source, string prefix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="prefix">先頭と比較する文字列 <c>source</c>します。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>prefix</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定されたソース文字列を指定して、指定したプレフィックスで始まるかどうかを判断 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>
          <see langword="true" /> 場合の長さ <paramref name="prefix" /> の長さ以下 <paramref name="source" /> と <paramref name="source" /> で始まる <paramref name="prefix" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空の部分文字列で終わりますしたすべての文字列 \(""\) です。そのため場合、 `prefix` 空の文字列は、このメソッドが戻る `true`します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、文字列は、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断 <xref:System.Globalization.CompareOptions>します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="prefix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">Unicode 文字。</param>
        <summary>指定した Unicode 文字の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="ch" /> パラメーターが並べ替え可能な以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `ch` パラメーターの内部で定義されている Unicode 文字の場合は、並べ替えが <xref:System.Globalization.CompareInfo> クラスの並べ替えテーブルがあり、プライベートで使用するもの対になっていない上限または下限のサロゲート文字。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSortable">
      <MemberSignature Language="C#" Value="public static bool IsSortable (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSortable(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSortable(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">0 個以上の Unicode 文字から構成される文字列。</param>
        <summary>指定した Unicode 文字列の並べ替えが可能かどうかを示します。</summary>
        <returns>
          <see langword="true" /> 場合、 <paramref name="str" /> パラメーターが空の文字列 \(""\) ですべての Unicode 文字 <paramref name="str" /> は並べ替え可能な;それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各 Unicode 文字で、 `str` パラメーターが 1 つによって表される、または複数の utf\-16 でエンコードされた <xref:System.Char> オブジェクトです。`str` パラメーターの各 Unicode 文字が、内部で定義されている場合は、並べ替えが <xref:System.Globalization.CompareInfo> クラスの並べ替えテーブルがあり、プライベートで使用するもの対になっていない高いまたは低いサロゲート文字。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">末尾と比較する文字列 <c>source</c>します。</param>
        <summary>指定した検索対象文字列が指定したサフィックスで終わるかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> 場合の長さ <paramref name="suffix" /> の長さ以下 <paramref name="source" /> と <paramref name="source" /> で終わる <paramref name="suffix" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空の部分文字列で終わりますしたすべての文字列 \(""\) です。そのため場合、 `suffix` 空の文字列は、このメソッドが戻る `true`します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例は、文字列がプレフィックスまたはサフィックスを別の文字列であるかどうかを判断します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CPP/isprefixsuffix.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/CS/isprefixsuffix.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffix\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffix/VB/isprefixsuffix.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="IsSuffix">
      <MemberSignature Language="C#" Value="public virtual bool IsSuffix (string source, string suffix, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSuffix(string source, string suffix, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="suffix" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索範囲とする文字列。</param>
        <param name="suffix">末尾と比較する文字列 <c>source</c>します。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>suffix</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" /> 自体、または、次の値の 1 つ以上のビットごとの組み合わせで使用される: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定されたソース文字列が指定して、指定したサフィックスで終わるかどうかを判断 <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>
          <see langword="true" /> 場合の長さ <paramref name="suffix" /> の長さ以下 <paramref name="source" /> と <paramref name="source" /> で終わる <paramref name="suffix" />。 そうしないと、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 空の部分文字列で終わりますしたすべての文字列 \(""\) です。そのため場合、 `suffix` 空の文字列は、このメソッドが戻る `true`します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、文字列は、プレフィックスまたはサフィックスを別の文字列を使用するかどうかを判断 <xref:System.Globalization.CompareOptions>します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CPP/isprefixsuffixopt.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/CS/isprefixsuffixopt.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IsPrefixSuffixOpt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IsPrefixSuffixOpt/VB/isprefixsuffixopt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="suffix" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <altmember cref="M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <summary>指定した文字を検索し、検索対象文字列全体内でその文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />しない場合は、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 逆方向文字列の末尾から開始と終了、文字列の先頭に、ソース文字列が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索が、文字と見なされる別の一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> method always returns the last index position in <paramref name="source" /> to indicate that the match is found at the end of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)" /> method is used to find the soft hyphen (U+00AD) in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns the last index position in the string to indicate that it has found a match at the end of the string.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable2.cs#3)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable2.vb#3)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列全体内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />しない場合は、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 逆方向文字列の末尾から開始と終了、文字列の先頭に、ソース文字列が検索されます。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索 Unicode 値と比較して、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> method always returns <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, which represents the last index position in <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. In each case, because the soft hyphen is an ignorable character, the result is the same as if the soft hyphen had not been included in <paramref name="value" />. When searching for a soft hyphen only, the method returns 6 and 5. These values correspond to the index of the last character in the two strings.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable1.cs#2)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable1.vb#2)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、指定して全体のソース文字列内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 逆方向文字列の末尾から開始と終了、文字列の先頭に、ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> method always returns the last character position in <paramref name="source" /> to indicate that the match is found at the end of <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)" /> method is used to search for a soft hyphen (U+00AD) in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns the last index position in the source string. In contrast, an ordinal search successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable3.cs#4)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable3.vb#4)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した文字を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> の先頭からまで <paramref name="source" /> に <paramref name="startIndex" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` と文字列の先頭に終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索が、文字と見なされる別の一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32)" /> method is used to find a soft hyphen (U+00AD) that precedes the final "m" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns the index position of the "m", which is the value of <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable4.cs#5)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable4.vb#5)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、指定して全体のソース文字列内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、見つかった内 <paramref name="source" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 逆方向文字列の末尾から開始と終了、文字列の先頭に、ソース文字列が検索されます。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列内の部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/CS/indexof.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOf\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> method always returns <paramref name="source" />.<see cref="P:System.String.Length" /> – 1, which represents the last index position in <paramref name="source" />. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)" /> method is used to find three substrings (a soft hyphen (U+00AD), a soft hyphen followed by "n", and a soft hyphen followed by "m") in two strings. Only one of the strings contains a soft hyphen. Because the soft hyphen is an ignorable character, a culture-sensitive search returns the same value that it would return if the soft hyphen were not included in the search string. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable5.cs#6)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable5.vb#6)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の先頭から指定したインデックスまでの範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> の先頭からまで <paramref name="source" /> に <paramref name="startIndex" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` と文字列の先頭に終了します。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索 Unicode 値と比較して、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32)" /> method is used to find a substring that includes a soft hyphen (U+00AD) and that precedes or includes the final "m" in a string. Because the soft hyphen in the search string is ignored, calling the method to find a substring that consists of the soft hyphen and "m" returns the position of the "m" in the string, whereas calling it to find a substring that consists of the soft hyphen and "n" returns the position of the "n". When the search string contains only the soft hyphen, the method returns the index of the "m", which represents the value of <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable6.cs#7)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable6.vb#7)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、文字列の先頭から指定して、指定されたインデックスを拡張するソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> の先頭からまで <paramref name="source" /> に <paramref name="startIndex" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)" /> method is used to find a soft hyphen (U+00AD) that precedes the final "m" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns the index position of the "m". An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable7.cs#8)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable7.vb#8)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <summary>指定した文字を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その文字が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> で指定された要素の数を格納している <paramref name="count" /> 位置で終了する <paramref name="startIndex" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` で終わる `startIndex` \- `count` \+ 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索が、文字と見なされる別の一文字に相当する Unicode 値が同じ場合にのみ、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)" /> method is used to find a soft hyphen (U+00AD) that precedes the final "m" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, the method returns the index position of the "m", which is the value of <paramref name="startIndex" />.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable8.cs#9)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable8.vb#9)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">逆方向検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、文字列の先頭から指定して、指定されたインデックスを拡張するソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> の先頭からまで <paramref name="source" /> に <paramref name="startIndex" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` と文字列の先頭に終了します。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。 なお <xref:System.Globalization.CompareInfo.IndexOf%2A> と <xref:System.Globalization.CompareInfo.LastIndexOf%2A> 同じでも、文字列の異なる部分で検索を実行 `startIndex` パラメーター。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CPP/indexofint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/CS/indexofint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfInt/VB/indexofint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> は <paramref name="source" /> の正しいインデックスの範囲外です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m", starting with the final "m" in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m". The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable14.cs#15)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable14.vb#15)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <summary>指定した部分文字列を検索し、検索対象文字列の指定したインデックスで終了し、指定した数の要素を含んでいる範囲内で、その部分文字列が最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> で指定された要素の数を格納している <paramref name="count" /> 位置で終了する <paramref name="startIndex" />しない場合は、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` で終わる `startIndex` \- `count` \+ 1 です。  
  
 このオーバー ロードでは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 実行するには、序数 \(カルチャに依存しない\) 検索 Unicode 値と比較して、型のパラメーターを持つオーバー ロードのいずれかを呼び出す必要があります <xref:System.Globalization.CompareOptions> を使用して、 <xref:System.Globalization.CompareOptions.Ordinal> 値。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in the three characters that precede the final "m" of two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m".  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable16.cs#17)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable16.vb#17)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, char value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, char value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.Char" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した文字を検索し、要素と指定して、指定したインデックス位置の指定された行数を含むソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> によって指定される要素の数を表す <paramref name="count" /> 位置で終了する <paramref name="startIndex" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` で終わる `startIndex` \- `count` \+ 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 文字が文字を表す Unicode 値の場合は、合字の「Æ」\(と\) などに見極める必要があります"AE"など、正しい順序では、そのコンポーネントの検索 \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは序数 \(カルチャに依存しない\) 検索を実行します。 文字はユニコード値が同じ場合にのみ、別の文字と等価と見なされます。 オーバー ロード <xref:System.String.LastIndexOf%2A?displayProperty=fullName> 文字を検索してカルチャに依存した検索を実行文字列を検索するもの、序数に基づく検索を実行します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search, if <paramref name="value" /> is an ignorable character, the result is equivalent to searching with that character removed. In this case, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins. In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method is used to find a soft hyphen (U+00AD) that precedes the final "m" in two strings. Only one of the strings contains a soft hyphen. In both cases, because the soft hyphen is an ignorable character, a culture-sensitive search returns the index position of the "m", which is the value of <paramref name="startIndex" />. An ordinal search, however, successfully finds the soft hyphen in one string and reports that it is absent from the second string.  
  
 [!code-csharp[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/cs/lastignorable11.cs#12)]
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable11.vb#12)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public virtual int LastIndexOf (string source, string value, int startIndex, int count, System.Globalization.CompareOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(string source, string value, int32 startIndex, int32 count, valuetype System.Globalization.CompareOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="options" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="source">検索対象の文字列。</param>
        <param name="value">内で検索する文字列 <c>source</c>します。</param>
        <param name="startIndex">後方検索の開始位置を示す 0 から始まるインデックス。</param>
        <param name="count">検索対象のセクション内にある要素の数。</param>
        <param name="options">値を定義する方法 <c>source</c> と <c>value</c> と比較する必要があります。<c>options</c> 列挙値は、 <see cref="F:System.Globalization.CompareOptions.Ordinal" />, 、または、次の値の 1 つ以上のビットごとの組み合わせ: <see cref="F:System.Globalization.CompareOptions.IgnoreCase" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreWidth" />, 、および <see cref="F:System.Globalization.CompareOptions.IgnoreKanaType" />です。</param>
        <summary>指定した部分文字列を検索し、要素と指定して、指定したインデックス位置の指定された行数を含むソース文字列の範囲内で最後に見つかった位置の 0 から始まるインデックスを返します <see cref="T:System.Globalization.CompareOptions" /> 値。</summary>
        <returns>最後に見つかった位置の 0 から始まるインデックス <paramref name="value" />, 場合は、セクション内で見つかった <paramref name="source" /> によって指定される要素の数を表す <paramref name="count" /> 位置で終了する <paramref name="startIndex" />, 、; 指定された比較オプションを使用してそれ以外の場合、\-1 です。 返します。 <paramref name="startIndex" /> 場合 <paramref name="value" /> に無視できる文字は、です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ソース文字列が検索された旧バージョンとを開始位置として `startIndex` で終わる `startIndex` \- `count` \+ 1 です。  
  
 <xref:System.Globalization.CompareOptions.StringSort?displayProperty=fullName> 値がこのメソッドは無効です。  
  
 場合 `options` を含まない、 <xref:System.Globalization.CompareOptions.Ordinal> 値、このオーバー ロードは、カルチャに依存した検索を実行します。 構成済みなどの文字「Æ」合字 \(U \+ 00 C 6\) を表す Unicode 値が等価と見なさ"AE"など、正しい順序での文字の構成要素の出現した \(u\+0041、u\+0045\)、カルチャによって異なります。 場合 `options` を含む、 <xref:System.Globalization.CompareOptions.Ordinal> 値では、このオーバー ロード、序数 \(カルチャに依存しない\) 検索を実行、Unicode 値を比較します。  
  
> [!NOTE]
>  可能であれば、メソッドを呼び出し、文字列比較の種類のパラメーターを持つ <xref:System.Globalization.CompareOptions> 期待どおりの比較の種類を指定します。 一般的な規則として、ユーザー インターフェイスに表示される文字列を比較するため \(現在のカルチャを使用して\) 言語のオプションを使用し、指定 <xref:System.Globalization.CompareOptions.Ordinal?displayProperty=fullName> または <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase?displayProperty=fullName> セキュリティ比較します。  
  
   
  
## 例  
 次の例では、最初と最後に出現する文字または文字列の部分に含まれる部分文字列のインデックスを決定します。  
  
 [!code-cpp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CPP/indexofintint.cpp#1)]
 [!code-csharp[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/CS/indexofintint.cs#1)]
 [!code-vb[System.Globalization.CompareInfo.IndexOfIntInt\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.CompareInfo.IndexOfIntInt/VB/indexofintint.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="source" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="value" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> が <paramref name="source" /> の有効なインデックスの範囲外です。  
  
 または  
  
 <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="startIndex" /> <paramref name="count" /> で有効なセクションを指定しない <paramref name="source" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="options" /> 無効なを含む <see cref="T:System.Globalization.CompareOptions" /> 値。</exception>
        <block subset="none" type="usage">
          <para>Character sets include ignorable characters, which are characters that are not considered when performing a linguistic or culture-sensitive sort. In a culture-sensitive search (that is, if <paramref name="options" /> is not <see cref="F:System.Globalization.CompareOptions.Ordinal" /> or <see cref="F:System.Globalization.CompareOptions.OrdinalIgnoreCase" />), if <paramref name="value" /> contains an ignorable character, the result is equivalent to searching with that character removed. If <paramref name="value" /> consists only of one or more ignorable characters, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method always returns <paramref name="startIndex" />, which is the character position at which the search begins.  
  
 In the following example, the <see cref="M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)" /> method is used to find the position of a soft hyphen (U+00AD) followed by an "m" in all but the first character position before the final "m" in two strings. Only one of the strings contains the required substring. In both cases, because the soft hyphen is an ignorable character, the method returns the index of "m" in the string when it performs a culture-sensitive comparison. When it performs an ordinal comparison, however, it finds the substring only in the first string. Note that in the case of the first string, which includes the soft hyphen followed by an "m", the method fails to return the index of the soft hyphen but instead returns the index of the "m" when it performs a culture-sensitive comparison. The method returns the index of the soft hyphen in the first string only when it performs an ordinal comparison.  
  
 [!code-vb[System.Globalization.CompareInfo.LastIndexOf#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.compareinfo.lastindexof/vb/lastignorable15.vb#16)]</para>
        </block>
        <altmember cref="M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)" />
        <altmember cref="T:System.Globalization.CompareOptions" />
      </Docs>
    </Member>
    <Member MemberName="LCID">
      <MemberSignature Language="C#" Value="public int LCID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LCID" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.LCID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の適切な形式のカルチャ識別子を取得 <see cref="T:System.Globalization.CompareInfo" />します。</summary>
        <value>現在の適切な形式のカルチャ識別子 <see cref="T:System.Globalization.CompareInfo" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例は、 <xref:System.Globalization.CompareInfo.LCID%2A> プロパティです。  
  
 [!code-cpp[CompareInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>これで、並べ替え操作を使用するカルチャの名前を取得 <see cref="T:System.Globalization.CompareInfo" /> オブジェクトです。</summary>
        <value>カルチャの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.CompareInfo.Name%2A> と <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> プロパティが異なる値を持つことができます。 たとえば、 <xref:System.Globalization.CompareInfo.LCID%2A> 0x10407 の 16 進数のプロパティの値が、ドイツ語の電話帳に表示される可能性があります、名前をソートする代替の並べ替え順序カルチャを識別します。<xref:System.Globalization.CompareInfo.Name%2A> 一方、プロパティが"de\-de\_phoneb"の値を持つ、 <xref:System.Globalization.CultureInfo.Name?displayProperty=fullName> "DE\-DE"の値を持つ関連するドイツ語 \(ドイツ\) カルチャのプロパティです。  
  
   
  
## 例  
 次の例では、FR\-FR と日本語 \(日本\) のカルチャを使用して次の 3 つの文字列を比較します。<xref:System.Globalization.CultureInfo.Name%2A> プロパティを使用して、各カルチャの名前を表示します。  
  
 [!code-cpp[CompareInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompareInfo/cpp/CompareInfo.cpp#1)]
 [!code-csharp[CompareInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompareInfo/CS/CompareInfo.cs#1)]
 [!code-vb[CompareInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompareInfo/VB/CompareInfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">コールバックを開始したオブジェクト。</param>
        <summary>オブジェクト グラフ全体が逆シリアル化された時点で実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、使用できる明示的なインターフェイス メンバーの実装される場合にのみ、現在 <xref:System.Globalization.CompareInfo> オブジェクトにキャスト、 <xref:System.Runtime.Serialization.IDeserializationCallback> インターフェイスです。 詳細については、<xref:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization%2A> メソッドを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.CompareInfo.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、 <xref:System.Object.ToString%2A?displayProperty=fullName> メソッドです。 クラス名とインスタンスの値で構成される文字列を返す <xref:System.Globalization.CompareInfo.Name%2A> プロパティには、ハイフンで区切られました。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>Staring with the .NET Framework 4, the <see cref="M:System.Globalization.CompareInfo.ToString" /> method returns the class name followed by a space, a hyphen, a space, and the value of the <see cref="P:System.Globalization.CompareInfo.Name" /> property. For example, for a <see cref="T:System.Globalization.CompareInfo" /> object that represents the en-US culture, the <see cref="M:System.Globalization.CompareInfo.ToString" /> method returns "CompareInfo - en-US". In previous versions of the .NET Framework, it returns the class name followed by a space, a hyphen, a space, and the value of the <see cref="P:System.Globalization.CompareInfo.LCID" /> property. For example, for a <see cref="T:System.Globalization.CompareInfo" /> object that represents the en-US culture, the <see cref="M:System.Globalization.CompareInfo.ToString" /> method returns "CompareInfo - 1033".</para>
        </block>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
    <Member MemberName="Version">
      <MemberSignature Language="C#" Value="public System.Globalization.SortVersion Version { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.SortVersion Version" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.CompareInfo.Version" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.SortVersion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字列の比較および並べ替えに使用される Unicode のバージョンに関する情報を取得します。</summary>
        <value>文字列を比較および並べ替えるために使用される Unicode のバージョンに関する情報を含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 個々 の文字の重みおよびそのための特定の文字列を比較や、順序付け方法は、.NET Framework の特定のバージョンを実装する Unicode 仕様のバージョンによって異なります。[!INCLUDE[net_v45](~/includes/net-v45-md.md)]、これも、ホスト オペレーティング システムに依存、次の表に示すようです。 サポートされている Unicode バージョンの一覧は、文字の比較と並べ替えに対してのみ適用されます。カテゴリ別での Unicode 文字の分類には適用されません。  
  
|.NET Framework のバージョン|オペレーティング システム|Unicode バージョン|  
|---------------------------|-------------------|-------------------|  
|[!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)]|すべてのオペレーティング システム|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降のバージョン|[!INCLUDE[win7](~/includes/win7-md.md)]|Unicode 5.0|  
|[!INCLUDE[net_v45](~/includes/net-v45-md.md)]以降のバージョン|[!INCLUDE[win8](~/includes/win8-md.md)]以降の Windows オペレーティング システム バージョン|Unicode 6.3|  
  
 <xref:System.Globalization.SortVersion>によって返されるオブジェクトの<xref:System.Globalization.CompareInfo.Version%2A>プロパティが文字列の比較に使用される正確な Unicode バージョンを識別します。 2 つを比較するときにのみ便利です<xref:System.Globalization.SortVersion>同じ Unicode バージョンとのカルチャが使用文字列を比較するかどうかを決定するオブジェクト。 例および詳細については、次を参照してください。、<xref:System.Globalization.SortVersion>リファレンス ページ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.SortVersion" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsSortable">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した Unicode 文字または文字列の並べ替えが可能かどうかを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCompareInfo">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>新しい <see cref="T:System.Globalization.CompareInfo" /> オブジェクトを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetHashCode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このいずれかのハッシュ コードを返します <see cref="T:System.Globalization.CompareInfo" /> インスタンスまたは特定の文字列です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetSortKey">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>取得、 <see cref="T:System.Globalization.SortKey" /> 文字列オブジェクト。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsPrefix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のプレフィックスで始まるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Compare">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>2 つの文字列を比較します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="LastIndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最後に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsSuffix">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列が特定のサフィックスで終わるかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IndexOf">
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または部分文字列内にある値のうち、最初に出現する値の、0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>