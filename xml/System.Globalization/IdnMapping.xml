<Type Name="IdnMapping" FullName="System.Globalization.IdnMapping">
  <TypeSignature Language="C#" Value="public sealed class IdnMapping" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit IdnMapping extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.IdnMapping" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization.Extensions</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>インターネット ドメイン名の非 ASCII 文字の使用をサポートします。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 インターネット ドメイン名は、ラベル区切り記号で区切られた、ドメイン名ラベルと呼ばれる 1 つまたは複数の部分で構成されます。 たとえば、ドメイン名"www.proseware.com"は、ラベル、"www"、"proseware"および"com"、ピリオドで区切られたで構成されます。 標準のドメイン名は、US ASCII \(または基本ラテン文字\) の文字範囲の U \+ U \+ 007E に 0021 から指定された文字で構成されます。 カルチャで、US ASCII 文字セットの国際化ドメイン名のアプリケーション \(IDNA\) を使用してインターネットの利用状況を容易にするために標準に 2003 では、US\-ASCII 文字の範囲の Unicode 文字を含めることをサポートするために採用しました。 ただし、ネーム サーバーおよびドメイン名の解決は、US\-ASCII 文字の範囲内の文字に依存する続行します。  
  
 IDNA 機構では、ドメイン ネーム システムでサポートされる、US\-ASCII 文字の範囲を US\-ASCII 文字の範囲の Unicode 文字を含む国際化ドメイン名にマップするのに Punycode を使用します。 IDNA メカニズムは、インターネット経由で転送されるデータはドメイン名を変換するために使用します。  
  
> [!IMPORTANT]
>  [!INCLUDE[net_v45](~/includes/net-v45-md.md)], 、 <xref:System.Globalization.IdnMapping> クラスが使用されているオペレーティング システムに応じて、IDNA 標準のさまざまなバージョンをサポートしています。  
>   
>  -   実行されるタイミング [!INCLUDE[win8](~/includes/win8-md.md)], で概説されている IDNA 規格の 2008年バージョンをサポートする [RFC 5891: Internationalized Domain Names in Applications \(IDNA\): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875)します。  
> -   概説されている標準の 2003年バージョンをサポートする古いバージョンの Windows オペレーティング システム上で実行時に [RFC 3490: Internationalizing Domain Names in Applications \(IDNA\)](http://go.microsoft.com/fwlink/?LinkId=158110)します。  
>   
>  参照してください [Unicode Technical Standard \#46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) 方法に違いはこれらの標準処理の文字のセットを特定します。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A?displayProperty=fullName> メソッドは、各ラベルに、ドメイン名を表示可能な Unicode で構成される形式に正規化された名前は、US ASCII コード ポイント範囲 \(U \+ 0020 に U \+ 007E\)、内の文字しを ASCII と互換性のある \(ACE\) をエンコード プレフィックス \("xn\-"\) の前に付加に変換を正規化します。<xref:System.Globalization.IdnMapping.GetUnicode%2A?displayProperty=fullName> メソッドで変換するドメイン名ラベル、 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドです。  
  
 変換される文字列には、ラベルの区切り文字が含まれている場合は、表意文字の完全停止を文字 \(U \+ 3002\)、全角完全停止 \(U \+ FF0E\) と半角表意文字完全停止 \(U \+ FF61\)、 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッド完全停止 \(期間、002E\) ラベルの区切り文字に変換します。<xref:System.Globalization.IdnMapping.GetUnicode%2A> メソッド、ただし、復元されません元のラベルの区切り文字。  
  
   
  
## 例  
 次の例では、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> の配列に変換するメソッドを Punycode ドメイン名を国際化します。<xref:System.Globalization.IdnMapping.GetUnicode%2A> メソッドは、Punycode ドメイン名を元のドメイン名に変換が、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.String.Normalize" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public IdnMapping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Globalization.IdnMapping" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A?displayProperty=fullName> と <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A?displayProperty=fullName> にプロパティが初期化されます `false`します。 一部の ASCII 文字が A ~ Z、0 ~ 9、ハイフン \(\-\) 文字 \(U\+002D\) とピリオド \(.\) 以外の場合 文字が使用できるドメイン名が割り当てられていない Unicode コード ポイントはありません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowUnassigned">
      <MemberSignature Language="C#" Value="public bool AllowUnassigned { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowUnassigned" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.AllowUnassigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>\[割り当てられていない Unicode コード ポイントは、現在のメンバーによって実行される操作で使用されているかどうかを示す値を取得または <see cref="T:System.Globalization.IdnMapping" /> オブジェクトです。</summary>
        <value>
          <see langword="true" /> 操作内で割り当てられていないコード ポイントが使用されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録済みドメイン名には、割り当てられていないコード ポイントを含めることはできません。 その結果、既定値である、 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティは `false`です。 IDNA 仕様により、対応する文字列のクエリでのみ割り当てられていないコード ポイント \(つまり、ドメイン名の参照\)。 ドメイン名に割り当てられていないコード ポイントの使用に関する詳細については、次を参照してください。 [RFC 3454, "Preparation of Internationalized Strings \(stringprep\)"](http://go.microsoft.com/fwlink/?LinkId=231873) と [RFC 5891, "Internationalized Domain Names in Applications \(IDNA\): Protocol"](http://go.microsoft.com/fwlink/?LinkId=231875)します。  
  
> [!IMPORTANT]
>  場合、<xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティは、 `false`, 、プロパティに関連付けられている動作は、基になるオペレーティング システムによって異なります。[!INCLUDE[win8](~/includes/win8-md.md)], 、 <xref:System.Globalization.IdnMapping> IDNA 2008 では、Unicode 6.0 標準に基づくに準拠しているクラス。 Windows の以前のバージョンで、 <xref:System.Globalization.IdnMapping> クラスは Unicode 3 に基づく IDNA 2003 に基づいています*。x*. IDNA 2003 で割り当てられたされなかったコード ポイントがある文字が割り当てられているし、の IDNA 2008 でサポートします。 たとえば、U \+ 0221年は、Unicode 4.0 で導入されました。[!INCLUDE[win8](~/includes/win8-md.md)], 、としてエンコード"xn — 6la"です。 以前のバージョンの Windows では、スロー、 <xref:System.ArgumentException> 例外です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">現在のオブジェクトと比較するオブジェクト。</param>
        <summary>示すかどうか、指定したオブジェクトと現在 <see cref="T:System.Globalization.IdnMapping" /> オブジェクトが等しい。</summary>
        <returns>
          <see langword="true" /> によって、オブジェクトが指定されている場合、 <paramref name="obj" /> からパラメーターを派生 <see cref="T:System.Globalization.IdnMapping" /> とその <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティは同一です。 それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルで構成される文字列に変換します。</param>
        <summary>ドメイン名ラベル、US\-ASCII 文字の範囲で表示可能な Unicode 文字の文字列に Unicode 文字で構成されたの文字列をエンコードします。 文字列が標準の IDNA に従って書式設定されます。</summary>
        <returns>指定された文字列のと同じ、 <paramref name="unicode" /> 、US\-ASCII で表示可能な Unicode 文字で構成されるパラメーターの文字範囲 \(U \+ 0020 に U \+ 007E\) と IDNA 標準に従って書式設定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `unicode` パラメーターの有効な Unicode 文字で構成される 1 つまたは複数のラベルの文字列を指定します。 ラベルは、ラベル区切り記号で区切られます。`unicode` パラメーターは、ラベルの区切り文字で始めることはできませんを包含または必要に応じて、区切り記号で終了します。 ラベル区切り記号は完全に停止 \(期間、002E\)、表意文字の完全停止 \(U \+ 3002\)、全角完全停止 \(U \+ FF0E\) と半角表意文字完全停止 \(U \+ FF61\)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U \+ U \+ 001F、および U \+ 007F 0001 Unicode 制御文字。  
  
-   Unicode 文字を割り当てられていない場合の値、 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティは `false`です。  
  
-   US\-ASCII で標準以外の文字は文字、スペースなどの範囲 \(u\+0020\)、感嘆符のマーク \(U \+ 0021\)、その場合、行 \(U \+ 005F\) 文字を低の値、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティは `true`です。  
  
-   IDNA 規格の特定のバージョンで禁止されている文字です。 禁止されている文字の詳細については、次を参照してください。 [RFC 3454: Preparation of Internationalized Strings \("stringprep"\)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008 用です。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全に停止 \(期間、002E\) に変換します。  
  
 場合 `unicode` に US\-ASCII 以外の文字が含まれていない文字の範囲や、US\-ASCII 文字の範囲内で文字が禁止されている場合、メソッドが戻る `unicode` 変更されません。  
  
   
  
## 例  
 次の例では、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> の配列を変換する方法の国際化ドメイン名を Punycode、これは、US\-ASCII 文字の範囲内の文字で構成されているエンコードされた相当します。<xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <see cref="T:System.Globalization.IdnMapping" /> class supports different versions of the IDNA standard, depending on the operating system in use:  
  
-   When run on [!INCLUDE[win8](~/includes/win8-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
-   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  
  
 See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルで構成される文字列に変換します。</param>
        <param name="index">0 から始まるオフセット <c>unicode</c> に変換する部分文字列の先頭を指定します。 末尾にも変換操作を続行、 <c>unicode</c> 文字列。</param>
        <summary>ドメイン名ラベルを含む、US\-ASCII 文字の範囲の Unicode 文字の部分文字列をエンコードします。 部分文字列は、US\-ASCII 文字の範囲で表示可能な Unicode 文字の文字列に変換し、IDNA 標準に従って書式設定します。</summary>
        <returns>指定された部分文字列のと同じ、 <paramref name="unicode" /> と <paramref name="index" /> パラメーター、US ASCII で表示可能な Unicode 文字から成る文字範囲 \(U \+ 0020 に U \+ 007E\) および IDNA 標準に従って書式設定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `unicode` と `index` パラメーターは有効な Unicode 文字から成る 1 つまたは複数のラベルが付いた部分文字列を定義します。 ラベルは、ラベル区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り文字で始めることはできません含むことができます必要に応じて、区切り記号で終了します。 ラベル区切り記号は完全に停止 \(期間、002E\)、表意文字の完全停止 \(U \+ 3002\)、全角完全停止 \(U \+ FF0E\) と半角表意文字完全停止 \(U \+ FF61\)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U \+ U \+ 001F、および U \+ 007F 0001 Unicode 制御文字。  
  
-   Unicode 文字の値によって割り当てられていない、 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティです。  
  
-   US\-ASCII で標準以外の文字は文字、スペースなどの範囲 \(u\+0020\)、感嘆符のマーク \(U \+ 0021\)、および低行 \(U \+ 005F\) 文字の値によって、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティです。  
  
-   IDNA 規格の特定のバージョンで禁止されている文字です。 禁止されている文字の詳細については、次を参照してください。 [RFC 3454: Preparation of Internationalized Strings \("stringprep"\)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008 用です。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全に停止 \(期間、002E\) に変換します。  
  
 場合 `unicode` に US\-ASCII 以外の文字が含まれていない文字の範囲や、US\-ASCII 文字の範囲内で文字が禁止されている場合、メソッドが戻る `unicode` 変更されません。  
  
   
  
## 例  
 次の例では、ローカルの部分とを結果として得られるドメイン名の電子メール アドレス、およびパスから文字 @、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> 、US\-ASCII 文字の範囲内の文字で構成されているエンコードされた同等は、Punycode ドメイン名を作成する方法です。<xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1a.cs#2)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="unicode" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <see cref="T:System.Globalization.IdnMapping" /> class supports different versions of the IDNA standard, depending on the operating system in use:  
  
-   When run on [!INCLUDE[win8](~/includes/win8-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
-   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  
  
 See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetAscii">
      <MemberSignature Language="C#" Value="public string GetAscii (string unicode, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAscii(string unicode, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetAscii(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unicode" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="unicode">ラベル区切り記号で区切られた 1 つまたは複数のドメイン名ラベルで構成される文字列に変換します。</param>
        <param name="index">0 から始まるオフセット <c>unicode</c> 部分文字列の先頭を指定します。</param>
        <param name="count">指定された位置から開始する部分文字列に変換する文字数  <c>index</c> で、 <c>unicode</c> 文字列。</param>
        <summary>指定したドメイン名ラベルを含む、US\-ASCII 文字の範囲の Unicode 文字の部分文字列の文字数をエンコードします。 部分文字列は、US\-ASCII 文字の範囲で表示可能な Unicode 文字の文字列に変換し、IDNA 標準に従って書式設定します。</summary>
        <returns>指定された部分文字列のと同じ、 <paramref name="unicode" />, 、<paramref name="index" />, 、および <paramref name="count" /> パラメーター、US ASCII で表示可能な Unicode 文字から成る文字範囲 \(U \+ 0020 に U \+ 007E\) および IDNA 標準に従って書式設定します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Unicode`, 、`index`, 、および `count` パラメーターは有効な Unicode 文字から成る 1 つまたは複数のラベルが付いた部分文字列を定義します。 ラベルは、ラベル区切り記号で区切られます。 部分文字列の最初の文字がラベルの区切り文字で始めることはできません含むことができます必要に応じて、区切り記号で終了します。 ラベル区切り記号は完全に停止 \(期間、002E\)、表意文字の完全停止 \(U \+ 3002\)、全角完全停止 \(U \+ FF0E\) と半角表意文字完全停止 \(U \+ FF61\)。 たとえば、ドメイン名"www.adatum.com"は、ラベル、"www"、"adatum"および"com"、ピリオドで区切られたで構成されます。  
  
 ラベルは、次の文字を含めることはできません。  
  
-   U \+ U \+ 001F、および U \+ 007F 0001 Unicode 制御文字。  
  
-   Unicode 文字の値によって割り当てられていない、 <xref:System.Globalization.IdnMapping.AllowUnassigned%2A> プロパティです。  
  
-   US\-ASCII で標準以外の文字は文字、スペースなどの範囲 \(u\+0020\)、感嘆符のマーク \(U \+ 0021\)、および低行 \(U \+ 005F\) 文字の値によって、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティです。  
  
-   IDNA 規格の特定のバージョンで禁止されている文字です。 禁止されている文字の詳細については、次を参照してください。 [RFC 3454: Preparation of Internationalized Strings \("stringprep"\)](http://go.microsoft.com/fwlink/?LinkId=231873) IDNA 2003 と [RFC 5982: The Unicode Code Points and Internationalized Domain Names for Applications](http://go.microsoft.com/fwlink/?LinkId=231877) IDNA 2008 用です。  
  
 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドは、すべてのラベルの区切り記号を完全に停止 \(期間、002E\) に変換します。 部分文字列に、US\-ASCII 文字の範囲の文字が含まれていないと、US\-ASCII 文字の範囲内の文字は使用できません、変更されていない部分文字列を返します。  
  
   
  
## 例  
 次の例では、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> IDNA 標準に準拠しているドメイン名に国際化ドメイン名に変換します。<xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドは、標準化されたドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[IdnMapping.GetX\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IdnMapping.GetX/CS/getx.cs#1)]
 [!code-vb[IdnMapping.GetX\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IdnMapping.GetX/VB/getx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="unicode" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="unicode" />します。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="unicode" /> マイナス <paramref name="count" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="unicode" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
        <block subset="none" type="usage">
          <para>In the [!INCLUDE[net_v45](~/includes/net-v45-md.md)], the <see cref="T:System.Globalization.IdnMapping" /> class supports different versions of the IDNA standard, depending on the operating system in use:  
  
-   When run on [!INCLUDE[win8](~/includes/win8-md.md)], it supports the 2008 version of the IDNA standard outlined by [RFC 5891: Internationalized Domain Names in Applications (IDNA): Protocol](http://go.microsoft.com/fwlink/?LinkId=231875).  
  
-   When run on earlier versions of the Windows operating system, it supports the 2003 version of the standard outlined by [RFC 3490: Internationalizing Domain Names in Applications (IDNA)](http://go.microsoft.com/fwlink/?LinkId=158110).  
  
 See [Unicode Technical Standard #46: IDNA Compatibility Processing](http://go.microsoft.com/fwlink/?LinkId=232459) for the differences in the way these standards handle particular sets of characters.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このハッシュ コードを返す <see cref="T:System.Globalization.IdnMapping" /> オブジェクトです。</summary>
        <returns>プロパティから派生した 4 つの 32 ビット符号付き定数のいずれか、 <see cref="T:System.Globalization.IdnMapping" /> オブジェクトです。  戻り値は、特別な意味を持たず、ハッシュ コードのアルゴリズムで使用するには適していません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーバーライド、 <xref:System.Globalization.IdnMapping.GetHashCode%2A> メソッドの場合は、アプリケーションは、意味のあるハッシュ コードのアルゴリズムを実装する必要があります。  
  
   
  
## 例  
 次の例では、1 つの文字列がスペースで区切られた複数の電子メール アドレスに含めることができると仮定します。 ローカル部分を削除しを結果として得られるドメイン名の @ 文字が各電子メール アドレス、およびパスから、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%29> または <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29> Punycode ドメイン名を作成する方法です。<xref:System.Globalization.IdnMapping.GetUnicode%28System.String%2CSystem.Int32%2CSystem.Int32%29> メソッドが元のドメイン名にし、Punycode ドメイン名を変換します。  
  
 [!code-csharp[System.Globalization.IdnMapping.GetAscii\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/cs/conversion1b.cs#3)]
 [!code-vb[System.Globalization.IdnMapping.GetAscii\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.getascii/vb/conversion1b.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ascii">IDNA 標準に従ってエンコード、US\-ASCII 文字範囲 \(U \+ 0020 に U \+ 007E\) 内の 1 つまたは複数のラベルで構成される、デコードする文字列。</param>
        <summary>1 つまたは複数のドメイン名ラベルの Unicode 文字の文字列に、IDNA 標準に従ってエンコードされた文字列をデコードします。</summary>
        <returns>指定された IDNA 部分文字列と等価の Unicode、 <paramref name="ascii" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドメイン名、ラベル、およびラベル区切り記号の詳細については、「解説」を参照してください、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> の配列に変換するメソッドを Punycode ドメイン名を国際化します。<xref:System.Globalization.IdnMapping.GetUnicode%28System.String%29> メソッドは、Punycode ドメイン名を元のドメイン名に変換しますが、元のラベルの区切り記号を標準のラベルの区切り記号に置き換えます。  
  
 [!code-csharp[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.class/cs/conversion1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.class/vb/conversion1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">IDNA 標準に従ってエンコード、US\-ASCII 文字範囲 \(U \+ 0020 に U \+ 007E\) 内の 1 つまたは複数のラベルで構成される、デコードする文字列。</param>
        <param name="index">0 から始まるオフセット <c>ascii</c> をデコードする部分文字列の先頭を指定します。 最後まで継続デコード操作、 <c>ascii</c> 文字列。</param>
        <summary>1 つまたは複数のドメイン名ラベルを Unicode 文字の文字列に、IDNA 標準に従ってエンコードの部分文字列をデコードします。</summary>
        <returns>指定された IDNA 部分文字列と等価の Unicode、 <paramref name="ascii" /> と <paramref name="index" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドメイン名、ラベル、およびラベル区切り記号の詳細については、「解説」を参照してください、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="ascii" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetUnicode">
      <MemberSignature Language="C#" Value="public string GetUnicode (string ascii, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetUnicode(string ascii, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.IdnMapping.GetUnicode(System.String,System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ascii" Type="System.String" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ascii">IDNA 標準に従ってエンコード、US\-ASCII 文字範囲 \(U \+ 0020 に U \+ 007E\) 内の 1 つまたは複数のラベルで構成される、デコードする文字列。</param>
        <param name="index">0 から始まるオフセット <c>ascii</c> 部分文字列の先頭を指定します。</param>
        <param name="count">指定された位置から開始する部分文字列に変換する文字数 <c>index</c> で、 <c>ascii</c> 文字列。</param>
        <summary>1 つまたは複数のドメイン名のラベルを含む、Unicode 文字の文字列に、IDNA 標準に従ってエンコードを指定した長さの部分文字列をデコードします。</summary>
        <returns>指定された IDNA 部分文字列と等価の Unicode、 <paramref name="ascii" />, 、<paramref name="index" />, 、および <paramref name="count" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ドメイン名、ラベル、およびラベル区切り記号の詳細については、「解説」を参照してください、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%2CSystem.Int32%2CSystem.Int32%29?displayProperty=fullName> メソッドです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="ascii" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="ascii" />します。  
  
 または  
  
 <paramref name="index" /> 長さより大きい <paramref name="ascii" /> マイナス <paramref name="count" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="ascii" /> 無効なに基づいて、 <see cref="P:System.Globalization.IdnMapping.AllowUnassigned" /> と <see cref="P:System.Globalization.IdnMapping.UseStd3AsciiRules" /> プロパティ、および IDNA 標準です。</exception>
      </Docs>
    </Member>
    <Member MemberName="UseStd3AsciiRules">
      <MemberSignature Language="C#" Value="public bool UseStd3AsciiRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseStd3AsciiRules" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.IdnMapping.UseStd3AsciiRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>標準または余裕のある名前付け規則は、現在のメンバーによって実行される操作で使用されているかどうかを示す値を取得または <see cref="T:System.Globalization.IdnMapping" /> オブジェクトです。</summary>
        <value>
          <see langword="true" /> 操作内で標準的な名前付け規則が使用されている場合それ以外の場合、 <see langword="false" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 標準的な名前付け規則に従っているドメイン名は、US\-ASCII 文字の範囲内の文字の特定のサブセットで構成されます。 この文字は、文字 A ~ Z、数字の 0 から 9 まで、ハイフン \(\-\) 文字 \(U\+002D\) とピリオド \(.\) 文字に置き換えらるからです。 文字の大文字と小文字はわずかです。 余裕のある名前付け規則より広い範囲の ASCII の使用ができるように、空白を含む文字は文字 \(u\+0020\)、感嘆符文字 \(U \+ 0021\)、および \(U \+ 005F\) の文字、および設定が可能です。 場合 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> は `true`, 、標準の文字のみによって返されるラベルに使用できます、 <xref:System.Globalization.IdnMapping.GetAscii%2A> メソッドです。  
  
 既定では、値、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティは、 `false`, 、ASCII 文字の展開の一部がラベルで許可されているとします。  
  
> [!NOTE]
>  <xref:System.Globalization.IdnMapping> クラスには、U \+ 001F から表示できない文字 u\+0000 の使用が禁止されていて、U \+ 007F ドメイン名のラベルの設定に関係なく、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティです。 この規則は、名前の悪用などのセキュリティ攻撃のリスクを軽減します。  
  
   
  
## 例  
 次の例は、u\+0000 から U \+ 007F ASCII の範囲の文字を含む Url を生成し、コマンドを渡し、 <xref:System.Globalization.IdnMapping.GetAscii%28System.String%29> 2 つのメソッド <xref:System.Globalization.IdnMapping> オブジェクトです。 1 つのオブジェクトがその <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティに設定 `true`, 、その他のオブジェクトに設定し `false`します。 出力は無効なときに文字を表示、 <xref:System.Globalization.IdnMapping.UseStd3AsciiRules%2A> プロパティは `true` にあるときに、有効な `false`です。  
  
 [!code-csharp[System.Globalization.IdnMapping.UseStd3AsciiRules\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/cs/usestd3asciirules1.cs#1)]
 [!code-vb[System.Globalization.IdnMapping.UseStd3AsciiRules\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.idnmapping.usestd3asciirules/vb/usestd3asciirules1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAscii">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ドメイン名ラベル、US\-ASCII 文字の範囲 \(U \+ 0020 に U \+ 007E\) に表示可能な Unicode 文字の文字列に、US\-ASCII 文字の範囲の Unicode 文字を含めることの文字列をエンコードします。 文字列が標準の IDNA に従って書式設定されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetUnicode">
      <AssemblyInfo>
        <AssemblyName>System.Globalization.Extensions</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Unicode 文字の文字列に IDNA 標準に従ってエンコードされる 1 つまたは複数のドメイン名ラベルをデコードします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>