<Type Name="DateTimeFormatInfo" FullName="System.Globalization.DateTimeFormatInfo">
  <TypeSignature Language="C#" Value="public sealed class DateTimeFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit DateTimeFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.DateTimeFormatInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>日付と時刻の値の書式に関するカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 The properties of the <xref:System.Globalization.DateTimeFormatInfo> class contain culture\-specific information for formatting or parsing date and time values such as the following:  
  
-   The patterns used to format date values.  
  
-   The patterns used to format time values.  
  
-   The names of the days of the week.  
  
-   The names of the months of the year.  
  
-   The A.M. and P.M. designators used in time values.  
  
-   The calendar in which dates are expressed.  
  
 In this section:  
  
-   [Instantiating a DateTimeFormatInfo object](#instantiating)  
  
    -   [For the Invariant Culture](#instantiating_Invariant)  
  
    -   [For a Specific Culture](#instantiating_Specific)  
  
    -   [For a neutral culture](#instantiating_neutral)  
  
    -   [For the current culture](#instantiating_Current)  
  
-   [DateTimeFormatInfo and dynamic data](#dynamic)  
  
-   [Formatting dates and times](#Formatting_dates_times)  
  
-   [Format strings and DateTimeFormatInfo properties](#properties)  
  
-   [Modifying DateTimeFormatInfo properties](#Modifying)  
  
<a name="instantiating"></a>   
## Instantiating a DateTimeFormatInfo object  
 A <xref:System.Globalization.DateTimeFormatInfo> object can represent the formatting conventions of the invariant culture, a specific culture, a neutral culture, or the current culture. This section discusses how to instantiate each type of <xref:System.Globalization.DateTimeFormatInfo> object.  
  
<a name="instantiating_Invariant"></a>   
### Instantiating a DateTimeFormatInfo object for the invariant culture  
 The invariant culture represents a culture that is culture\-insensitive. It is based on the English language, but not on any specific English\-speaking country\/region. Although the data of specific cultures can be dynamic and can change to reflect new cultural conventions or user preferences, the data of the invariant culture does not change. You can instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of the invariant culture in the following ways:  
  
-   By retrieving the value of the <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
-   By calling the parameterless <xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> constructor. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\/write.  
  
-   By retrieving the value of the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property from the <xref:System.Globalization.CultureInfo> object that is returned by the <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
 The following example uses each of these methods to instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the invariant culture. It then indicates whether the object is read\-only.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#1)]  
  
<a name="instantiating_Specific"></a>   
### Instantiating a DateTimeFormatInfo object for a specific culture  
 A specific culture represents a language that is spoken in a particular country\/region. For example, en\-US is a specific culture that represents the English language spoken in the United States, and en\-CA is a specific culture that represents the English language spoken in Canada. You can instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of a specific culture in the following ways:  
  
-   By calling the <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=fullName> method and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
-   By passing the static <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A> method a <xref:System.Globalization.CultureInfo> object that represents the culture whose <xref:System.Globalization.DateTimeFormatInfo> object you want to retrieve. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\/write.  
  
-   By calling the static <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\/write.  
  
-   By calling the <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=fullName> class constructor and retrieving the value of the returned <xref:System.Globalization.CultureInfo> object's <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\/write.  
  
 The following example illustrates each of these ways to instantiate a <xref:System.Globalization.DateTimeFormatInfo> object and indicates whether the resulting object is read\-only.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#3)]  
  
<a name="instantiating_neutral"></a>   
### Instantiating a DateTimeFormatInfo object for a neutral culture  
 A neutral culture represents a culture or language that is independent of a country\/region; it is typically the parent of one or more specific cultures. For example, Fr is a neutral culture for the French language and the parent of the fr\-FR culture. You can instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of a neutral culture in the same ways that you create a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of a specific culture. In addition, you can retrieve a neutral culture's <xref:System.Globalization.DateTimeFormatInfo> object by retrieving a neutral culture from a specific culture's <xref:System.Globalization.CultureInfo.Parent%2A?displayProperty=fullName> property and retrieving the <xref:System.Globalization.DateTimeFormatInfo> object returned by its <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property. Unless the parent culture represents the invariant culture, the returned <xref:System.Globalization.DateTimeFormatInfo> object is read\/write. The following example illustrates these ways of instantiating a <xref:System.Globalization.DateTimeFormatInfo> object that represents a neutral culture.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create1.vb#2)]  
  
> [!NOTE]
>  In the .NET Framework versions 1.0 through [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)], trying to retrieve a <xref:System.Globalization.DateTimeFormatInfo> object that  reflects the formatting conventions of a neutral culture throws a <xref:System.NotSupportedException> exception.  
  
 However, a neutral culture lacks culture\-specific formatting information, because it is independent of a specific country\/region. Instead of populating the <xref:System.Globalization.DateTimeFormatInfo> object with generic values, the .NET Framework returns a <xref:System.Globalization.DateTimeFormatInfo> object that reflects the formatting conventions of a specific culture that is a child of the neutral culture. For example, the <xref:System.Globalization.DateTimeFormatInfo> object for the neutral en culture reflects the formatting conventions of the en\-US culture, and the <xref:System.Globalization.DateTimeFormatInfo> object for the fr culture reflects the formatting conventions of the fr\-FR culture.  
  
 You can use code like the following to determine which specific culture's formatting conventions a neutral culture represents. The example uses reflection to compare the <xref:System.Globalization.DateTimeFormatInfo> properties of a neutral culture with the properties of a specific child culture. It considers two calendars to be equivalent if they are the same calendar type and, for Gregorian calendars, if their <xref:System.Globalization.GregorianCalendar.CalendarType%2A?displayProperty=fullName> properties have identical values.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate6c.vb#6)]  
  
<a name="instantiating_Current"></a>   
### Instantiating a DateTimeFormatInfo object for the current culture  
 You can instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of the current culture in the following ways:  
  
-   By retrieving the value of the <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
-   By retrieving the value of the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A> property from the <xref:System.Globalization.CultureInfo> object that is returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
-   By calling the <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> method with a <xref:System.Globalization.CultureInfo> object that represents the current culture. The returned <xref:System.Globalization.DateTimeFormatInfo> object is read\-only.  
  
 The following example uses each of these methods to instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of the current culture. It then indicates whether the object is read\-only.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/create2.cs#4)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/create2.vb#4)]  
  
 You can create a writable <xref:System.Globalization.DateTimeFormatInfo> object that represents the conventions of the current thread culture in one of these ways:  
  
-   By retrieving a <xref:System.Globalization.DateTimeFormatInfo> object in any of the three previous ways and calling the <xref:System.Globalization.DateTimeFormatInfo.Clone%2A> method on the returned <xref:System.Globalization.DateTimeFormatInfo> object. This creates a copy of the original <xref:System.Globalization.DateTimeFormatInfo> object, except that its <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> property is **languageKeyword tag is not supported!!!!**  
    .  
  
-   By calling the <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method to create a <xref:System.Globalization.CultureInfo> object that represents the current culture, and then using its <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property to retrieve the <xref:System.Globalization.DateTimeFormatInfo> object.  
  
 The following example illustrates each way of instantiating a read\/write <xref:System.Globalization.DateTimeFormatInfo> object and displays the value of its <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> property.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate2.cs#7)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate2.vb#7)]  
  
 In Windows, the user can override some of the <xref:System.Globalization.DateTimeFormatInfo> property values used in formatting and parsing operations through the **ui tag is not supported!!!!**  
 application in Control Panel. For example, a user whose culture is English \(United States\) might choose to display long time values using a 24\-hour clock \(in the format HH:mm:ss\) instead of the default 12\-hour clock \(in the format h:mm:ss tt\). The <xref:System.Globalization.DateTimeFormatInfo> objects retrieved in the ways discussed previously all reflect these user overrides. If this is undesirable, you can create a <xref:System.Globalization.NumberFormatInfo> object that does not reflect user overrides \(and is also read\/write instead of read\-only\) by calling the <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> constructor and supplying a value of **languageKeyword tag is not supported!!!!**  
 for the **parameterReference tag is not supported!!!!**  
 argument. The following example illustrates this for a system whose current culture is English \(United States\) and whose long time pattern has been changed from the default of h:mm:ss tt to HH:mm:ss.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/instantiate3.cs#8)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/instantiate3.vb#8)]  
  
<a name="dynamic"></a>   
## DateTimeFormatInfo and dynamic data  
 The culture\-specific data for formatting date and time values provided by the <xref:System.Globalization.DateTimeFormatInfo> class is dynamic, just like cultural data provided by the <xref:System.Globalization.CultureInfo> class. You should not make any assumptions about the stability of values for <xref:System.Globalization.DateTimeFormatInfo> objects that are associated with particular <xref:System.Globalization.CultureInfo> objects. Only the data provided by the invariant culture and its associated <xref:System.Globalization.DateTimeFormatInfo> object is stable. Other data can change between application sessions or even while your application is running. There are four major sources of change:  
  
-   System updates. Cultural preferences such as the preferred calendar or customary date and time formats change over time. When this happens, Windows Update includes changes to the <xref:System.Globalization.DateTimeFormatInfo> property value for a particular culture.  
  
-   Replacement cultures. The <xref:System.Globalization.CultureAndRegionInfoBuilder> class can be used to replace the data of an existing culture.  
  
-   Cascading changes to property values. A number of culture\-related properties can change at run time, which, in turn, causes <xref:System.Globalization.DateTimeFormatInfo> data to change. For example, the current culture can be changed either programmatically or through user action. When this happens, the <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A> property changes to an object associated with the current culture. Similarly, a culture's calendar can change, which can result in changes to numerous <xref:System.Globalization.DateTimeFormatInfo> property values.  
  
-   User preferences. Users of your application might choose to override some of the values associated with the current system culture through the regional and language options in Control Panel. For example, users might choose to display the date in a different format. If the <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> property is set to **languageKeyword tag is not supported!!!!**  
    , the properties of the <xref:System.Globalization.DateTimeFormatInfo> object is also retrieved from the user settings. If the user settings are incompatible with the culture associated with the <xref:System.Globalization.CultureInfo> object \(for example, if the selected calendar is not one of the calendars indicated by the <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> property\), the results of the methods and the values of the properties are undefined.  
  
 To minimize the possibility of inconsistent data, all user\-overridable properties of a <xref:System.Globalization.DateTimeFormatInfo> object are initialized when the object is created. There is still a possibility of inconsistency, because neither object creation nor the user override process is atomic and the relevant values can change during object creation. However, this situation should be extremely rare.  
  
 You can control whether user overrides are reflected in <xref:System.Globalization.DateTimeFormatInfo> objects that represent the same culture as the system culture. The following table lists the ways in which a <xref:System.Globalization.DateTimeFormatInfo> object can be retrieved and indicates whether the resulting object reflects user overrides.  
  
|Source of CultureInfo and DateTimeFormatInfo object|Reflects user overrides|  
|---------------------------------------------------------|-----------------------------|  
|`CultureInfo.CurrentCulture.DateTimeFormat` property|Yes|  
|<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A?displayProperty=fullName> property|Yes|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> method|Yes|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=fullName> method|No|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29?displayProperty=fullName> constructor|Yes|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> constructor|Depends on value of **parameterReference tag is not supported!!!!**<br /> parameter|  
  
 Unless there is a compelling reason to do otherwise, you should respect user overrides when you use the <xref:System.Globalization.DateTimeFormatInfo> object in client applications to format and parse user input or to display data. For server applications or unattended applications, you should not. However, if you are using the <xref:System.Globalization.DateTimeFormatInfo> object either explicitly or implicitly to persist date and time data in string form, you should either use a <xref:System.Globalization.DateTimeFormatInfo> object that reflects the formatting conventions of the invariant culture, or you should specify a custom date and time format string that you use regardless of culture.  
  
<a name="Formatting_dates_times"></a>   
## Formatting dates and times  
 A <xref:System.Globalization.DateTimeFormatInfo> object is used implicitly or explicitly in all date and time formatting operations. These include calls to the following methods:  
  
-   All date and time formatting methods, such as <xref:System.DateTime.ToString?displayProperty=fullName> and <xref:System.DateTimeOffset.ToString%28System.String%29?displayProperty=fullName>.  
  
-   The major composite formatting method, which is <xref:System.String.Format%2A?displayProperty=fullName>.  
  
-   Other composite formatting methods, such as <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> and <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>.  
  
 All date and time formatting operations make use of an <xref:System.IFormatProvider> implementation. The <xref:System.IFormatProvider> interface includes a single method, <xref:System.IFormatProvider.GetFormat%28System.Type%29?displayProperty=fullName>. This callback method is passed a <xref:System.Type> object that represents the type needed to provide formatting information. The method returns either an instance of that type or **languageKeyword tag is not supported!!!!**  
 if it cannot provide an instance of the type. The .NET Framework includes two <xref:System.IFormatProvider> implementations for formatting dates and times:  
  
-   The <xref:System.Globalization.CultureInfo> class,  which represents a specific culture \(or a specific language in a specific country\/region\). In a date and time formatting operation, the <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=fullName> method returns the <xref:System.Globalization.DateTimeFormatInfo> object associated with its <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property.  
  
-   The <xref:System.Globalization.DateTimeFormatInfo> class, which provides information about the formatting conventions of its associated culture. The <xref:System.Globalization.DateTimeFormatInfo.GetFormat%2A?displayProperty=fullName> method returns an instance of itself.  
  
 If an <xref:System.IFormatProvider> implementation is not provided to a formatting method explicitly, the <xref:System.Globalization.CultureInfo> object returned by the <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> property that represents the current thread culture is used.  
  
 The following example illustrates the relationship between the <xref:System.IFormatProvider> interface and the <xref:System.Globalization.DateTimeFormatInfo> class in formatting operations. It defines a custom <xref:System.IFormatProvider> implementation whose <xref:System.IFormatProvider.GetFormat%2A> method displays the type of the object requested by the formatting operation. If it is requesting a <xref:System.Globalization.DateTimeFormatInfo> object, the method provides the <xref:System.Globalization.DateTimeFormatInfo> object for the current thread culture. As the output from the example shows, the <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> method requests a <xref:System.Globalization.DateTimeFormatInfo> object to provide formatting information, whereas the <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> method requests <xref:System.Globalization.NumberFormatInfo> and <xref:System.Globalization.DateTimeFormatInfo> objects as well as an <xref:System.ICustomFormatter> implementation.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/formatprovider1.cs#9)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/formatprovider1.vb#9)]  
  
<a name="properties"></a>   
## Format strings and DateTimeFormatInfo properties  
 The <xref:System.Globalization.DateTimeFormatInfo> object includes three kinds of properties that are used in formatting operations with date and time values:  
  
-   Calendar\-related properties. Properties such as <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>, <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>, <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>, and <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>, are associated with the calendar used by the culture, which is defined by the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property. These properties are used for long date and time formats.  
  
-   Properties that produce a standards\-defined result string. The <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>, <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>, and <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A> properties contain custom format strings that produce result strings defined by international standards. These properties are  read\-only and cannot be modified.  
  
-   Properties that define culture\-sensitive result strings. Some properties, such as <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> and <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>, contain  [custom format strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984) that specify the format of the result string. Others, such as <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A>, <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>, <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>, and <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>, define culture\-sensitive symbols or substrings that can be included in a result string.  
  
 The [standard date and time format strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b), such as "d", "D", "f", and "F", are aliases that correspond to particular <xref:System.Globalization.DateTimeFormatInfo> format pattern properties. Most of the  [custom date and time format strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984) are related to strings or substrings that a formatting operation inserts into the result stream. The following table lists the standard and custom date and time format specifiers and their associated <xref:System.Globalization.DateTimeFormatInfo> properties. For details about how to use these format specifiers, see [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) and [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984). Note that each standard format string corresponds to a <xref:System.Globalization.DateTimeFormatInfo> property whose value is a custom date and time format string. The individual specifiers in this custom format string in turn correspond to other <xref:System.Globalization.DateTimeFormatInfo> properties. The table lists only the <xref:System.Globalization.DateTimeFormatInfo> properties for which the standard format strings are aliases, and does not list properties that may be accessed by custom format strings assigned to those aliased properties. In addition, the table lists only custom format specifiers that correspond to <xref:System.Globalization.DateTimeFormatInfo> properties.  
  
|Format specifier|Associated properties|  
|----------------------|---------------------------|  
|"d" \(short date; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>, to define the overall format of the result string.|  
|"D" \(long date; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>, to define the overall format of the result string.|  
|"f" \(full date \/ short time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>, to define the format of the date component of the result string.<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>, to define the format of the time component of the result string.|  
|"F" \(full date \/ long time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>, to define the format of the date component of the result string.<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>, to define the format of the time component of the result string.|  
|"g" \(general date \/ short time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>, to define the format of the date component of the result string.<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>, to define the format of the time component of the result string.|  
|"G" \(general date \/ long time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>, to define the format of the date component of the result string.<br /><br /> <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>, to define the format of the time component of the result string.|  
|"M", "m" \(month\/day; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>, to define the overall format of the result string.|  
|"O", "o" \(round\-trip date\/time; standard format string\)|None.|  
|"R", "r" \(RFC1123; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>, to define a result string that conforms to the RFC 1123 standard. The property is read\-only.|  
|"s" \(sortable date\/time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>, to define a result string that conforms to the ISO 8601 standard. The property is read\-only.|  
|"t" \(short time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A>, to define the overall format of the result string.|  
|"T" \(long time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A>, to define the overall format of the result string.|  
|"u" \(universal sortable date\/time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>, to define a result string that conforms to the ISO 8601 standard for coordinated universal time. The property is read\-only.|  
|"U" \(universal full date\/time; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>, to define the overall format of the result string.|  
|"Y", "y" \(year month; standard format string\)|<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>, to define the overall format of the result string.|  
|"ddd" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>, to include the abbreviated name of the day of the week in the result string.|  
|"g", "gg" \(custom format specifier\)|Calls the <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> method to insert the era name in the result string.|  
|"MMM" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>, to include the abbreviated month name in the result string.|  
|"MMMM" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> or <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A>, to include the full month name in the result string.|  
|"t" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> or <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>, to include the first character of the AM\/PM designator in the result string.|  
|"tt" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> or <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A>, to include the full AM\/PM designator in the result string.|  
|":" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A>, to include the time separator in the result string.|  
|"\/" \(custom format specifier\)|<xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A>, to include the date separator in the result string.|  
  
<a name="Modifying"></a>   
## Modifying DateTimeFormatInfo properties  
 You can change the result string produced by date and time format strings by modifying the associated properties of a writable <xref:System.Globalization.DateTimeFormatInfo> object. To determine if a <xref:System.Globalization.DateTimeFormatInfo> object is writable, use the <xref:System.Globalization.DateTimeFormatInfo.IsReadOnly%2A> property. To customize a <xref:System.Globalization.DateTimeFormatInfo> object in this way:  
  
1.  Create a read\/write copy of a <xref:System.Globalization.DateTimeFormatInfo> object whose formatting conventions you want to modify. \(See the [Instantiating a DateTimeFormatInfo object](#instantiating) section.\)  
  
2.  Modify the property or properties that are used to produce the desired result string. \(For information about how formatting methods use <xref:System.Globalization.DateTimeFormatInfo> properties to define result strings, see the previous section, [Format strings and DateTimeFormatInfo properties](#properties).\)  
  
3.  Use the custom <xref:System.Globalization.DateTimeFormatInfo> object you created as the <xref:System.IFormatProvider> argument in calls to formatting methods.  
  
 There are two other ways to change the format of a result string:  
  
-   You can use the <xref:System.Globalization.CultureAndRegionInfoBuilder> class to define either a custom culture \(a culture that has a unique name and that supplements existing cultures\) or a replacement culture \(one that is used instead of a specific culture\). You can save and access this culture programmatically as you would any <xref:System.Globalization.CultureInfo> object supported by the .NET Framework.  
  
-   If the result string is not culture\-sensitive and doesn't follow a predefined format, you can use a custom date and time format string. For example, if you are serializing date and time data in the format YYYYMMDDHHmmss, you can generate the result string by passing the custom format string to the <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> method, and you can  convert the result string back to a <xref:System.DateTime> value by calling the <xref:System.DateTime.ParseExact%2A?displayProperty=fullName> method.  
  
### Changing the short date pattern  
 The following example changes the format of a result string produced by the "d" \(short date\) standard format string. It changes the associated <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property for the en\-US or English \(United States\) culture from its default of "M\/d\/yyyy" to "yyyy'\-"MM"\-"dd" and uses the "d" standard format string to display the date both before and after the <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> property is changed.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example1.cs#10)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example1.vb#10)]  
  
### Changing the date separator character  
 The following example changes the date separator character in a <xref:System.Globalization.DateTimeFormatInfo> object that represents the formatting conventions of the fr\-FR culture. The example uses the "g" standard format string to display the date both before and after the <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> property is changed.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example3.cs#12)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example3.vb#12)]  
  
### Changing day name abbreviations and the long date pattern  
 In some cases, the long date pattern, which typically displays the full day and month name along with the number of the day of the month and the year, may be too long. The following example shortens the long date pattern for the en\-US culture to return a one\-character or two\-character day name abbreviation followed by the day number, the month name abbreviation, and the year. It does this by assigning shorter day name abbreviations to the <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> array, and by modifying the custom format string assigned to the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> property. This affects the result strings returned by the "D" and "f" standard format strings.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example2.cs#13)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example2.vb#13)]  
  
 Ordinarily, the change to the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> property also affects the <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> property, which in turn defines the result string returned by the "F" standard format string. To preserve the original full date and time pattern, the example reassigns the original custom format string assigned to the <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> property after the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> property is modified.  
  
### Changing from a 12\-hour clock to a 24\-hour clock  
 For many cultures in the .NET Framework, the time is expressed by using a 12\-hour clock and an AM\/PM designator. The following example defines a `ReplaceWith24HourClock` method that replaces any time format that uses a 12\-hour clock with a format that uses a 24\-hour clock.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example5.cs#14)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example5.vb#14)]  
  
 The example uses a regular expression to modify the format string. The regular expression pattern `@"^(?<openAMPM>\s*t+\s*)? (?(openAMPM) h+(?<nonHours>[^ht]+)$ | \s*h+(?<nonHours>[^ht]+)\s*t+)` is defined as follows:  
  
|Pattern|Description|  
|-------------|-----------------|  
|`^`|Begin the match at the beginning of the string.|  
|`(?<openAMPM>\s*t+\s*)?`|Match zero or one occurrence of zero or more white\-space characters, followed by the letter "t" one or more times, followed by zero or more white\-space characters. This capturing group is named `openAMPM`.|  
|`(?(openAMPM) h+(?<nonHours>[^ht]+)$`|If the `openAMPM` group has a match, match the letter "h" one or more times, followed by one or more characters that are neither "h" nor "t". The match ends at the end of the string. All characters captured after "h" are included in a capturing group named `nonHours`.|  
|`&#124; \s*h+(?<nonHours>[^ht]+)\s*t+)`|If the `openAMPM` group does not have a match, match the letter "h" one or more times, followed by one or more characters that are neither "h" nor "t", followed by zero or more white\-space characters. Finally, match one or more occurrences of the letter "t". All characters captured after "h" and before the white\-spaces and "t" are included in a capturing group named `nonHours`.|  
  
 The `nonHours` capturing group contains the minute and possibly the second component of a custom date and time format string, along with any time separator symbols. The replacement pattern `HH${nonHours}` prepends the substring "HH" to these elements.  
  
### Displaying and changing the era in a date  
 The following example adds the "g" custom format specifier to the  <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> property of an object that represents the formatting conventions of the en\-US culture. This addition affects the following three standard format strings:  
  
-   The "D" \(long date\) standard format string, which maps directly to the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> property.  
  
-   The "f" \(full date \/ short time\) standard format string, which produces a result string that concatenates the substrings produced by the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> and <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> properties.  
  
-   The "F" \(full date \/ long time\) standard format string, which maps directly to the <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> property. Because we have not explicitly set this property value, it is generated dynamically by concatenating the <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> and <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> properties.  
  
 The example also shows how to change the era name for a culture whose calendar has a single era. In this case, the en\-US culture uses the Gregorian calendar, which is represented by a <xref:System.Globalization.GregorianCalendar> object. The <xref:System.Globalization.GregorianCalendar> class supports a single era, which it names A.D. \(Anno Domini\). The example changes the era name to C.E. \(Common Era\) by replacing the "g" custom format specifier in the format string assigned to the <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>property with a literal string. The use of a literal string is necessary, because the era name is typically returned by the <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> method from private data in the culture tables supplied by either the .NET Framework or the Windows operating system.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/example4.cs#11)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/example4.vb#11)]  
  
## Parsing date and time strings  
 Parsing involves converting the string representation of a date and time to a <xref:System.DateTime> or <xref:System.DateTimeOffset> value. Both of these types include the **languageKeyword tag is not supported!!!!**  
, **languageKeyword tag is not supported!!!!**  
, **languageKeyword tag is not supported!!!!**  
, and **languageKeyword tag is not supported!!!!**  
 methods to support parsing operations. The **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 methods convert a string that can have a variety of formats, whereas **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 require that the string have a defined format or formats. If the parsing operation fails, **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 throw an exception, whereas **languageKeyword tag is not supported!!!!**  
 and **languageKeyword tag is not supported!!!!**  
 return **languageKeyword tag is not supported!!!!**  
.  
  
 The parsing methods implicitly or explicitly use a <xref:System.Globalization.DateTimeStyles> enumeration value to determine which style elements \(such as leading, trailing, or inner white space\) can be present in the string to be parsed, and how to interpret the parsed string or any missing elements. If you don't provide a <xref:System.Globalization.DateTimeStyles> value when you call the **languageKeyword tag is not supported!!!!**  
 or **languageKeyword tag is not supported!!!!**  
 method, the default is <xref:System.Globalization.DateTimeStyles.AllowWhiteSpaces?displayProperty=fullName>, which is a composite style that includes the <xref:System.Globalization.DateTimeStyles.AllowLeadingWhite?displayProperty=fullName>, <xref:System.Globalization.DateTimeStyles.AllowTrailingWhite?displayProperty=fullName>, and <xref:System.Globalization.DateTimeStyles.AllowInnerWhite?displayProperty=fullName> flags. For the `ParseExact` and `TryParseExact` methods, the default is <xref:System.Globalization.DateTimeStyles.None?displayProperty=fullName>; the input string must correspond precisely to a particular custom date and time format string.  
  
 The parsing methods also implicitly or explicitly use a <xref:System.Globalization.DateTimeFormatInfo> object that defines the specific symbols and patterns that can occur in the string to be parsed. If you don't provide a <xref:System.Globalization.DateTimeFormatInfo> object, the <xref:System.Globalization.DateTimeFormatInfo> object for the current thread culture is used by default. For more information about parsing date and time strings, see the individual parsing methods, such as <xref:System.DateTime.Parse%2A?displayProperty=fullName>, <xref:System.DateTime.TryParse%2A?displayProperty=fullName>, <xref:System.DateTimeOffset.ParseExact%2A?displayProperty=fullName>, and <xref:System.DateTimeOffset.TryParseExact%2A?displayProperty=fullName>.  
  
 The following example illustrates the culture\-sensitive nature of parsing date and time strings. It tries to parse two date strings by using the conventions of the en\-US, en\-GB, fr\-FR, and fi\-FI cultures. The date that is interpreted as 8\/18\/2014 in the en\-US culture throws a <xref:System.FormatException> exception in the other three cultures because 18 is interpreted as the month number. 1\/2\/2015 is parsed as the second day of the first month in the en\-US culture, but as the first day of the second month in the remaining cultures.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parsing1.cs#15)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parsing1.vb#15)]  
  
 Date and time strings are typically parsed for two reasons:  
  
-   To convert user input into a date and time value.  
  
-   To round\-trip a date and time value; that is, to deserialize a date and time value that was previously serialized as a string.  
  
 The following sections discuss these two operations in greater detail.  
  
### Parsing user strings  
 When you parse date and time strings input by the user, you should always instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that reflects the user's cultural settings, including any customizations the user may have made. Otherwise, the  date and time object may have incorrect values. For information about how to instantiate a <xref:System.Globalization.DateTimeFormatInfo> object that reflects user cultural customizations, see the [DateTimeFormatInfo and dynamic data](#dynamic) section.  
  
 The following example illustrates the difference between a parsing operation that reflects user cultural settings and one that does not. In this case, the default system culture is en\-US, but the user has used Control Panel, **ui tag is not supported!!!!**  
 to change the short date pattern from its default of "M\/d\/yyyy" to "yy\/MM\/dd". When the user enters a string that reflects user settings, and the string is parsed by a <xref:System.Globalization.DateTimeFormatInfo> object that also reflects user settings \(overrides\), the parsing operation returns a correct result. However, when the string is parsed by a <xref:System.Globalization.DateTimeFormatInfo> object that reflects standard en\-US cultural settings, the parsing method throws a <xref:System.FormatException> exception because it interprets 14 as the number of the month, not the last two digits of the year.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/parse2.cs#16)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/parse2.vb#16)]  
  
### Serializing and deserializing date and time data  
 Serialized date and time data are expected to round\-trip; that is, all serialized and deserialized values should be identical. If a date and time value represents a single moment in time, the deserialized value should represent the same moment in time regardless of the culture or time zone of the system on which it was restored. To round\-trip date and time data successfully, you must use the conventions of the invariant culture, which is returned by the <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> property, to generate and parse the data. The formatting and parsing operations should never reflect the conventions of the default culture. If you use default cultural settings, the portability of the data is strictly limited; it can be successfully deserialized only on a thread whose cultural\-specific settings are identical to those of the thread on which it was serialized. In some cases, this means that the data cannot even be successfully serialized and deserialized on the same system.  
  
 If the time component of a date and time value is significant, it should also be converted to UTC and serialized by using the "o" or "r" [standard format string](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b). The time data can then be restored by calling a parsing method and passing it the appropriate format string along with the invariant culture as the **parameterReference tag is not supported!!!!**  
 argument.  
  
 The following example illustrates the process of round\-tripping a date and time value. It serializes a date and time on a system that observes U.S. Pacific time and whose current culture is en\-US.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize1.cs#17)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize1.vb#17)]  
  
 It deserializes the data on a system in the Brussels, Copenhagen, Madrid and Paris time zone and whose current culture is fr\-FR. The restored date is nine hours later than the original date, which reflects the time zone adjustment from eight hours behind UTC to one hour ahead of UTC. Both the original date and the restored date represent the same moment in time.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/serialize2.cs#18)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/serialize2.vb#18)]  
  
   
  
## 例  
 The following example uses reflection to get the properties of the <xref:System.Globalization.DateTimeFormatInfo> object for the English \(United States\) culture. It displays the value of those properties that contain custom format strings and uses those strings to display formatted dates.  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/cs/format1.cs#5)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.class/vb/format1.vb#5)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.Globalization.Calendar" />
    <altmember cref="T:System.Globalization.CultureInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DateTimeFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない \(インバリアントな\) <see cref="T:System.Globalization.DateTimeFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This constructor creates a <xref:System.Globalization.DateTimeFormatInfo> object that represents the date and time information of the invariant culture. To create a <xref:System.Globalization.DateTimeFormatInfo> object for a specific culture, create a <xref:System.Globalization.CultureInfo> object for that culture and retrieve the <xref:System.Globalization.DateTimeFormatInfo> object returned by its <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property.  
  
 The properties of the <xref:System.Globalization.DateTimeFormatInfo> object created by this constructor can be modified. However, you cannot modify the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property, because the invariant culture supports only a localized version of the Gregorian calendar. To create a <xref:System.Globalization.DateTimeFormatInfo> object that uses a specific calendar, you must instantiate a <xref:System.Globalization.CultureInfo> object that supports that calendar and assign the calendar to the <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> property of the <xref:System.Globalization.DateTimeFormatInfo> object returned by the <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> property.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.DateTimeFormat" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedDayNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の種類の 1 次元配列 <see cref="T:System.String" /> 、曜日のカルチャに固有の省略名を格納しています。</summary>
        <value>型の 1 次元配列 <see cref="T:System.String" /> 、曜日のカルチャに固有の省略名を格納しています。 配列は、 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "Fri"、および"Sat"、"Sun"、"Mon"、"Tue"、"Wed"、"Thu"が含まれています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定するには、配列は 1 次元である必要があり、正確に 7 つの要素があります。 最初の要素 \(インデックス 0 位置にある要素\) で定義されているカレンダーにおける週の最初の日を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。  
  
 カスタム書式指定文字列には、"ddd"書式指定子が含まれている場合、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> または <xref:System.DateTimeOffset.ToString%2A> メソッドには適切なメンバーが含まれています、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> 結果の文字列に"ddd"の代わりに配列。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。 場合は、選択した <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> サポートの簡略化された曜日名ではなく、配列には、完全な曜日名が含まれています。  
  
   
  
## 例  
 次の例では、読み取り\/書き込み <xref:System.Globalization.CultureInfo> 曜日名を省略形は使用し、英語 \(米国\) カルチャを表しているオブジェクトの <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A> プロパティです。 次に、"ddd"書式指定子を使用して、1 週間の 2014 年 5 月 28 日の開始の日付の文字列表現を表示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/cs/abbreviateddaynames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviateddaynames/vb/abbreviateddaynames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティは、多次元配列または長が正確には 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に現在関連付けられている月の省略名の文字列配列 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <value>月の省略名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 言語によっては、日付の一部である月の名前は属格で表示されます。 たとえば、RU\-RU またはロシア語 \(ロシア\) カルチャの日付は、1 日数と 1 Января \(1 月 1 日\) など、属月の名前で構成されます。 これらのカルチャでは、カスタム書式指定文字列には、"MMM"書式指定子が含まれている場合、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> または <xref:System.DateTimeOffset.ToString%2A> メソッドには適切なメンバーが含まれています、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> 結果の文字列に"MMM"の代わりに配列。  
  
 設定操作では、配列を正確に 13 個の要素では、1 次元の配列にする必要がありますので <xref:System.Globalization.Calendar> オブジェクト 13 の月のカレンダーに対応します。 12 の月がある暦の場合は、13 番目の要素がある必要があります <xref:System.String.Empty?displayProperty=fullName>します。 最初の要素 \(インデックス 0 位置にある要素\) によって定義された年の最初の月を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。  
  
 設定した場合、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティを設定する必要も、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> プロパティです。  
  
   
  
## 例  
 次の例では、読み取り\/書き込み <xref:System.Globalization.CultureInfo> 属月の名前を省略形は使用し、英語 \(米国\) カルチャを表しているオブジェクトの <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> と <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティです。 カルチャのサポートされているカレンダーで 1 か月あたりの月の省略名を含む日付の文字列表現が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で配列が多次元かの長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">配列または配列の要素の 1 つは、設定操作で <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">現在の設定操作で <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="AbbreviatedMonthNames">
      <MemberSignature Language="C#" Value="public string[] AbbreviatedMonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AbbreviatedMonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月を表すカルチャ固有の省略名を格納している 1 次元配列を取得または設定します。</summary>
        <value>月を表すカルチャ固有の省略名を格納している、13 個の要素を持つ 1 次元配列。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 配列は、 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "Oct"、"Nov"、"Dec"、"Jan"、"Feb"、"Mar"、"Apr"、"May"、"Jun"、"Jul"、"Aug"、"Sep"が含まれていて、""です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定すると、配列が 1 次元正確に 13 個の要素でする必要があります。<xref:System.Globalization.Calendar> オブジェクトでは、予定表と 13 か月間に対応します。 最初の要素 \(インデックス 0 位置にある要素\) によって定義された年の最初の月を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。  
  
 設定した場合、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> プロパティを設定する必要も、 <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティです。<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> と <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティを使用して、次の書式指定文字列を使用して日付の書式を設定します。  
  
-   標準日時書式指定文字列をエイリアス、カスタムの書式設定を"MMM"を含む文字列書式指定子。  
  
-   カスタムの日付と時刻の書式指定文字列を"MMM"は書式指定子です。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。 場合は、選択した <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> サポートの省略形の月名ではなく、配列には、完全な月名が含まれています。  
  
   
  
## 例  
 次の例では、読み取り\/書き込み <xref:System.Globalization.CultureInfo> 属月の名前を省略形は使用し、英語 \(米国\) カルチャを表しているオブジェクトの <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A> と <xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames%2A> プロパティです。 カルチャのサポートされているカレンダーにおける月の省略名を含む日付の文字列表現が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/cs/abbreviatedmonthnames1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.abbreviatedmonthgenitivenames/vb/abbreviatedmonthnames1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティは、多次元配列または長が厳密に 13 に、配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
      </Docs>
    </Member>
    <Member MemberName="AMDesignator">
      <MemberSignature Language="C#" Value="public string AMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"ante meridiem" \(午前\) の時間の文字列指定子を取得または設定します。</summary>
        <value>"ante meridiem" の時間の文字列指定子。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "am"です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> プロパティが使用されるすべての時間 0:00:00 \(午前 0 時\) 11:59:59.999 からします。  
  
 カスタム書式指定文字列に"tt"書式指定子が含まれていて、正午より前の場合、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> または <xref:System.DateTimeOffset.ToString%2A> メソッドには値が含まれています、 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> 結果の文字列に"tt"の代わりにプロパティです。 カスタム書式指定文字列には、"t"のカスタム書式指定子の最初の文字のみが含まれている場合、 <xref:System.Globalization.DateTimeFormatInfo.AMDesignator%2A> プロパティの値が含まれています。 AM と PM の区別を維持するために必要とする言語の場合"tt"を使用する必要があります。たとえば、日本語、最初の文字ではなく 2 つ目の文字が異なる AM と PM 指定子です。  
  
 カルチャを午前の指定子を使用しない場合は、このプロパティは、空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="Calendar">
      <MemberSignature Language="C#" Value="public System.Globalization.Calendar Calendar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.Calendar Calendar" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.Calendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.Calendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャで使用する暦を取得または設定します。</summary>
        <value>現在のカルチャで使用する暦。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> は、 <see cref="T:System.Globalization.GregorianCalendar" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティに関連付けられているカルチャに対して有効では予定表のみでは、 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトです。<xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=fullName> プロパティは、特定のカルチャで使用できる暦を指定し、 <xref:System.Globalization.CultureInfo.Calendar%2A?displayProperty=fullName> プロパティは、カルチャの既定のカレンダーを指定します。  
  
 このプロパティの値を変更するにも、次のプロパティに影響します。 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.DayNames%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.CalendarWeekRule%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>, 、<xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A>, 、および <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A>です。  
  
 たとえば、現在のスレッドのカルチャが日本語の場合は、このプロパティでは <xref:System.Globalization.JapaneseCalendar>, 、<xref:System.Globalization.GregorianCalendarTypes.Localized><xref:System.Globalization.GregorianCalendar>, 、または <xref:System.Globalization.GregorianCalendarTypes.USEnglish><xref:System.Globalization.GregorianCalendar>します。 ときに、 <xref:System.Globalization.JapaneseCalendar> を使用する既定の長い日付指定子は、"gg y '\\x5e74 AM' \\x6708 いた '\\x65e5'"です。 ときに、 <xref:System.Globalization.GregorianCalendarTypes.Localized><xref:System.Globalization.GregorianCalendar>, 、使用する既定の長い日付指定子は"yyyy '\\x5e74 AM' \\x6708 いた '\\x65e5'"です。  
  
   
  
## 例  
 次の例、 `ChangeCalendar` カルチャでサポートされていない場合か、現在の暦では既にしない限り、指定した予定表に、カルチャの現在の暦を変更する方法です。 メソッドを呼び出すコードをインスタンス化、 <xref:System.Globalization.CultureInfo> アラビア語 \(エジプト\) のカルチャを表す、最初のカレンダーを日本語の暦に変更を試みたとするオブジェクト。 日本語のカレンダーがサポートされていないため、方式では、カルチャの暦は変わりません。 ただし、ため、ウムアルクラ暦のメンバーである um、 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A?displayProperty=fullName> コレクション、メソッドが成功現在の暦を行う、AR\-EG カルチャします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.Calendar\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/cs/CalendarTest1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.Calendar\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.Calendar/vb/CalendarTest1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティに設定される、 <see cref="T:System.Globalization.Calendar" /> オブジェクトは、現在のカルチャは無効です。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="CalendarWeekRule">
      <MemberSignature Language="C#" Value="public System.Globalization.CalendarWeekRule CalendarWeekRule { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.CalendarWeekRule CalendarWeekRule" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CalendarWeekRule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CalendarWeekRule</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年の最初の週を判断するために使用する規則を指定する値を取得または設定します。</summary>
        <value>年の最初の週を決定する値。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> は <see cref="F:System.Globalization.CalendarWeekRule.FirstDay" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、無効な値に設定される <see cref="T:System.Globalization.CalendarWeekRule" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">現在の設定操作で <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.Globalization.CalendarWeekRule" />
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>簡易コピーを作成、 <see cref="T:System.Globalization.DateTimeFormatInfo" />です。</summary>
        <returns>新しい <see cref="T:System.Globalization.DateTimeFormatInfo" /> 元からコピーされたオブジェクト <see cref="T:System.Globalization.DateTimeFormatInfo" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クローンが書き込み可能な場合でも、元 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトは読み取り専用です。 そのため、複製のプロパティは、ユーザー定義パターンで変更できます。  
  
 オブジェクトの簡易コピーのみのオブジェクトのコピーであります。 オブジェクトに他のオブジェクトへの参照が含まれている場合でも、シャロー コピーでは、参照されるオブジェクトのコピーは作成されません。 元のオブジェクトを代わりに参照します。 これに対し、オブジェクトのディープ コピーは、オブジェクトのコピーと直接または間接的には、そのオブジェクトによって参照されるすべてのコピーを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトを取得します。</summary>
        <value>現在のスレッドに対する <see cref="T:System.Globalization.CultureInfo" /> オブジェクトに基づく読み取り専用の <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo>によって返されるオブジェクト、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>プロパティには、ユーザーのオーバーライドが反映されます。  
  
   
  
## 例  
 次の例では、<xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>取得するプロパティを<xref:System.Globalization.DateTimeFormatInfo>EN\-US カルチャをここでは、現在のカルチャの書式指定規則を表すオブジェクト。 書式設定文字列と書式設定プロパティが 6 つの結果の文字列が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.CurrentInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/cs/CurrentInfo1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.CurrentInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.Globalization.DateTimeFormatInfo.CurrentInfo/vb/CurrentInfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
      </Docs>
    </Member>
    <Member MemberName="DateSeparator">
      <MemberSignature Language="C#" Value="public string DateSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DateSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>日付の構成要素、つまり年、月、および日を区切る文字列を取得または設定します。</summary>
        <value>日付の構成要素、つまり年、月、および日を区切る文字列。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> はスラッシュ \(\/\)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタム書式指定文字列には、「\/」書式指定子が含まれている場合、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> メソッドの値を表示する <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> 、スラッシュ \(\/\) で、結果の文字列の代わりにします。  
  
 <xref:System.Globalization.DateTimeFormatInfo.DateSeparator%2A> プロパティ定義の日付の区切り記号を置換する文字列 \(「\/」カスタム日付\/時刻書式指定子\) で書式設定操作の結果の文字列にします。 また、解析操作で日付の区切り記号文字列を定義します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Globalization.CultureInfo> オブジェクト EN\-US カルチャの変更をその日付の区切り記号"\-"、"d"、"G"、"g"標準書式指定文字列を使用して日付を表示するとします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.DateSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/cs/dateseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.DateSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.dateseparator/vb/dateseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      </Docs>
    </Member>
    <Member MemberName="DayNames">
      <MemberSignature Language="C#" Value="public string[] DayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] DayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.DayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>曜日を表すカルチャ固有の完全名を格納する 1 次元の文字列配列を取得または設定します。</summary>
        <value>曜日を表すカルチャ固有の完全名を格納している 1 次元の文字列配列。 配列は、 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "Sunday"、"Monday"、"Tuesday"、"Wednesday"、"Thursday"、"Friday"、および"Saturday"が含まれています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを設定するには、配列は 1 次元である必要があり、正確に 7 つの要素があります。 最初の要素 \(インデックス 0 位置にある要素\) で定義されているカレンダーにおける週の最初の日を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。  
  
 カスタム書式指定文字列には、"dddd"書式指定子が含まれている場合、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> メソッドには、適切な値が含まれています <xref:System.Globalization.DateTimeFormatInfo.DayNames%2A> 結果の文字列に"dddd"の代わりにメンバーです。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティは、多次元配列または長が正確には 7 ではない配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      </Docs>
    </Member>
    <Member MemberName="FirstDayOfWeek">
      <MemberSignature Language="C#" Value="public DayOfWeek FirstDayOfWeek { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DayOfWeek FirstDayOfWeek" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FirstDayOfWeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DayOfWeek</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>週の最初の曜日を取得または設定します。</summary>
        <value>週の最初の日を表す列挙値。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> は <see cref="F:System.DayOfWeek.Sunday" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、無効な値に設定される <see cref="T:System.DayOfWeek" /> 値。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="FullDateTimePattern">
      <MemberSignature Language="C#" Value="public string FullDateTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.FullDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値と長い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値と長い時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 "F"標準書式指定文字列は、のエイリアス、 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティです。 つまり、このプロパティに割り当てられているカスタム書式指定文字列は、"F"標準書式指定文字列の結果文字列の形式を定義します。 詳細については、「[Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b)」を参照してください。  
  
 値、 <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> プロパティを動的に連結して生成、 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> と <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティは、スペースで区切られます。 この動的な割り当ては、次の条件が発生します。  
  
-   プロパティの値が前に取得される場合、明示的に設定されました。  
  
-   時の値、 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティが変更されました。  
  
-   時の値、 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティが変更されました。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
   
  
## 例  
 次の例の値を表示する <xref:System.Globalization.DateTimeFormatInfo.FullDateTimePattern%2A> いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CPP/dtfi_fulldatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.FullDateTimePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/CS/dtfi_fulldatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.FullDateTimePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.FullDateTimePattern/VB/dtfi_fulldatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedDayName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">
          <see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在関連付けられているカルチャに基づく週の指定した曜日のカルチャに固有の省略名を返す <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <returns>によって表される曜日のカルチャに固有の省略名 <paramref name="dayofweek" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトに、このメソッドから文字列を返す、 <xref:System.Globalization.GregorianCalendar>:  
  
|`dayofweek`|戻り値|  
|-----------------|---------|  
|日曜日|"太陽"になります|  
|月曜日|"Mon"|  
|火曜日|"Tue"|  
|水曜日|"Wed"|  
|木曜日|"Thu"|  
|金曜日|"Fri"|  
|土曜日|"Sat"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> が有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedDayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedEraName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 \(年号\) を表す整数。</param>
        <summary>省略形が存在する場合は、指定した時代 \(年号\) の省略名を格納している文字列を返します。</summary>
        <returns>省略形が存在する場合は、指定した時代 \(年号\) の省略名を格納している文字列。  
  
 または  
  
 省略形が存在しない場合は、時代 \(年号\) の完全名を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時代 \(年号\) の名前は、予定表を使用して固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」または「紀元」は、グレゴリオ暦の現在の時代 \(年号\)。  
  
 有効な値 `era` に記載されて、 <xref:System.Globalization.Calendar.Eras%2A> 適切なクラスのプロパティから派生した <xref:System.Globalization.Calendar>します。 例: <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=fullName> この実装でサポートされる時代 \(年号\) の一覧を表示します。  
  
 <xref:System.Globalization.JapaneseCalendar> クラス名が完全に時代 \(年号\) 名の先頭の文字省略時代 \(年号\)。 この文字は小文字ローマ字の省略名か、一文字漢字の省略形です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 指定されたカレンダーで有効な時代 \(年号\) を表さない、 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティです。</exception>
        <block subset="none" type="usage">
          <para>If <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> is the <see cref="T:System.Globalization.TaiwanCalendar" /> but the <see cref="P:System.Threading.Thread.CurrentCulture" /> is not "zh-TW", then <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, and <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> return an empty string ("").</para>
        </block>
        <altmember cref="T:System.Globalization.JapaneseCalendar" />
        <altmember cref="T:System.Globalization.TaiwanCalendar" />
      </Docs>
    </Member>
    <Member MemberName="GetAbbreviatedMonthName">
      <MemberSignature Language="C#" Value="public string GetAbbreviatedMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetAbbreviatedMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する 1 ~ 13 の月の名前を表す整数。</param>
        <summary>現在関連付けられたカルチャに基づいて、指定した月のカルチャに固有の省略名を返します <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <returns>表される月のカルチャに固有の省略名 <paramref name="month" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトに、このメソッドから文字列を返す、 <xref:System.Globalization.GregorianCalendar> オブジェクトです。  
  
|`month`|戻り値|  
|-------------|---------|  
|1|"Jan"|  
|2|"Feb"|  
|3|"Mar"|  
|4|"Apr"|  
|5|"May"|  
|6|"Jun"|  
|7|"Jul"|  
|9|"Aug"|  
|9|"Sep"|  
|10|"Oct"|  
|11|"Nov"|  
|12|"Dec"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、予定表と 13 か月間に対応できます。 12 か月の暦では、13 番目の月の名前として空の文字列が常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> 1 より小さいか、13 を超えるです。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>日付と時刻の値を形式指定できるすべての標準パターンを返します。</summary>
        <returns>日付と時刻の値を形式指定できる標準パターンを格納する配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、標準書式指定文字列に対応するすべてのカスタム書式指定文字列を格納する配列を返します。 参照してください [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) 標準書式指定文字列の一覧にします。  
  
 によって返される配列で、カスタム書式指定文字列を使用することができます、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 書式設定操作でのメソッドです。 ただし、作成する場合は、日付と時刻の値の文字列形式をことに返されるフォーマット操作常に解析できませんで正常に、 `Parse` と `TryParse` メソッドです。 によって、カスタム書式指定文字列が返されるため、考えないで、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドは、ラウンドト リップの日付と時刻の値を使用できます。 この問題を説明する例を次に示します。 取得、 <xref:System.Globalization.DateTimeFormatInfo> イタリア \(イタリア語\) のカルチャの書式情報を格納するオブジェクト。 によって返される配列の各カスタム書式指定文字列を渡します、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns> メソッドを <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> 日付と時刻の文字列形式を作成します。 この例では呼び出すことによってこの値を解析を試みます、 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=fullName> メソッドです。 例の出力に示すように、日付を生成しないカスタム書式指定文字列の一部と、時刻値のラウンドト リップのしました。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex1.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex1.vb#1)]  
  
 いくつかの定義済みのカスタム形式で表現できる日時の文字列形式を解析するには、次の方法のいずれかを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName>  
  
 によって返される配列でのカスタム書式指定文字列、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 方法をカルチャの現在の暦に依存、 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を提供します。 予定表が変更された場合、このメソッドによって返される配列も変更されます。  
  
   
  
## 例  
 次の例では、日付、インバリアント カルチャの書式指定文字列と書式指定文字列を使用すると、特定の日付の書式を設定することにすると生成される結果の文字列が表示されます。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsinv.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsinv.vb#3)]  
  
 インスタンス化、 <xref:System.Globalization.DateTimeFormatInfo> を呼び出すことによって、インバリアント カルチャを表すオブジェクト、 <xref:System.Globalization.DateTimeFormatInfo.%23ctor%2A> コンス トラクターです。 これをも取得でした、 <xref:System.Globalization.DateTimeFormatInfo> からインバリアント カルチャを表す、 <xref:System.Globalization.DateTimeFormatInfo.InvariantInfo%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public string[] GetAllDateTimePatterns (char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string[] GetAllDateTimePatterns(char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="format">標準書式指定文字列。</param>
        <summary>指定された標準書式指定文字列を使用して日付と時刻の値を形式指定できるすべてのパターンを返します。</summary>
        <returns>指定された書式指定文字列を使用して日付と時刻の値を形式指定できる標準パターンを格納している配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、特定の標準書式指定文字列に対応するカスタム書式指定文字列を格納する配列を返します。 参照してください [Standard Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/bb79761a-ca08-44ee-b142-b06b3e2fc22b) 標準書式指定文字列の一覧にします。  
  
 によって返される配列で、カスタム書式指定文字列を使用することができます、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 書式設定操作でのメソッドです。 ただし、作成する場合は、日付と時刻の値の文字列形式をことに返されるフォーマット操作常に解析できませんで正常に、 `Parse` と `TryParse` メソッドです。 によって、カスタム書式指定文字列が返されるため、考えないで、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> メソッドは、ラウンドト リップの日付と時刻の値を使用できます。 この問題を説明する例を次に示します。 取得、 <xref:System.Globalization.DateTimeFormatInfo> ロシア \(ロシア語\) のカルチャの書式情報を格納するオブジェクト。 呼び出す、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%28System.Char%29> 各標準書式指定文字列とし、パスの書式設定に返される配列に文字列の各カスタム メソッド、 <xref:System.DateTime.ToString%28System.String%29?displayProperty=fullName> 日付と時刻の文字列形式を作成します。 この例では呼び出すことによってこの値を解析を試みます、 <xref:System.DateTime.TryParse%28System.String%2CSystem.DateTime%40%29?displayProperty=fullName> メソッドです。 例の出力に示すように、日付を生成しないカスタム書式指定文字列の一部と、時刻値のラウンドト リップのしました。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/cs/getalldatetimepatternsex2.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.getalldatetimepatterns/vb/getalldatetimepatternsex2.vb#2)]  
  
 いくつかの定義済みのカスタム形式で表現できる日時の文字列形式を解析するには、次の方法のいずれかを呼び出します。  
  
-   <xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>  
  
-   <xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>  
  
-   <xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName>  
  
-   <xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName>  
  
 によって返される配列でのカスタム書式指定文字列、 <xref:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns%2A> 方法をカルチャの現在の暦に依存、 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトの書式情報を提供します。 予定表が変更された場合、このメソッドによって返される配列も変更されます。  
  
   
  
## 例  
 次の例では、現在の暦の日付と時刻のパターンを表示します。  
  
 [!code-cpp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CPP/source.cpp#1)]
 [!code-csharp[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/CS/source.cs#1)]
 [!code-vb[Classic DateTimeFormatInfo.GetAllDateTimePatterns Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic DateTimeFormatInfo.GetAllDateTimePatterns Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="format" /> 有効な標準形式文字列ではありません。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="GetDayName">
      <MemberSignature Language="C#" Value="public string GetDayName (DayOfWeek dayofweek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetDayName(valuetype System.DayOfWeek dayofweek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayofweek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayofweek">
          <see cref="T:System.DayOfWeek" /> 値。</param>
        <summary>現在関連付けられているカルチャに基づく週の指定した曜日のカルチャに固有の完全名を返す <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <returns>によって表される曜日のカルチャに固有の完全名 <paramref name="dayofweek" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトに、このメソッドから文字列を返す、 <xref:System.Globalization.GregorianCalendar> オブジェクトです。  
  
|`dayofweek`|戻り値|  
|-----------------|---------|  
|日曜日|"Sunday"|  
|月曜日|"Monday"|  
|火曜日|"Tuesday"|  
|水曜日|"Wednesday"|  
|木曜日|"Thursday"|  
|金曜日|"Friday"|  
|土曜日|"Saturday"|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayofweek" /> は有効な <see cref="T:System.DayOfWeek" /> 値ではありません。</exception>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DayNames" />
        <altmember cref="T:System.DayOfWeek" />
      </Docs>
    </Member>
    <Member MemberName="GetEra">
      <MemberSignature Language="C#" Value="public int GetEra (string eraName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetEra(string eraName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eraName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eraName">時代 \(年号\) の名前を含む文字列です。</param>
        <summary>指定した時代 \(年号\) を表す整数を返します。</summary>
        <returns>場合は、時代 \(年号\) を表す整数 <paramref name="eraName" /> が有効なそれ以外の場合場合、\-1 です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時代 \(年号\) の名前は、予定表を使用して固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」または「紀元」は、グレゴリオ暦の現在の時代 \(年号\)。  
  
 比較 `eraName` 大文字と小文字は、たとえば、「a. d.」、「a. d.」に相当します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 場合にのみ省略時代 \(年号\) の名前で句読点を無視、 <xref:System.Globalization.GregorianCalendar> で選択した <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A?displayProperty=fullName> カルチャ時代 \(年号\) の名前として「a. d.」を使用して、たとえば、「a. d.」は"AD"に相当します。  
  
 <xref:System.Globalization.DateTimeFormatInfo.GetEra%2A> 比較 `eraName` によって返されるすべての時代 \(年号\) の名前を持つ <xref:System.Globalization.DateTimeFormatInfo.GetEraName%2A> によって返される省略形の時代 \(年号\) の名前を使用して <xref:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName%2A>します。  
  
   
  
## 例  
 次の例で示すは <xref:System.Globalization.DateTimeFormatInfo> 、暦はグレゴリオ暦のカルチャ「a. d.」の時代 \(年号\) の名前を使用する場合にのみ、時代 \(年号\) の名前で句読点を無視します。  
  
 [!code-cpp[System.Globalization.GregorianCalendar.GetEra\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CPP/gregorian_getera.cpp#1)]
 [!code-csharp[System.Globalization.GregorianCalendar.GetEra\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/CS/gregorian_getera.cs#1)]
 [!code-vb[System.Globalization.GregorianCalendar.GetEra\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.GregorianCalendar.GetEra/VB/gregorian_getera.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="eraName" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
        <altmember cref="T:System.Globalization.Calendar" />
      </Docs>
    </Member>
    <Member MemberName="GetEraName">
      <MemberSignature Language="C#" Value="public string GetEraName (int era);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetEraName(int32 era) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="era" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="era">時代 \(年号\) を表す整数。</param>
        <summary>指定した時代 \(年号\) の名前を格納している文字列を返します。</summary>
        <returns>時代 \(年号\) の名前を格納している文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時代 \(年号\) の名前は、予定表を使用して固定小数点またはイベントから計算された期間に参照名です。 たとえば、「a. d.」または「紀元」は、グレゴリオ暦の現在の時代 \(年号\)。  
  
 有効な値 `era` に記載されて、 <xref:System.Globalization.Calendar.Eras%2A> 適切なクラスのプロパティから派生した <xref:System.Globalization.Calendar>します。 例: <xref:System.Globalization.JapaneseCalendar.Eras%2A?displayProperty=fullName> この実装でサポートされる時代 \(年号\) の一覧を表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="era" /> 指定されたカレンダーで有効な時代 \(年号\) を表さない、 <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> プロパティです。</exception>
        <block subset="none" type="usage">
          <para>If the calendar is represented by <see cref="T:System.Globalization.TaiwanCalendar" /> but the <see cref="P:System.Threading.Thread.CurrentCulture" /> is not "zh-TW", then <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, and <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> return an empty string ("").</para>
        </block>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetEra(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">必須の形式指定サービスの型。</param>
        <summary>日付と時刻の書式指定サービスを提供する指定した型のオブジェクトを返します。</summary>
        <returns>場合は、現在のオブジェクト <paramref name="formatType" /> は現在の型と同じ <see cref="T:System.Globalization.DateTimeFormatInfo" />。 そうしないと、 <see langword="null" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Format(String, IFormatProvider)` 基本データ型でサポートされる方法は、このメソッドを呼び出すときに、現在 <xref:System.Globalization.DateTimeFormatInfo> として渡されるオブジェクト、 <xref:System.IFormatProvider> パラメーター。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo GetInstance (IFormatProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo GetInstance(class System.IFormatProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="provider">
          <see cref="T:System.IFormatProvider" /> を取得する、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。  
  
 または  
  
 <see cref="P:System.Globalization.DateTimeFormatInfo.CurrentInfo" /> を取得する <see langword="null" />。</param>
        <summary>返します。、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが、指定された関連付け <see cref="T:System.IFormatProvider" />します。</summary>
        <returns>A <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトに関連付けられている <see cref="T:System.IFormatProvider" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドの `formatProvider` を使用して、 <xref:System.Globalization.DateTimeFormatInfo> オブジェクトとして、 `Type` パラメーター。 場合 `formatProvider` は `null` または <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> 返します `null`, 、このメソッドが戻る <xref:System.Globalization.DateTimeFormatInfo.CurrentInfo%2A>します。  
  
 アプリケーションは、取得して、 <xref:System.Globalization.DateTimeFormatInfo> 、特定のカルチャを使用して、次の方法のいずれかのオブジェクト。  
  
-   <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName> プロパティ。  
  
-   <xref:System.Globalization.DateTimeFormatInfo.GetInstance%2A> 、メソッド、 `provider` は、 <xref:System.Globalization.CultureInfo> オブジェクトです。  
  
 A <xref:System.Globalization.DateTimeFormatInfo> を特定のカルチャまたはニュートラル カルチャではなく、インバリアント カルチャにのみ、オブジェクトを作成できます。  
  
 インバリアント カルチャ、特定のカルチャおよびのニュートラル カルチャの詳細については、次を参照してください。、 <xref:System.Globalization.CultureInfo> クラスの記述。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="GetMonthName">
      <MemberSignature Language="C#" Value="public string GetMonthName (int month);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetMonthName(int32 month) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="month" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="month">取得する 1 ~ 13 の月の名前を表す整数。</param>
        <summary>現在関連付けられているカルチャに基づき、指定された月のカルチャに固有の完全名を返します <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <returns>によって表される月のカルチャに固有の完全名 <paramref name="month" />します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定のインバリアント <xref:System.Globalization.DateTimeFormatInfo> オブジェクトに、このメソッドから文字列を返す、 <xref:System.Globalization.GregorianCalendar> オブジェクトです。  
  
|`month`|戻り値|  
|-------------|---------|  
|1|"January"|  
|2|"February"|  
|3|"March"|  
|4|"April"|  
|5|"May"|  
|6|"June"|  
|7|"July"|  
|9|"August"|  
|9|"September"|  
|10|"October"|  
|11|「November」|  
|12|"December"|  
|13|""|  
  
 <xref:System.Globalization.Calendar> オブジェクトは、予定表と 13 か月間に対応できます。 12 か月の暦では、13 番目の月の名前として空の文字列が常に返されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="month" /> 1 より小さいか、13 を超えるです。</exception>
        <altmember cref="T:System.Globalization.Calendar" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Globalization.GregorianCalendar" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      </Docs>
    </Member>
    <Member MemberName="GetShortestDayName">
      <MemberSignature Language="C#" Value="public string GetShortestDayName (DayOfWeek dayOfWeek);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetShortestDayName(valuetype System.DayOfWeek dayOfWeek) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dayOfWeek" Type="System.DayOfWeek" />
      </Parameters>
      <Docs>
        <param name="dayOfWeek">
          <see cref="T:System.DayOfWeek" /> 値のいずれか。</param>
        <summary>現在関連付けられている週の指定した曜日の最も短い省略形の曜日名を取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <returns>対応する曜日の省略名、 <paramref name="dayOfWeek" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブの予定表の名前と完全および省略形の月と曜日名を指定するプロパティの一覧です。  
  
 [!code-csharp[sys.glob.DTFI1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dayOfWeek" /> 値ではない、 <see cref="T:System.DayOfWeek" /> 列挙します。</exception>
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.DateTimeFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取り専用で、既定値を取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトのカルチャに依存しない \(インバリアントな\)。</summary>
        <value>カルチャに依存しない \(インバリアントな\) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のカルチャに関係なく、このプロパティは変更されません。 このため、インバリアント カルチャの <xref:System.Globalization.DateTimeFormatInfo> 解析および複数カルチャは、データの操作を書式設定に一貫性があり、カルチャに依存しない結果を生成するオブジェクトを使用できます。 たとえば、複数のカルチャの日付と時刻のデータを文字列形式に永続化する場合は、それを形式指定できるを使用して、 <xref:System.Globalization.DateTimeFormatInfo> インバリアント カルチャのオブジェクトで、保存します。 インバリアント カルチャを使用して解析できる <xref:System.Globalization.DateTimeFormatInfo> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.CultureInfo.InvariantCulture" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトが読み取り専用でない場合は <see langword="false" />です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="LongDatePattern">
      <MemberSignature Language="C#" Value="public string LongDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い日付値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドによって複合書式指定文字列を使用するが"D"標準書式指定文字列を指定します。 次の例は、次の間の関係を示しています。"D"標準書式指定文字列で、カスタム書式を設定によって返される文字列、 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> プロパティ、およびカルチャ固有の日付の表現です。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern1.vb#2)]  
  
 参照してください [Custom Date and Time Format Strings](http://msdn.microsoft.com/ja-jp/98b374e3-0cc2-4c78-ab44-efb671d71984) など"dddd, dd MMMM yyyy"カスタム書式指定文字列を構築する部品として使用できる個々 のカスタム書式指定子にします。  
  
 正確な文字列、日付の区切り記号のプレース ホルダーを使用する代わりに、長い日付パターン、日付の区切り記号を設定する必要があります。 たとえば、年\-月\-日のパターンを取得するには、「年\-月\-日」の長い日付パターンを設定します。  
  
 カルチャの変更によって、カレンダーが使用されている場合、このプロパティの値を変更できます。 たとえば、次の例を示していますが、どのように<xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> のプロパティ、 <xref:System.Globalization.CultureInfo> 時点で、アラビア語 \(シリア\) カルチャを表すオブジェクトの変更、 <xref:System.Globalization.Calendar> にカルチャが変更を使用するオブジェクト。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/longdatepattern2.cs#3)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/longdatepattern2.vb#3)]  
  
   
  
## 例  
 次の例の値を表示する、 <xref:System.Globalization.DateTimeFormatInfo.LongDatePattern%2A> いくつかのカルチャのプロパティです。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongDatePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CPP/dtfi_longdatepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongDatePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/CS/dtfi_longdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongDatePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongDatePattern/VB/dtfi_longdatepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="LongTimePattern">
      <MemberSignature Language="C#" Value="public string LongTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LongTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.LongTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>長い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>長い形式の時刻値の書式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドによって複合書式指定文字列を使用するが"T"標準書式指定文字列を指定します。  
  
 時間の区切り記号のプレース ホルダーを使用する代わりに正確な文字列に長い時刻のパターンには、時刻の区切り記号を設定することをお勧めします。 たとえば、パターン」\-mm、ss を取得するには、"h mm ss"の長い日付パターンを設定します。  
  
   
  
## 例  
 次の例の値を表示する <xref:System.Globalization.DateTimeFormatInfo.LongTimePattern%2A> いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.LongTimePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CPP/dtfi_longtimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.LongTimePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/CS/dtfi_longtimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.LongTimePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.LongTimePattern/VB/dtfi_longtimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthDayPattern">
      <MemberSignature Language="C#" Value="public string MonthDayPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MonthDayPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthDayPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>月と日の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>月と日の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドな文字列の複合書式指定では、"m"および"M"標準書式指定文字列の操作を指定したとします。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 日付の区切り記号のプレース ホルダーを使用する代わりに正確な文字列の月と日のパターンには、日付の区切り記号を設定することをお勧めします。 たとえば、パターン MM DD を取得するには、月と日のパターンは、"MM DD"を設定します。  
  
   
  
## 例  
 次の例の値を表示する <xref:System.Globalization.DateTimeFormatInfo.MonthDayPattern%2A> いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.MonthDayPattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CPP/dtfi_monthdaypattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.MonthDayPattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/CS/dtfi_monthdaypattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.MonthDayPattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.MonthDayPattern/VB/dtfi_monthdaypattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="MonthGenitiveNames">
      <MemberSignature Language="C#" Value="public string[] MonthGenitiveNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthGenitiveNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に現在関連付けられている月の名前の文字列配列 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <value>月名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 言語によっては、日付の一部である月の名前は属格で表示されます。 たとえば、ロシア語 \(ロシア\) または"RU\-RU"での日付、カルチャは日の値と、属月名の 1 Января などです。  
  
 このプロパティが設定されている場合、配列は 1 次元である必要があり、正確に 13 個の要素があります。<xref:System.Globalization.Calendar> オブジェクトでは、予定表と 13 か月間に対応します。 最初の要素 \(インデックス 0 位置にある要素\) によって定義された年の最初の月を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。設定した場合、 <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> プロパティを設定する必要も、 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> プロパティです。  
  
   
  
## 例  
 次の例は、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブの予定表の名前と完全および省略形の月と曜日名を指定するプロパティの一覧です。  
  
 [!code-csharp[sys.glob.DTFI1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で配列が多次元かの長さが厳密に 13 ではありません。</exception>
        <exception cref="T:System.ArgumentNullException">配列またはその要素の 1 つは、設定操作で <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">現在の設定操作で <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthGenitiveNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
      </Docs>
    </Member>
    <Member MemberName="MonthNames">
      <MemberSignature Language="C#" Value="public string[] MonthNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] MonthNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.MonthNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定の種類の 1 次元配列 <see cref="T:System.String" /> の月のカルチャに固有の完全名を含んでいます。</summary>
        <value>型の 1 次元配列 <see cref="T:System.String" /> の月のカルチャに固有の完全名を含んでいます。 12 か月の暦では、配列の 13 番目の要素は空の文字列になります。 配列は、 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "January"、"February"、"March"、"April"、"May"、"June"、"July"、"August"、"September"、"October"、"November"、"December"が含まれていて、""です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティが設定されている場合、配列は 1 次元である必要があり、正確に 13 個の要素があります。<xref:System.Globalization.Calendar> オブジェクトでは、予定表と 13 か月間に対応します。 最初の要素 \(インデックス 0 位置にある要素\) によって定義された年の最初の月を表す、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティです。  
  
 設定した場合、 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> プロパティを設定する必要も、 <xref:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames%2A> プロパティです。  
  
 カスタムのパターンには、"MMMM"の形式パターンが含まれている場合 <xref:System.DateTime.ToString%2A?displayProperty=fullName> の値を表示 <xref:System.Globalization.DateTimeFormatInfo.MonthNames%2A> フォーマット パターンでは、"MMMM"の代わりにします。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティは、多次元配列または長が厳密に 13 に、配列に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AbbreviatedMonthNames" />
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.MonthGenitiveNames" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetMonthName(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="NativeCalendarName">
      <MemberSignature Language="C#" Value="public string NativeCalendarName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NativeCalendarName" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在関連付けられた暦のネイティブな名前を取得 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <value>現在関連付けられているカルチャで使用する暦のネイティブな名前 <see cref="T:System.Globalization.DateTimeFormatInfo" /> その名前がある場合は、オブジェクトまたは空の文字列 \(""\) ネイティブの予定表の名前が使用できない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブの予定表の名前と完全および省略形の月と曜日名を指定するプロパティの一覧です。  
  
 [!code-csharp[sys.glob.DTFI1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>If <see cref="P:System.Globalization.DateTimeFormatInfo.Calendar" /> is the <see cref="T:System.Globalization.TaiwanCalendar" /> but the <see cref="P:System.Threading.Thread.CurrentCulture" /> is not "zh-TW", then <see cref="P:System.Globalization.DateTimeFormatInfo.NativeCalendarName" />, <see cref="M:System.Globalization.DateTimeFormatInfo.GetEraName(System.Int32)" />, and <see cref="M:System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(System.Int32)" /> return an empty string ("").</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PMDesignator">
      <MemberSignature Language="C#" Value="public string PMDesignator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PMDesignator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.PMDesignator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>"post meridiem" \(午後\) の時間の文字列指定子を取得または設定します。</summary>
        <value>"post meridiem" \(午後\) の時間の文字列指定子。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> "PM"です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> プロパティの 12時 00分: 00 \(正午\) から 23:59:59.999 使用します。  
  
 カスタムのパターンには、フォーマット パターン"tt"が含まれています。、、、時間が午後の時刻、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> の値を表示 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> フォーマット パターン"tt"の代わりにします。 カスタムのパターンには、書式パターン"t"の最初の文字のみが含まれている場合 <xref:System.Globalization.DateTimeFormatInfo.PMDesignator%2A> が表示されます。 アプリケーションでは、AM と PM の区別を維持するために必要とする言語の場合、"tt"を使用する必要があります。 たとえば、日本語の場合、AM\/PM 指定子の 2 番目の文字は異なりますが、先頭文字は同じです。  
  
 PM 指定子を使用してカルチャでは、このプロパティは、空の文字列を返します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.AMDesignator" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.DateTimeFormatInfo ReadOnly (System.Globalization.DateTimeFormatInfo dtfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.DateTimeFormatInfo ReadOnly(class System.Globalization.DateTimeFormatInfo dtfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DateTimeFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dtfi" Type="System.Globalization.DateTimeFormatInfo" />
      </Parameters>
      <Docs>
        <param name="dtfi">ラップする <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクト。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパーを返します。</summary>
        <returns>読み取り専用 <see cref="T:System.Globalization.DateTimeFormatInfo" /> ラッパーです。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このラッパーに `dtfi`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dtfi" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="RFC1123Pattern">
      <MemberSignature Language="C#" Value="public string RFC1123Pattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RFC1123Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.RFC1123Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インターネット技術標準化委員会の \(IETF\) の Request for Comments \(RFC\) 1123 仕様に基づく時刻値のカスタム書式指定文字列を取得します。</summary>
        <value>IETF RFC 1123 仕様に準拠した時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャに固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=fullName>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName>メソッド文字列を使用する複合書式指定では、"r"、"R"標準書式指定文字列の操作を指定したとします。  
  
 RFC1123 パターンは定義済みの標準を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく、同じです。 カスタム書式指定文字列は、"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'" です。  
  
   
  
## 例  
 次の例では、いくつかのカルチャの RFC1123Pattern の値を表示します。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CPP/dtfi_rfc1123pattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.RFC1123Pattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/CS/dtfi_rfc1123pattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.RFC1123Pattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.RFC1123Pattern/VB/dtfi_rfc1123pattern.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAllDateTimePatterns">
      <MemberSignature Language="C#" Value="public void SetAllDateTimePatterns (string[] patterns, char format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAllDateTimePatterns(string[] patterns, char format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(System.String[],System.Char)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="patterns" Type="System.String[]" />
        <Parameter Name="format" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="patterns">カスタム書式指定文字列の配列。</param>
        <param name="format">指定されたカスタム書式指定文字列に関連付けられている標準書式指定文字列、 <c>patterns</c> パラメーター。</param>
        <summary>指定された標準書式指定文字列に対応する、カスタムの日付と時刻の書式指定文字列を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [SetAllDateTimePatterns メソッド \(String\<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドは、特定の標準の日付と時刻の書式指定文字列に対応するカスタム書式指定文字列を定義します。 標準の日付と時刻の書式指定文字列で指定された日付と時刻の書式指定メソッドが含まれていますへの呼び出し `format`, 、メソッドの最初の要素を使用して、 `patterns` 結果の文字列の書式を定義する配列。  
  
> [!WARNING]
>  `Parse` と `TryParse` メソッドは文字列をすべてが完全に繰り返されない `patterns` 日付と時刻の文字列形式を解析するときにします。 解析操作で設定されている特定の書式を日付と時刻の文字列を必要とする場合に有効な形式の配列を渡す必要があります、 [SetAllDateTimePatterns メソッド \(String\<xref:System.DateTime.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>, 、[SetAllDateTimePatterns メソッド \(String\<xref:System.DateTimeOffset.ParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%29?displayProperty=fullName>, 、[SetAllDateTimePatterns メソッド \(String\<xref:System.DateTime.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTime%40%29?displayProperty=fullName>, 、または [SetAllDateTimePatterns メソッド \(String\<xref:System.DateTimeOffset.TryParseExact%28System.String%2CSystem.String%5B%5D%2CSystem.IFormatProvider%2CSystem.Globalization.DateTimeStyles%2CSystem.DateTimeOffset%40%29?displayProperty=fullName> メソッドです。  
  
 "D"、"D"、"t"、"T"と"y"または"Y"は標準の日時に対応するカスタム書式指定文字列と書式指定文字列を定義できます。 場合の値 `format` 標準書式指定文字列は、 [SetAllDateTimePatterns メソッド \(String\<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドでのスロー、 [SetAllDateTimePatterns メソッド \(String\<xref:System.ArgumentException>です。  
  
 カスタムの日付と時刻の書式指定文字列が日付の区切り記号を含める場合は、スラッシュ \(\/\) のカスタム書式指定子を特定の日付の区切り記号に置き換える解析または書式指定メソッドではなく、日付の区切り記号を明示的に指定する必要があります。 たとえば、年\-月\-日のパターンを取得するには、「年\-月\-日」のパターンを使用します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 [SetAllDateTimePatterns メソッド \(String\<xref:System.Globalization.CultureInfo> オブジェクトを表す、"EN\-US"\(英語 \- 米国\) はカルチャし、"Y"標準書式指定文字列を使用して日付と時刻の文字列の配列の解析に使用します。 次を使用して、 [SetAllDateTimePatterns メソッド \(String\<xref:System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns%2A> メソッドに"Y"標準書式指定文字列、および、日付と時刻の文字列の配列の解析を試みます関連付ける新しいカスタム書式指定文字列。 この例の出力は、新規のカスタム書式指定文字列が文字列の解析と書式設定操作の両方で使用することを示します。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/cs/setalldatetimepatterns.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.setalldatetimepatterns/vb/setalldatetimepatterns.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="patterns" /> <see langword="null" /> または長さ 0 の配列。  
  
 または  
  
 <paramref name="format" /> 有効な標準形式文字列か、標準書式指定文字列で、パターンを設定することはできません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="patterns" /> 値が配列の要素を持つ <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">これは、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="Overload:System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns" />
      </Docs>
    </Member>
    <Member MemberName="ShortDatePattern">
      <MemberSignature Language="C#" Value="public string ShortDatePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortDatePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortDatePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い日付値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の日付値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドによって複合書式指定文字列を使用するが"d"標準書式指定文字列を指定します。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
   
  
## 例  
 次の例の値を表示する、 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティと値の日付の形式を使用して、 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> いくつかのカルチャのプロパティです。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/dtfi_shortdatepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/dtfi_shortdatepattern.vb#1)]  
  
 次の例では、変更、 <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> のプロパティ、 <xref:System.Globalization.DateTimeFormatInfo> を英語 \(米国\) カルチャの書式指定規則を表すオブジェクト。 表示日付の値を 2 回、まず元を反映するように <xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A> プロパティし、新しいプロパティ値を反映するようにします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortDatePattern\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/CS/shortdatepattern1.cs#2)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortDatePattern\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortDatePattern/VB/shortdatepattern1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortestDayNames">
      <MemberSignature Language="C#" Value="public string[] ShortestDayNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ShortestDayNames" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortestDayNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定に現在関連付けられている最短の一意の日付の省略名の文字列配列 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトです。</summary>
        <value>曜日名の文字列配列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例は、いくつかのメソッドおよび日付と時刻の書式パターン、ネイティブの予定表の名前と完全および省略形の月と曜日名を指定するプロパティの一覧です。  
  
 [!code-csharp[sys.glob.DTFI1\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.DTFI1/cs/dtfi1.cs#1)]
 [!code-vb[sys.glob.DTFI1\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.DTFI1/vb/dtfi1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">設定操作で、配列に正確に 7 つの要素はありません。</exception>
        <exception cref="T:System.ArgumentNullException">値の配列または値の配列の要素の 1 つは、設定操作で <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">現在の設定操作で <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ShortTimePattern">
      <MemberSignature Language="C#" Value="public string ShortTimePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShortTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.ShortTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>短い時刻値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>短い形式の時刻値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドによって複合書式指定文字列を使用するが"t"標準書式指定文字列を指定します。  
  
 時間の区切り記号のプレース ホルダーを使用する代わりに正確な文字列を短い形式の時刻のパターンでは、時刻の区切り記号を設定することをお勧めします。 たとえば、パターン h mm ss を取得するには、"h mm ss"を短い形式の時刻パターンを設定します。  
  
   
  
## 例  
 次の例の値を表示する <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.ShortTimePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CPP/dtfi_shorttimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.ShortTimePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/CS/dtfi_shorttimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.ShortTimePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.ShortTimePattern/VB/dtfi_shorttimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string SortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>並べ替え可能な日付と時刻の値のカスタム書式指定文字列を取得します。</summary>
        <value>並べ替え可能な日付と時刻の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>プロパティへの呼び出しによって返される日付文字列のカルチャに固有の書式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=fullName>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName>メソッドと複合書式指定では、文字列が"s"標準書式指定文字列を提供します。  
  
 によって返される形式の文字列、<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>プロパティは定義済みの標準 \(ISO 8601\) を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく、同じです。 カスタム書式指定文字列は、"yyyy'\-'MM'\-'dd'T'HH':'mm':'ss" です。  
  
   
  
## 例  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CPP/dtfi_sortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/CS/dtfi_sortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.SortableDateTimePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.SortableDateTimePattern/VB/dtfi_sortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="TimeSeparator">
      <MemberSignature Language="C#" Value="public string TimeSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TimeSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.TimeSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>時刻の構成要素、つまり時間、分、および秒を区切る文字列を取得または設定します。</summary>
        <value>時刻の構成要素を区切る文字列。 既定値 <see cref="P:System.Globalization.DateTimeFormatInfo.InvariantInfo" /> は":"です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 カスタムのパターンには、書式パターンが含まれている場合":"、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> の値を表示 <xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> の代わりに、":"フォーマット パターンです。  
  
 派生した時刻の区切り記号は、 <xref:System.Globalization.DateTimeFormatInfo.ShortTimePattern%2A> プロパティです。 短い時刻の区切り記号を設定するか、長い時刻時間の区切り記号のプレース ホルダーを使用する代わりに正確な文字列をパターンことをお勧めします。 たとえば、パターン h mm ss を取得するには、"h mm ss"のパターンを設定します。 こうすることもできますなどのパターンの設定"h'h ' mm 'ss' をしています"\(3 h 36 m 12 s\) を含む複数の種類の区切り記号。<xref:System.Globalization.DateTimeFormatInfo.TimeSeparator%2A> プロパティ定義の時刻の区切り記号を置換する文字列 \(":"カスタム日付\/時刻書式指定子\) で書式設定操作の結果の文字列にします。 また、解析操作で時刻の区切り記号文字列を定義します。  
  
   
  
## 例  
 次の例のインスタンスを作成、 <xref:System.Globalization.CultureInfo> オブジェクト EN\-US カルチャの変更をその日付の区切り記号"です。"、"t"、"T"、"F"、"f"、"G"、および"g"標準書式指定文字列を使用して日付を表示しします。  
  
 [!code-csharp[System.Globalization.DateTimeFormatInfo.TimeSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/cs/timeseparatorex.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.TimeSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.datetimeformatinfo.timeseparator/vb/timeseparatorex.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていると、 <see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.DateSeparator" />
      </Docs>
    </Member>
    <Member MemberName="UniversalSortableDateTimePattern">
      <MemberSignature Language="C#" Value="public string UniversalSortableDateTimePattern { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniversalSortableDateTimePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列を取得します。</summary>
        <value>ユニバーサルで並べ替え可能な日付と時刻の文字列のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>プロパティへの呼び出しによって返される日付文字列の形式を定義する、<xref:System.DateTime.ToString%2A?displayProperty=fullName>と<xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName>メソッド文字列を使用する複合書式指定で"u"標準書式指定文字列も指定できます。 最後に世界協定時刻指定子"Z"並べ替え可能な順序での日付と時刻を表示するために使用します。 年、月、日、時、分、および秒に先行ゼロを使用しているために、形式が基準として並べ替えられます。 カスタム書式指定文字列 \("yyyy '\-'MM'\-' dd HH': 'mm': 'ss' z'"\) のカルチャまたは書式プロバイダーに関係なく同じです。  
  
 によって返される形式の文字列、<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>プロパティが定義済みの標準を反映し、プロパティは読み取り専用です。 そのため、これは常に、カルチャに関係なく、同じです。 カスタム書式指定文字列は、"yyyy'\-'MM'\-'dd HH':'mm':'ss'Z'" です。  
  
   
  
## 例  
 次の例の値を表示する<xref:System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern%2A>いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CPP/dtfi_universalsortabledatetimepattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/CS/dtfi_universalsortabledatetimepattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.UniversalSortableDateTimePattern/VB/dtfi_universalsortabledatetimepattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.DateTimeFormatInfo.SortableDateTimePattern" />
      </Docs>
    </Member>
    <Member MemberName="YearMonthPattern">
      <MemberSignature Language="C#" Value="public string YearMonthPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string YearMonthPattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.DateTimeFormatInfo.YearMonthPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>年と月の値のカスタム書式指定文字列を取得または設定します。</summary>
        <value>年と月の値のカスタム書式指定文字列。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> プロパティへの呼び出しによって返される日付の文字列のカルチャに固有の書式を定義する、 <xref:System.DateTime.ToString%2A?displayProperty=fullName> と <xref:System.DateTimeOffset.ToString%2A?displayProperty=fullName> メソッドな文字列の複合書式指定では、"y"と"Y"標準書式指定文字列の操作を指定したとします。  
  
 場合にこのプロパティが影響を受けるの値、 <xref:System.Globalization.DateTimeFormatInfo.Calendar%2A> プロパティが変更されました。  
  
 日付の区切り記号のプレース ホルダーを使用する代わりに正確な文字列に年の月のパターンには、日付の区切り記号を設定することをお勧めします。 たとえば、MM yyyy パターンを取得するには、"MM yyyy"する年の月のパターンを設定します。  
  
   
  
## 例  
 次の例の値を表示する <xref:System.Globalization.DateTimeFormatInfo.YearMonthPattern%2A> いくつかのカルチャ。  
  
 [!code-cpp[System.Globalization.DateTimeFormatInfo.YearMonthPattern\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CPP/dtfi_yearmonthpattern.cpp#1)]
 [!code-csharp[System.Globalization.DateTimeFormatInfo.YearMonthPattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/CS/dtfi_yearmonthpattern.cs#1)]
 [!code-vb[System.Globalization.DateTimeFormatInfo.YearMonthPattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.DateTimeFormatInfo.YearMonthPattern/VB/dtfi_yearmonthpattern.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.DateTimeFormatInfo" /> オブジェクトは読み取り専用です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAllDateTimePatterns">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>日付と時刻の値を形式指定できる標準パターンを返します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>