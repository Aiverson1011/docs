<Type Name="SortKey" FullName="System.Globalization.SortKey">
  <TypeSignature Language="C#" Value="public class SortKey" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi serializable beforefieldinit SortKey extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.SortKey" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>文字列とその並べ替えキーとの対応付けの結果を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つの文字列のカルチャに依存した比較では、重みの場合と発音の区別の並べ替えウェイト、英字、スクリプトを含む複数のカテゴリを持つ文字列内の各文字に依存します。 並べ替えキーは、特定の文字列をこれらの規則のリポジトリとして機能します。  
  
 <xref:System.Globalization.CompareInfo.GetSortKey%2A?displayProperty=fullName> メソッドのインスタンスを返す、 <xref:System.Globalization.SortKey> 指定した文字列の文字のカルチャに依存したマッピングを反映したクラスです。 値、 <xref:System.Globalization.SortKey> オブジェクトがキーのデータ、によって返される、 <xref:System.Globalization.SortKey.KeyData%2A> プロパティです。 このキーのデータは、一連の文字列、カルチャに固有の並べ替え規則、およびユーザーが指定した比較オプションをエンコードするバイトで構成されます。 並べ替えキーを使用して、比較は、それぞれの並べ替えキーに対応するキーのデータのビットごとの比較で構成されます。  たとえば、呼び出すことによって、並べ替えキーを作成する場合、 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29> の値を持つメソッド <xref:System.Globalization.CompareOptions.IgnoreCase?displayProperty=fullName>, 、並べ替えキーを使用する文字列比較操作は大文字小文字がします。  
  
 静的なを呼び出すことによって、並べ替えキーを比較する文字列の並べ替えキーを作成したら、 <xref:System.Globalization.SortKey.Compare%2A?displayProperty=fullName> メソッドです。 このメソッドには単純なバイトで比較が実行するよりもはるかに高速であるため、 <xref:System.String.Compare%2A?displayProperty=fullName> または <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> メソッドです。  
  
## パフォーマンスに関する考慮事項  
 文字列の比較を実行するときに、 <xref:System.Globalization.SortKey.Compare%2A> と <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> メソッドによって、同じ結果が生成が、さまざまなシナリオを対象にします。  
  
 大まかに言えば、 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> メソッド各文字列の並べ替えキーを生成、比較を実行し、並べ替えキーを破棄し、比較の結果を返します。 ただし、 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> メソッドは実際には、比較を実行する全体の並べ替えキーを生成しません。 代わりに、メソッドは、それぞれの文字列 \(つまり、基本文字、サロゲート ペア、または組み合わせ文字シーケンス\) のそれぞれのテキスト要素のキーのデータを生成します。 メソッドには、対応するテキスト要素のキーのデータを比較します。 操作は、比較の最終的な結果を特定するとすぐに終了します。 並べ替えキーの情報を計算するは <xref:System.Globalization.SortKey> オブジェクトを作成します。 この方法は両方の文字列が 1 回、比較する場合は、パフォーマンスの面で経済的ですが、同じ文字列が複数回を比較する場合に負荷が高くなります。  
  
 <xref:System.Globalization.SortKey.Compare%2A> メソッドの生成が必要です、 <xref:System.Globalization.SortKey> の比較を実行する前に各文字列オブジェクト。 この方法は、時間とメモリの投資を生成するため、最初に比較のパフォーマンス コストが高く、 <xref:System.Globalization.SortKey> オブジェクトです。 ただし、同じ並べ替えキーが複数回を比較する場合、パフォーマンスが向上します。  
  
 たとえば、文字列ベースのインデックス列に指定した検索文字列が一致する行をデータベース テーブルを検索するアプリケーションを記述するとします。 テーブルには、数千行が含まれていて、時間がかかるは各行のインデックスを検索文字列を比較します。 そのため、アプリケーションでは、行とそのインデックス列を格納するときにも生成し、検索のパフォーマンスを向上する専用の列にインデックスの並べ替えキーを格納します。 アプリケーションは、対象の行を検索する場合は、インデックス文字列に検索文字列を比較することではなく、インデックス文字列の並べ替えキーの検索文字列の並べ替えキーを比較します。  
  
## セキュリティの考慮事項  
 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> メソッドが返される、 <xref:System.Globalization.SortKey> 指定した文字列に基づいて、値を持つオブジェクトと <xref:System.Globalization.CompareOptions> 値、および基になると関連付けられたカルチャ <xref:System.Globalization.CompareInfo> オブジェクトです。 セキュリティに関する決定は、文字列の比較または小文字の変更に依存する場合、 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> 操作の動作が、オペレーティング システムのカルチャ設定に関係なく、一貫性のあることを確認するインバリアント カルチャのメソッドです。  
  
 並べ替えキーを入手するのにには、次の手順を使用します。  
  
1.  インバリアント カルチャを取得、 <xref:System.Globalization.CultureInfo.InvariantCulture?displayProperty=fullName> プロパティです。  
  
2.  取得、 <xref:System.Globalization.CompareInfo> からインバリアント カルチャのオブジェクト、 <xref:System.Globalization.CultureInfo.CompareInfo%2A?displayProperty=fullName> プロパティです。  
  
3.  <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> メソッドを呼び出します。  
  
 値を扱って、 <xref:System.Globalization.SortKey> オブジェクトは、Windows の呼び出しに相当 `LCMapString` LCMAP\_SORTKEY に指定された値を持つメソッドです。 ただし、 <xref:System.Globalization.SortKey> オブジェクト、英語の文字の並べ替えキーは、韓国語の文字の並べ替えキーをより優先されます。  
  
 <xref:System.Globalization.SortKey> オブジェクトをシリアル化されたのみする互いに交差ように <xref:System.AppDomain> オブジェクトです。 アプリケーションがシリアル化する場合、 <xref:System.Globalization.SortKey> オブジェクト、.NET Framework の新しいバージョンがある場合、アプリケーションがすべての並べ替えキーを再生成する必要があります。  
  
 並べ替えキーの詳細についてを Unicode 技術標準 \#10、「Unicode 照合順序アルゴリズム」を参照して、 [Unicode Consortium website](http://go.microsoft.com/fwlink/?linkid=37123)します。  
  
   
  
## 例  
 次の例では、"EN\-US"と"ES\-ES"カルチャ"EN\-US"と"ES\-ES"従来のカルチャを使用して文字列「ラマ」を比較します。  
  
 [!code-cpp[System.Globalization.SortKey.Compare\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CPP/sortkey_compare.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Compare\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/CS/sortkey_compare.cs#1)]
 [!code-vb[System.Globalization.SortKey.Compare\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Compare/VB/sortkey_compare.vb#1)]  
  
 次の例を使用する方法、 <xref:System.Globalization.SortKey> サイズの大きな配列を検索および並べ替えに広範囲に依存するアプリケーションのパフォーマンスを向上させるためにクラスです。 例では、13 個の要素をここでは順序付けられていない、名前の配列を作成します。 渡されます並列配列の各名前の並べ替えキーを格納し、 <xref:System.Array.Sort%28System.Array%2CSystem.Array%29?displayProperty=fullName> メソッドです。 並べ替えられた配列になります。 例では、3 つの文字列の配列を検索します。 各検索文字列に呼び出し、 <xref:System.Globalization.CompareInfo.GetSortKey%28System.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> 文字列の並べ替えキーとし、呼び出しを取得するメソッドを <xref:System.Array.FindIndex%2A?displayProperty=fullName> その並べ替えキーの並べ替えキーの配列内のインデックスを取得します。 取得するインデックスも内の名前のインデックス名と並べ替えのキー配列は、並列であるため、 `names` 配列。  
  
 [!code-csharp[System.Globalization.SortKey.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.sortkey.class/cs/sortkey1.cs#1)]
 [!code-vb[System.Globalization.SortKey.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.sortkey.class/vb/sortkey1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Globalization.CompareInfo.GetSortKey(System.String,System.Globalization.CompareOptions)" />
    <altmember cref="P:System.Globalization.SortKey.KeyData" />
  </Docs>
  <Members>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public static int Compare (System.Globalization.SortKey sortkey1, System.Globalization.SortKey sortkey2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Compare(class System.Globalization.SortKey sortkey1, class System.Globalization.SortKey sortkey2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Compare(System.Globalization.SortKey,System.Globalization.SortKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortkey1" Type="System.Globalization.SortKey" />
        <Parameter Name="sortkey2" Type="System.Globalization.SortKey" />
      </Parameters>
      <Docs>
        <param name="sortkey1">比較する最初の並べ替えキー。</param>
        <param name="sortkey2">比較する 2 番目の並べ替えキー。</param>
        <summary>2 つの並べ替えキーを比較します。</summary>
        <returns>間の関係を示す符号付き整数 <paramref name="sortkey1" /> と <paramref name="sortkey2" />です。  
  
 <list type="table">  
<listheader>  
<term> 値  
  
 </term>  
<description> 状態  
  
 </description>  
</listheader>  
<item>  
<term> 0 より小さい値  
  
 </term>  
<description> <paramref name="sortkey1" /> は <paramref name="sortkey2" /> より小さい値です。  
  
 </description>  
</item>  
<item>  
<term> 0  
  
 </term>  
<description> <paramref name="sortkey1" /> と <paramref name="sortkey2" /> が等価です。  
  
 </description>  
</item>  
<item>  
<term> 0 より大きい値  
  
 </term>  
<description> <paramref name="sortkey1" /> が <paramref name="sortkey2" /> より大きくなっています。  
  
 </description>  
</item>  
</list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.SortKey.Compare%2A> メソッドに比較して、 <xref:System.Globalization.SortKey.KeyData%2A> のプロパティ、 `sortkey1` と `sortkey2` パラメーター。 メソッドと同じ結果が得られます、 <xref:System.Globalization.CompareInfo.Compare%2A?displayProperty=fullName> メソッドです。  
  
 詳細については、 <xref:System.Globalization.SortKey.Compare%2A> メソッドと、並べ替えキーの比較を参照してください、 <xref:System.Globalization.SortKey> クラスに関するトピック。  
  
   
  
## 例  
 次のコード例を使用して 2 つの文字列を比較し、 <xref:System.Globalization.SortKey.Compare%2A> メソッドと、対応 <xref:System.Globalization.CompareInfo.Compare%28System.String%2CSystem.String%2CSystem.Globalization.CompareOptions%29?displayProperty=fullName> メソッドです。  
  
 [!code-csharp[sys.glob.sortkey.compare\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.compare/cs/skcmp.cs#1)]
 [!code-vb[sys.glob.sortkey.compare\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.compare/vb/skcmp.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="sortkey1" /> または <paramref name="sortkey2" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">現在と比較するオブジェクト <see cref="T:System.Globalization.SortKey" /> オブジェクトです。</param>
        <summary>指定したオブジェクトが、現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>
          <paramref name="value" /> パラメーターが現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つ <xref:System.Globalization.SortKey> オブジェクトが等しいと見なされます場合、 <xref:System.Globalization.SortKey.KeyData%2A> のプロパティは等価です。  
  
 このメソッドは <xref:System.Object.Equals%2A?displayProperty=fullName>です。  
  
   
  
## 例  
 次のコード例は、結果を示しています。 <xref:System.Globalization.SortKey.Equals%2A> 別と比較して <xref:System.Globalization.SortKey> オブジェクトです。  
  
 [!code-cpp[System.Globalization.SortKey.Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CPP/sortkey_equals.cpp#1)]
 [!code-csharp[System.Globalization.SortKey.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/CS/sortkey_equals.cs#1)]
 [!code-vb[System.Globalization.SortKey.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.SortKey.Equals/VB/sortkey_equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Object.Equals(System.Object)" />
        <altmember cref="P:System.Globalization.SortKey.KeyData" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のハッシュ関数として機能 <see cref="T:System.Globalization.SortKey" /> ハッシュ アルゴリズムやデータの構造をハッシュ テーブルなどに適したオブジェクトです。</summary>
        <returns>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトのハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、<xref:System.Globalization.SortKey.Equals%2A> メソッドによって等しいと評価された 2 つのオブジェクトに対して同じハッシュ コードを生成します。  
  
 このメソッドは <xref:System.Object.GetHashCode%2A?displayProperty=fullName>です。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.GetHashCode" />
        <altmember cref="T:System.Collections.Hashtable" />
        <altmember cref="M:System.Globalization.SortKey.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public virtual byte[] KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在を表すバイト配列を取得 <see cref="T:System.Globalization.SortKey" /> オブジェクトです。</summary>
        <value>現在を表すバイト配列 <see cref="T:System.Globalization.SortKey" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって返されるデータの使用の詳細についての <xref:System.Globalization.SortKey.KeyData%2A> 、文字列を比較するプロパティを参照してください、 <xref:System.Globalization.SortKey> クラスに関するトピック。  
  
   
  
## 例  
 次のコード例では、元の文字列と等価の文字列と区別する並べ替えキーと小文字を区別しない並べ替えキーのキー データを表示します。  
  
 [!code-csharp[sys.glob.sortkey.tostring\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalString">
      <MemberSignature Language="C#" Value="public virtual string OriginalString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalString" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.SortKey.OriginalString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の作成に使用する元の文字列を取得 <see cref="T:System.Globalization.SortKey" /> オブジェクトです。</summary>
        <value>現在の作成に使用する元の文字列 <see cref="T:System.Globalization.SortKey" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次のコード例では、元の文字列と等価の文字列と区別する並べ替えキーと小文字を区別しない並べ替えキーのキー データを表示します。  
  
 [!code-csharp[sys.glob.sortkey.tostring\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.SortKey.ToString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Globalization.SortKey" /> オブジェクトを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 戻り値は"SortKey \-"文字列の連結、カルチャ識別子、および現在の比較オプション <xref:System.Globalization.SortKey> オブジェクト、およびの値、 <xref:System.Globalization.SortKey.OriginalString%2A> プロパティです。  
  
 このメソッドは <xref:System.Object.ToString%2A?displayProperty=fullName>です。  
  
   
  
## 例  
 次のコード例は、元の文字列で得られる文字列を表示、 <xref:System.Globalization.SortKey.ToString%2A> 方法の大文字と小文字を区別する並べ替えキーと大文字と小文字を区別する並べ替えキーのキー データ。  
  
 [!code-csharp[sys.glob.sortkey.tostring\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.sortkey.tostring/cs/ts.cs#1)]
 [!code-vb[sys.glob.sortkey.tostring\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.sortkey.tostring/vb/ts.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Object.ToString" />
      </Docs>
    </Member>
  </Members>
</Type>