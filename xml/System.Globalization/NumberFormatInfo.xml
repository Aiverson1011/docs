<Type Name="NumberFormatInfo" FullName="System.Globalization.NumberFormatInfo">
  <TypeSignature Language="C#" Value="public sealed class NumberFormatInfo : ICloneable, IFormatProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit NumberFormatInfo extends System.Object implements class System.ICloneable, class System.IFormatProvider" />
  <TypeSignature Language="DocId" Value="T:System.Globalization.NumberFormatInfo" />
  <AssemblyInfo>
    <AssemblyName>System.Globalization</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IFormatProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>数値を書式設定および解析するためのカルチャ固有の情報を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo> クラスには、書式を設定して数値を解析するときに使用されるカルチャ固有の情報が含まれています。 この情報には、通貨記号、桁区切り記号、桁区切り記号、および正と負の記号のシンボルが含まれています。  
  
-   [NumberFormatInfo オブジェクトをインスタンス化します。](#Instantiating)  
  
    -   [現在のカルチャ](#Instantiating_Current)  
  
    -   [インバリアント カルチャ](#Instantiating_Invariant)  
  
    -   [特定のカルチャ](#Instantiating_Specific)  
  
    -   [ニュートラル カルチャ](#Instantiating_Neutral)  
  
-   [NumberFormatInfo と動的データ](#dynamic)  
  
-   [IFormatProvider、NumberFormatInfo、および数値の書式設定](#formatProvider)  
  
-   [NumberFormatInfo のプロパティおよび書式指定文字列](#properties)  
  
-   [NumberFormatInfo のプロパティを変更します。](#modifying)  
  
    -   [通貨記号とパターンを変更します。](#currency)  
  
    -   [国民識別番号を書式設定](#id)  
  
-   [数値文字列の解析](#parsing)  
  
    -   [ユーザー文字列の解析](#ParseUser)  
  
    -   [シリアル化して、数値データを逆シリアル化](#ParseSerial)  
  
<a name="Instantiating"></a>   
## NumberFormatInfo オブジェクトをインスタンス化します。  
 インスタンスを作成できる、 <xref:System.Globalization.NumberFormatInfo> を現在のカルチャ、インバリアント カルチャ、特定のカルチャまたはニュートラル カルチャの書式指定規則を表すオブジェクト。  
  
<a name="Instantiating_Current"></a>   
## 現在のカルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 インスタンスを作成できる、 <xref:System.Globalization.NumberFormatInfo> 、次の方法のいずれかで現在のスレッド カルチャのオブジェクト。 返された各ケースで <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り専用です。  
  
-   取得することによって、 <xref:System.Globalization.CultureInfo> から現在のスレッド カルチャを表すオブジェクト、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> プロパティ、および取得する、 <xref:System.Globalization.CultureInfo> オブジェクトからその <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> プロパティです。  
  
-   取得することによって、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 `static` \(`Shared` Visual Basic で\) <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> プロパティです。  
  
-   呼び出して、 <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> メソッドを <xref:System.Globalization.CultureInfo> を現在のカルチャを表すオブジェクト。  
  
 次のコードの例では、これら 3 つの方法を作成する <xref:System.Globalization.NumberFormatInfo> を現在のカルチャの書式指定規則を表すオブジェクト。 値を取得しても、 <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> プロパティを各オブジェクトは読み取り専用のことを示しています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate1.vb#1)]  
  
 書き込み可能な作成 <xref:System.Globalization.NumberFormatInfo> を次の方法のいずれかで現在のスレッド カルチャの規則を表すオブジェクト。  
  
-   取得することによって、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの前のコード例に示すおよび呼び出す方法のいずれかで、 <xref:System.Globalization.NumberFormatInfo.Clone%2A> メソッドで返された <xref:System.Globalization.NumberFormatInfo> オブジェクトです。 これは元のコピーを作成 <xref:System.Globalization.NumberFormatInfo> オブジェクトの点を除いて、 <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> プロパティは `false`です。  
  
-   呼び出して、 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> を作成する方法、 <xref:System.Globalization.CultureInfo> 、現在のカルチャを表すオブジェクトをし、使用してその <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> 取得するプロパティを <xref:System.Globalization.NumberFormatInfo> オブジェクトです。  
  
 次の例は、これら 2 つのインスタンス化する方法を示しています、 <xref:System.Globalization.NumberFormatInfo> オブジェクトし、の値を表示、 <xref:System.Globalization.NumberFormatInfo.IsReadOnly%2A> プロパティをオブジェクトが読み取り専用ではないことを示しています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate2.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate2.vb#2)]  
  
 Windows オペレーティング システムでは、ユーザーの一部を無効に設定できます、 <xref:System.Globalization.NumberFormatInfo> 数値書式設定および解析での操作で使用されるプロパティ値、 **地域と言語** コントロール パネル項目にします。 たとえば、カルチャが英語 \(米国\) ユーザーが選択するドル 1.1 の既定ではなく、1.1 USD として通貨の値を表示します。<xref:System.Globalization.NumberFormatInfo> 説明した方法で取得したオブジェクト以前すべて反映ユーザーによるオーバーライドします。 これが望ましくない場合は、作成、 <xref:System.Globalization.NumberFormatInfo> ユーザー オーバーライドを反映しないオブジェクト \(読み取り\/書き込みではまた、読み取り専用ではなく\) を呼び出して、 <xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> コンス トラクターの値を渡すと `false` の `useUserOverride` 引数。 次の例は、現在のカルチャが英語 \(米国\) とその通貨記号が米ドルに $ の既定値から変更されました、システムの具体的なを提供します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate3.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate3.vb#3)]  
  
 場合、 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> にプロパティが設定されている `true`, 、プロパティ <xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>, 、<xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName>, 、および <xref:System.Globalization.CultureInfo.TextInfo%2A?displayProperty=fullName> もユーザーの設定から取得されます。 ユーザー設定が関連付けられたカルチャと互換性がないかどうか、 <xref:System.Globalization.CultureInfo> オブジェクト \(選択したカレンダーは、表示されている予定表のいずれかでがない場合など、 <xref:System.Globalization.CultureInfo.OptionalCalendars%2A> プロパティ\)、メソッドの結果と、プロパティの値は未定義です。  
  
<a name="Instantiating_Invariant"></a>   
## インバリアント カルチャ NumberFormatInfo オブジェクトをインスタンス化します。  
 インバリアント カルチャでは、カルチャに依存しないられるカルチャを表します。 これは、英語の言語ではなく、英語を話す国や地域に基づいています。 特定のカルチャのデータは、動的であることができ、新しいカルチャの規則やユーザー設定を反映するように変更することができます、インバリアント カルチャのデータは変わりません。 A <xref:System.Globalization.NumberFormatInfo> のカルチャでの書式設定操作がどの結果の文字列に変わらないようにインバリアント カルチャの書式指定規則を表すオブジェクトを使用できます。  
  
 インスタンスを作成できる、 <xref:System.Globalization.NumberFormatInfo> を次の方法でインバリアント カルチャの書式指定規則を表すオブジェクト。  
  
-   値を取得することによって、 <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> プロパティです。 返された  <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り専用です。  
  
-   値を取得することによって、 <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> プロパティから、 <xref:System.Globalization.CultureInfo> によって返されるオブジェクト、 <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> プロパティです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り専用です。  
  
-   パラメーターなしで呼び出すことによって <xref:System.Globalization.NumberFormatInfo.%23ctor%2A> クラスのコンス トラクターです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り\/書き込み可能です。  
  
 次の例がこれらの各メソッドをインスタンス化するには、 <xref:System.Globalization.NumberFormatInfo> インバリアント カルチャを表すオブジェクト。 オブジェクトは読み取り専用であるかどうかを示します  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate4.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate4.vb#4)]  
  
<a name="Instantiating_Specific"></a>   
## 特定のカルチャの NumberFormatInfo オブジェクトをインスタンス化します。  
 特定のカルチャでは、特定の国\/地域で話される言語を表します。 たとえば、en\-us \(英語\) は、特定のカルチャを英語にアメリカ合衆国で話される言語を表すし、EN\-CA は特定のカルチャを英語のカナダで話される言語を表します。 インスタンスを作成できる、 <xref:System.Globalization.NumberFormatInfo> を次の方法で特定のカルチャの書式指定規則を表すオブジェクト。  
  
-   呼び出して、 <xref:System.Globalization.CultureInfo.GetCultureInfo%28System.String%29?displayProperty=fullName> メソッドと、返された値を取得する <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り専用です。  
  
-   渡すことによって、 <xref:System.Globalization.CultureInfo> 、カルチャを表すオブジェクトを <xref:System.Globalization.NumberFormatInfo> オブジェクトを静的な取得する <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> メソッドです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り\/書き込み可能です。  
  
-   呼び出して、 <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> メソッドと、返された値を取得する <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り\/書き込み可能です。  
  
-   いずれかを呼び出して、 <xref:System.Globalization.CultureInfo.%23ctor%2A?displayProperty=fullName> クラスのコンス トラクターと、返された値を取得する <xref:System.Globalization.CultureInfo> オブジェクトの <xref:System.Globalization.CultureInfo.NumberFormat%2A> プロパティです。 返された <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り\/書き込み可能です。  
  
 次のコードの例では、これら 4 つの方法を作成する、 <xref:System.Globalization.NumberFormatInfo> インドネシア語 \(インドネシア\) カルチャの書式指定規則を表すオブジェクト。 また、各オブジェクトは読み取り専用であるかどうかも示します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate5.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate5.vb#5)]  
  
<a name="Instantiating_Neutral"></a>   
## ニュートラル カルチャ NumberFormatInfo オブジェクトをインスタンス化します。  
 ニュートラル カルチャでは、カルチャまたは国\/地域に依存しない言語を表します。 通常これは、1 つまたは複数の特定のカルチャの親です。 たとえば、fr は、フランス語の言語と FR\-FR カルチャの親のニュートラル カルチャです。 作成する、 <xref:System.Globalization.NumberFormatInfo> を作成するのと同様にニュートラル カルチャの書式指定規則を表すオブジェクト、 <xref:System.Globalization.NumberFormatInfo> を特定のカルチャの書式指定規則を表すオブジェクト。  
  
> [!NOTE]
>  [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)] を取得しようとしています。 以前のバージョン、 <xref:System.Globalization.NumberFormatInfo> ニュートラル カルチャの書式指定規則を表すオブジェクトを返します。、 <xref:System.NotSupportedException> 例外です。  
  
 ただし、特定の国\/地域に依存しないため、ニュートラル カルチャはカルチャに固有の書式情報がありません。 設定するのではなく、 <xref:System.Globalization.NumberFormatInfo> ジェネリック値オブジェクトに、.NET Framework が返す、 <xref:System.Globalization.NumberFormatInfo> 文化の特定の書式指定規則を反映したオブジェクトがニュートラル カルチャの子です。 たとえば、 <xref:System.Globalization.NumberFormatInfo> en のニュートラル カルチャは EN\-US カルチャの書式指定規則を反映してオブジェクトと <xref:System.Globalization.NumberFormatInfo> オブジェクトは、FR\-FR カルチャの書式指定規則が反映されます。  
  
 次のようにコードを使用すると、各ニュートラル カルチャを表すどの特定のカルチャの書式指定規則を決定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class.Instantiate\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/cs/instantiate6c.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class.Instantiate\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class.instantiate/vb/instantiate6c.vb#6)]  
  
<a name="dynamic"></a>   
## NumberFormatInfo と動的データ  
 カルチャに固有のデータによって提供される数値の書式設定を <xref:System.Globalization.NumberFormatInfo> クラスは動的ですが、によって提供されるカルチャのデータと同じように、 <xref:System.Globalization.CultureInfo> クラスです。 値の安定性については、何も想定しないようにして <xref:System.Globalization.NumberFormatInfo> 関連付けられているオブジェクトで特定の <xref:System.Globalization.CultureInfo> オブジェクトです。 インバリアント カルチャとそれに関連付けられたによって提供されるデータのみ <xref:System.Globalization.NumberFormatInfo> オブジェクトが安定しています。 アプリケーション セッション間で、または、次の理由の 1 つのセッション内であっても、その他のデータを変更できます。  
  
-   **システムの更新プログラムです。**通貨記号、通貨の書式などのカルチャの設定は、時間の経過と共に変更します。 Windows Update にはへの変更が含まれていますこのような場合、 <xref:System.Globalization.NumberFormatInfo> 特定のカルチャのプロパティの値。  
  
-   **置換カルチャ。** <xref:System.Globalization.CultureAndRegionInfoBuilder> 既存のカルチャのデータを置換するクラスを使用することができます。  
  
-   **プロパティ値に対する変更を階層式。**これにより、実行時にさまざまなカルチャ関連のプロパティを変更することができます <xref:System.Globalization.NumberFormatInfo> データを変更します。 たとえば、プログラム、またはユーザーの操作によっては、現在のカルチャを変更できます。 このような場合、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> プロパティは、現在のカルチャに関連付けられているオブジェクトに変更します。  
  
-   **ユーザー設定。**アプリケーションのユーザーには、一部のコントロール パネルの \[地域と言語のオプションでは、現在のシステム カルチャに関連付けられている値を上書き可能性があります。 たとえば、ユーザーには、異なる通貨記号、または別の小数点の記号ができます。 場合、 <xref:System.Globalization.CultureInfo.UseUserOverride%2A?displayProperty=fullName> にプロパティが設定されている `true` \(既定値\) のプロパティ、 <xref:System.Globalization.NumberFormatInfo> オブジェクトは、ユーザー設定からも取得されます。  
  
 すべてのユーザーがオーバーライドできるプロパティ、.NET Framework 2.0 以降で、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの作成時にオブジェクトを初期化します。 まだ可能性がある不整合のため、どちらもオブジェクトの作成もユーザー オーバーライド プロセスがアトミックで、オブジェクトの作成時に、関連する値を変更することがあります。 ただし、これらの不整合が非常にまれなする必要があります。  
  
 ユーザー オーバーライドを反映するかどうかを制御する <xref:System.Globalization.NumberFormatInfo> を現在のスレッド カルチャと同じカルチャを表すオブジェクト。 次の表に、方法、 <xref:System.Globalization.NumberFormatInfo> オブジェクトを取得して、結果のオブジェクトがユーザー オーバーライドを反映するかどうかを示します。  
  
|CultureInfo と NumberFormatInfo オブジェクトのソース|ユーザー オーバーライドが反映されます。|  
|-----------------------------------------------|--------------------------|  
|`CultureInfo.CurrentCulture.NumberFormat` プロパティ|はい|  
|<xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A?displayProperty=fullName> プロパティ|はい|  
|<xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A?displayProperty=fullName> メソッド|はい|  
|<xref:System.Globalization.CultureInfo.GetCultureInfo%2A?displayProperty=fullName> メソッド|いいえ|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%29> コンストラクター|はい|  
|<xref:System.Globalization.CultureInfo.%23ctor%28System.String%2CSystem.Boolean%29?displayProperty=fullName> コンストラクター|値に依存 `useUserOverride` パラメーター|  
  
 使用する場合、ユーザー オーバーライドを遵守する必要が、それ以外に特別な理由がない限り、 <xref:System.Globalization.NumberFormatInfo> 書式設定およびユーザー入力を解析する、または数値データを表示するクライアント アプリケーション内のオブジェクト。 サーバー アプリケーションまたは自動アプリケーションの場合は、ユーザー オーバーライドを従いません必要があります。 ただし、使用する場合、 <xref:System.Globalization.NumberFormatInfo> いずれかのオブジェクトを明示的または暗黙的に文字列形式の数値データを保持するには、するには使用するか、 <xref:System.Globalization.NumberFormatInfo> インバリアント カルチャの書式指定規則を反映したオブジェクトは、カルチャに関係なく使用するカスタム数値書式指定文字列を指定する必要があります。  
  
<a name="formatProvider"></a>   
## IFormatProvider、NumberFormatInfo、および数値の書式設定  
 A <xref:System.Globalization.NumberFormatInfo> オブジェクトがすべての数値を書式設定操作の明示的または暗黙的に使用されます。 次のメソッドを呼び出す例を示します。  
  
-   書式指定メソッドがなどすべての数値 <xref:System.Int32.ToString%2A?displayProperty=fullName>, 、<xref:System.Double.ToString%2A?displayProperty=fullName>, 、および <xref:System.Convert.ToString%28System.Int32%29?displayProperty=fullName>です。  
  
-   メジャーの複合書式指定メソッド、 <xref:System.String.Format%2A?displayProperty=fullName>です。  
  
-   他の複合書式指定メソッドがなど <xref:System.Console.WriteLine%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> と <xref:System.Text.StringBuilder.AppendFormat%28System.String%2CSystem.Object%5B%5D%29?displayProperty=fullName>です。  
  
 すべての数値書式設定操作を行うを使用して、 <xref:System.IFormatProvider> 実装します。<xref:System.IFormatProvider> インターフェイスには、1 つのメソッドが含まれています。 <xref:System.IFormatProvider.GetFormat%28System.Type%29>します。 これは、渡されるコールバック メソッド、 <xref:System.Type> の書式情報を提供するために必要な型を表すオブジェクト。 その型のインスタンスを返すため、このメソッドはまたは `null`, 型のインスタンスを提供できない場合は、です。 .NET Framework には 2 つ <xref:System.IFormatProvider> 数値の書式設定の実装。  
  
-   <xref:System.Globalization.CultureInfo> クラスで、特定のカルチャ \(または特定の国\/地域の特定の言語\) を表します。 数値の操作を書式設定で、 <xref:System.Globalization.CultureInfo.GetFormat%2A?displayProperty=fullName> メソッドを返します。、 <xref:System.Globalization.NumberFormatInfo> オブジェクトに関連付けられているその <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> プロパティです。  
  
-   <xref:System.Globalization.NumberFormatInfo> クラスで、対応するカルチャの書式指定規則に関する情報を提供します。<xref:System.Globalization.NumberFormatInfo.GetFormat%2A?displayProperty=fullName> メソッド自体のインスタンスを返します。  
  
 場合、 <xref:System.IFormatProvider> 実装が用意されていない書式指定メソッドに明示的に、 <xref:System.Globalization.CultureInfo> によって返されるオブジェクト、 <xref:System.Globalization.CultureInfo.CurrentCulture%2A?displayProperty=fullName> を現在のスレッド カルチャを表すプロパティを使用します。  
  
 次の例は、リレーションシップを示しています、 <xref:System.IFormatProvider> インターフェイスおよび <xref:System.Globalization.NumberFormatInfo> クラスを定義するカスタム書式設定操作で <xref:System.IFormatProvider> 実装します。 その <xref:System.IFormatProvider.GetFormat%2A> メソッドは、書式設定操作によって要求されたオブジェクトの型名を表示します。 インターフェイスを要求している場合、 <xref:System.Globalization.NumberFormatInfo> オブジェクトに、このメソッドを提供、 <xref:System.Globalization.NumberFormatInfo> の現在のスレッド カルチャ オブジェクト。 例に示す、出力として、 <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> メソッド要求、 <xref:System.Globalization.NumberFormatInfo> 一方の書式情報を提供するオブジェクトを <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=fullName> メソッド要求 <xref:System.Globalization.NumberFormatInfo> と <xref:System.Globalization.DateTimeFormatInfo> オブジェクトだけでなく、 <xref:System.ICustomFormatter> 実装します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/formatprovider1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/formatprovider1.vb#1)]  
  
 場合、 <xref:System.IFormatProvider> 実装が数値のメソッドを呼び出したメソッドの呼び出しを書式設定で明示的に提供されていない、 `CultureInfo.CurrentCulture.GetFormat` を返すメソッド、 <xref:System.Globalization.NumberFormatInfo> 現在のスレッド カルチャに対応するオブジェクト。  
  
<a name="properties"></a>   
## NumberFormatInfo のプロパティおよび書式指定文字列  
 すべての書式設定操作は、番号からの結果の文字列を生成するのに、標準またはカスタム数値書式指定文字列を使用します。 場合によっては、次の例のように、明示的なは、結果文字列を生成する書式指定文字列使用します。 このコードでは、 <xref:System.Decimal.ToString%28System.IFormatProvider%29?displayProperty=fullName> に変換する方法、 <xref:System.Decimal> 値を EN\-US カルチャの書式指定規則を使用して、別の文字列表現。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties1.vb#2)]  
  
 それ以外の場合では、書式指定文字列の使用は暗黙の型です。 たとえば、次のメソッド呼び出しの既定値またはパラメーターなしで <xref:System.Decimal.ToString?displayProperty=fullName> メソッドは、の値、 <xref:System.Decimal> インスタンスは一般 \("G"\) 書式指定子とここでは EN\-US カルチャの現在のカルチャの規則を使用して書式設定します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/properties2.cs#3)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/properties2.vb#3)]  
  
 各標準の数値書式指定文字列が 1 つまたは複数を使用して <xref:System.Globalization.NumberFormatInfo> プロパティを確認して、パターン、または結果の文字列に使用する記号です。 同様に、各カスタム数値書式指定子「0」と「\#」記号を挿入によって定義されている結果の文字列の点を除いて <xref:System.Globalization.NumberFormatInfo> プロパティです。 次の表は、標準およびカスタム数値書式指定子と関連付けられた <xref:System.Globalization.NumberFormatInfo> プロパティです。  特定のカルチャの結果文字列の外観を変更するを参照してください。、 [変更 NumberFormatInfo のプロパティ](#modifying) セクションです。 これらの使用方法の詳細の書式指定子を参照してください [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4)です。  
  
|書式指定子|関連付けられたプロパティ|  
|-----------|------------------|  
|"C"または"c"\(通貨の書式指定子\)|<xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A>, 、小数部の桁数の既定の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A>, 、、グループ、または何千もの定義の区切り記号。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A>, 、整数のグループのサイズを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A>, 、通貨の負の値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A>, 、通貨の正の値のパターンを定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, 、通貨記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。|  
|"D"または"d"\(10 進数の書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。|  
|"E"または"e"\(指数、関数の書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, 、仮数と指数に負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, 、、指数部に正の記号を定義します。|  
|"F"または"f"\(固定小数点の書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, 、小数部の桁数の既定の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。|  
|"G"または"g"\(一般書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, 、指数書式で結果の文字列の正の記号を定義します。|  
|"N"または"n"\(数値書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A>, 、小数部の桁数の既定の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, 、グループ区切り記号 \(数千\) 記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A>, 、グループ内の整数部の桁の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A>, 、負の値の形式を定義します。|  
|"P"または"p"\(パーセント書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A>, 、小数部の桁数の既定の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A>, 、桁区切り記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A>, 、グループ内の整数部の桁の数を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A>, 、パーセント記号と負の値の負の符号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A>, 、正の値のパーセント記号の位置を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, 、パーセント記号を定義します。|  
|"R"または"r"\(ラウンドト リップ書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> \(マイナス記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, 、、指数部に正の記号を定義します。|  
|"X"または"x"\(16 進数の書式指定子\)|なし。|  
|"."\(小数点のカスタム書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> \(小数点の記号を定義します\)。|  
|"、"\(グループ区切り記号のカスタム書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A>, 、グループ \(数千\) の区切り記号を定義します。|  
|「%」\(パーセント プレース ホルダーのカスタム書式指定子\)|<xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, 、パーセント記号を定義します。|  
|「‰」\(あたりパーミル プレース ホルダーのカスタム書式指定子\)|<xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A>, を定義する、パーミル記号です。|  
|"E"\(指数表記のカスタム書式指定子\)|<xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, 、仮数と指数に負の記号を定義します。<br /><br /> <xref:System.Globalization.NumberFormatInfo.PositiveSign%2A>, 、、指数部に正の記号を定義します。|  
  
 <xref:System.Globalization.NumberFormatInfo> クラスが含まれています、 <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> 、10 進数、特定のカルチャを指定するプロパティです。 ただし、このプロパティを書式設定操作; で使用できません。基本的なラテン語の数字 0 のみ \(u\+0030\) 9 から \(u\+0039\) 結果の文字列に使用します。 について、さらに、 <xref:System.Single> と <xref:System.Double> の値 `NaN`, 、`PositiveInfinity`, と `NegativeInfinity`, 、結果の文字列のみで構成されてによって定義されたシンボル、 <xref:System.Globalization.NumberFormatInfo.NaNSymbol%2A>, 、<xref:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol%2A>, と <xref:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol%2A> プロパティそれぞれします。  
  
<a name="modifying"></a>   
## NumberFormatInfo のプロパティを変更します。  
 プロパティを変更することができます、 <xref:System.Globalization.NumberFormatInfo> 数値の操作を書式設定で生成された結果の文字列をカスタマイズするオブジェクト。 この操作を行うには、次の手順を実行します。  
  
1.  読み取り\/書き込みコピーを作成、 <xref:System.Globalization.NumberFormatInfo> オブジェクトの書式指定規則を変更します。 詳細については、次を参照してください。、 [NumberFormatInfo オブジェクトをインスタンス化する](#Instantiating) セクションです。  
  
2.  プロパティまたは目的の結果の文字列を作成するためのプロパティを変更します。 どのように書式設定メソッドの使用については <xref:System.Globalization.NumberFormatInfo> 結果文字列を定義するプロパティを参照してください、 [文字列と NumberFormatInfo のプロパティを書式設定](#properties) セクションです。  
  
3.  ユーザー設定を使用して <xref:System.Globalization.NumberFormatInfo> オブジェクトとして、 <xref:System.IFormatProvider> 書式指定メソッドの呼び出しで引数。  
  
> [!NOTE]
>  動的なアプリケーションを起動するたびのカルチャのプロパティの値を変更、代わりに使用することができます、 <xref:System.Globalization.CultureAndRegionInfoBuilder> \(一意の名前を持つし、既存を補足するものをカルチャのカルチャ\) のカスタム カルチャまたは置換カルチャ \(特定のカルチャの代わりに使用するもの\) のいずれかを定義するクラス。  
  
 次のセクションでは、いくつかの例を提供します。  
  
<a name="currency"></a>   
### 通貨記号とパターンを変更します。  
 次の例では、変更、 <xref:System.Globalization.NumberFormatInfo> EN\-US カルチャの書式指定規則を表すオブジェクトします。 ISO 4217 通貨記号が割り当てられます、 <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> プロパティおよび通貨記号の後にスペースと数値で構成される通貨の値のパターンを定義します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_currency1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_currency1.vb#1)]  
  
<a name="id"></a>   
### 国民識別番号を書式設定  
 多くの身分登録番号の数字のみで構成され、のでのプロパティを変更して簡単にフォーマットできます、 <xref:System.Globalization.NumberFormatInfo> オブジェクトです。 たとえば、米国の社会保障番号は 9 桁のように配置します。 `XXX XX XXXX`します。 次の例では、整数値に適切に書式として、社会保障番号が格納されていると想定しています。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Customize\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/cs/customize_ssn1.cs#2)]
 [!code-vb[System.Globalization.NumberFormatInfo.Customize\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.customize/vb/customize_ssn1.vb#2)]  
  
<a name="parsing"></a>   
## 数値文字列の解析  
 解析には、数値の文字列形式を数値に変換します。 .NET Framework の各数値型には、2 つのオーバー ロードされた解析メソッドが含まれています: `Parse` と `TryParse`です。`Parse` メソッドは、文字列を数値に変換し、変換が失敗した場合に例外をスローします。`TryParse` メソッドは、文字列を数値に変換に番号が割り当てられます、 `out` 引数を返す、 <xref:System.Boolean> 変換が成功したかどうかを示す値。  
  
 暗黙的または明示的に使用して解析メソッド、 <xref:System.Globalization.NumberStyles> 解析操作が成功する場合は、\(桁区切り記号、桁区切り記号、通貨記号など\) には、どのようなスタイル要素を文字列内に存在することができますを決定する列挙値。 場合、 <xref:System.Globalization.NumberStyles> 値は、メソッド呼び出しでは既定で提供されていない、 <xref:System.Globalization.NumberStyles> を含む値、 <xref:System.Globalization.NumberStyles.Float> と <xref:System.Globalization.NumberStyles.AllowThousands> フラグで、解析された文字列は、グループ記号、桁区切り記号、負の符号、および空白文字を含めることができますまたは指数表記の数値の文字列形式ができることを指定します。  
  
 明示的または暗黙的にも使用して解析メソッド、 <xref:System.Globalization.NumberFormatInfo> オブジェクトを特定のシンボルが定義されるパターンは、解析する文字列に含まれることができます。 場合、 <xref:System.Globalization.NumberFormatInfo> オブジェクトが指定されていない、既定値は、 <xref:System.Globalization.NumberFormatInfo> の現在のスレッド カルチャ。 解析の詳細についてなど、個々 の解析方法を参照してください <xref:System.Int16.Parse%28System.String%29?displayProperty=fullName>, 、<xref:System.Int32.Parse%28System.String%2CSystem.Globalization.NumberStyles%29?displayProperty=fullName>, 、<xref:System.Int64.Parse%28System.String%2CSystem.IFormatProvider%29?displayProperty=fullName>, 、<xref:System.Decimal.Parse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%29?displayProperty=fullName>, 、<xref:System.Double.TryParse%28System.String%2CSystem.Double%40%29?displayProperty=fullName>, 、および <xref:System.Numerics.BigInteger.TryParse%28System.String%2CSystem.Globalization.NumberStyles%2CSystem.IFormatProvider%2CSystem.Numerics.BigInteger%40%29?displayProperty=fullName>です。  
  
 次の例では、文字列の解析のカルチャに依存した性質を示します。 数千ものを含む文字列を解析しようとすると、EN\-US、FR\-FR、およびインバリアント カルチャの規則を使用して区切り記号。 小数点区切り文字を FR\-FR カルチャで解析が失敗すると、グループ区切り記号、ピリオド、コンマを含む文字列と、グループ区切り記号として white space と桁区切り記号としてコンマ文字列は EN\-US とインバリアント カルチャの解析に失敗します。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parse1.cs#4)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parse1.vb#4)]  
  
 通常、解析は、2 つのコンテキストで発生します。  
  
-   ユーザー入力を数値に変換するように設計された操作として。  
  
-   ように設計された操作としてラウンドト リップ数値を指定します。つまり、数値を文字列としてシリアル化された以前を逆シリアル化します。  
  
 次に、これら 2 つの操作で詳しく説明します。  
  
<a name="ParseUser"></a>   
### ユーザー文字列の解析  
 常にインスタンス化する必要があります、ユーザーが入力した数値の文字列を解析するときに、 <xref:System.Globalization.NumberFormatInfo> ユーザーのカルチャ設定を反映するオブジェクト。 インスタンスを作成する方法については、 <xref:System.Globalization.NumberFormatInfo> ユーザーによるカスタマイズを反映するオブジェクトを参照してください、 [NumberFormatInfo と動的データ](#dynamic) セクションです。  
  
 次の例は、ユーザーのカルチャ設定を反映した解析操作としない種類がの違いを示しています。 この場合、既定のシステム カルチャが EN\-US で、ユーザーが定義小数点記号として「,」と"です。"コントロール パネルで、グループ区切り記号として **地域と言語**します。 通常、これらのシンボルは既定値 EN\-US カルチャで取り消されます。 ときにユーザーがユーザー設定を反映する文字列を入力し、による文字列の解析、 <xref:System.Globalization.NumberFormatInfo> オブジェクトもユーザー設定 \(上書き\) を反映した解析操作には、正しい結果が返されます。 によって、文字列が解析されるときにただし、 <xref:System.Globalization.NumberFormatInfo> 標準的な EN\-US カルチャの設定を反映したオブジェクトに桁区切り記号のシンボルはコンマは誤りし、不適切な結果が返されます。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parseuser1.cs#5)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parseuser1.vb#5)]  
  
<a name="ParseSerial"></a>   
### シリアル化して、数値データを逆シリアル化  
 数値データは、文字列の形式でシリアル化し、後で逆シリアル化および解析すると、文字列を生成およびインバリアント カルチャの規則を使用して解析する必要があります。 書式設定および解析操作では、特定のカルチャの規則が反映されないようにする必要があります。 データの移植性が厳密に制限されます。 カルチャに固有の設定を使用している場合カルチャに固有の設定はシリアル化されたスレッドのものと同じスレッドでのみ正常に逆シリアル化されたことができます。 場合によっては、このため、データがもできないことは、シリアル化された同じシステムに正常に逆シリアル化されたあります。  
  
 次の例では、この原則に違反した場合、何が起こりを示しています。 配列内の浮動小数点の値は、現在のスレッドは、EN\-US カルチャのカルチャに固有の設定を使用する場合、文字列に変換されます。 EN\-GB カルチャのカルチャに固有の設定を使用するスレッドによってデータが解析されます。 ここでは、各解析操作が成功すると、データはサポートしていないラウンド トリップが正常にデータの破損が発生したとします。 その他の場合は、解析操作が失敗して、 <xref:System.FormatException> 例外がスローされる可能性があります。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.Class\#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/cs/parsepersisted.cs#6)]
 [!code-vb[System.Globalization.NumberFormatInfo.Class\#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.class/vb/parsepersisted.vb#6)]  
  
   
  
## 例  
 次の例を取得する方法を示しています、 <xref:System.Globalization.NumberFormatInfo> 、対応するためのオブジェクト <xref:System.Globalization.CultureInfo> オブジェクト、およびクエリ数が特定のカルチャの書式設定情報を取得したオブジェクトを使用します。  
  
 [!code-cpp[NumberFormatInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberFormatInfo/cpp/NumberFormatInfo.cpp#1)]
 [!code-csharp[NumberFormatInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberFormatInfo/CS/NumberFormatInfo.cs#1)]
 [!code-vb[NumberFormatInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberFormatInfo/vb/numberformatinfo.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Globalization.CultureInfo" />
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NumberFormatInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>カルチャに依存しない \(インバリアントな\) <see cref="T:System.Globalization.NumberFormatInfo" /> クラスの新しい書き込み可能インスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義の書式設定、アプリケーションが必要な場合、新しいインスタンスのプロパティを変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトの簡易コピーを作成します。</summary>
        <returns>元の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトからコピーされた新しいオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クローンが書き込み可能な場合でも、元 <xref:System.Globalization.NumberFormatInfo> オブジェクトは読み取り専用です。 そのため、複製のプロパティは、ユーザー定義パターンで変更できます。  
  
 オブジェクトの簡易コピーのみのオブジェクトのコピーであります。 オブジェクトに他のオブジェクトへの参照が含まれている場合、シャロー コピーでは、この参照されるオブジェクトのコピーは作成されません。 代わりに元のオブジェクトを参照します。 その一方で、オブジェクトのディープ コピーは、オブジェクトのコピーと直接または間接的には、そのオブジェクトによって参照されるすべてのコピーを作成します。 場合、 <xref:System.Globalization.NumberFormatInfo> オブジェクト、シャロー コピーは、オブジェクトの参照を返すすべてのプロパティがあるために、すべてのインスタンスのプロパティをコピーするための十分な `static` \(`Shared` Visual Basic で\)。  
  
   
  
## 例  
 次の例では、 <xref:System.Globalization.NumberFormatInfo.Clone%2A> の読み取り\/書き込みコピーを作成する方法、 <xref:System.Globalization.NumberFormatInfo> 数値を書式設定の現在のスレッド カルチャの規則を表すオブジェクト。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalDigits">
      <MemberSignature Language="C#" Value="public int CurrencyDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>通貨の値で使用する小数点以下の桁数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> プロパティが数値の書式設定操作の有効桁数指定子がない"C"標準書式指定文字列で使用します。 桁区切り記号の後にある桁の小数部の既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits%2A> プロパティです。  
  
 [!code-cpp[CurrencyDecimalDigits\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalDigits/CPP/currencydecimaldigits.cpp#1)]
 [!code-csharp[CurrencyDecimalDigits\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalDigits/CS/currencydecimaldigits.cs#1)]
 [!code-vb[CurrencyDecimalDigits\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalDigits/VB/currencydecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyDecimalSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>通貨の値で桁区切り記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの初期値が設定から派生した、 **地域と言語** コントロール パネルのです。  
  
 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> 桁の小数部と整数を区切る記号を定義するプロパティが"C"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A> プロパティです。  
  
 [!code-cpp[CurrencyDecimalSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyDecimalSeparator/CPP/currencydecimalseparator.cpp#1)]
 [!code-csharp[CurrencyDecimalSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyDecimalSeparator/CS/currencydecimalseparator.cs#1)]
 [!code-vb[CurrencyDecimalSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyDecimalSeparator/VB/currencydecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSeparator">
      <MemberSignature Language="C#" Value="public string CurrencyGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencyGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある数字のグループを区切る文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The initial value of this property is derived from the settings in the **ui tag is not supported!!!!**  
 item in Control Panel.  
  
 The <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> property is used with the "C" standard format string to define the symbol that separates groups of integral digits. For more information, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467).  
  
   
  
## 例  
 The following example demonstrates the effect of changing the <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator%2A> property.  
  
 [!code-cpp[CurrencyGroupSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSeparator/CPP/currencygroupseparator.cpp#1)]
 [!code-csharp[CurrencyGroupSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSeparator/CS/currencygroupseparator.cs#1)]
 [!code-vb[CurrencyGroupSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSeparator/VB/currencygroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyGroupSizes">
      <MemberSignature Language="C#" Value="public int[] CurrencyGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CurrencyGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>通貨の値で小数点の左にある各グループの数字の数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> property is used with the "C" standard format string to define the number of digits that appear in integral groups. For more information, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467). Every element in the one\-dimensional array must be an integer from 1 through 9. The last element can be 0.  
  
 The first element of the array defines the number of elements in the least significant group of digits immediately to the left of the <xref:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator%2A>. Each subsequent element refers to the next significant group of digits to the left of the previous group. If the last element of the array is not 0, the remaining digits are grouped based on the last element of the array. If the last element is 0, the remaining digits are not grouped.  
  
 For example, if the array contains { 3, 4, 5 }, the digits are grouped similar to "$55,55555,55555,55555,4444,333.00". If the array contains { 3, 4, 0 }, the digits are grouped similar to "$55555555555555555,4444,333.00".  
  
   
  
## 例  
 The following example demonstrates the effect of changing the <xref:System.Globalization.NumberFormatInfo.CurrencyGroupSizes%2A> property.  
  
 [!code-cpp[CurrencyGroupSizes\#1](~/samples/snippets/cpp/VS_Snippets_CLR/CurrencyGroupSizes/CPP/currencygroupsizes.cpp#1)]
 [!code-csharp[CurrencyGroupSizes\#1](~/samples/snippets/csharp/VS_Snippets_CLR/CurrencyGroupSizes/CS/currencygroupsizes.cs#1)]
 [!code-vb[CurrencyGroupSizes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CurrencyGroupSizes/VB/currencygroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 \-または\-  
  
 プロパティが設定され、配列には 0 に設定されているエントリ \(最後のエントリ以外\) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyNegativePattern">
      <MemberSignature Language="C#" Value="public int CurrencyNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の通貨値の形式パターンを取得または設定します。</summary>
        <value>負の通貨値の形式パターン。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"\($n\)" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> property is used with the "C" standard format string to define the pattern of negative currency values. For more information, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467). This property has one of the values in the following table. The symbol "$" is the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A>, the symbol "\-" is the <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, and **parameterReference tag is not supported!!!!**  
 is a number.  
  
|Value|Associated pattern|  
|-----------|------------------------|  
|0|\($n\)|  
|1|\-$n|  
|2|$\-n|  
|3|$n\-|  
|4|\(n$\)|  
|5|\-n$|  
|6|n\-$|  
|7|n$\-|  
|8|\-n $|  
|9|\-$ n|  
|10|n $\-|  
|11|$ n\-|  
|12|$ \-n|  
|13|n\- $|  
|14|\($ n\)|  
|15|\(n $\)|  
  
   
  
## 例  
 The following example shows how the <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> property defines the format of negative currency values.  It retrieves all the specific cultures that are defined on the host computer and displays each culture's <xref:System.Globalization.NumberFormatInfo.CurrencyNegativePattern%2A> property value, its associated pattern, and a number formatted as a currency value.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencyNegativePattern\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/cs/currencynegativepattern1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencyNegativePattern\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencynegativepattern/vb/currencynegativepattern1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、15 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencyPositivePattern">
      <MemberSignature Language="C#" Value="public int CurrencyPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CurrencyPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨の正の値の形式パターンを取得または設定します。</summary>
        <value>通貨の正の値の形式パターン。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"$n" を表します。"$" は <see cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The <xref:System.Globalization.NumberFormatInfo.CurrencyPositivePattern%2A> property is used with the "C" standard format string to define pattern of positive currency values. For more information, see [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467). This property has one of the values in the following table. The symbol "$" is the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> and **parameterReference tag is not supported!!!!**  
 is a number.  
  
|Value|Associated pattern|  
|-----------|------------------------|  
|0|$n|  
|1|n$|  
|2|$ n|  
|3|n $|  
  
 Note that the pattern does not support a positive sign.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="CurrencySymbol">
      <MemberSignature Language="C#" Value="public string CurrencySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrencySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通貨記号として使用する文字列を取得または設定します。</summary>
        <value>通貨記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "¤" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The string assigned to the <xref:System.Globalization.NumberFormatInfo.CurrencySymbol%2A> property is included in the result string when a numeric value is formatted with the "C" [standard numeric format string](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467).  
  
   
  
## 例  
 The following example displays the currency symbol for the current culture and uses the "C" standard numeric format string to format a currency value.  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrencySymbol\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/cs/currencysymbolex1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrencySymbol\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currencysymbol/vb/currencysymbolex1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo CurrentInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo CurrentInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.CurrentInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のカルチャに基づいて値を形式指定する読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> を取得します。</summary>
        <value>現在のスレッドのカルチャに基づく読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 取得する、 <xref:System.Globalization.NumberFormatInfo> オブジェクトから、 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> プロパティを取得するのには、 <xref:System.Globalization.NumberFormatInfo> オブジェクトから、 `CultureInfo.CurrentCulture.NumberFormat` プロパティです。  
  
   
  
## 例  
 次の例を示しますによって返されるオブジェクト、 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> と   `CultureInfo.CurrentCulture.NumberFormat` プロパティは同じです。 使用して、リフレクションのプロパティ値を表示、 <xref:System.Globalization.NumberFormatInfo> によって返されるオブジェクト、 <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A> 現在のカルチャが EN\-US でシステムのプロパティです。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.CurrentInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/cs/currentinfo1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.CurrentInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.currentinfo/vb/currentinfo1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.CultureInfo.NumberFormat" />
      </Docs>
    </Member>
    <Member MemberName="DigitSubstitution">
      <MemberSignature Language="C#" Value="public System.Globalization.DigitShapes DigitSubstitution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Globalization.DigitShapes DigitSubstitution" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.DigitSubstitution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.DigitShapes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>グラフィカル ユーザー インターフェイスが数字の形状を表示する方法を指定する値を取得または設定します。</summary>
        <value>カルチャ固有の数字形状を指定する列挙値の 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  The <xref:System.Globalization.NumberFormatInfo.DigitSubstitution%2A> property is reserved for future use. Currently, it is not used in either parsing or formatting operations for the current <xref:System.Globalization.NumberFormatInfo> object.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">セット操作の値が正しい <see cref="T:System.Globalization.DigitShapes" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetFormat">
      <MemberSignature Language="C#" Value="public object GetFormat (Type formatType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetFormat(class System.Type formatType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetFormat(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="formatType">要求される形式指定サービスの <see cref="T:System.Type" />。</param>
        <summary>数値形式指定サービスを提供する指定した型のオブジェクトを取得します。</summary>
        <returns>
          <paramref name="formatType" /> が現在の <see cref="T:System.Globalization.NumberFormatInfo" /> の型と同じ場合は、現在の <see cref="T:System.Globalization.NumberFormatInfo" />。それ以外の場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `Format(String, IFormatProvider)` 基本データ型でサポートされるメソッドは、このメソッドを呼び出すときに、現在 <xref:System.Globalization.NumberFormatInfo> として渡される、 <xref:System.IFormatProvider> パラメーター。 このメソッドは、<xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> を実装します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="M:System.Globalization.DateTimeFormatInfo.GetFormat(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetInstance">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo GetInstance (IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo GetInstance(class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="formatProvider">
          <see cref="T:System.Globalization.NumberFormatInfo" /> を取得するために使用する <see cref="T:System.IFormatProvider" />。  
  
 または  
  
 <see cref="P:System.Globalization.NumberFormatInfo.CurrentInfo" /> を取得する <see langword="null" />。</param>
        <summary>指定された <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" /> を取得します。</summary>
        <returns>指定した <see cref="T:System.Globalization.NumberFormatInfo" /> に関連付けられている <see cref="T:System.IFormatProvider" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、 <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> メソッドの `formatProvider` を使用して <xref:System.Globalization.NumberFormatInfo> 型パラメーターとします。 場合 `formatProvider` は `null` または <xref:System.IFormatProvider.GetFormat%2A?displayProperty=fullName> 返します `null`, 、このメソッドが戻る <xref:System.Globalization.NumberFormatInfo.CurrentInfo%2A>します。  
  
 アプリケーションの取得、 <xref:System.Globalization.NumberFormatInfo> 、特定のカルチャを使用して、次の方法のいずれかのオブジェクト。  
  
-   を介して、 <xref:System.Globalization.CultureInfo.NumberFormat%2A?displayProperty=fullName> プロパティです。  
  
-   を介して、 <xref:System.Globalization.NumberFormatInfo.GetInstance%2A> メソッド、 `provider` は、 <xref:System.Globalization.CultureInfo>です。  
  
 A <xref:System.Globalization.NumberFormatInfo> を特定のカルチャまたはニュートラル カルチャではなく、インバリアント カルチャにのみ、オブジェクトを作成します。 インバリアント カルチャ、特定のカルチャおよびのニュートラル カルチャの詳細については、次を参照してください。、 <xref:System.Globalization.CultureInfo> クラスです。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="InvariantInfo">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo InvariantInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.NumberFormatInfo InvariantInfo" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.InvariantInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カルチャに依存しない \(インバリアントな\) 読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトを取得します。</summary>
        <value>カルチャに依存しない \(インバリアントな\) 読み取り専用オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、 <xref:System.Globalization.NumberFormatInfo> 、現在のカルチャに関係なく、このプロパティによって返されるオブジェクトが変更されません。 これは、英語では、国\/地域ではなく関連付けられているカルチャ インバリアント カルチャの書式指定規則を表します。 インバリアント カルチャを使用して、書式設定操作がカルチャに依存しない、または複数のカルチャにわたって表示に適した結果文字列を作成するのです。  
  
   
  
## 例  
 次の例の既定のプロパティ値を表示する、 <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A>です。  
  
 [!code-cpp[System.Globalization.NumberFormatInfo.InvariantInfo\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CPP/invariantinfo.cpp#1)]
 [!code-csharp[System.Globalization.NumberFormatInfo.InvariantInfo\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/CS/invariantinfo.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.InvariantInfo\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Globalization.NumberFormatInfo.InvariantInfo/VB/invariantinfo.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Globalization.NumberFormatInfo" /> が読み取り専用である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取り専用のプロパティへの代入を実行しようとしています。 <xref:System.Globalization.NumberFormatInfo> により、 <xref:System.InvalidOperationException>です。  
  
 呼び出すことができます、 <xref:System.Globalization.NumberFormatInfo.Clone%2A> 読み取り\/書き込みを作成する方法 <xref:System.Globalization.NumberFormatInfo> 読み取り専用のオブジェクトからオブジェクトの次の例に示すようにします。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.IsReadOnly\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/cs/isreadonly1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.IsReadOnly\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.isreadonly/vb/isreadonly1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      </Docs>
    </Member>
    <Member MemberName="NaNSymbol">
      <MemberSignature Language="C#" Value="public string NaNSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NaNSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>IEEE NaN \(非数\) 値を表す文字列を取得または設定します。</summary>
        <value>IEEE NaN \(非数\) 値を表す文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "NaN" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 NaN 値の詳細については、次を参照してください。 <xref:System.Double> または <xref:System.Single>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      </Docs>
    </Member>
    <Member MemberName="NativeDigits">
      <MemberSignature Language="C#" Value="public string[] NativeDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] NativeDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NativeDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>西洋数字 0 ～ 9 に等しいネイティブ数字の文字列配列を取得または設定します。</summary>
        <value>西洋数字 0 ～ 9 に等しいネイティブ数字を含む文字列配列。 既定値は "0"、"1"、"2"、"3"、"4"、"5"、"6"、"7"、"8"、"9" を要素に持つ配列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!IMPORTANT]
>  指定されている文字セット、 <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> プロパティは、解析または書式設定操作の影響を与えません。 基本的なラテン語の数字 0 のみ \(u\+0030\) 9 から \(u\+0039\) の書式設定または数値または日付と時刻の値を解析する際に使用します。  
  
   
  
## 例  
 次の例は、 <xref:System.Globalization.NumberFormatInfo.NativeDigits%2A> プロパティです。  
  
 [!code-cpp[sys.glob.NFI.nativeDigits\#1](~/samples/snippets/cpp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cpp/nd.cpp#1)]
 [!code-csharp[sys.glob.NFI.nativeDigits\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/cs/nd.cs#1)]
 [!code-vb[sys.glob.NFI.nativeDigits\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.glob.NFI.nativeDigits/vb/nd.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在の <see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentNullException">設定操作で値が <see langword="null" /> です。  
  
 \-または\-  
  
 設定操作で値配列の要素が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">設定操作で値配列に 10 個の要素がありません。  
  
 \-または\-  
  
 設定操作で、値配列の要素に単一の <see cref="T:System.Char" /> オブジェクトまたはサロゲート ペアを構成する一対の <see cref="T:System.Char" /> オブジェクトが含まれていません。  
  
 または  
  
 設定操作の値の配列の要素ではない番号数字によって定義された、 [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123)します。 つまり、配列要素中の数字は Unicode <see langword="Number, Decimal Digit" /> \(Nd\) General Category 値を持ちません。  
  
 \-または\-  
  
 設定操作で、値配列内の要素の数値は配列内の要素の位置に対応していません。 つまり、配列の 1 番目であるインデックス 0 の要素の数値が 0 でなく、インデックス 1 の要素の数値が 1 でありません。</exception>
        <altmember cref="T:System.Globalization.DigitShapes" />
      </Docs>
    </Member>
    <Member MemberName="NegativeInfinitySymbol">
      <MemberSignature Language="C#" Value="public string NegativeInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の無限大を表す文字列を取得または設定します。</summary>
        <value>負の無限大を表す文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "\-Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 負の無限大の詳細については、次を参照してください。 <xref:System.Double> または <xref:System.Single>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="NegativeSign">
      <MemberSignature Language="C#" Value="public string NegativeSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NegativeSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が負であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が負であることを示す文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "\-" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、書式設定と解析操作の両方で使用されます。 書式設定操作で使用する方法の詳細については、次を参照してください。、 [Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467) と [Custom Numeric Format Strings](http://msdn.microsoft.com/ja-jp/6f74fd32-6c6b-48ed-8241-3c2b86dea5f4) トピックです。  
  
   
  
## 例  
 次の例は、読み取り\/書き込みをインスタンス化 <xref:System.Globalization.CultureInfo> をインバリアント カルチャを表す OVERLINE 文字 \(U \+ 203E\) に割り当てますオブジェクト、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> プロパティです。 使用して、この <xref:System.Globalization.CultureInfo> 負の浮動小数点数の配列を書式指定するオブジェクト。  
  
 [!code-csharp[System.Globalization.NumberFormatInfo.NegativeSign\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/cs/negativesign1.cs#1)]
 [!code-vb[System.Globalization.NumberFormatInfo.NegativeSign\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.globalization.numberformatinfo.negativesign/vb/negativesign1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalDigits">
      <MemberSignature Language="C#" Value="public int NumberDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>数値で使用する小数点以下の桁数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> プロパティが数値の書式設定操作の有効桁数指定子がない"F"と"N"標準書式指定文字列で使用します。 桁区切り記号の後にある桁の小数部の既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalDigits%2A> プロパティです。  
  
 [!code-cpp[NumberDecimalDigits\#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalDigits/CPP/numberdecimaldigits.cpp#1)]
 [!code-csharp[NumberDecimalDigits\#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalDigits/CS/numberdecimaldigits.cs#1)]
 [!code-vb[NumberDecimalDigits\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalDigits/VB/numberdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="NumberDecimalSeparator">
      <MemberSignature Language="C#" Value="public string NumberDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>数値で桁区切り記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> 桁の小数部と整数を区切る記号を定義するプロパティは"E"、"F"、"G"、"N"および"R"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
 このプロパティの初期値が設定から派生した、 **地域と言語** コントロール パネルのです。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A> プロパティです。  
  
 [!code-cpp[NumberDecimalSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberDecimalSeparator/CPP/numberdecimalseparator.cpp#1)]
 [!code-csharp[NumberDecimalSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberDecimalSeparator/CS/numberdecimalseparator.cs#1)]
 [!code-vb[NumberDecimalSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberDecimalSeparator/VB/numberdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSeparator">
      <MemberSignature Language="C#" Value="public string NumberGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NumberGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>数値で小数点の左にある数字のグループを区切る文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> の整数部の桁を区切る記号を定義するプロパティは"N"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
 このプロパティの初期値が設定から派生した、 **地域と言語** コントロール パネルのです。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A> プロパティです。  
  
 [!code-cpp[NumberGroupSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSeparator/CPP/numbergroupseparator.cpp#1)]
 [!code-csharp[NumberGroupSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSeparator/CS/numbergroupseparator.cs#1)]
 [!code-vb[NumberGroupSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSeparator/VB/numbergroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="NumberGroupSizes">
      <MemberSignature Language="C#" Value="public int[] NumberGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] NumberGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>数値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>数値で小数点の左にある各グループの数字の数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> プロパティは"N"を使用してフォーマットされている数値の結果に影響します。 カスタム数値書式文字列またはその他の標準数値書式指定文字列を使用するの値を設定する場合、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> プロパティは無視されます。  
  
 1 次元の配列内のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素は、0 にすることができます。  
  
 配列の最初の要素の左側の直後にある数字の最下位のグループ内の要素の数を定義する、 <xref:System.Globalization.NumberFormatInfo.NumberDecimalSeparator%2A>です。 後続の各要素は、前のグループの左側にある数字の次の重要なグループを参照します。 配列の最後の要素の場合 0 ではなく、残りの数字、に基づいてグループ化、配列の最後の要素。 最後の要素が 0 の場合、残りの数字はグループ化されません。  
  
 たとえば、{3, 4, 5} が、配列が含まれる場合、数字は「55,55555,55555,55555,4444,333.00」のようなグループ化します。 {3, 4, 0} が、配列が含まれる場合は、数字が「55555555555555555,4444,333.00」のようなグループ化します。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> プロパティです。  
  
 [!code-cpp[NumberGroupSizes\#1](~/samples/snippets/cpp/VS_Snippets_CLR/NumberGroupSizes/CPP/numbergroupsizes.cpp#1)]
 [!code-csharp[NumberGroupSizes\#1](~/samples/snippets/csharp/VS_Snippets_CLR/NumberGroupSizes/CS/numbergroupsizes.cs#1)]
 [!code-vb[NumberGroupSizes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/NumberGroupSizes/VB/numbergroupsizes.vb#1)]  
  
 次の例は、異なる値を出力 <xref:System.Globalization.NumberFormatInfo.NumberGroupSizes%2A> 配列。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberGroupSizes Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberGroupSizes Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberGroupSizes Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberGroupSizes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 \-または\-  
  
 プロパティが設定され、配列には 0 に設定されているエントリ \(最後のエントリ以外\) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="NumberNegativePattern">
      <MemberSignature Language="C#" Value="public int NumberNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負の数値の形式パターンを取得または設定します。</summary>
        <value>負の数値の形式パターン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> プロパティは、"N"標準書式指定文字列でフォーマットされた負の値の形式を定義します。 このプロパティは、次の表に、値の 1 つを持ちます。 記号"\-"は、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A> と `n` の数値します。  
  
|値|関連付けられたパターン|  
|-------|-----------------|  
|0|\(n\)|  
|1|\-n|  
|2|\-n|  
|3|n\-|  
|4|n\-|  
  
 によって返されるインバリアント カルチャの既定値、 <xref:System.Globalization.NumberFormatInfo.InvariantInfo%2A> プロパティを表す 1 は、"\-n"ここで、 *n* の数値します。  
  
   
  
## 例  
 次の例には、異なる値が表示されます。 <xref:System.Globalization.NumberFormatInfo.NumberNegativePattern%2A> パターンです。  
  
 [!code-cpp[Classic NumberFormatInfo.NumberNegativePattern Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CPP/source.cpp#1)]
 [!code-csharp[Classic NumberFormatInfo.NumberNegativePattern Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/CS/source.cs#1)]
 [!code-vb[Classic NumberFormatInfo.NumberNegativePattern Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic NumberFormatInfo.NumberNegativePattern Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、4 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalDigits">
      <MemberSignature Language="C#" Value="public int PercentDecimalDigits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentDecimalDigits" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で使用する小数点以下の桁数を取得または設定します。</summary>
        <value>パーセント値で使用する小数点以下の桁数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 2 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> プロパティが数値の書式設定操作の有効桁数指定子がない"P"標準書式指定文字列で使用します。 桁区切り記号の後にある桁の小数部の既定の数を定義します。 精度指定子を使用する場合、この値はオーバーライドされます。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.PercentDecimalDigits%2A> プロパティです。  
  
 [!code-cpp[PercentDecimalDigits\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalDigits/CPP/percentdecimaldigits.cpp#1)]
 [!code-csharp[PercentDecimalDigits\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalDigits/CS/percentdecimaldigits.cs#1)]
 [!code-vb[PercentDecimalDigits\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalDigits/VB/percentdecimaldigits.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが、0 より小さい値か、99 より大きい値に設定されようとしています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalDigits" />
      </Docs>
    </Member>
    <Member MemberName="PercentDecimalSeparator">
      <MemberSignature Language="C#" Value="public string PercentDecimalSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentDecimalSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で桁区切り記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント値で桁区切り記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "." です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> 桁の小数部と整数を区切る記号を定義するプロパティが"P"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A> プロパティです。  
  
 [!code-cpp[PercentDecimalSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentDecimalSeparator/CPP/percentdecimalseparator.cpp#1)]
 [!code-csharp[PercentDecimalSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentDecimalSeparator/CS/percentdecimalseparator.cs#1)]
 [!code-vb[PercentDecimalSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentDecimalSeparator/VB/percentdecimalseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">このプロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <exception cref="T:System.ArgumentException">プロパティが空の文字列に設定されています。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberDecimalSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSeparator">
      <MemberSignature Language="C#" Value="public string PercentGroupSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentGroupSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある数字のグループを区切る文字列を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある数字のグループを区切る文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "," です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> プロパティは整数のグループを区切る記号を定義する"P"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.PercentGroupSeparator%2A> プロパティです。  
  
 [!code-cpp[PercentGroupSeparator\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSeparator/CPP/percentgroupseparator.cpp#1)]
 [!code-csharp[PercentGroupSeparator\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSeparator/CS/percentgroupseparator.cs#1)]
 [!code-vb[PercentGroupSeparator\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSeparator/VB/percentgroupseparator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSeparator" />
      </Docs>
    </Member>
    <Member MemberName="PercentGroupSizes">
      <MemberSignature Language="C#" Value="public int[] PercentGroupSizes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] PercentGroupSizes" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント値で小数点の左にある各グループの数字の数を取得または設定します。</summary>
        <value>パーセント値で小数点の左にある各グループの数字の数。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 1 つだけの要素を持つ 1 次元配列であり、その要素は 3 に設定されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> プロパティは整数のグループで表示される数字の数を定義する"P"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。 1 次元の配列内のすべての要素は、1 ~ 9 の整数である必要があります。 最後の要素は、0 にすることができます。  
  
 配列の最初の要素の左側の直後にある数字の最下位のグループ内の要素の数を定義する、 <xref:System.Globalization.NumberFormatInfo.PercentDecimalSeparator%2A>です。 後続の各要素は、前のグループの左側にある数字の次の重要なグループを参照します。 配列の最後の要素の場合 0 ではなく、残りの数字、に基づいてグループ化、配列の最後の要素。 最後の要素が 0 の場合、残りの数字はグループ化されません。  
  
 たとえば、{3, 4, 5} が、配列が含まれる場合、数字はグループ化のような"55,55555,55555,55555,4444,333.00%"です。 {3, 4, 0} が、配列が含まれる場合、数字グループ化するように"55555555555555555,4444,333.00%"です。  
  
   
  
## 例  
 次の例では、変更した効果、 <xref:System.Globalization.NumberFormatInfo.PercentGroupSizes%2A> プロパティです。  
  
 [!code-cpp[PercentGroupSizes\#1](~/samples/snippets/cpp/VS_Snippets_CLR/PercentGroupSizes/CPP/percentgroupsizes.cpp#1)]
 [!code-csharp[PercentGroupSizes\#1](~/samples/snippets/csharp/VS_Snippets_CLR/PercentGroupSizes/CS/percentgroupsizes.cs#1)]
 [!code-vb[PercentGroupSizes\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/PercentGroupSizes/VB/percentgroupsizes.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.ArgumentException">プロパティが設定され、配列には 0 より小さいか、9 よりも大きいエントリが含まれています。  
  
 \-または\-  
  
 プロパティが設定され、配列には 0 に設定されているエントリ \(最後のエントリ以外\) が含まれています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberGroupSizes" />
      </Docs>
    </Member>
    <Member MemberName="PercentNegativePattern">
      <MemberSignature Language="C#" Value="public int PercentNegativePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentNegativePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>負のパーセント値の形式パターンを取得または設定します。</summary>
        <value>負のパーセント値の形式パターン。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"\-n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentNegativePattern%2A> プロパティが負の値の割合の値のパターンを定義する"P"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 記号「%」は、 <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A>, 、記号"\-"は、 <xref:System.Globalization.NumberFormatInfo.NegativeSign%2A>, 、および `n` の数値します。 値 3\-11 では、.NET Framework 2.0 で導入され、以前のバージョンでは使用できません。  
  
|値|関連付けられたパターン|  
|-------|-----------------|  
|0|\-n %|  
|1|\-n %|  
|2|\-%n|  
|3|% n|  
|4|%n\-|  
|5|n %|  
|6|n %\-|  
|7|~ % n|  
|9|n %\-|  
|9|n の %|  
|10|n %|  
|11|n の %|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティは、0 より小さいか、11 を超える値である値に設定されているが。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NumberNegativePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentPositivePattern">
      <MemberSignature Language="C#" Value="public int PercentPositivePattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PercentPositivePattern" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正のパーセント値の形式パターンを取得または設定します。</summary>
        <value>正のパーセント値の形式パターン。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は 0 で、"n %" を表します。"%" は <see cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" /> で、<paramref name="n" /> は数値です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Globalization.NumberFormatInfo.PercentPositivePattern%2A> プロパティは、正のパーセント値のパターンを定義する"P"標準書式指定文字列で使用します。 詳細については、「[Standard Numeric Format Strings](http://msdn.microsoft.com/ja-jp/580e57eb-ac47-4ffd-bccd-3a1637c2f467)」を参照してください。 このプロパティは、次の表に、値の 1 つを持ちます。 記号「%」は、 <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> と `n` の数値します。  
  
|値|関連付けられたパターン|  
|-------|-----------------|  
|0|n %|  
|1|n %|  
|2|%n|  
|3|%n|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">プロパティが 0 より小さい値か、または 3 より大きい値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencyPositivePattern" />
      </Docs>
    </Member>
    <Member MemberName="PercentSymbol">
      <MemberSignature Language="C#" Value="public string PercentSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PercentSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーセント記号として使用する文字列を取得または設定します。</summary>
        <value>パーセント記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "%" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てられた文字列、 <xref:System.Globalization.NumberFormatInfo.PercentSymbol%2A> 数値を書式設定すると、"P"または「%」を含む書式指定文字列に、結果の文字列のプロパティが含まれています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalDigits" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentDecimalSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSeparator" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentGroupSizes" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentNegativePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentPositivePattern" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PerMilleSymbol">
      <MemberSignature Language="C#" Value="public string PerMilleSymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PerMilleSymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PerMilleSymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パーミル記号として使用する文字列を取得または設定します。</summary>
        <value>パーミル記号として使用する文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "‰" です。これは Unicode 文字の U\+2030 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 割り当てられた文字列、 <xref:System.Globalization.NumberFormatInfo.PerMilleSymbol%2A> 数値は「‰」を含む書式指定文字列に設定されると、結果の文字列のプロパティが含まれています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.CurrencySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.PercentSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveInfinitySymbol">
      <MemberSignature Language="C#" Value="public string PositiveInfinitySymbol { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveInfinitySymbol" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveInfinitySymbol" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>正の無限大を表す文字列を取得または設定します。</summary>
        <value>正の無限大を表す文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "Infinity" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 正の無限大の詳細については、次を参照してください。 <xref:System.Double> または <xref:System.Single>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">プロパティが <see langword="null" /> に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeInfinitySymbol" />
        <altmember cref="P:System.Globalization.NumberFormatInfo.NaNSymbol" />
      </Docs>
    </Member>
    <Member MemberName="PositiveSign">
      <MemberSignature Language="C#" Value="public string PositiveSign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PositiveSign" />
      <MemberSignature Language="DocId" Value="P:System.Globalization.NumberFormatInfo.PositiveSign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>関連付けられた数値が正であることを示す文字列を取得または設定します。</summary>
        <value>関連付けられた数値が正であることを示す文字列。<see cref="P:System.Globalization.NumberFormatInfo.InvariantInfo" /> の既定値は "\+" です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、書式設定ではなく、数値の文字列を解析するためだけに使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">割り当てられる値は、設定操作で <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">プロパティが設定されていますが、<see cref="T:System.Globalization.NumberFormatInfo" /> オブジェクトは読み取り専用です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.NegativeSign" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public static System.Globalization.NumberFormatInfo ReadOnly (System.Globalization.NumberFormatInfo nfi);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Globalization.NumberFormatInfo ReadOnly(class System.Globalization.NumberFormatInfo nfi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Globalization</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.NumberFormatInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nfi" Type="System.Globalization.NumberFormatInfo" />
      </Parameters>
      <Docs>
        <param name="nfi">ラップする <see cref="T:System.Globalization.NumberFormatInfo" />。</param>
        <summary>読み取り専用 <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパーを返します。</summary>
        <returns>
          <paramref name="nfi" /> をラップする読み取り専用の <see cref="T:System.Globalization.NumberFormatInfo" /> ラッパー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このラッパーに `nfi`します。  
  
 読み取り専用のプロパティへの代入を実行しようとしています。 <xref:System.Globalization.NumberFormatInfo> により、 <xref:System.InvalidOperationException>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nfi" /> は <see langword="null" /> です。</exception>
        <altmember cref="P:System.Globalization.NumberFormatInfo.IsReadOnly" />
      </Docs>
    </Member>
  </Members>
</Type>