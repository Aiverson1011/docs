<Type Name="SerialPort" FullName="System.IO.Ports.SerialPort">
  <TypeSignature Language="C#" Value="public class SerialPort : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SerialPort extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.IO.Ports.SerialPort" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.IO.Ports</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>シリアル ポート リソースを表します。  
  
 この型の .NET Framework ソース コードを参照するを参照してください。、 [Reference Source](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe)します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  この型の .NET Framework ソース コードを参照してください、 [Reference Source](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe)します。 ソース コードをオンラインで参照、オフライン表示のリファレンスをダウンロードおよびデバッグ中にソース \(パッチや更新を含む\) をステップsee [instructions](http://referencesource.microsoft.com/).  
  
 このクラスを使用すると、シリアル ポートのファイル リソースを制御できます。 このクラスは、同期およびイベント ドリブン I\/O、暗証番号 \(pin\) とブレーク状態へのアクセス、およびシリアル ドライバーのプロパティへのアクセスを提供します。 このクラスの機能をラップして、内部でさらに、 <xref:System.IO.Stream> オブジェクトを介してアクセスできる、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティには、wrap またはストリームを使用するクラスに渡されるとします。  
  
 <xref:System.IO.Ports.SerialPort> クラスは、次のエンコードをサポートしています: <xref:System.Text.ASCIIEncoding>, 、<xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UnicodeEncoding>, 、<xref:System.Text.UTF32Encoding>, 、エンコーディングのコード ページが 50000 未満か、コード ページは 54936 mscorlib.dll に定義されているとします。  代替のエンコーディングを使用できますが、使用する必要があります、 <xref:System.IO.Ports.SerialPort.ReadByte%2A> または <xref:System.IO.Ports.SerialPort.Write%2A> メソッドと、自分でエンコードを実行します。  
  
 使用する、 <xref:System.IO.Ports.SerialPort.GetPortNames%2A> 現在のコンピューターの有効なポートを取得します。  
  
 場合、 <xref:System.IO.Ports.SerialPort> オブジェクトが読み取り操作中にブロックされた、スレッドを中止できません。 基数を閉じるか代わりに、ストリームまたは破棄、 <xref:System.IO.Ports.SerialPort> オブジェクトです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 両方のコンピューターには、この例の完全な機能を実現するためにプログラムを実行する必要があります。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#10)]
 [!code-csharp[System.IO.Ports.SerialPort\#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#10)]
 [!code-vb[System.IO.Ports.SerialPort\#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#10)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">for the ability to call unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されていない場合、このコンス トラクターは既定のプロパティ値を使用します。 たとえば、 <xref:System.IO.Ports.SerialPort.DataBits%2A> 8、プロパティの既定値、 <xref:System.IO.Ports.SerialPort.Parity%2A> プロパティの既定値、 `None` 列挙値、 <xref:System.IO.Ports.SerialPort.StopBits%2A> プロパティの既定値 1、および COM1 の既定のポートの名前。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">コンテナーへのインターフェイス。</param>
        <summary>指定した <see cref="T:System.ComponentModel.IContainer" /> オブジェクトを使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 指定されていない場合、このコンス トラクターは既定のプロパティ値を使用します。 たとえば、 <xref:System.IO.Ports.SerialPort.DataBits%2A> 8、プロパティの既定値、 <xref:System.IO.Ports.SerialPort.Parity%2A> プロパティの既定値、 `None` 列挙値、 <xref:System.IO.Ports.SerialPort.StopBits%2A> プロパティの既定値 1、および COM1 の既定のポートの名前。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="portName">使用するポート \(COM1 など\)。</param>
        <summary>指定したポート名を使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを作成するこのコンス トラクターを使用して、 <xref:System.IO.Ports.SerialPort> ポート名を指定する場合のクラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName">使用するポート \(COM1 など\)。</param>
        <param name="baudRate">ボー レート。</param>
        <summary>指定したポート名とボー レートを使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを作成するこのコンス トラクターを使用して、 <xref:System.IO.Ports.SerialPort> ポート名とボー レートを指定する場合のクラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
      </Parameters>
      <Docs>
        <param name="portName">使用するポート \(COM1 など\)。</param>
        <param name="baudRate">ボー レート。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 値のいずれか 1 つ。</param>
        <summary>指定したポート名、ボー レート、およびパリティ ビットを使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを作成するこのコンス トラクターを使用して、 <xref:System.IO.Ports.SerialPort> ポート名、ボー レート、パリティ ビットを指定する場合のクラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="portName">使用するポート \(COM1 など\)。</param>
        <param name="baudRate">ボー レート。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 値のいずれか。</param>
        <param name="dataBits">データ ビット値。</param>
        <summary>指定したポート名、ボー レート、パリティ ビット、およびデータ ビットを使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを作成するこのコンス トラクターを使用して、 <xref:System.IO.Ports.SerialPort> ポート名、ボー レート、パリティ ビット、およびデータ ビットを指定する場合します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string portName, int32 baudRate, valuetype System.IO.Ports.Parity parity, int32 dataBits, valuetype System.IO.Ports.StopBits stopBits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="portName" Type="System.String" />
        <Parameter Name="baudRate" Type="System.Int32" />
        <Parameter Name="parity" Type="System.IO.Ports.Parity" />
        <Parameter Name="dataBits" Type="System.Int32" />
        <Parameter Name="stopBits" Type="System.IO.Ports.StopBits" />
      </Parameters>
      <Docs>
        <param name="portName">使用するポート \(COM1 など\)。</param>
        <param name="baudRate">ボー レート。</param>
        <param name="parity">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 値のいずれか。</param>
        <param name="dataBits">データ ビット値。</param>
        <param name="stopBits">
          <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 値のいずれか。</param>
        <summary>指定したポート名、ボー レート、パリティ ビット、データ ビット、およびストップ ビットを使用して、<see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 新しいインスタンスを作成するこのコンス トラクターを使用して、 <xref:System.IO.Ports.SerialPort> クラスの指定したポート名、ボー レート、パリティ ビット、データ ビット、およびストップ ビットにする場合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">指定したポートが見つからないか、開きます。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトの基になる <see cref="T:System.IO.Stream" /> オブジェクトを取得します。</summary>
        <value>
          <see cref="T:System.IO.Stream" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用してこのプロパティの明示的な非同期 I\/O 操作を渡したり、 <xref:System.IO.Ports.SerialPort> オブジェクトを <xref:System.IO.Stream> などのラッパー クラス <xref:System.IO.StreamWriter>します。  
  
 シリアル ポートの開いている <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、抽象型から派生したオブジェクトを返します <xref:System.IO.Stream> クラス、および実装する読み書き可能なメソッドから継承されたプロトタイプを使用して、 <xref:System.IO.Stream> クラス: <xref:System.IO.Stream.BeginRead%2A>, 、<xref:System.IO.Stream.BeginWrite%2A>, 、<xref:System.IO.Stream.Read%2A>, 、<xref:System.IO.Stream.ReadByte%2A>, 、<xref:System.IO.Stream.Write%2A>, 、および <xref:System.IO.Stream.WriteByte%2A>です。 ラップされたシリアル リソースを渡すときに、これらのメソッドが役に立ちます、 <xref:System.IO.Stream> ラッパー クラスです。  
  
 ラップされたファイル ハンドルにアクセスできないので、 <xref:System.IO.Stream.Length%2A> と <xref:System.IO.Stream.Position%2A> プロパティがサポートされていません、 <xref:System.IO.Stream.Seek%2A> と <xref:System.IO.Stream.SetLength%2A> メソッドがサポートされていません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
        <exception cref="T:System.NotSupportedException">.NET Compact Framework アプリケーションでは、ストリームは、次のメソッドのいずれかが呼び出されました。  
  
 <see cref="M:System.IO.Stream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />  
  
 <see cref="M:System.IO.Stream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />  
  
 <see cref="M:System.IO.Stream.EndRead(System.IAsyncResult)" />  
  
 <see cref="M:System.IO.Stream.EndWrite(System.IAsyncResult)" />  
  
 .NET Compact Framework は、基本ストリームに非同期モデルをサポートしていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BaudRate">
      <MemberSignature Language="C#" Value="public int BaudRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BaudRate" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BaudRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(9600)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シリアル ボー レートを取得または設定します。</summary>
        <value>ボー レート。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザーのシリアル ドライバーでは、ボー レートをサポートする必要があります。 既定値は、9600 ビット\/秒 \(bps\) です。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.IO.Ports.SerialPort.BaudRate%2A> プロパティを `9600`します。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#20)]
 [!code-csharp[System.IO.Ports.SerialPort\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#20)]
 [!code-vb[System.IO.Ports.SerialPort\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#20)]  
  
 次の例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">ボー レートが指定されているが 0 未満か、デバイスの最大許容ボー レートを超えています。</exception>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="BreakState">
      <MemberSignature Language="C#" Value="public bool BreakState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BreakState" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BreakState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ブレーク シグナルの状態を取得または設定します。</summary>
        <value>ポートがブレーク状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 転送が中断され、行がブレーク状態 \(すべて低、ストップ ビットなし\) に配置されるときにブレーク シグナルの状態が発生したが解放されるまでです。 中断状態に、このプロパティを設定 `true`します。 ポートがブレークした状態で既に場合は、このプロパティの設定に再接続 `true` 例外が行われません。 書き込むことはできません、 <xref:System.IO.Ports.SerialPort> 中にオブジェクト <xref:System.IO.Ports.SerialPort.BreakState%2A> は `true`です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesToRead">
      <MemberSignature Language="C#" Value="public int BytesToRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesToRead" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BytesToRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信バッファー内のデータのバイト数を取得します。</summary>
        <value>受信バッファー内のデータのバイト数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 受信バッファーを含むシリアル ドライバーの受信バッファーと同様に、 <xref:System.IO.Ports.SerialPort> オブジェクト自体です。  
  
 <xref:System.IO.Ports.SerialPort.BytesToRead%2A> プロパティを表す両方、 <xref:System.IO.Ports.SerialPort> よりも大きい値を返すことができますバッファーと、Windows が作成したバッファーを <xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> プロパティで、Windows が作成したバッファーのみを表します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ポートは開かれていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BytesToWrite">
      <MemberSignature Language="C#" Value="public int BytesToWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesToWrite" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.BytesToWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>送信バッファー内のデータのバイト数を取得します。</summary>
        <value>送信バッファー内のデータのバイト数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 送信バッファーを含むシリアル ドライバーの送信バッファーと同様に、 <xref:System.IO.Ports.SerialPort> オブジェクト自体です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="CDHolding">
      <MemberSignature Language="C#" Value="public bool CDHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CDHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.CDHolding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ポートのキャリア検出ラインの状態を取得します。</summary>
        <value>キャリアが検出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、ポートのキャリア検出ラインの状態の監視に使用できます。 通信事業者通常ないことを示すこと受信側がハング状態にあり、通信事業者が削除されています。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ポート接続を閉じ、<see cref="P:System.IO.Ports.SerialPort.IsOpen" /> プロパティを <see langword="false" /> に設定し、内部 <see cref="T:System.IO.Stream" /> オブジェクトを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの呼び出しを閉じる、 <xref:System.IO.Ports.SerialPort> オブジェクトし受信側の両方をクリアし、バッファーを送信します。 このメソッドは、 <xref:System.ComponentModel.Component.Dispose?displayProperty=fullName> メソッドを呼び出しますが、保護された <xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=fullName> メソッドを `disposing` パラメーターを設定する `true`です。  
  
 任意のアプリケーションのベスト プラクティスがある程度の時間を呼び出した後に待機する、 <xref:System.IO.Ports.SerialPort.Close%2A> メソッドを呼び出す前に、 <xref:System.IO.Ports.SerialPort.Open%2A> メソッド、ポートとして閉じられなかった可能性がある瞬時にします。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="CtsHolding">
      <MemberSignature Language="C#" Value="public bool CtsHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtsHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.CtsHolding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Clear To Send ラインの状態を取得します。</summary>
        <value>Clear To Send ラインが検出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Clear to Send \(CTS\) 線は、\(RTS\/CTS\) ハードウェアのハンドシェイクを送信する送信\/クリアへの要求で使用されます。 データが送信される前に、ポートが CTS 行が照会されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataBits">
      <MemberSignature Language="C#" Value="public int DataBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataBits" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DataBits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バイトごとのデータ ビットの標準の長さを取得または設定します。</summary>
        <value>データ ビット長。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティの値の範囲は 5 ~ 8 です。 既定値は 8 です。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">データ ビット値が 5 より小さくも 8 個を超えるです。</exception>
      </Docs>
    </Member>
    <Member MemberName="DataReceived">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialDataReceivedEventHandler DataReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialDataReceivedEventHandler DataReceived" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.DataReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialDataReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトによって表されるポートを介してデータが受信されたことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Data events can be caused by any of the items in the <xref:System.IO.Ports.SerialData> enumeration. Because the operating system determines whether to raise this event or not, not all parity errors may be reported.  
  
 The <xref:System.IO.Ports.SerialPort.DataReceived> event is also raised if an Eof character is received, regardless of the number of bytes in the internal input buffer and the value of the <xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A> property.  
  
 <xref:System.IO.Ports.SerialPort.PinChanged>, <xref:System.IO.Ports.SerialPort.DataReceived>, and <xref:System.IO.Ports.SerialPort.ErrorReceived> events may be called out of order, and there may be a slight delay between when the underlying stream reports the error and when the event handler is executed. Only one event handler can execute at a time.  
  
 The <xref:System.IO.Ports.SerialPort.DataReceived> event is not guaranteed to be raised for every byte received. Use the <xref:System.IO.Ports.SerialPort.BytesToRead%2A> property to determine how much data is left to be read in the buffer.  
  
 The <xref:System.IO.Ports.SerialPort.DataReceived> event is raised on a secondary thread when data is received from the <xref:System.IO.Ports.SerialPort> object. Because this event is raised on a secondary thread, and not the main thread, attempting to modify some elements in the main thread, such as UI elements, could raise a threading exception. If it is necessary to modify elements in the main <xref:System.Windows.Forms.Form> or <xref:System.Windows.Forms.Control>, post change requests back using <xref:System.Windows.Forms.Control.Invoke%2A>, which will do the work on the proper thread.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 This example adds a <xref:System.IO.Ports.SerialDataReceivedEventHandler> to <xref:System.IO.Ports.SerialPort.DataReceived> to read all the available data received on the COM1 port. Note that to test this code it is necessary to have hardware attached to COM1 that will send data.  
  
 [!code-cpp[System.IO.Ports.SerialPort\#06](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#06)]
 [!code-csharp[System.IO.Ports.SerialPort\#06](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#06)]
 [!code-vb[System.IO.Ports.SerialPort\#06](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#06)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DiscardInBuffer">
      <MemberSignature Language="C#" Value="public void DiscardInBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscardInBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.DiscardInBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シリアル ドライバーの受信バッファーからデータを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、次の Visual Basic コード: `MSComm1.InBufferCount = 0`です。 受信バッファーをクリアしているが、送信バッファーには影響しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DiscardNull">
      <MemberSignature Language="C#" Value="public bool DiscardNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DiscardNull" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DiscardNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ポートと受信バッファー間での送信時に、null バイトを無視するかどうかを示す値を取得または設定します。</summary>
        <value>null バイトを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値は、通常設定する `false`, 、特にバイナリ伝送のです。  このプロパティを設定 `true` UTF32 と UTF16 でエンコードされたバイトの予期しない結果が発生することができます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DiscardOutBuffer">
      <MemberSignature Language="C#" Value="public void DiscardOutBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DiscardOutBuffer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.DiscardOutBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>シリアル ドライバーの送信バッファーからデータを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、次の Visual Basic コード: `MSComm1.OutBufferCount = 0`です。 送信バッファーをクリアしているが、受信バッファーには影響しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、パブリック <xref:System.ComponentModel.Component.Dispose%2A> メソッドおよび <xref:System.Object.Finalize%2A> メソッドです。<xref:System.ComponentModel.Component.Dispose%2A> 保護対象の起動 <xref:System.IO.Ports.SerialPort.Dispose%2A> メソッドを `disposing` パラメーターを設定する `true`です。<xref:System.Object.Finalize%2A> 呼び出す <xref:System.IO.Ports.SerialPort.Dispose%2A> と `disposing` 設定 `false`します。  
  
 `disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.IO.Ports.SerialPort> が参照しているすべてのマネージ オブジェクトによって保持されているリソースをすべて解放します。 このメソッドは、参照される各オブジェクトの <xref:System.ComponentModel.Component.Dispose%2A> メソッドを呼び出します。  
  
 このメソッドはフラッシュしでストリーム オブジェクトを閉じる、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <block subset="none" type="overrides">
          <para>
            <see cref="M:System.ComponentModel.Component.Dispose" /> can be called multiple times by other objects. When overriding <see cref="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see cref="M:System.ComponentModel.Component.Dispose" />. For more information about how to implement <see cref="M:System.IO.Ports.SerialPort.Dispose(System.Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see cref="M:System.ComponentModel.Component.Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="DsrHolding">
      <MemberSignature Language="C#" Value="public bool DsrHolding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DsrHolding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DsrHolding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DSR \(Data Set Ready\) シグナルの状態を取得します。</summary>
        <value>Data Set Ready シグナルがポートに送信された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Data Set Ready\/データ ターミナル Ready \(DSR\/DTR\) ハンドシェイクは、このプロパティが使用されます。 データ DSR \(Set Ready\) シグナルは、通常のデータ送信または受信できる状態にあることを示すためにポートにモデムで送信されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">ストリームは閉じられています。 これは、ために発生することができます、 <see cref="M:System.IO.Ports.SerialPort.Open" /> メソッドが呼び出されていない、または <see cref="M:System.IO.Ports.SerialPort.Close" /> メソッドが呼び出されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="DtrEnable">
      <MemberSignature Language="C#" Value="public bool DtrEnable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DtrEnable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.DtrEnable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シリアル通信中に、DTR \(Data Terminal Ready\) シグナルを有効にする値を取得または設定します。</summary>
        <value>DTR を有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 DTR data Terminal Ready \(\) は通常 XON\/XOFF ハンド シェークおよび送信\/クリアに送信する要求 \(RTS\/CTS\) ハードウェアのハンド シェークおよびモデム間の通信中に有効にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキストの伝送前変換と伝送後変換のバイト エンコーディングを取得または設定します。</summary>
        <value>
          <see cref="T:System.Text.Encoding" /> オブジェクト。 既定値は、<see cref="T:System.Text.ASCIIEncoding" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.IO.Ports.SerialPort.Encoding" /> プロパティに設定されました <see langword="null" />します。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.Ports.SerialPort.Encoding" /> プロパティのエンコーディングがない場合に設定されました <see cref="T:System.Text.ASCIIEncoding" />, 、<see cref="T:System.Text.UTF8Encoding" />, 、<see cref="T:System.Text.UTF32Encoding" />, 、<see cref="T:System.Text.UnicodeEncoding" />, 1 つ、Windows の単一のバイト エンコーディング、または Windows の 2 バイト エンコーディングのいずれかのです。</exception>
      </Docs>
    </Member>
    <Member MemberName="ErrorReceived">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.ErrorReceived" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialErrorReceivedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトによって表されるポートでエラーが発生したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Error events can be caused by any of the items in the <xref:System.IO.Ports.SerialError> enumeration. Because the operating system determines whether to raise this event or not, not all parity errors may be reported.  
  
 <xref:System.IO.Ports.SerialPort.PinChanged>, <xref:System.IO.Ports.SerialPort.DataReceived>, and <xref:System.IO.Ports.SerialPort.ErrorReceived> events may be called out of order, and there may be a slight delay between when the underlying stream reports the error and when code can when the event handler is executed. Only one event handler can execute at a time.  
  
 If a parity error occurs on the trailing byte of a stream, an extra byte will be added to the input buffer with a value of 126.  
  
 The <xref:System.IO.Ports.SerialPort.ErrorReceived> event is raised on a secondary thread when an error is received from the <xref:System.IO.Ports.SerialPort> object. Because this event is raised on a secondary thread, and not the main thread, attempting to modify some elements in the main thread, such as UI elements, could raise a threading exception. If it is necessary to modify elements in the main <xref:System.Windows.Forms.Form> or <xref:System.Windows.Forms.Control>, post change requests back using <xref:System.Windows.Forms.Control.Invoke%2A>, which will do the work on the proper thread.  
  
 For more information about handling events, see [Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f).  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPortNames">
      <MemberSignature Language="C#" Value="public static string[] GetPortNames ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] GetPortNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.GetPortNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のコンピューターのシリアル ポート名の配列を取得します。</summary>
        <returns>現在のコンピューターのシリアル ポート名の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ポート名の順序が返される <xref:System.IO.Ports.SerialPort.GetPortNames%2A> が指定されていません。  
  
 使用して、 <xref:System.IO.Ports.SerialPort.GetPortNames%2A> 有効なシリアル ポート名の一覧については、現在のコンピューターを照会します。 たとえば、COM1 と COM2 が現在のコンピューターの有効なシリアル ポートがかどうかを判断するのにこのメソッドを使用できます。  
  
 ポート名は、システム レジストリ \(たとえば、HKEY\_LOCAL\_MACHINE\\HARDWARE\\DEVICEMAP\\SERIALCOMM\) から取得されます。 レジストリには、古い情報またはそれ以外の場合に正しくないデータが含まれている場合、 <xref:System.IO.Ports.SerialPort.GetPortNames%2A> メソッドは無効なデータを返します。  
  
   
  
## 例  
 次のコード例では、 <xref:System.IO.Ports.SerialPort.GetPortNames%2A> シリアル ポート名をコンソールに表示する方法です。  
  
 [!code-cpp[IO.Ports.GetPortNames\#1](~/samples/snippets/cpp/VS_Snippets_CLR/IO.Ports.GetPortNames/cpp/example.cpp#1)]
 [!code-csharp[IO.Ports.GetPortNames\#1](~/samples/snippets/csharp/VS_Snippets_CLR/IO.Ports.GetPortNames/CS/example.cs#1)]
 [!code-vb[IO.Ports.GetPortNames\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/IO.Ports.GetPortNames/VB/example.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">シリアル ポート名をクエリできませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Handshake">
      <MemberSignature Language="C#" Value="public System.IO.Ports.Handshake Handshake { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.Handshake Handshake" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Handshake" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.Handshake</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.Handshake" /> からの値を使用したデータのシリアル ポート伝送のハンドシェイク プロトコルを取得または設定します。</summary>
        <value>
          <see cref="T:System.IO.Ports.Handshake" /> 値のいずれか。 既定値は、<see langword="None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ハンドシェイクを使用すると、デバイスに接続、 <xref:System.IO.Ports.SerialPort> オブジェクトは、少なくともがある場合にデータの送信を停止するように指示 \(<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>\-1024\) バッファーのバイト。 デバイスは、バッファー内にあるが 1024年バイト未満である場合に、データを再送信を開始するように指示します。 デバイスが 1024 バイトを超えるブロックでデータを送信する場合、バッファーのオーバーフローがあります。  
  
 場合、 <xref:System.IO.Ports.SerialPort.Handshake%2A> にプロパティが設定されている <xref:System.IO.Ports.Handshake.RequestToSendXOnXOff> と <xref:System.IO.Ports.SerialPort.CtsHolding%2A> に設定されている `false`, 、XOff 文字は送信されません。 場合 <xref:System.IO.Ports.SerialPort.CtsHolding%2A> に設定されている、 `true`, 、XOff 文字が送信する前より多くのデータを送信する必要があります。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">渡された値が有効な値に、 <see cref="T:System.IO.Ports.Handshake" /> 列挙します。</exception>
      </Docs>
    </Member>
    <Member MemberName="InfiniteTimeout">
      <MemberSignature Language="C#" Value="public const int InfiniteTimeout = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 InfiniteTimeout = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.IO.Ports.SerialPort.InfiniteTimeout" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>タイムアウトが発生しないことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 この値を使用、 <xref:System.IO.Ports.SerialPort.ReadTimeout%2A> と <xref:System.IO.Ports.SerialPort.WriteTimeout%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトの開いている状態または閉じた状態を示す値を取得します。</summary>
        <value>シリアル ポートが開いている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Ports.SerialPort.IsOpen%2A> プロパティは、ポートが開いて、呼び出し元が使用するかどうかいないかどうか、ポートが開いて、マシン上のアプリケーションで、記録します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 渡された値が <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.Ports.SerialPort.IsOpen" /> 渡された値が空の文字列 \(""\) です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLine">
      <MemberSignature Language="C#" Value="public string NewLine { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLine" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.NewLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("\n")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="M:System.IO.Ports.SerialPort.ReadLine" /> メソッドと <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> メソッドの呼び出しの末尾を解釈する際に使用する値を取得または設定します。</summary>
        <value>行の末尾を表す値。 既定値は改行 \(<see cref="P:System.Environment.NewLine" />\) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、どのような値 \(バイト単位\) を定義の行の末尾を決定、 <xref:System.IO.Ports.SerialPort.ReadLine%2A> と <xref:System.IO.Ports.SerialPort.WriteLine%2A> メソッドです。 既定で行の値は <xref:System.Environment.NewLine%2A>です。 作業している特定のシリアル デバイスは、同じ目的で別の値を使用している場合の別の値に変更するとします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">プロパティの値が空です。</exception>
        <exception cref="T:System.ArgumentNullException">プロパティ値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Open" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しいシリアル ポート接続を開きます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 1 つだけの接続を開くことがあります <xref:System.IO.Ports.SerialPort> オブジェクトです。  
  
 任意のアプリケーションのベスト プラクティスがある程度の時間を呼び出した後に待機する、 <xref:System.IO.Ports.SerialPort.Close%2A> メソッドを呼び出す前に、 <xref:System.IO.Ports.SerialPort.Open%2A> メソッド、ポートとして閉じられなかった可能性がある瞬時にします。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">ポートにアクセスが拒否されます。  
  
 または  
  
 指定した COM ポートを開いてでいずれかが既に現在のプロセスまたはシステムでは、別のプロセス、 <see cref="T:System.IO.Ports.SerialPort" /> インスタンスまたはアンマネージ コードです。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">1 つ以上のこのインスタンスのプロパティが有効ではありません。 など、 <see cref="P:System.IO.Ports.SerialPort.Parity" />, 、<see cref="P:System.IO.Ports.SerialPort.DataBits" />, 、または <see cref="P:System.IO.Ports.SerialPort.Handshake" /> プロパティが有効な値ではないので、 <see cref="P:System.IO.Ports.SerialPort.BaudRate" /> を 0 以下、 <see cref="P:System.IO.Ports.SerialPort.ReadTimeout" /> または <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> プロパティより小さい値 0 は、 <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />です。</exception>
        <exception cref="T:System.ArgumentException">ポートの名前は"COM"では始まりません。  
  
 または  
  
 ポートのファイルの種類がサポートされていません。</exception>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートの現在のインスタンスに、 <see cref="T:System.IO.Ports.SerialPort" /> が既に開いています。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for calling unmanaged code. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Parity">
      <MemberSignature Language="C#" Value="public System.IO.Ports.Parity Parity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.Parity Parity" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.Parity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.Parity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パリティ チェック プロトコルを取得または設定します。</summary>
        <value>パリティ チェック プロトコルを表す列挙値のいずれか。 既定値は、<see cref="F:System.IO.Ports.Parity.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 パリティ エラー チェックの手順を 1 の番号必要が常に同じ値とは、偶数か奇数\-エラーなしで転送されるビットの各グループのです。 モデムの通信でパリティは多くの場合、必要がありますが合意する送信側と受信パーティ伝送を行う前に配置されるパラメーターのいずれかです。  
  
 ストリームの末尾のバイトでパリティ エラーが発生した場合、追加のバイトは 126 の値を持つ入力バッファーに追加されます。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.Parity" /> 渡された値が有効な値にではない、 <see cref="T:System.IO.Ports.Parity" /> 列挙します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ParityReplace">
      <MemberSignature Language="C#" Value="public byte ParityReplace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 ParityReplace" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ParityReplace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(63)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>パリティ エラーの発生時に、データ ストリーム内の無効なバイトを置き換えるバイトを取得または設定します。</summary>
        <value>無効なバイトを置き換えるバイト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値が null 文字に設定されている場合は、パリティの置換は無効です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="PinChanged">
      <MemberSignature Language="C#" Value="public event System.IO.Ports.SerialPinChangedEventHandler PinChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.IO.Ports.SerialPinChangedEventHandler PinChanged" />
      <MemberSignature Language="DocId" Value="E:System.IO.Ports.SerialPort.PinChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.SerialPinChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非データ信号イベントが <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトによって表されるポートで発生したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル ピン変更イベントを内の項目のうちいずれかが発生することができます、 <xref:System.IO.Ports.SerialPinChange> 列挙します。 オペレーティング システムによって決まるためか、このイベントを発生するかどうか、すべてのパリティ エラーが報告されます。 イベントの一部として、暗証番号 \(pin\) の新しい値を設定します。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged> イベントが発生したときに、 <xref:System.IO.Ports.SerialPort> オブジェクトが移行、 <xref:System.IO.Ports.SerialPort.BreakState%2A>, 、ポートの終了時にありませんが、 <xref:System.IO.Ports.SerialPort.BreakState%2A>です。 この動作は、その他の値には適用されません、 <xref:System.IO.Ports.SerialPinChange> 列挙します。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged>, 、<xref:System.IO.Ports.SerialPort.DataReceived>, 、および <xref:System.IO.Ports.SerialPort.ErrorReceived> イベントが順序で呼び出すことができ、基になるストリームがエラーを報告すると、イベント ハンドラーが実行されるとの間でわずかに遅延がある可能性があります。 一度に 1 つだけのイベント ハンドラーを実行できます。  
  
 <xref:System.IO.Ports.SerialPort.PinChanged> セカンダリ スレッドでイベントが発生します。 セカンダリ スレッドとしない、メイン スレッドの UI 要素など、メイン スレッドの一部の要素を変更しようとしています。 このイベントが発生したためには、スレッドの例外が発生します。 メインの要素を変更する必要がある場合 <xref:System.Windows.Forms.Form> または <xref:System.Windows.Forms.Control>, 、投稿の変更要求を使用して <xref:System.Windows.Forms.Control.Invoke%2A>, 、適切なスレッドで作業を実行します。  
  
 イベント処理の詳細については、「[Handling and Raising Events](http://msdn.microsoft.com/ja-jp/b6f65241-e0ad-4590-a99f-200ce741bb1f)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PortName">
      <MemberSignature Language="C#" Value="public string PortName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PortName" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.PortName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("COM1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>通信用のポートを取得または設定します。このポートには、使用可能なすべての COM ポートが含まれますが、これに限定されるわけではありません。</summary>
        <value>通信ポート。 既定値は COM1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して有効なポート名の一覧を取得できる、 <xref:System.IO.Ports.SerialPort.GetPortNames%2A> メソッドです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.IO.Ports.SerialPort.PortName" /> プロパティ長さゼロの値に設定されました。  
  
 または  
  
 <see cref="P:System.IO.Ports.SerialPort.PortName" /> プロパティ「\\\\」で始まる値に設定されました。  
  
 または  
  
 ポート名が無効でした。</exception>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.IO.Ports.SerialPort.PortName" /> プロパティに設定されました <see langword="null" />します。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートが開いています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">入力の書き込み先となるバイト配列。</param>
        <param name="offset">バイトを書き込む <c>buffer</c> 内のオフセット。</param>
        <param name="count">読み取る最大バイト数。<c>count</c> が入力バッファー内のバイト数よりも大きい場合は、読み取られるバイト数が少なくなります。</param>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーから複数のバイトを読み取り、読み取ったバイトを指定したオフセットでバイト配列に書き込みます。</summary>
        <returns>読み取られたバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
 [Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 [Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つまでのバイト数が読み取り可能の競合する可能性があります。[Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort.BytesToRead%2A> は読み取るには、バイトがありますが、これらのバイトに含まれているストリームにアクセスできない可能性がプロパティを示すことができます、 [Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 [Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort> クラスです。  
  
 [Read メソッド \(Byte\<xref:System.IO.Ports.SerialPort.Read%2A> Equals が読み取られたバイト数とメソッドがその他の操作をブロックしません `count` も未読のバイトに使用できるあるシリアル ポートが、します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">渡されたバッファーが <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> または <paramref name="count" /> パラメーターは、有効な領域の外、 <paramref name="buffer" /> 渡されています。<paramref name="offset" /> または <paramref name="count" /> のいずれかが 0 より小さい値です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> plus <paramref name="count" /> の長さより大きい、 <paramref name="buffer" />です。</exception>
        <exception cref="T:System.TimeoutException">読み取るバイト数はありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public int Read (char[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Read(char[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">入力の書き込み先となる文字配列。</param>
        <param name="offset">文字を書き込む <c>buffer</c> 内のオフセット。</param>
        <param name="count">読み取り対象の最大文字数。<c>count</c> が入力バッファー内の文字数よりも大きい場合は、読み取られる文字数が少なくなります。</param>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーから複数の文字を読み取り、読み取った文字を指定したオフセットで文字配列に書き込みます。</summary>
        <returns>読み取った文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル ポートから文字を読み取るためには、このメソッドを使用します。  
  
 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
 [Read メソッド \(Char\<xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 [Read メソッド \(Char\<xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つ読み取り可能な文字数は競合する可能性があります。[Read メソッド \(Char\<xref:System.IO.Ports.SerialPort.BytesToRead%2A> プロパティで、ことができますが、読み取る文字がある、これらの文字に含まれているストリームにアクセスできない可能性が、 [Read メソッド \(Char\<xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 [Read メソッド \(Char\<xref:System.IO.Ports.SerialPort> クラスです。  
  
 [Read メソッド \(Char\<xref:System.IO.Ports.SerialPort.Read%2A> Equals が読み取られたバイト数とメソッドがその他の操作をブロックしません `count` も未読のバイトに使用できるあるシリアル ポートが、します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> plus <paramref name="count" /> がバッファーの長さより大きい。  
  
 または  
  
 <paramref name="count" /> 1 は、バッファーにサロゲート文字。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は渡された <see langword="null" />です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> または <paramref name="count" /> パラメーターは、有効な領域の外、 <paramref name="buffer" /> 渡されています。<paramref name="offset" /> または <paramref name="count" /> のいずれかが 0 より小さい値です。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.TimeoutException">読み取ることができる文字がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadBufferSize">
      <MemberSignature Language="C#" Value="public int ReadBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReadBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(4096)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーのサイズを取得または設定します。</summary>
        <value>バイト単位のバッファー サイズ。 既定値は 4096 です。最大値は正の int、または 2,147, 483,647 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> プロパティには、4096 よりも小さい値が無視されます。  
  
 <xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> プロパティは、Windows が作成したバッファーのみを表しより小さい値を返すことができます、 <xref:System.IO.Ports.SerialPort.BytesToRead%2A> 両方を表すプロパティ、 <xref:System.IO.Ports.SerialPort> バッファーとバッファーのウィンドウを作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> 0 小さい値が設定されます。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> ストリームが開いているときにプロパティが設定されています。</exception>
        <exception cref="T:System.IO.IOException">
          <see cref="P:System.IO.Ports.SerialPort.ReadBufferSize" /> プロパティ奇数の整数値に設定されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadByte">
      <MemberSignature Language="C#" Value="public int ReadByte ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadByte() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadByte" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーから、同期で 1 バイトを読み取ります。</summary>
        <returns>
          <see cref="T:System.Int32" /> にキャストしたバイト。または、ストリームの末尾が読み取られた場合は \-1。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、1 つのバイトを読み取ります。  
  
 使用する場合に警告を使用して <xref:System.IO.Ports.SerialPort.ReadByte%2A> と <xref:System.IO.Ports.SerialPort.ReadChar%2A> 化します。 バイトの読み取りと文字の読み取りを切り替えるには、余分なデータを読み取るやその他の予期しない動作可能性があります。 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つまでのバイト数が読み取り可能の競合する可能性があります。<xref:System.IO.Ports.SerialPort.BytesToRead%2A> は読み取るには、バイトがありますが、これらのバイトに含まれているストリームにアクセスできない可能性がプロパティを示すことができます、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。  
  
 または  
  
 バイトが読み取られません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadChar">
      <MemberSignature Language="C#" Value="public int ReadChar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChar() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーから、同期で 1 文字を読み取ります。</summary>
        <returns>読み取られた文字。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、エンコーディングに基づいて 1 つの完全な文字を読み取ります。  
  
 使用する場合に警告を使用して <xref:System.IO.Ports.SerialPort.ReadByte%2A> と <xref:System.IO.Ports.SerialPort.ReadChar%2A> 化します。 バイトの読み取りと文字の読み取りを切り替えるには、余分なデータを読み取るやその他の予期しない動作可能性があります。 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つまでのバイト数が読み取り可能の競合する可能性があります。<xref:System.IO.Ports.SerialPort.BytesToRead%2A> は読み取るには、バイトがありますが、これらのバイトに含まれているストリームにアクセスできない可能性がプロパティを示すことができます、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。  
  
 または  
  
 割り当てられたタイムアウト時間で利用可能な文字がありませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadExisting">
      <MemberSignature Language="C#" Value="public string ReadExisting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadExisting() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadExisting" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ストリームと <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトの入力バッファーの両方で、エンコーディングに基づいて、即座に使用できるすべてのバイトを読み取ります。</summary>
        <returns>ストリームと <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトの入力バッファーの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドが戻るストリームとの内部バッファーの内容、 <xref:System.IO.Ports.SerialPort> オブジェクトを表す文字列。 このメソッドでは、タイムアウトは使用しません。 このメソッドの末尾には、内部のバッファー内の先行バイトままにことに注意してください、 <xref:System.IO.Ports.SerialPort.BytesToRead%2A> 0 より大きい値です。  
  
 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort> クラスは、データをバッファーが、ストリーム オブジェクトに格納、 <xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=fullName> プロパティはありません。 したがって、 <xref:System.IO.Ports.SerialPort> が読み取り可能バイト数のオブジェクトと、ストリーム オブジェクトが異なる場合があります。 バイトをバッファーして、するときに、 <xref:System.IO.Ports.SerialPort> オブジェクト、 <xref:System.IO.Ports.SerialPort.BytesToRead%2A> プロパティには値にこれらのバイトが含まれます。 ただし、これらのバイト アクセスできない可能性がに含まれているストリームに、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadLine" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>入力バッファー内の <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 値まで読み取ります。</summary>
        <returns>
          <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 値が最初に出現するまでの入力バッファーの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは返しません中に注意してください、 <xref:System.IO.Ports.SerialPort.NewLine%2A> 値、 <xref:System.IO.Ports.SerialPort.NewLine%2A> 値が入力バッファーから削除します。  
  
 既定では、 <xref:System.IO.Ports.SerialPort.ReadLine%2A> メソッドは、行を受信するまでブロックします。 この動作が望ましい場合は、設定、 <xref:System.IO.Ports.SerialPort.ReadTimeout%2A> プロパティを強制的に、0 以外の値を <xref:System.IO.Ports.SerialPort.ReadLine%2A> をスローするメソッド、 <xref:System.TimeoutException> ポートでは、行が使用できない場合。  
  
 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つまでのバイト数が読み取り可能の競合する可能性があります。<xref:System.IO.Ports.SerialPort.BytesToRead%2A> は読み取るには、バイトがありますが、これらのバイトに含まれているストリームにアクセスできない可能性がプロパティを示すことができます、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。  
  
 または  
  
 バイトが読み取られませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>読み取り操作が完了していないときに、タイムアウトになるまでのミリ秒数を取得または設定します。</summary>
        <value>読み取り操作が完了していないときに、タイムアウトになるまでのミリ秒数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 読み取りタイムアウト値は、通信の Win32 API に 500 ミリ秒にもともと設定されました。 このプロパティでは、この値を設定することができます。 タイムアウト値を 0 より大きい値に設定またはに設定 <xref:System.IO.Ports.SerialPort.InfiniteTimeout>, 、その場合のタイムアウトは行われません。<xref:System.IO.Ports.SerialPort.InfiniteTimeout> が既定値です。  
  
> [!NOTE]
>  アンマネージ ユーザー `COMMTIMEOUTS` 構造体を 0 にタイムアウトを抑制するタイムアウト値を設定することで可能性があります。 タイムアウトを抑制して、 <xref:System.IO.Ports.SerialPort.ReadTimeout%2A> プロパティには、ただし、指定してください <xref:System.IO.Ports.SerialPort.InfiniteTimeout>します。  
  
 このプロパティには影響しません、 <xref:System.IO.Stream.BeginRead%2A> メソッドによって返されるストリームのメソッド、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">読み取りタイムアウト値が 0 と等しくありません <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />します。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTo">
      <MemberSignature Language="C#" Value="public string ReadTo (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ReadTo(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.ReadTo(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">読み取り操作を停止する場所を示す値。</param>
        <summary>入力バッファー内の指定した <paramref name="value" /> まで文字列を読み取ります。</summary>
        <returns>指定した <paramref name="value" /> までの入力バッファーの内容。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、指定された文字列を読み込み `value`します。 返される文字列に含まれないときに、 `value`, 、 `value` 入力バッファーから削除します。  
  
 テキストを読むと、バイナリ データを読み取り、ストリームから間を切り替える必要がある場合は、慎重にテキストとバイナリ データを手動でバイトを読み取り、データのデコードなどの境界を定義するプロトコルを選択します。  
  
> [!NOTE]
>  <xref:System.IO.Ports.SerialPort> クラスは、データをバッファーし、に、ストリームが含まれている、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティは、2 つまでのバイト数が読み取り可能の競合する可能性があります。<xref:System.IO.Ports.SerialPort.BytesToRead%2A> は読み取るには、バイトがありますが、これらのバイトに含まれているストリームにアクセスできない可能性がプロパティを示すことができます、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティにバッファリングされるされているため、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">長さ、 <paramref name="value" /> パラメーターが 0 です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="ReceivedBytesThreshold">
      <MemberSignature Language="C#" Value="public int ReceivedBytesThreshold { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReceivedBytesThreshold" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Not implemented")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> イベントが発生する前の、内部入力バッファーのバイト数を取得または設定します。</summary>
        <value>
          <see cref="E:System.IO.Ports.SerialPort.DataReceived" /> イベントが発生する前の内部入力バッファー内のバイト数。 既定値は 1 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Ports.SerialPort.DataReceived> もイベントは、 <xref:System.IO.Ports.SerialData.Eof> 文字が受信されると、内部入力バッファーのバイト数との値に関係なく、 <xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.ReceivedBytesThreshold" /> 値が 0 以下です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RtsEnable">
      <MemberSignature Language="C#" Value="public bool RtsEnable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RtsEnable" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.RtsEnable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シリアル通信中に、RTS \(Request To Send\) シグナルが有効かどうかを示す値を取得または設定します。</summary>
        <value>RTS を有効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 送信 \(RTS\) 信号に要求は、通常は \(RTS\/CTS\) ハードウェアのハンドシェイクを送信する送信\/クリアへの要求で使用します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">値、 <see cref="P:System.IO.Ports.SerialPort.RtsEnable" /> プロパティが設定または取得中に、 <see cref="P:System.IO.Ports.SerialPort.Handshake" /> プロパティに設定されて、 <see cref="F:System.IO.Ports.Handshake.RequestToSend" /> 値または <see cref="F:System.IO.Ports.Handshake.RequestToSendXOnXOff" /> 値。</exception>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="StopBits">
      <MemberSignature Language="C#" Value="public System.IO.Ports.StopBits StopBits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.IO.Ports.StopBits StopBits" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.StopBits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.Ports.StopBits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>バイトごとのストップ ビットの標準の数を取得または設定します。</summary>
        <value>
          <see cref="T:System.IO.Ports.StopBits" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Ports.SerialPort.StopBits%2A> の既定値は <xref:System.IO.Ports.StopBits.One> です。  
  
 <xref:System.IO.Ports.StopBits.None?displayProperty=fullName> 値がサポートされていません。  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.IO.Ports.SerialPort.StopBits%2A> プロパティを `One`します。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#20](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/datareceived.cpp#20)]
 [!code-csharp[System.IO.Ports.SerialPort\#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/datareceived.cs#20)]
 [!code-vb[System.IO.Ports.SerialPort\#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/datareceived.vb#20)]  
  
 次の例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例の一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.StopBits" /> 値は  <see cref="F:System.IO.Ports.StopBits.None" />です。</exception>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>指定した文字列をシリアル ポートに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル ポートに出力として文字列を作成する場合は、このメソッドを使用します。  
  
 出力バッファーに過剰なバイトがあるかどうかと <xref:System.IO.Ports.SerialPort.Handshake%2A> に設定されている <xref:System.IO.Ports.Handshake.XOnXOff> 、 <xref:System.IO.Ports.SerialPort> オブジェクトが生じる可能性がある、 <xref:System.ServiceProcess.TimeoutException> 、デバイスをより多くのデータを受け入れる準備が完了するを待っている間です。  
  
 既定では、 <xref:System.IO.Ports.SerialPort> を使用して <xref:System.Text.ASCIIEncoding> 文字をエンコードします。<xref:System.Text.ASCIIEncoding> 型 \(char\) 63 として 127 より大きいすべての文字をエンコードまたは '?' です。 その範囲の追加の文字をサポートするために次のように設定します。 <xref:System.IO.Ports.SerialPort.Encoding%2A> に <xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UTF32Encoding>, 、または <xref:System.Text.UnicodeEncoding>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">ポートに書き込むデータを格納したバイト配列。</param>
        <param name="offset">ポートへのバイトのコピーを開始する位置を示す <c>buffer</c> パラメーター内のバイト オフセット。インデックス番号は 0 から始まります。</param>
        <param name="count">書き込むバイト数。</param>
        <summary>バッファーのデータを使用して、指定したバイト数をシリアル ポートに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル ポートに出力を作成するバイト バッファーに書き込む場合は、このメソッドを使用します。  
  
 出力バッファーにバイト数が多すぎますがあるかどうかと[Write メソッド \(Byte\<xref:System.IO.Ports.SerialPort.Handshake%2A>に設定されている[Write メソッド \(Byte\<xref:System.IO.Ports.Handshake.XOnXOff>、[Write メソッド \(Byte\<xref:System.IO.Ports.SerialPort>オブジェクトが発生する可能性が、[Write メソッド \(Byte\<xref:System.ServiceProcess.TimeoutException>デバイスをより多くのデータを受け入れる準備が完了するまで待機するときにします。  
  
 既定では、[Write メソッド \(Byte\<xref:System.IO.Ports.SerialPort>使用[Write メソッド \(Byte\<xref:System.Text.ASCIIEncoding>文字をエンコードします。[Write メソッド \(Byte\<xref:System.Text.ASCIIEncoding>型 \(char\) 63 として 127 より大きいすべての文字をエンコードまたは '?' です。 その範囲の追加の文字をサポートするために次のように設定します。[Write メソッド \(Byte\<xref:System.IO.Ports.SerialPort.Encoding%2A>に[Write メソッド \(Byte\<xref:System.Text.UTF8Encoding>、 [Write メソッド \(Byte\<xref:System.Text.UTF32Encoding>、または[Write メソッド \(Byte\<xref:System.Text.UnicodeEncoding>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" />が渡される<see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">指定されたポートは開かれていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" />または<paramref name="count" />パラメーターが、有効な領域外の<paramref name="buffer" />渡されています。 いずれか<paramref name="offset" />または<paramref name="count" />が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" />plus<paramref name="count" />がの長さより大きい、<paramref name="buffer" />です。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (char[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(char[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">ポートに書き込むデータを格納した文字配列。</param>
        <param name="offset">ポートへのバイトのコピーを開始する位置を示す <c>buffer</c> パラメーター内のバイト オフセット。インデックス番号は 0 から始まります。</param>
        <param name="count">書き込む文字数。</param>
        <summary>バッファーのデータを使用して、指定した文字数をシリアル ポートに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シリアル ポートに出力を作成するための文字バッファーに書き込む場合は、このメソッドを使用します。  
  
 出力バッファーに過剰なバイトがあるかどうかと [Write メソッド \(Char\<xref:System.IO.Ports.SerialPort.Handshake%2A> に設定されている [Write メソッド \(Char\<xref:System.IO.Ports.Handshake.XOnXOff> 、 [Write メソッド \(Char\<xref:System.IO.Ports.SerialPort> オブジェクトが生じる可能性がある、 [Write メソッド \(Char\<xref:System.ServiceProcess.TimeoutException> 、デバイスをより多くのデータを受け入れる準備が完了するを待っている間です。  
  
 既定では、 [Write メソッド \(Char\<xref:System.IO.Ports.SerialPort> を使用して [Write メソッド \(Char\<xref:System.Text.ASCIIEncoding> 文字をエンコードします。[Write メソッド \(Char\<xref:System.Text.ASCIIEncoding> 型 \(char\) 63 として 127 より大きいすべての文字をエンコードまたは '?' です。 その範囲の追加の文字をサポートするために次のように設定します。 [Write メソッド \(Char\<xref:System.IO.Ports.SerialPort.Encoding%2A> に [Write メソッド \(Char\<xref:System.Text.UTF8Encoding>, 、[Write メソッド \(Char\<xref:System.Text.UTF32Encoding>, 、または [Write メソッド \(Char\<xref:System.Text.UnicodeEncoding>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> は渡された <see langword="null" />です。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="offset" /> または <paramref name="count" /> パラメーターは、有効な領域の外、 <paramref name="buffer" /> 渡されています。<paramref name="offset" /> または <paramref name="count" /> のいずれかが 0 より小さい値です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="offset" /> plus <paramref name="count" /> の長さより大きい、 <paramref name="buffer" />です。</exception>
        <exception cref="T:System.ServiceProcess.TimeoutException">タイムアウト期間が終了する前に、操作は完了しませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBufferSize">
      <MemberSignature Language="C#" Value="public int WriteBufferSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteBufferSize" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.WriteBufferSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(2048)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>シリアル ポートの出力バッファーのサイズを取得または設定します。</summary>
        <value>出力バッファーのサイズ。 既定値は 2048 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.IO.Ports.SerialPort.WriteBufferSize%2A> プロパティには、2048年よりも小さい値が無視されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> 値が 0 以下です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> ストリームが開いているときにプロパティが設定されています。</exception>
        <exception cref="T:System.IO.IOException">
          <see cref="P:System.IO.Ports.SerialPort.WriteBufferSize" /> プロパティ奇数の整数値に設定されました。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public void WriteLine (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteLine(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IO.Ports.SerialPort.WriteLine(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>指定した文字列と <see cref="P:System.IO.Ports.SerialPort.NewLine" /> 値を出力バッファーに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力バッファーに過剰なバイトがある場合と <xref:System.IO.Ports.SerialPort.Handshake%2A> に設定されている <xref:System.IO.Ports.Handshake.XOnXOff> 、 <xref:System.IO.Ports.SerialPort> オブジェクトが生じる可能性がある、 <xref:System.ServiceProcess.TimeoutException> 、デバイスをより多くのデータを受け入れる準備が完了するを待っている間です。  
  
 出力に、 <xref:System.IO.Ports.SerialPort.NewLine%2A> 文字列。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="str" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定したポートは開かれていません。</exception>
        <exception cref="T:System.TimeoutException">
          <see cref="M:System.IO.Ports.SerialPort.WriteLine(System.String)" /> メソッドは、ストリームに書き込みできませんでした。</exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.IO.Ports.SerialPort.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.IO.Ports</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>書き込み操作が完了していないときに、タイムアウトになるまでのミリ秒数を取得または設定します。</summary>
        <value>タイムアウトになるまでのミリ秒数。 既定値は、<see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 書き込みのタイムアウト値は、通信の Win32 API に 500 ミリ秒にもともと設定されました。 このプロパティでは、この値を設定することができます。 タイムアウト値を 0 より大きい値に設定またはに設定 <xref:System.IO.Ports.SerialPort.InfiniteTimeout>, 、その場合のタイムアウトは行われません。<xref:System.IO.Ports.SerialPort.InfiniteTimeout> が既定値です。  
  
> [!NOTE]
>  アンマネージ ユーザー `COMMTIMEOUTS` 構造体を 0 にタイムアウトを抑制するタイムアウト値を設定することで可能性があります。 タイムアウトを抑制して、 <xref:System.IO.Ports.SerialPort.WriteTimeout%2A> プロパティには、ただし、指定してください <xref:System.IO.Ports.SerialPort.InfiniteTimeout>します。  
  
 このプロパティには影響しません、 <xref:System.IO.Stream.BeginWrite%2A> メソッドによって返されるストリームのメソッド、 <xref:System.IO.Ports.SerialPort.BaseStream%2A> プロパティです。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.IO.Ports.SerialPort> ヌル モデム ケーブルで接続されている 2 つの別々 のコンピューターからのチャットを行う 2 人のユーザーを許可するクラス。 この例では、ユーザーは、ポート設定とユーザー名のチャットする前に確認します。 このコード例が示されている例のコードの一部は、 <xref:System.IO.Ports.SerialPort> クラスです。  
  
 [!code-cpp[System.IO.Ports.SerialPort\#01](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cpp/serialport.cpp#01)]
 [!code-csharp[System.IO.Ports.SerialPort\#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/cs/SerialPort.cs#01)]
 [!code-vb[System.IO.Ports.SerialPort\#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IO.Ports.SerialPort/vb/SerialPort.vb#01)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">ポートは、状態が無効ですが。  
  
 または  
  
 基になるポートの状態を設定できませんでした。 たとえば、これから渡されたパラメーター <see cref="T:System.IO.Ports.SerialPort" /> オブジェクトが無効でした。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.IO.Ports.SerialPort.WriteTimeout" /> 値が等しくないし、0 より小さい <see cref="F:System.IO.Ports.SerialPort.InfiniteTimeout" />します。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Read">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.IO.Ports.SerialPort" /> の入力バッファーから読み取ります。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>シリアル ポートの出力バッファーにデータを書き込みます。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>