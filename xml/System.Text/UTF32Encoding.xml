<Type Name="UTF32Encoding" FullName="System.Text.UTF32Encoding">
  <TypeSignature Language="C#" Value="public sealed class UTF32Encoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit UTF32Encoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.UTF32Encoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Unicode 文字の UTF\-32 エンコーディングを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。 デコードは、Unicode 文字のセットにエンコードされたバイト シーケンスを変換するプロセスです。  
  
 [Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) コード ポイント \(数値\) をすべてサポートされているスクリプト内の各文字に割り当てます。 Unicode 変換形式 \(UTF\) は、そのコード ポイントをエンコードする方法です。[Unicode Standard](http://go.microsoft.com/fwlink/?linkid=37123) 次 UTFs を使用します。  
  
-   Utf\-8、各コード ポイントを 1 ~ 4 バイトのシーケンスとして表します。  
  
-   Utf\-16、各コード ポイントを 1 ~ 2 の 16 ビット整数のシーケンスとして表現します。  
  
-   Utf\-32、32 ビット整数として各コード ポイントを表します。  
  
 詳細については、UTFs とでサポートされているその他のエンコーディングの <xref:System.Text>, を参照してください。  
  
 <xref:System.Text.UTF32Encoding> クラスは、utf\-32 エンコーディングを表します。 エンコーダーは、ビッグ エンディアン バイト順を使用できます \(最上位バイト最初\) またはリトル エンディアン バイト順 \(最下位バイト最初\)。 たとえば、アルファベットの大文字 a \(コード ポイント u\+0041\) としてシリアル化された次のように 16 進数\)。  
  
-   ビッグ エンディアン バイト順: 00 00 00 41  
  
-   リトル エンディアン バイト順: 41 00 00 00  
  
 これは、ネイティブのバイト順を使用して Unicode 文字を格納する方が効率的です。 たとえば、intel ベースのコンピューターなど、リトル エンディアンのプラットフォームでリトル エンディアン バイト順を使用することをお勧めします。<xref:System.Text.UTF32Encoding> Windows コード ページ \(リトル エンディアン バイト順\) 12000、12001 \(ビッグ エンディアン バイト順\) に対応します。 呼び出して、特定のアーキテクチャ「エンディアン」を指定できます、 <xref:System.BitConverter.IsLittleEndian?displayProperty=fullName> メソッドです。  
  
 必要に応じて、 <xref:System.Text.UTF32Encoding> オブジェクトは、この場合、配列の先頭には、エンコーディング プロセスに起因するバイトのシーケンスをバイト数のバイト順マーク \(BOM\) を提供します。 プリアンブルにバイト順マーク \(BOM\) が含まれている場合、バイト順および変換形式または UTF バイト配列の決定、デコーダーが役立ちます。  
  
 場合、 <xref:System.Text.UTF32Encoding> BOM を提供するインスタンスが構成されているを呼び出して取得することができます、 <xref:System.Text.UTF32Encoding.GetPreamble%2A> メソッドです。 それ以外の場合、メソッドが空の配列を返します。 なお、場合でも、 <xref:System.Text.UTF32Encoding> オブジェクトは、BOM サポートのために構成されている、必要に応じて、エンコードされたバイト ストリームの先頭に BOM を含める必要がありますのエンコード方法、 <xref:System.Text.UTF32Encoding> クラスしないで自動的にします。  
  
 エラーの検出を有効にして、クラスのインスタンスのセキュリティを強化するには、インスタンスを作成、 <xref:System.Text.UTF32Encoding> オブジェクトを呼び出して、 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> コンス トラクターと設定、 `throwOnInvalidBytes` への引数 `true`します。 エラーの検出、無効な文字またはバイトのシーケンスを検出するメソッドがスローされます、 <xref:System.ArgumentException> 例外です。 エラー検出例外はスローされませんし、無効なシーケンスが通常は無視されます。  
  
 インスタンスを作成できる、 <xref:System.Text.UTF32Encoding> オブジェクトは、さまざまな方法でするかどうか、バイト順マーク \(BOM\) を提供する、ビッグ エンディアンまたはリトル エンディアン エンコーディングするかどうか、およびエラーの検出を有効にするかどうかによって異なります。 次の表に、 <xref:System.Text.UTF32Encoding> コンス トラクターと <xref:System.Text.Encoding> を返すプロパティ、 <xref:System.Text.UnicodeEncoding> オブジェクトです。  
  
|メンバー|エンディアン|BOM|エラーの検出|  
|----------|------------|---------|------------|  
|<xref:System.Text.Encoding.UTF32%2A?displayProperty=fullName>|リトル エンディアン|はい|なし \(置換フォールバック\)|  
|<xref:System.Text.UTF32Encoding.%23ctor?displayProperty=fullName>|リトル エンディアン|はい|なし \(置換フォールバック\)|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|構成可能|構成可能|なし \(置換フォールバック\)|  
|<xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=fullName>|構成可能|構成可能|構成可能|  
  
 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、 <xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドでは、実際のエンコードを実行します。  
  
 同様に、 <xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、 <xref:System.Text.UTF32Encoding.GetChars%2A> と <xref:System.Text.UTF32Encoding.GetString%2A> メソッドは、実際のデコードを実行します。  
  
 エンコーダーまたはデコーダー エンコードまたはデコード \(100,000 文字セグメントでエンコードされている 100万文字の文字列\) などの複数のブロックにわたるデータと状態情報を保存、使用することであるため、 <xref:System.Text.UTF32Encoding.GetEncoder%2A> と <xref:System.Text.UTF32Encoding.GetDecoder%2A> プロパティそれぞれします。  
  
   
  
## 例  
 次の例の動作を示します <xref:System.Text.UTF32Encoding> オブジェクトとそうでないエラー検出を有効にします。 最後の 4 つのバイトを含むが、無効なサロゲート ペアを表すバイト配列が作成されます。上位サロゲート U \+ D8FF の後に、U \+ 01FF、低いサロゲート \(0xDC00 から 0 xdfff を通じて\) の範囲外であります。 エラーの検出、UTF32 デコーダーは、置換フォールバックを使用して、REPLACEMENT CHARACTER \(U\+FFFD\) に無効なサロゲート ペアを置き換えます。  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 次の例では、バイト配列に Unicode 文字の文字列をエンコードを使用して、 <xref:System.Text.UTF32Encoding> オブジェクトです。 バイト配列は、データの損失がないことを示すために文字列にデコードされます。  
  
 [!code-csharp[System.Text.UTF32Encoding.Class\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/snippet.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Class\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/snippet.vb#1)]  
  
 点を除いて、ファイルにエンコードされたバイトを書き込み、バイト順マーク \(BOM\) をバイト ストリームの前に、次の例は前の項目と同じ文字列を使用します。 これは、後、2 つの方法で、ファイルを読み取ります: を使用してテキスト ファイルとして、 <xref:System.IO.StreamReader> オブジェクトおよびバイナリ ファイルです。 想定されるように、どちらの場合には、BOM が含まれて新しく読み取られた文字列には。  
  
 [!code-csharp[System.Text.UTF32Encoding.Class\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.class/cs/bom1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.Class\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.class/vb/bom1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.UTF8Encoding" />
    <altmember cref="T:System.Text.ASCIIEncoding" />
    <altmember cref="T:System.Text.UnicodeEncoding" />
    <altmember cref="T:System.Globalization.UnicodeCategory" />
    <altmember cref="T:System.Globalization.CharUnicodeInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、リトル エンディアン バイト順を使用して、Unicode バイト順マークを提供し、無効なエンコードが検出されると、例外をスローしないインスタンスを作成します。  
  
> [!NOTE]
>  セキュリティ上の理由を呼び出してエラーの検出を有効に.、 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> コンス トラクターと設定、 `throwOnInvalidCharacters` 引数 `true`します。  
  
   
  
## 例  
 次の例の取得と、バイト順のマークを付けるさまざまな表示 <xref:System.Text.UTF32Encoding> インスタンス。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</param>
        <param name="byteOrderMark">Unicode バイト順マークを付加するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。 パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、および <see cref="M:System.Text.UTF32Encoding.GetPreamble" /> メソッドが Unicode の Unicode バイト順マークを返すかどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターでは、無効なエンコードが検出されると、例外をスローしないインスタンスを作成します。  
  
> [!NOTE]
>  セキュリティ上の理由を呼び出してエラーの検出を有効に.、 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> コンス トラクターと設定、 `throwOnInvalidCharacters` 引数 `true`します。  
  
   
  
## 例  
 次の例の取得と、バイト順のマークを付けるさまざまな表示 <xref:System.Text.UTF32Encoding> インスタンス。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UTF32Encoding (bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool bigEndian, bool byteOrderMark, bool throwOnInvalidCharacters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.#ctor(System.Boolean,System.Boolean,System.Boolean)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="bigEndian" Type="System.Boolean" />
        <Parameter Name="byteOrderMark" Type="System.Boolean" />
        <Parameter Name="throwOnInvalidCharacters" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bigEndian">最上位バイトが先頭に配置されるビッグ エンディアン バイト順を使用する場合は <see langword="true" />。最下位バイトが先頭に配置されるリトル エンディアン バイト順を使用する場合は <see langword="false" />。</param>
        <param name="byteOrderMark">Unicode バイト順マークを付加するよう指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="throwOnInvalidCharacters">無効なエンコーディングが検出されたときに例外をスローすることを指定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。 パラメーターでは、ビッグ エンディアン バイト順を使用するかどうか、Unicode バイト順マークを付加するかどうか、および無効なエンコーディングを検出したときに例外をスローするかどうかを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `throwOnInvalidCharacters` は `true`, 、無効なバイト シーケンスを検出するメソッドがスローされます <xref:System.ArgumentException?displayProperty=fullName>します。 それ以外の場合、メソッドは、例外をスローしていないと、順序が無効ですが無視されます。  
  
> [!NOTE]
>  セキュリティ上の理由を呼び出してエラーの検出を有効に.、 <xref:System.Text.UTF32Encoding.%23ctor%28System.Boolean%2CSystem.Boolean%2CSystem.Boolean%29> コンス トラクターと設定、 `throwOnInvalidCharacters` 引数 `true`します。  
  
   
  
## 例  
 次の例の動作を示します <xref:System.Text.UTF32Encoding>, 、エラーの検出を有効になっているとなし。  
  
 [!code-cpp[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CPP/errordetection.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/CS/errordetection.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.ErrorDetection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.ErrorDetection/VB/ErrorDetection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.GetPreamble" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">比較相手の <see cref="T:System.Object" />。これと現在のオブジェクトを比較することになります。</param>
        <summary>指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.Text.UTF32Encoding" /> オブジェクトと等しいかどうかを判断します。</summary>
        <returns>
          <paramref name="value" /> が <see cref="T:System.Text.UTF32Encoding" /> のインスタンスで、現在のオブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Two <xref:System.Text.UTF32Encoding> objects are considered equal if all of the following conditions are true:  
  
-   Both objects use the same byte order.  
  
-   Both objects provide the byte order mark, or both do not.  
  
-   Both objects use the same encoder fallback.  
  
-   Both objects use the same decoder fallback.  
  
   
  
## 例  
 The following example creates <xref:System.Text.UTF32Encoding> objects using different parameter values and then checks them for equality.  
  
 [!code-cpp[System.Text.UTF32Encoding.Equals\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CPP/equals.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.Equals\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/CS/equals.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.Equals\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.Equals/VB/equals.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.UTF32Encoding.#ctor" />
        <altmember cref="M:System.Object.Equals(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</param>
        <summary>指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 <xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ファイルまたはストリームに保存されるときに、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭にある preamble を挿入する \(など一連のファイルに書き込まれるバイト数の先頭にある\) は、開発者の責任であり、preamble のバイト数はによって返される値に反映されず、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。  
  
   
  
## 例  
 次の例では、 <xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> と <xref:System.Text.UnicodeEncoding.GetByteCount%28System.String%29> 、文字列をエンコードするために必要なバイトの最大値と実際の数を計算する方法です。 また、実際のバイト ストリームにバイト オーダー マークの保存に必要なバイト数も表示されます。  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount1.cs#1)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のバイト数は、整数値として返すことができる最大数を超えています。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になっていると <paramref name="s" /> 、無効な文字のシーケンスが含まれています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコードする最初の文字へのポインター。</param>
        <param name="count">エンコードする文字数。</param>
        <summary>指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>です。<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 <xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ファイルまたはストリームとして保存される際に、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭に、preamble を挿入する \(など、一連のファイルに書き込まれるバイト数の先頭にある\) は開発者の責任であり、preamble のバイト数はによって返される値に反映されず、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になっていると <paramref name="chars" /> 、無効な文字のシーケンスが含まれています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している文字配列。</param>
        <param name="index">エンコードする最初の文字のインデックス。</param>
        <param name="count">エンコードする文字数。</param>
        <summary>指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 [GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 [GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。[GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 [GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetByteCount メソッド \(Char\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ファイルまたはストリームとして保存される際に、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭に、preamble を挿入する \(など、一連のファイルに書き込まれるバイト数の先頭にある\) は開発者の責任であり、preamble のバイト数はによって返される値に反映されず、 [GetByteCount メソッド \(Char\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。  
  
   
  
## 例  
 ラテン文字の大文字を持つ配列と文字の小文字と呼び出しを設定する例を次の [GetByteCount メソッド \(Char\<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> ラテン文字の小文字の文字をエンコードするために必要なバイト数を決定する方法です。 バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。 この番号によって返される値を比較して、 [GetByteCount メソッド \(Char\<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> メソッドで、ラテン文字の小文字の文字をエンコードするために必要なバイトの最大数を示します。 次の例は、ギリシャ語、キリル文字の文字と呼び出しの組み合わせを含む配列を設定、 [GetByteCount メソッド \(Char\<xref:System.Text.UnicodeEncoding.GetByteCount%28System.Char%5B%5D%2CSystem.Int32%2CSystem.Int32%29> キリル文字をエンコードするために必要なバイト数を決定する方法です。 バイト順マークが追加された場合に必要なバイトの合計数と共にこの情報が表示されます。 この番号によって返される値を比較して、 [GetByteCount メソッド \(Char\<xref:System.Text.UnicodeEncoding.GetMaxByteCount%2A> メソッドで、キリル文字をエンコードするために必要なバイトの最大数を示します。  
  
 [!code-csharp[System.Text.Utf32Encoding.GetByteCount\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/cs/getbytecount2.cs#2)]
 [!code-vb[System.Text.Utf32Encoding.GetByteCount\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getbytecount/vb/getbytecount2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になっていると <paramref name="chars" /> 、無効な文字のシーケンスが含まれています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコードする最初の文字へのポインター。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</param>
        <param name="byteCount">書き込む最大バイト数。</param>
        <summary>指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> パラメーターによって示される位置に書き込む実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 <xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合は、アプリケーションを使用してデータの量が小さなブロックに分割する必要があることが非常に大きい場合、または、 <xref:System.Text.Decoder> または <xref:System.Text.Encoder> によって提供される、 <xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
> [!NOTE]
>  ファイルまたはストリームに保存されるときに、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭に、preamble を挿入する \(など、一連のファイルに書き込まれるバイト数の先頭にある\) 開発者の責任です。<xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドはエンコードされたバイト シーケンスの先頭に preamble を追加しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。  
  
 または  
  
 <paramref name="byteCount" /> 結果のバイト数より少ない。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している文字配列。</param>
        <param name="charIndex">エンコードする最初の文字のインデックス。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスを格納するバイト配列。</param>
        <param name="byteIndex">結果のバイト シーケンスを書き込む開始位置のインデックス。</param>
        <summary>指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> に書き込まれた実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。[GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合は、アプリケーションを使用してデータの量が小さなブロックに分割する必要があることが非常に大きい場合、または、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.Decoder> または [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.Encoder> によって提供される、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
> [!NOTE]
>  ファイルまたはストリームに保存されるときに、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭に、preamble を挿入する \(など、一連のファイルに書き込まれるバイト数の先頭にある\) 開発者の責任です。[GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドはエンコードされたバイト シーケンスの先頭に preamble を追加しません。  
  
   
  
## 例  
 次の例は、文字配列から次の 3 つの文字をエンコードするために必要なバイト数を指定の文字をエンコードし、結果のバイト数を表示します。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes\_CharArr\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CPP/getbytes_chararr.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes\_CharArr\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/CS/getbytes_chararr.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes\_CharArr\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_CharArr/VB/GetBytes_CharArr.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="charIndex" /> <paramref name="charCount" /> で有効な範囲を表していません <paramref name="chars" />します。  
  
 または  
  
 <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="chars" /> に無効な文字のシーケンスが含まれています。  
  
 または  
  
 <paramref name="bytes" /> 十分な容量がない <paramref name="byteIndex" /> に結果のバイトを合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string s, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string s, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</param>
        <param name="charIndex">エンコードする最初の文字のインデックス。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスを格納するバイト配列。</param>
        <param name="byteIndex">結果のバイト シーケンスを書き込む開始位置のインデックス。</param>
        <summary>指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> に書き込まれた実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。[GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合は、アプリケーションを使用してデータの量が小さなブロックに分割する必要があることが非常に大きい場合、または、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.Decoder> または [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.Encoder> によって提供される、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
> [!NOTE]
>  ファイルまたはストリームに保存されるときに、エンコード済みバイトが正しくデコードすることを確認するには、プリアンブルでエンコードされたバイトのストリームの先頭を付加することができます。 バイト ストリームの先頭に、preamble を挿入する \(など、一連のファイルに書き込まれるバイト数の先頭にある\) 開発者の責任です。[GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドはエンコードされたバイト シーケンスの先頭に preamble を追加しません。  
  
   
  
## 例  
 次の例は、文字列をエンコードするために必要なバイト数を決定、文字列をエンコードし、結果のバイト数を表示します。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。  
  
 または  
  
 <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="s" /> に無効な文字のシーケンスが含まれています。  
  
 または  
  
 <paramref name="bytes" /> 十分な容量がない <paramref name="byteIndex" /> に結果のバイトを合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
        <returns>指定したバイト シーケンスをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.UTF32Encoding.GetCharCount%2A> 必要な正確な配列のサイズの計算、 <xref:System.Text.UTF32Encoding.GetChars%2A> 結果の文字を格納する方法です。 配列の最大サイズを計算するには、呼び出し、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 <xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="index">デコードする最初のバイトのインデックス。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
        <returns>指定したバイト シーケンスをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 [GetCharCount メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドで必要な正確な配列のサイズを計算する、 [GetCharCount メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetChars%2A> 結果の文字を格納する方法です。 配列の最大サイズを計算するには、呼び出し、 [GetCharCount メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドです。[GetCharCount メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 [GetCharCount メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetCharCount メソッド \(Byte\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
   
  
## 例  
 次の例では、文字列、バイト配列にエンコードし、文字の配列にバイトをデコードします。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="Overload:System.Text.UTF32Encoding.GetChars" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字セットの書き込みを開始する位置へのポインター。</param>
        <param name="charCount">書き込む文字の最大数。</param>
        <summary>指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</summary>
        <returns>
          <paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetChars%2A> 結果の文字を格納する、 <xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドです。 配列の最大サイズを計算するには、呼び出し、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 <xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 デコードするバイトの範囲には、バイト順マーク \(BOM\) が含まれているバイト配列が BOM で非対応型のメソッドによって返された場合は、このメソッドによって返される文字配列には文字 U \+ FFFE が含まれます。 これを削除するには呼び出すことによって、 <xref:System.String.TrimStart%2A?displayProperty=fullName> メソッドです。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合は、アプリケーションを使用してデータの量が小さなブロックに分割する必要があることが非常に大きい場合、または、 <xref:System.Text.Decoder> または <xref:System.Text.Encoder> によって提供される、 <xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは <xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。  
  
 または  
  
 <paramref name="charCount" /> 結果の文字数より少ない。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="byteIndex">デコードする最初のバイトのインデックス。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字のセットを格納する文字配列。</param>
        <param name="charIndex">結果の文字のセットを書き込む開始位置のインデックス。</param>
        <summary>指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</summary>
        <returns>
          <paramref name="chars" /> に書き込まれた実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetChars%2A> 結果の文字を格納する、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドです。 配列の最大サイズを計算するには、呼び出し、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドです。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 デコードするバイトの範囲には、バイト順マーク \(BOM\) が含まれているバイト配列が BOM で非対応型のメソッドによって返された場合は、このメソッドによって返される文字配列には文字 U \+ FFFE が含まれます。 これを削除するには呼び出すことによって、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.String.TrimStart%2A?displayProperty=fullName> メソッドです。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合は、アプリケーションを使用してデータの量が小さなブロックに分割する必要があることが非常に大きい場合、または、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> または [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoder> によって提供される、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
   
  
## 例  
 次の例では、文字列、バイト配列にエンコードし、文字の配列にバイトをデコードします。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" /> または <paramref name="byteCount" /> または <paramref name="charIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="byteindex" /> <paramref name="byteCount" /> で有効な範囲を表していません <paramref name="bytes" />します。  
  
 または  
  
 <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。  
  
 または  
  
 <paramref name="chars" /> 十分な容量がない <paramref name="charIndex" /> に結果の文字を合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetDecoder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>UTF\-32 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</summary>
        <returns>UTF\-32 でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換する <see cref="T:System.Text.Decoder" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> メソッドと同様の方法での文字の連続ブロックにバイトの連続したブロックを変換する、 <xref:System.Text.UTF32Encoding.GetChars%2A> メソッドです。 ただし、 <xref:System.Text.Decoder> ブロックにまたがるバイト シーケンスを正しくデコードすることができますので、呼び出しの間で状態情報を保持します。<xref:System.Text.Decoder> もデータ ブロックの末尾にある末尾のバイトを保持し、次のデコード操作で末尾のバイトを使用します。 したがって、 <xref:System.Text.UTF32Encoding.GetDecoder%2A> と <xref:System.Text.UTF32Encoding.GetEncoder%2A> の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためには、ネットワーク転送とファイルの操作に便利です。  
  
 かどうかはエラー検出が有効な場合は、 `throwOnInvalidCharacters` コンス トラクターのパラメーターに設定された `true`, でエラーの検出が有効にも、 <xref:System.Text.Decoder> このメソッドによって返されます。 エラーの検出を有効にし、無効なシーケンスが発生した場合は、デコーダーの状態は未定義と処理を停止する必要があります。  
  
   
  
## 例  
 次の例は、エンコーダーとデコーダーを使用して、\(バイト単位\) の配列に文字列をエンコードして、文字の配列にバイトをデコードします。  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetEncoder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unicode 文字のシーケンスを UTF\-32 でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</summary>
        <returns>Unicode 文字のシーケンスを UTF\-32 でエンコードされたバイト シーケンスに変換する <see cref="T:System.Text.Encoder" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> メソッドと同様の方法のバイト数の連続ブロックに文字の連続したブロックを変換する、 <xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドです。 ただし、 <xref:System.Text.Encoder> ブロックにまたがる文字のシーケンスを正しくエンコードすることができますので、呼び出しの間で状態情報を保持します。<xref:System.Text.Encoder> も保持末尾のデータ ブロックの末尾に文字を使用して末尾の文字の次のエンコード操作します。 たとえば、データ ブロック比類のない上位サロゲートで終了し、次のデータ ブロックの下位サロゲートが一致する場合があります。 したがって、 <xref:System.Text.UTF32Encoding.GetDecoder%2A> と <xref:System.Text.UTF32Encoding.GetEncoder%2A> の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためには、ネットワーク転送とファイルの操作に便利です。  
  
 かどうかはエラー検出が有効な場合は、 `throwOnInvalidCharacters` コンス トラクターのパラメーターに設定された `true`, でエラーの検出が有効にも、 <xref:System.Text.Encoder> このメソッドによって返されます。 エラーの検出を有効にし、無効なシーケンスが発生した場合は、エンコーダーの状態は未定義と処理を停止する必要があります。  
  
   
  
## 例  
 次の例は、エンコーダーとデコーダーを使用して、\(バイト単位\) の配列に文字列をエンコードして、文字の配列にバイトをデコードします。  
  
 [!code-cpp[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CPP/encdec.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/CS/encdec.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.EncDec\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.EncDec/VB/EncDec.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスのハッシュ コードを返します。</summary>
        <returns>現在の <see cref="T:System.Text.UTF32Encoding" /> オブジェクトのハッシュ コード。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxByteCount(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">エンコードする文字数。</param>
        <summary>指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</summary>
        <returns>指定した文字数をエンコードすることによって生成される最大バイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetBytes%2A> 結果のバイトを格納するを呼び出す、 <xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetByteCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 現在選択されている最悪のケースを含む、最悪のケースの数は、 <xref:System.Text.EncoderFallback>です。 フォールバックが大きくなる可能性の文字列で選択した場合  <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> 大きな値を返すことができます。  
  
 ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。 大きな文字列の場合に、非常に大きなバッファーを使用してより適切なバッファーを超えているというまれなケースでエラーの検出を選択する必要があります。 異なるアプローチを検討しを使用することも <xref:System.Text.UTF32Encoding.GetByteCount%2A> または <xref:System.Text.Encoder.Convert%2A?displayProperty=fullName>です。  
  
 <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A> リレーションシップを持たない <xref:System.Text.UTF32Encoding.GetChars%2A>します。 同様の機能を使用する必要がある場合 <xref:System.Text.UTF32Encoding.GetChars%2A>, を使用して <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A>します。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 同じ値とは限りません `N* GetMaxByteCount(1)`します。  
  
   
  
## 例  
 次の例は、文字列をエンコードするために必要なバイト数を決定、文字列をエンコードし、結果のバイト数を表示します。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CPP/getbytes_string.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/CS/getbytes_string.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetBytes\_String\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetBytes_String/VB/GetBytes_String.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">デコードするバイト数。</param>
        <summary>指定したバイト数をデコードすることによって生成される最大文字数を計算します。</summary>
        <returns>指定したバイト数をデコードすることによって生成される最大文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.UTF32Encoding.GetChars%2A> 結果の文字を格納するを呼び出す、 <xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドです。 配列の最大サイズを計算するを呼び出す、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドです。<xref:System.Text.UTF32Encoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 現在選択されている最悪のケースを含む、最悪のケースの数は、 <xref:System.Text.DecoderFallback>です。 フォールバックが大きくなる可能性の文字列で選択した場合 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> 大きな値を返すことができます。  
  
 ほとんどの場合は、このメソッドは、短い文字列では適切な数値を返します。 大きな文字列の場合に、非常に大きなバッファーを使用してより適切なバッファーを超えているというまれなケースでエラーの検出を選択する必要があります。 異なるアプローチを検討しを使用することも <xref:System.Text.UTF32Encoding.GetCharCount%2A> または <xref:System.Text.Decoder.Convert%2A>です。  
  
 <xref:System.Text.UTF32Encoding.GetMaxCharCount%2A> リレーションシップを持たない <xref:System.Text.UTF32Encoding.GetBytes%2A>します。 同様の機能を使用する必要がある場合 <xref:System.Text.UTF32Encoding.GetBytes%2A>, を使用して <xref:System.Text.UTF32Encoding.GetMaxByteCount%2A>します。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 同じ値とは限りません `N* GetMaxCharCount(1)`します。  
  
   
  
## 例  
 次の例では、文字列、バイト配列にエンコードし、文字の配列にバイトをデコードします。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CPP/getchars.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/CS/getchars.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetChars\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetChars/VB/GetChars.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetPreamble">
      <MemberSignature Language="C#" Value="public override byte[] GetPreamble ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance unsigned int8[] GetPreamble() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetPreamble" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.UTF32Encoding" /> オブジェクトが UTF\-32 形式でエンコードされた Unicode バイト順マークを提供するように構成されている場合、そのようなマークが返されます。</summary>
        <returns>Unicode のバイト順マークが格納されたバイト配列を提供するように <see cref="T:System.Text.UTF32Encoding" /> オブジェクトが構成されている場合には、そうしたバイト配列。 それ以外の場合、このメソッドは長さがゼロのバイト配列を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.UTF32Encoding> オブジェクトがこの場合、配列の先頭には、エンコーディング プロセスに起因するバイトのシーケンスをバイトのプリアンブルを提供します。 バイト順マーク \(コード ポイントと 0000 U\+FEFF\) でエンコードされたバイト シーケンスの先頭には、バイト順および変換形式または UTF デコーダーことができます。 Unicode バイト順マーク \(BOM\) が \(16 進\) に次のようにシリアル化されます。  
  
-   ビッグ エンディアン バイト順: 00 00 FE FF  
  
-   リトル エンディアン バイト順: FF FE 00 00  
  
 インスタンスを作成できる、 <xref:System.Text.UTF32Encoding> オブジェクト <xref:System.Text.UTF32Encoding.GetPreamble%2A> メソッドは、次の方法で有効な BOM を返します。  
  
-   取得することによって、 <xref:System.Text.UTF32Encoding> によって返されるオブジェクト、 <xref:System.Text.Encoding.UTF32%2A?displayProperty=fullName> プロパティです。  
  
-   パラメーターなしで呼び出すことによって <xref:System.Text.UTF32Encoding.%23ctor> インスタンスを作成するコンス トラクター、 <xref:System.Text.UTF32Encoding> オブジェクトです。  
  
-   指定して `true` の値として、 `byteOrderMark` への引数、 <xref:System.Text.UTF32Encoding.%23ctor%2A> と <xref:System.Text.UTF32Encoding.%23ctor%2A> コンス トラクターです。  
  
 ファイルをそれ以外の場合にへの参照が失われたため、エンコーディングの特定の id にほぼが用意されているので、BOM を使用することをお勧め、 <xref:System.Text.UTF32Encoding> オブジェクト、たとえば、タグなし web データを不適切なタグまたはときビジネス保存されたランダムなテキスト ファイルは、国際的な関心やその他のデータがありませんでした。 多くの場合、データが一貫して適切なタグとは、ユーザーの問題を回避できる可能性があります。  
  
 エンコードの種類を定義した標準から、BOM は、少し冗長です。 ただし、適切なエンコードのヘッダーを送信するサーバーのヘルプを使用できます。 または、そのとして使用できます、フォールバック エンコーディングが失われたそれ以外の場合に備えてします。  
  
 BOM を使用するいくつかのデメリットがあります。 たとえば、BOM を使用するデータベース フィールドを制限する方法についての知識が難しくなります。 ファイルの連結問題になる場合も、たとえば、ファイルを結合するようにデータの途中で不要な文字は最終的にする方法です。 いくつかの短所にもかかわらずただし、部品表の使用強くお勧めします。  
  
 バイト順とバイト順マークの詳細についてで Unicode 標準を参照してください、 [Unicode home page](http://go.microsoft.com/fwlink/?LinkId=37123)します。  
  
> [!CAUTION]
>  エンコードされたバイトを正しくデコードするためには、エンコード済みバイトのプリアンブルとプレフィックスにする必要があります。 なお、 <xref:System.Text.UTF32Encoding.GetBytes%2A> メソッドでエンコードされたバイト シーケンスに BOM が追加しません。 開発者の責任は、適切なバイト ストリームの先頭に BOM を指定することです。  
  
   
  
## 例  
 次のコード例の取得と、バイト順のマークを付けるさまざまな表示 <xref:System.Text.UTF32Encoding> インスタンス。  
  
 [!code-cpp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CPP/getpreamble.cpp#1)]
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/GetPreamble.vb#1)]  
  
 次の例では、2 つをインスタンス化 <xref:System.Text.UTF32Encoding> オブジェクトは、まずは、BOM とどのは 2 つ目は提供しません。 呼び出して、 <xref:System.Text.UTF32Encoding.GetPreamble%2A> UTF 32 エンコードされた文字列を書き込む前に、ファイルには BOM を書き込みます。 2 つ目のエンコーダーからのバイトを保存するファイルの例では、出力結果は 4 バイトを 1 つ目です。  
  
 [!code-csharp[System.Text.UTF32Encoding.GetPreamble\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/CS/getpreamble1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetPreamble\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.UTF32Encoding.GetPreamble/VB/getpreamble1.vb#2)]  
  
 You can also compare the files by using the **languageKeyword tag is not supported!!!!**  
 command in a console window, or you can inspect the files in a text editor that includes a Hex View mode. Note that when the file is opened in an editor that supports UTF\-32, the BOM is not displayed.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.UTF32Encoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="index">デコードする最初のバイトのインデックス。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>バイト配列に格納されているある範囲のバイトを文字列にデコードします。</summary>
        <returns>指定したバイト シーケンスのデコード結果が格納されている文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 無効なシーケンス エラーの検出でこのメソッドをスローすると、 [GetString メソッド \(Byte\<xref:System.ArgumentException>です。 エラー検出を無効なシーケンスは無視され、例外はスローされません。  
  
 デコードするバイトの範囲には、バイト順マーク \(BOM\) が含まれているバイト配列が BOM で非対応型のメソッドによって返された場合は、このメソッドによって返される文字配列には文字 U \+ FFFE が含まれます。 これを削除するには呼び出すことによって、 [GetString メソッド \(Byte\<xref:System.String.TrimStart%2A?displayProperty=fullName> メソッドです。  
  
 ストリームから読み取ったデータなど、変換するデータは、シーケンシャル ブロック内でのみ使用可能な可能性があります。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 [GetString メソッド \(Byte\<xref:System.Text.Decoder> または [GetString メソッド \(Byte\<xref:System.Text.Encoder> によって提供される、 [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetDecoder%2A> メソッドまたは [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetEncoder%2A> メソッドをそれぞれします。  
  
   
  
## 例  
 次の例では、バイト、リトル エンディアン順で 1 つ、およびビッグ エンディアン順で、その他の 2 つのアレイ配列に文字列をエンコードします。 文字列、バイトをデコードします。  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/getstring.cs#1)]
 [!code-vb[System.Text.UTF32Encoding.GetString\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString.vb#1)]  
  
 次の例では、配列を初期化を呼び出して、 [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetByteCount%2A> バイト数をエンコードされた文字列とバイト順マーク \(BOM\) のサイズを追加するために必要な正確に決定する方法です。 次の [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetPreamble%2A> は BOM を呼び出す前に、配列を格納する方法、 [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetBytes%2A> 配列にエンコードされたバイトを格納するメソッドです。 次の [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding.GetString%2A> 文字列をデコードする方法です。  
  
 [!code-csharp[System.Text.UTF32Encoding.GetString\#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/CS/GetString1.cs#2)]
 [!code-vb[System.Text.UTF32Encoding.GetString\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.utf32encoding.getstring/VB/GetString1.vb#2)]  
  
 Note that in this case the decoded string differs from the original string, since it begins with a 32\-bit byte order mark U\+FFFE U\+0000. This means that the two strings will compare as unequal, and that if the string is output, the BOM will be displayed as the replacement character "?".  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</exception>
        <exception cref="T:System.ArgumentException">エラーの検出が有効になり、<paramref name="bytes" /> に無効なバイト シーケンスが含まれています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(を参照してください [Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9) の詳しい説明について\)  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.UTF32Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetDecoder" />
        <altmember cref="M:System.Text.UTF32Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.UTF32Encoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイト シーケンスを文字のセットにデコードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字のセットをバイト シーケンスにエンコードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Text.UTF32Encoding" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>