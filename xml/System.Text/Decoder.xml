<Type Name="Decoder" FullName="System.Text.Decoder">
  <TypeSignature Language="C#" Value="public abstract class Decoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit Decoder extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.Decoder" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>エンコードされたバイトのシーケンスを文字のセットに変換します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 To obtain an instance of an implementation of the <xref:System.Text.Decoder> class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of an <xref:System.Text.Encoding> implementation.  
  
 The <xref:System.Text.Decoder.GetCharCount%2A> method determines how many characters result in decoding a sequence of bytes, and the <xref:System.Text.Decoder.GetChars%2A> method performs the actual decoding. There are several versions of both of these methods available in the <xref:System.Text.Decoder> class. For more information, see <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>. A <xref:System.Text.Decoder> object maintains state information between successive calls to **languageKeyword tag is not supported!!!!**  
 or <xref:System.Text.Decoder.Convert%2A> methods so it can correctly decode byte sequences that span blocks. The <xref:System.Text.Decoder> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref:System.Text.Encoding.GetDecoder%2A> and <xref:System.Text.Encoding.GetEncoder%2A> are useful for network transmission and file operations because those operations often deal with blocks of data instead of a complete data stream.  
  
> [!NOTE]
>  When the application is done with a stream of data, it should make sure that the state information is flushed by setting the **parameterReference tag is not supported!!!!**  
>  parameter to **languageKeyword tag is not supported!!!!**  
>  in the appropriate method call. If an exception occurs or if the application switches streams, it should call <xref:System.Text.Decoder.Reset%2A> to clear the internal state of the **languageKeyword tag is not supported!!!!**  
>  object.  
  
## Version Considerations  
 A <xref:System.Text.Decoder> or <xref:System.Text.Encoder> object can be serialized during a conversion operation. The state of the object is retained if it is deserialized in the same version of the .NET Framework, but lost if it is deserialized in another version.  
  
   
  
## 例  
 The following example demonstrates the use of a <xref:System.Text.Decoder> to convert two different byte arrays into a character array. One of the character's bytes spans the arrays. This is similar to what a <xref:System.IO.StreamReader> object does internally when reading a stream.  
  
 [!code-cpp[Classic Decoder Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Decoder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Decoder Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Decoder Example/CS/source.cs#1)]
 [!code-vb[Classic Decoder Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Decoder Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>When your application inherits from this class, it must override all the members.</para>
    </block>
    <altmember cref="T:System.Text.Encoder" />
    <altmember cref="T:System.Text.Encoding" />
    <altmember cref="M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Decoder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.Decoder" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 To obtain an instance of an implementation of this class, the application should use the <xref:System.Text.Encoding.GetDecoder%2A> method of a <xref:System.Text.Encoding> implementation.  
  
   
  
## 例  
 The following example demonstrates two techniques for initializing a new <xref:System.Text.Decoder> instance.  
  
 [!code-cpp[System.Text.Decoder.ctor Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.Decoder.ctor Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.Decoder.ctor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoding" />
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (byte* bytes, int byteCount, char* chars, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush, int32 bytesUsed, int32 charsUsed, bool completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Convert(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="charsUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bytes">変換するバイト シーケンスを格納しているバッファーのアドレス。</param>
        <param name="byteCount">
          <c>bytes</c> にある変換対象のバイト数。</param>
        <param name="chars">変換後の文字を格納するバッファーのアドレス。</param>
        <param name="charCount">変換に使用する <c>chars</c> 内の最大文字数。</param>
        <param name="flush">これ以上データの変換を行わないことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="bytesUsed">このメソッドから制御が戻るときに、変換の結果生成されたバイト数を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <param name="charsUsed">このメソッドから制御が戻るときに、<c>chars</c> で変換に使用された文字数を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <param name="completed">このメソッドから制御が戻るときに、<c>byteCount</c> で指定したすべての文字が変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このパラメーターは初期化せずに渡されます。</param>
        <summary>バッファーに格納されているエンコード済みバイトを UTF\-16 エンコード文字に変換し、その結果を別のバッファーに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注意して、<xref:System.Text.Decoder>オブジェクトへの呼び出しの間で状態を保存する<xref:System.Text.Decoder.Convert%2A>です。 設定の必要があるアプリケーションでは、データ ストリームの処理が終わったら、`flush`パラメーターを`true`状態情報がフラッシュされるかどうかを確認します。 この設定では、デコーダーは、データ ブロックの末尾に無効なバイトを無視し、内部バッファーをクリアします。 サロゲート ペアの上位サロゲートなどの論理ユニットの一部である残り処理後のデータは、現在のフォールバック設定に従って変換されます。  
  
 `Convert`メソッドがループ内で任意の量の入力のデコードに使用するように設計ファイルまたはストリームから読み取られるデータなどです。 デコード操作の出力は、固定サイズのバッファーに格納します。<xref:System.Text.Decoder.GetChars%2A>出力バッファーが十分でない場合、例外がスローされますが、<xref:System.Text.Decoder.Convert%2A>は、できるだけ多くの領域を入力し、読み取られたバイトと書き込まれる文字数を返します。 参照してください、<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName>詳細コメントのトピックです。  
  
 `completed`出力パラメーターは、入力バッファー内のすべてのデータが変換され、出力バッファーに格納されているかどうかを示します。 このパラメーターに設定されている`false`でのバイト数が指定されている場合、`byteCount`パラメーターで指定された文字の数を超えずに変換できません、`charCount`パラメーター。 状況では、アプリケーション、出力バッファーの内容を使用か、新しい出力バッファーを提供インクリメント、`bytes`パラメーターによって指定されたバイト数を`bytesUsed`パラメーターを呼び出して、`Convert`残りの入力を処理するには、もう一度メソッドです。  
  
 `completed`パラメーターを設定することも`false`場合でも、`bytesUsed`と`byteCount`パラメーターが等しい。 内のデータが解決しない場合、このような状況が発生した、<xref:System.Text.Decoder>内に保存されていないオブジェクト、`bytes`バッファー。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> または <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">出力バッファーが小さすぎて、変換した入力を格納できません。 出力バッファーは、<see cref="Overload:System.Text.Decoder.GetCharCount" /> メソッドで示されるサイズ以上である必要があります。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public virtual void Convert (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, int charCount, bool flush, out int bytesUsed, out int charsUsed, out bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Convert(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, int32 charCount, bool flush, int32 bytesUsed, int32 charsUsed, bool completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Convert(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Int32,System.Boolean,System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
        <Parameter Name="bytesUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="charsUsed" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="completed" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="bytes">変換するバイト配列。</param>
        <param name="byteIndex">変換する <c>bytes</c> の最初の要素。</param>
        <param name="byteCount">変換する <c>bytes</c> の要素の数。</param>
        <param name="chars">変換後の文字を格納する配列。</param>
        <param name="charIndex">データを格納する <c>chars</c> の最初の要素。</param>
        <param name="charCount">変換に使用する <c>chars</c> 内の最大要素数。</param>
        <param name="flush">これ以上データの変換を行わないことを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="bytesUsed">このメソッドから制御が戻るときに、変換に使用されたバイト数を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <param name="charsUsed">このメソッドから制御が戻るときに、変換によって生成された <c>chars</c> の文字数を格納します。 このパラメーターは初期化せずに渡されます。</param>
        <param name="completed">このメソッドから制御が戻るときに、<c>byteCount</c> で指定したすべての文字が変換された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このパラメーターは初期化せずに渡されます。</param>
        <summary>配列に格納されているエンコード済みバイトを UTF\-16 エンコード文字に変換し、その結果を文字配列に格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Remember that the [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> object saves state between calls to [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A>. When the application is done with a stream of data, it should set the **parameterReference tag is not supported!!!!**  
 parameter to **languageKeyword tag is not supported!!!!**  
 to make sure that the state information is flushed. With this setting, the decoder ignores invalid bytes at the end of the data block and clears the internal buffer. Any remaining processed data that is part of a logical unit, such as the high surrogate of a surrogate pair, is converted according to the current fallback settings.  
  
 The **languageKeyword tag is not supported!!!!**  
 method is designed to be used in a loop to decode an arbitrary amount of input, such as data read from a file or stream. It stores the output of the decoding operation in a fixed\-size buffer. [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A> will throw an exception if the output buffer isn't large enough, but [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> will fill as much space as possible and return the bytes read and chars written. Also see the [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> topic for more comments.  
  
 The **parameterReference tag is not supported!!!!**  
 output parameter indicates whether all the data in the input buffer was converted and stored in the output buffer. This parameter is set to **languageKeyword tag is not supported!!!!**  
 if the number of bytes specified by the **parameterReference tag is not supported!!!!**  
 parameter cannot be converted without exceeding the number of characters specified by the **parameterReference tag is not supported!!!!**  
 parameter. In that situation, the application should use the contents of the output buffer or provide a new output buffer, increment the **parameterReference tag is not supported!!!!**  
 parameter by the number of bytes specified by the **parameterReference tag is not supported!!!!**  
 parameter, then call the **languageKeyword tag is not supported!!!!**  
 method again to process the remaining input.  
  
 The **parameterReference tag is not supported!!!!**  
 parameter can also be set to **languageKeyword tag is not supported!!!!**  
, even though the **parameterReference tag is not supported!!!!**  
 and **parameterReference tag is not supported!!!!**  
 parameters are equal. This situation occurs if there is still data in the [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> object that has not been stored in the **parameterReference tag is not supported!!!!**  
 buffer.  
  
   
  
## 例  
 The following code example uses the [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoder.Convert%2A> method to convert a file of UTF\-16 characters to UTF\-8. It then uses the [Convert メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> method to convert the UTF\-8 characters back to UTF\-16 characters.  
  
 [!code-csharp[sys.txt.EncoderDecoder.convert\#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/cs/edCvt.cs#1)]
 [!code-vb[sys.txt.EncoderDecoder.convert\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.EncoderDecoder.convert/vb/edCvt.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> または <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" />、<paramref name="charCount" />、<paramref name="byteIndex" />、または <paramref name="byteCount" /> が 0 未満です。  
  
 または  
  
 <paramref name="chars" /> の長さから <paramref name="charIndex" /> を引いた長さが <paramref name="charCount" /> 未満です。  
  
 または  
  
 <paramref name="bytes" /> の長さから <paramref name="byteIndex" /> を引いた長さが <paramref name="byteCount" /> 未満です。</exception>
        <exception cref="T:System.ArgumentException">出力バッファーが小さすぎて、変換した入力を格納できません。 出力バッファーは、<see cref="Overload:System.Text.Decoder.GetCharCount" /> メソッドで示されるサイズ以上である必要があります。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
      </Docs>
    </Member>
    <Member MemberName="Fallback">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallback Fallback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallback Fallback" />
      <MemberSignature Language="DocId" Value="P:System.Text.Decoder.Fallback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallback</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Text.DecoderFallback" /> 現在のオブジェクト <see cref="T:System.Text.Decoder" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Text.DecoderFallback" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.DecoderFallback> オブジェクトは、エンコード済みバイト シーケンスを文字に変換できないときに呼び出されるエラー ハンドラーを表します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">設定操作の値は <see langword="null " />\(<see langword="Nothing" />\)。</exception>
        <exception cref="T:System.ArgumentException">設定操作で新しい値を割り当てることができません現在 <see cref="T:System.Text.DecoderFallbackBuffer" /> オブジェクトには、まだデコードされていないデータが含まれています。</exception>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.FallbackBuffer" />
      </Docs>
    </Member>
    <Member MemberName="FallbackBuffer">
      <MemberSignature Language="C#" Value="public System.Text.DecoderFallbackBuffer FallbackBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.DecoderFallbackBuffer FallbackBuffer" />
      <MemberSignature Language="DocId" Value="P:System.Text.Decoder.FallbackBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.DecoderFallbackBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Text.DecoderFallbackBuffer" /> オブジェクトに現在関連付けられている <see cref="T:System.Text.Decoder" /> オブジェクトです。</summary>
        <value>
          <see cref="T:System.Text.DecoderFallbackBuffer" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.DecoderFallbackBuffer> オブジェクトによって使用されるデータを表す、 <xref:System.Text.DecoderFallback> オブジェクトです。<xref:System.Text.DecoderFallback> オブジェクトは、エンコード済みバイト シーケンスを文字に変換できないときに呼び出されるエラー ハンドラーを表します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.EncoderFallback" />
        <altmember cref="P:System.Text.Encoder.Fallback" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte* bytes, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="count">デコードするバイト数。</param>
        <param name="flush">
          <see langword="true" /> 計算の後に、エンコーダーの内部状態をクリアするをシミュレートするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされた場合、指定したバイト ポインターから始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。 パラメーターでは、計算後に、デコーダーの内部状態をクリアするかどうかを示します。</summary>
        <returns>指定したバイト シーケンスと内部バッファー内のバイトをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、デコーダーの状態には影響しません。  
  
 計算する正確な配列のサイズを <xref:System.Text.Decoder.GetChars%2A> 必要と結果の文字を格納するアプリケーションを使用する必要があります <xref:System.Text.Decoder.GetCharCount%2A>します。  
  
 場合 `GetChars` で呼び出された `flush` 設定 `false`, 、デコーダーが内部バッファーにデータ ブロックの末尾にある後続バイトを格納し、次のデコード操作に使用します。 アプリケーションを呼び出す必要があります `GetCharCount` 呼び出す前にすぐにデータのブロックに `GetChars` 同じブロックに対して、前のブロックからの後続バイトが計算に含まれるようにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> <see langword="null " />\(<see langword="Nothing " />Visual Basic .NET で\)。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public abstract int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="index">デコードする最初のバイトのインデックス。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
        <returns>指定したバイト シーケンスと内部バッファー内のバイトをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、デコーダーの状態には影響しません。  
  
 計算する正確な配列のサイズを[GetCharCount メソッド \(Byte\<xref:System.Text.Decoder.GetChars%2A>必要と結果の文字を格納するアプリケーションを使用する必要があります[GetCharCount メソッド \(Byte\<xref:System.Text.Decoder.GetCharCount%2A>です。  
  
 場合`GetChars`で呼び出された`flush`'éý'`false`デコーダーが内部バッファーにデータ ブロックの末尾にある末尾バイトを格納し、それらを次にデコード操作で使用します。 アプリケーションを呼び出す必要があります`GetCharCount`呼び出す前にすぐにデータのブロックに`GetChars`同じブロックで、前のブロックからの後続バイトが計算に含まれるようにします。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、[GetCharCount メソッド \(Byte\<xref:System.Text.Decoder.GetCharCount%2A>メソッドを指定された配列内のバイトの範囲をデコードするために必要な文字の数を計算します。  
  
 [!code-cpp[System.Text.Decoder.GetCharCount Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.Decoder.GetCharCount Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.Decoder.GetCharCount Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public virtual int GetCharCount (byte[] bytes, int index, int count, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="index">デコードする最初のバイトのインデックス。</param>
        <param name="count">デコードするバイト数。</param>
        <param name="flush">計算後にエンコーダーの内部状態のクリアをシミュレートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>派生クラスでオーバーライドされた場合、指定したバイト配列に格納されているバイト シーケンスをデコードすることによって生成される文字数を計算します。 パラメーターは、計算後に、デコーダーの内部状態をクリアするかどうかを示します。</summary>
        <returns>指定したバイト シーケンスと内部バッファー内のバイトをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method does not affect the state of the decoder.  
  
 To calculate the exact array size that [GetCharCount メソッド \(Byte\<xref:System.Text.Decoder.GetChars%2A> requires to store the resulting characters, the application should use [GetCharCount メソッド \(Byte\<xref:System.Text.Decoder.GetCharCount%2A>.  
  
 If **languageKeyword tag is not supported!!!!**  
 is called with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
, the decoder stores trailing bytes at the end of the data block in an internal buffer and uses them in the next decoding operation. The application should call **languageKeyword tag is not supported!!!!**  
 on a block of data immediately before calling **languageKeyword tag is not supported!!!!**  
 on the same block, so that any trailing bytes from the previous block are included in the calculation.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte* bytes, int byteCount, char* chars, int charCount, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字セットの書き込みを開始する位置へのポインター。</param>
        <param name="charCount">書き込む文字の最大数。</param>
        <param name="flush">
          <see langword="true" /> 変換後に、デコーダーの内部状態をクリアするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した文字ポインターで始まる格納される文字のセットに指定したバイト ポインターと、内部バッファーのバイトで始まるバイト シーケンスをデコードします。 パラメーターでは、変換後、デコーダーの内部状態をクリアするかどうかを示します。</summary>
        <returns>
          <paramref name="chars" /> パラメーターによって示される位置に書き込む実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注意して、 <xref:System.Text.Decoder> オブジェクトへの呼び出しの間で状態を保存する <xref:System.Text.Decoder.GetChars%2A>です。 設定の必要があるアプリケーションでは、データ ストリームの処理が終わったら、 `flush` パラメーターを `true` 状態情報がフラッシュされるかどうかを確認します。 この設定では、デコーダーは、データ ブロックの末尾に無効なバイトを無視し、内部バッファーをクリアします。  
  
 計算する正確なバッファーのサイズを `GetChars` 必要と結果の文字を格納するアプリケーションを使用する必要があります <xref:System.Text.Decoder.GetCharCount%2A>します。  
  
 場合 `GetChars` で呼び出された `flush` 設定 `false`, 、デコーダーが内部バッファーにデータ ブロックの末尾にある後続バイトを格納し、次のデコード操作に使用します。 アプリケーションを呼び出す必要があります `GetCharCount` 呼び出す前にすぐにデータのブロックに `GetChars` 同じブロックに対して、前のブロックからの後続バイトが計算に含まれるようにします。  
  
 入力ストリームの数のセグメントに変換する、アプリケーションがある場合は、使用を検討して、 <xref:System.Text.Decoder.Convert%2A> メソッドです。<xref:System.Text.Decoder.GetChars%2A> 出力バッファーが十分でない場合、例外がスローされますが、 <xref:System.Text.Decoder.Convert%2A> はできるだけ多くの領域を入力し、読み取られたバイトと書き込まれる文字数を返します。 参照してください、 <xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> 他のコメントのトピックです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。  
  
 または  
  
 <paramref name="chars" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="charCount" /> 結果の文字数より少ない。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte*,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public abstract int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="byteIndex">デコードする最初のバイトのインデックス。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字のセットを格納する文字配列。</param>
        <param name="charIndex">結果の文字のセットを書き込む開始位置のインデックス。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した文字配列に指定したバイト配列からバイトの内部バッファーのバイト シーケンスをデコードします。</summary>
        <returns>
          <paramref name="chars" /> に書き込まれた実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注意して、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> オブジェクトへの呼び出しの間で状態を保存する [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A>です。 設定の必要があるアプリケーションでは、データ ストリームの処理が終わったら、 `flush` パラメーターを `true` 状態情報がフラッシュされるかどうかを確認します。 この設定では、デコーダーは、データ ブロックの末尾に無効なバイトを無視し、内部バッファーをクリアします。  
  
 計算する正確な配列のサイズを `GetChars` 必要と結果の文字を格納するアプリケーションを使用する必要があります [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetCharCount%2A>します。  
  
 場合 `GetChars` で呼び出された `flush` 設定 `false`, 、デコーダーが内部バッファーにデータ ブロックの末尾にある後続バイトを格納し、次のデコード操作に使用します。 アプリケーションを呼び出す必要があります `GetCharCount` 呼び出す前にすぐにデータのブロックに `GetChars` 同じブロックに対して、前のブロックからの後続バイトが計算に含まれるようにします。  
  
 入力ストリームの数のセグメントに変換する、アプリケーションがある場合は、使用を検討して、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> メソッドです。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A> 出力バッファーが十分でない場合、例外がスローされますが、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> はできるだけ多くの領域を入力し、読み取られたバイトと書き込まれる文字数を返します。 参照してください、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> 他のコメントのトピックです。  
  
   
  
## 例  
 次の例では、バイト配列から要素の範囲をデコードし、Unicode 文字配列内に格納する方法を示します。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetCharCount%2A> メソッドは、文字配列にデコードされた要素を格納するために必要な数の計算に使用される `bytes`します。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A> メソッドは、バイト配列に指定された要素をデコードし、新しい文字配列に格納します。  
  
 [!code-cpp[System.Text.Decoder.GetChars Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.Decoder.GetChars Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.Decoder.GetChars Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.Decoder.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。  
  
 または  
  
 <paramref name="chars" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" /> または <paramref name="byteCount" /> または <paramref name="charIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="byteindex" /> <paramref name="byteCount" /> で有効な範囲を表していません <paramref name="bytes" />します。  
  
 または  
  
 <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="chars" /> 十分な容量がない <paramref name="charIndex" /> に結果の文字を合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public virtual int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex, bool flush);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex, bool flush) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="flush" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="byteIndex">デコードする最初のバイトのインデックス。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字のセットを格納する文字配列。</param>
        <param name="charIndex">結果の文字のセットを書き込む開始位置のインデックス。</param>
        <param name="flush">
          <see langword="true" /> 変換後に、デコーダーの内部状態をクリアするにはそれ以外の場合、 <see langword="false" />です。</param>
        <summary>派生クラスでオーバーライドされた場合は、指定した文字配列に指定したバイト配列からバイトの内部バッファーのバイト シーケンスをデコードします。 パラメーターでは、変換後、デコーダーの内部状態をクリアするかどうかを示します。</summary>
        <returns>実際に書き込まれた文字数、 <paramref name="chars" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 注意して、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> オブジェクトへの呼び出しの間で状態を保存する [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A>です。 設定の必要があるアプリケーションでは、データ ストリームの処理が終わったら、 `flush` パラメーターを `true` 状態情報がフラッシュされるかどうかを確認します。 この設定では、デコーダーは、データ ブロックの末尾に無効なバイトを無視し、内部バッファーをクリアします。  
  
 計算する正確な配列のサイズを `GetChars` 必要と結果の文字を格納するアプリケーションを使用する必要があります [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetCharCount%2A>します。  
  
 場合 `GetChars` で呼び出された `flush` 設定 `false`, 、デコーダーが内部バッファーにデータ ブロックの末尾にある後続バイトを格納し、次のデコード操作に使用します。 アプリケーションを呼び出す必要があります `GetCharCount` 呼び出す前にすぐにデータのブロックに `GetChars` 同じブロックに対して、前のブロックからの後続バイトが計算に含まれるようにします。  
  
 入力ストリームの数のセグメントに変換する、アプリケーションがある場合は、使用を検討して、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> メソッドです。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.GetChars%2A> 出力バッファーが十分でない場合、例外がスローされますが、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder.Convert%2A> はできるだけ多くの領域を入力し、読み取られたバイトと書き込まれる文字数を返します。 参照してください、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoding.GetChars%2A?displayProperty=fullName> 他のコメントのトピックです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> が <see langword="null " />\(<see langword="Nothing" />\) です。  
  
 または  
  
 <paramref name="chars" /> が <see langword="null " />\(<see langword="Nothing" />\) です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" /> または <paramref name="byteCount" /> または <paramref name="charIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="byteindex" /> <paramref name="byteCount" /> で有効な範囲を表していません <paramref name="bytes" />します。  
  
 または  
  
 <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="chars" /> 十分な容量がない <paramref name="charIndex" /> に結果の文字を合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Decoder.Fallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.Decoder.GetCharCount(System.Byte[],System.Int32,System.Int32,System.Boolean)" />
        <altmember cref="M:System.Text.Decoder.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.Decoder.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、その初期状態に戻す、デコーダーを設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドの内部状態をクリアする、 <xref:System.Text.Decoder> オブジェクトです。 メソッドを前回呼び出したときから保持状態情報をクリアする <xref:System.Text.Decoder.GetChars%2A> または <xref:System.Text.Decoder.Convert%2A>, も含め、末尾の前のデータ ブロックの末尾のバイト。  
  
 アプリケーションを呼び出す必要があります、 <xref:System.Text.Decoder.Reset%2A> メソッドによって例外がスローされた後も同じデコーダーを再利用する必要がある場合 <xref:System.Text.Decoder.GetChars%2A>, 、<xref:System.Text.Decoder.Convert%2A>, 、または <xref:System.Text.Decoder.GetCharCount%2A>, 、またはデコーダーがストリームに切り替え、別のストリームのデコードを開始します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字列または文字の配列にエンコード済みバイト シーケンスに変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合、バイト シーケンスを文字のセットにデコードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされた場合、バイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>