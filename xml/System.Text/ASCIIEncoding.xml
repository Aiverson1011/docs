<Type Name="ASCIIEncoding" FullName="System.Text.ASCIIEncoding">
  <TypeSignature Language="C#" Value="public class ASCIIEncoding : System.Text.Encoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ASCIIEncoding extends System.Text.Encoding" />
  <TypeSignature Language="DocId" Value="T:System.Text.ASCIIEncoding" />
  <AssemblyInfo>
    <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Text.Encoding</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Unicode 文字の ASCII 文字エンコードを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 エンコーディングは、Unicode 文字のセットをバイト シーケンスに変換するプロセスです。 デコードは、Unicode 文字のセットにエンコードされたバイト シーケンスを変換するプロセスです。  
  
 <xref:System.Text.ASCIIEncoding> Windows コード ページ 20127 に対応します。 ASCII は、7 ビットのエンコーディングであるために、ASCII 文字は、u\+0000 ~ U \+ 007F から下位 128 Unicode 文字に制限されます。 によって返される既定のエンコーダーを使用する場合、 <xref:System.Text.Encoding.ASCII%2A?displayProperty=fullName> プロパティまたは <xref:System.Text.ASCIIEncoding.%23ctor%2A> 、エンコード処理が実行される前に、コンス トラクター、その範囲外の文字は疑問符 \(?\) に置き換えられます。<xref:System.Text.ASCIIEncoding> クラスは、制限付きの文字セットのみをサポート、 <xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UnicodeEncoding>, 、および <xref:System.Text.UTF32Encoding> クラスは、グローバライズされたアプリケーションに適しています。 次の考慮事項が参考にして使用するかどうかを判断 <xref:System.Text.ASCIIEncoding>:  
  
-   一部のプロトコルは、ASCII または ASCII のサブセットが必要です。 このような場合の ASCII エンコードが適切です。  
  
-   8 ビットのエンコーディングが予想される場合、ASCII 入っていない可能性が、適切に選択します。 代わりに、ASCII ではなく UTF8 の使用を検討してください。 U\+0000 U \+ 007F を通じて、文字の結果が同じですがすべての Unicode 文字データの損失を回避する utf\-8 で表現できます。  
  
> [!CAUTION]
>  <xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 セキュリティ上の理由から、使用する必要があります <xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UnicodeEncoding>, 、または <xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
 <xref:System.Text.ASCIIEncoding.GetByteCount%2A> メソッドでは、Unicode 文字のセットをエンコードで発生するまでのバイト数を決定し、 <xref:System.Text.ASCIIEncoding.GetBytes%2A> メソッドでは、実際のエンコードを実行します。  
  
 同様に、 <xref:System.Text.ASCIIEncoding.GetCharCount%2A> メソッドは、バイト シーケンスをデコード中に発生する文字数を決定し、 <xref:System.Text.ASCIIEncoding.GetChars%2A> と <xref:System.Text.ASCIIEncoding.GetString%2A> メソッドは、実際のデコードを実行します。  
  
 既定値 <xref:System.Text.ASCIIEncoding> コンス トラクター自体では、アプリケーションの適切な動作を持たない可能性があります。 ことを検討することができます、 <xref:System.Text.Encoding.EncoderFallback%2A> または <xref:System.Text.Encoding.DecoderFallback%2A> プロパティを <xref:System.Text.EncoderExceptionFallback> または <xref:System.Text.DecoderExceptionFallback> を 8 ビットが設定されたシーケンスを防ぐためです。 カスタム動作もこのような場合の適切な場合があります。  
  
   
  
## 例  
 次の例では、Unicode 文字を ASCII にエンコードする方法を示します。 アプリケーションで使用するときに発生するデータが失われることを確認 <xref:System.Text.ASCIIEncoding> ASCII の範囲外の Unicode 文字をエンコードします。  
  
 [!code-cpp[System.Text.ASCIIEncoding Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CPP/snippet.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/CS/snippet.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding Example/VB/snippet.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.Decoder" />
    <altmember cref="T:System.Text.Encoder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ASCIIEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Text.ASCIIEncoding" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!CAUTION]
>  The <xref:System.Text.ASCIIEncoding> class does not provide error detection. For security reasons, you should use the <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, or <xref:System.Text.UTF32Encoding> class and enable error detection.  
  
 If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref:System.Text.EncoderReplacementFallback> and <xref:System.Text.DecoderReplacementFallback> classes to replace every character outside the range of U\+0000 through U\+007F with a question mark \(?\). Instead, you can call the <xref:System.Text.Encoding.GetEncoding%28System.Int32%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> or <xref:System.Text.Encoding.GetEncoding%28System.String%2CSystem.Text.EncoderFallback%2CSystem.Text.DecoderFallback%29?displayProperty=fullName> method and pass it <xref:System.Text.EncoderExceptionFallback> and <xref:System.Text.DecoderExceptionFallback> objects to use exception fallback.  
  
> [!NOTE]
>  <xref:System.Text.ASCIIEncoding> supports only the Unicode character values between U\+0000 and U\+007F. Therefore, <xref:System.Text.UTF8Encoding>, <xref:System.Text.UnicodeEncoding>, and <xref:System.Text.UTF32Encoding> are better suited for globalized applications.  
  
   
  
## 例  
 The following example demonstrates how to create a new <xref:System.Text.ASCIIEncoding> instance and display the name of the encoding.  
  
 [!code-cpp[System.Text.ASCIIEncoding.ctor Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CPP/ctor.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.ctor Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/CS/ctor.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.ctor Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.ctor Example/VB/ctor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (string chars);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(string chars) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</param>
        <summary>指定した <see cref="T:System.String" /> 内の文字をエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して <xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Text.ASCIIEncoding.GetByteCount%2A> メソッドを使用して文字列をエンコードするために必要なバイト数を返す <xref:System.Text.ASCIIEncoding>します。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetByteCount2 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CPP/getbytecount-string.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetByteCount2 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/CS/getbytecount-string.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetByteCount2 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount2 Example/VB/getbytecount-string.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char* chars, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char* chars, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコードする最初の文字へのポインター。</param>
        <param name="count">エンコードする文字数。</param>
        <summary>指定した文字ポインターで始まる文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して <xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetByteCount">
      <MemberSignature Language="C#" Value="public override int GetByteCount (char[] chars, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetByteCount(char[] chars, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している文字配列。</param>
        <param name="index">エンコードする最初の文字のインデックス。</param>
        <param name="count">エンコードする文字数。</param>
        <summary>指定した文字配列から文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
        <returns>指定した文字をエンコードすることによって生成されるバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。[GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
   
  
## 例  
 次の例では、使用して、 [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding.GetByteCount%2A> メソッドを使用して Unicode 文字の配列をエンコードするために必要なバイト数を返す [GetByteCount メソッド \(Char\<xref:System.Text.ASCIIEncoding>します。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetByteCount1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CPP/getbytecount-char[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetByteCount1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/CS/getbytecount-char[]-int32-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetByteCount1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetByteCount1 Example/VB/getbytecount-char[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="chars" /> において有効な範囲を表していません。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char* chars, int charCount, byte* bytes, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char* chars, int32 charCount, unsigned int8* bytes, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコードする最初の文字へのポインター。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスの書き込みを開始する位置へのポインター。</param>
        <param name="byteCount">書き込む最大バイト数。</param>
        <summary>指定した文字ポインターで始まる文字のセットを、指定したバイト ポインターを開始位置として格納されるバイト シーケンスにエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> によって示される位置に書き込まれる実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して <xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 <xref:System.Text.Decoder> または <xref:System.Text.Encoder> によって提供される、 <xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは <xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 <xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 U \+ 007F より大きい任意の Unicode 文字が ASCII の疑問符 \(\) に変換されます \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用するアプリケーションが推奨 <xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UnicodeEncoding>, 、または <xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> または <paramref name="byteCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="byteCount" /> 結果のバイト数より少ない。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(char[] chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している文字配列。</param>
        <param name="charIndex">エンコードする最初の文字のインデックス。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスを格納するバイト配列。</param>
        <param name="byteIndex">結果のバイト シーケンスを書き込む開始位置のインデックス。</param>
        <summary>指定した文字配列に格納されている文字のセットを指定したバイト配列にエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> に書き込まれた実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。[GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.Decoder> または [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.Encoder> によって提供される、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 U \+ 007F より大きい任意の Unicode 文字が ASCII の疑問符 \(\) としてエンコード \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用するアプリケーションが推奨 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF8Encoding>, 、[GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UnicodeEncoding>, 、または [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
   
  
## 例  
 次の例では、使用して、 [GetBytes メソッド \(Char\[\], Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetBytes%2A> メソッドを文字列から文字の範囲をエンコードし、バイト配列の要素の範囲内でエンコードされた文字を格納します。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetBytes1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CPP/getbytes-string-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetBytes1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/CS/getbytes-string-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetBytes1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes1 Example/VB/getbytes-string-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="chars" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。  
  
 または  
  
 <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="bytes" /> 十分な容量がない <paramref name="byteIndex" /> に結果のバイトを合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetBytes">
      <MemberSignature Language="C#" Value="public override int GetBytes (string chars, int charIndex, int charCount, byte[] bytes, int byteIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetBytes(string chars, int32 charIndex, int32 charCount, unsigned int8[] bytes, int32 byteIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.String" />
        <Parameter Name="charIndex" Type="System.Int32" />
        <Parameter Name="charCount" Type="System.Int32" />
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="chars">エンコード対象の文字のセットを格納している <see cref="T:System.String" />。</param>
        <param name="charIndex">エンコードする最初の文字のインデックス。</param>
        <param name="charCount">エンコードする文字数。</param>
        <param name="bytes">結果のバイト シーケンスを格納するバイト配列。</param>
        <param name="byteIndex">結果のバイト シーケンスを書き込む開始位置のインデックス。</param>
        <summary>指定した <see cref="T:System.String" /> の文字セットを、指定したバイト配列にエンコードします。</summary>
        <returns>
          <paramref name="bytes" /> に書き込まれた実際のバイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetBytes%2A> 結果のバイトを格納するアプリケーションを使用して [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetByteCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。[GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetByteCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.Decoder> または [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.Encoder> によって提供される、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 U \+ 007F より大きい任意の Unicode 文字が ASCII の疑問符 \(\) としてエンコード \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用するアプリケーションが推奨 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF8Encoding>, 、[GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UnicodeEncoding>, 、または [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
   
  
## 例  
 次の例では、使用して、 [GetBytes メソッド \(String, Int32, Int32, Byte\<xref:System.Text.ASCIIEncoding.GetBytes%2A> 一連の Unicode 文字配列から要素をエンコードおよびバイト配列の要素の範囲内でエンコードされたバイトを格納する方法です。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetBytes2\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CPP/getbytes-char[]-int32-int32-byte[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetBytes2\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/CS/getbytes-char[]-int32-int32-byte[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetBytes2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetBytes2/VB/getbytes-char[]-int32-int32-byte[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="s" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charIndex" /> または <paramref name="charCount" /> または <paramref name="byteIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="charIndex" /> および <paramref name="charCount" /> は <paramref name="chars" /> において有効な範囲を表していません。  
  
 または  
  
 <paramref name="byteIndex" /> が <paramref name="bytes" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="bytes" /> 十分な容量がない <paramref name="byteIndex" /> に結果のバイトを合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.EncoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.EncoderFallback" /> が <see cref="T:System.Text.EncoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte* bytes, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8* bytes, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>指定したバイト ポインターで始まるバイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
        <returns>指定したバイト シーケンスをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.ASCIIEncoding.GetChars%2A> 結果の文字を格納するアプリケーションを使用して <xref:System.Text.ASCIIEncoding.GetCharCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>します。<xref:System.Text.ASCIIEncoding.GetCharCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="count" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="Overload:System.Text.ASCIIEncoding.GetChars" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetCharCount">
      <MemberSignature Language="C#" Value="public override int GetCharCount (byte[] bytes, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharCount(unsigned int8[] bytes, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="index">デコードする最初のバイトのインデックス。</param>
        <param name="count">デコードするバイト数。</param>
        <summary>指定したバイト配列からバイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
        <returns>指定したバイト シーケンスをデコードすることによって生成される文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetChars%2A> 結果の文字を格納するアプリケーションを使用して [GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetCharCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります [GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>します。[GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetCharCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 [GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
   
  
## 例  
 次の例では、使用して、 [GetCharCount メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetCharCount%2A> を文字数を返すメソッドは、バイト配列の要素の範囲をデコードして生成されました。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetCharCount Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CPP/getcharcount-byte[]-int32-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetCharCount Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/CS/getcharcount-byte[]-int32-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetCharCount Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetCharCount Example/VB/getcharcount-byte[]-int32-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="Overload:System.Text.ASCIIEncoding.GetChars" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte* bytes, int byteCount, char* chars, int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8* bytes, int32 byteCount, char* chars, int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte*" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char*" />
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコードする最初のバイトへのポインター。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字セットの書き込みを開始する位置へのポインター。</param>
        <param name="charCount">書き込む文字の最大数。</param>
        <summary>指定したバイト ポインターで始まるバイト シーケンスを、指定した文字ポインターを開始位置として格納される文字のセットにデコードします。</summary>
        <returns>
          <paramref name="chars" /> によって示される位置に書き込まれる実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する <xref:System.Text.ASCIIEncoding.GetChars%2A> 結果の文字を格納するアプリケーションを使用して <xref:System.Text.ASCIIEncoding.GetCharCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>します。<xref:System.Text.ASCIIEncoding.GetCharCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 <xref:System.Text.Decoder> または <xref:System.Text.Encoder> によって提供される、 <xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは <xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 <xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 すべてのバイトを 16 進数の 0x7F よりも大きいが Unicode の疑問符 \(\) としてデコード \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用するアプリケーションが推奨 <xref:System.Text.UTF8Encoding>, 、<xref:System.Text.UnicodeEncoding>, 、または <xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> または <paramref name="charCount" /> が 0 未満です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="charCount" /> 結果の文字数より少ない。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
        <altCompliant cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetChars">
      <MemberSignature Language="C#" Value="public override int GetChars (byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetChars(unsigned int8[] bytes, int32 byteIndex, int32 byteCount, char[] chars, int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="byteIndex">デコードする最初のバイトのインデックス。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <param name="chars">結果の文字のセットを格納する文字配列。</param>
        <param name="charIndex">結果の文字のセットを書き込む開始位置のインデックス。</param>
        <summary>指定したバイト配列に格納されているバイト シーケンスを指定した文字配列にデコードします。</summary>
        <returns>
          <paramref name="chars" /> に書き込まれた実際の文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 必要な正確な配列のサイズを計算する [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetChars%2A> 結果の文字を格納するアプリケーションを使用して [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetCharCount%2A>します。 配列の最大サイズを計算する、アプリケーションを使用する必要があります [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>します。[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetCharCount%2A> 一般的に、メソッドより少ないメモリの割り当て中に、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Decoder> または [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.Encoder> によって提供される、 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 すべてのバイトを 16 進数の 0x7F よりも大きいが Unicode の疑問符 \(\) としてデコード \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用するアプリケーションが推奨 [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF8Encoding>, 、[GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UnicodeEncoding>, 、または [GetChars メソッド \(Byte\[\], Int32, Int32, Char\<xref:System.Text.UTF32Encoding> し、エラーの検出を有効にします。  
  
   
  
## 例  
 次の例では、バイト配列から要素の範囲をデコードし、一連の Unicode 文字配列の要素に結果を格納する方法を示します。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetChars Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CPP/getchars-byte[]-int32-int32-char[]-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetChars Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/CS/getchars-byte[]-int32-int32-char[]-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetChars Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetChars Example/VB/getchars-byte[]-int32-int32-char[]-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="chars" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteIndex" /> または <paramref name="byteCount" /> または <paramref name="charIndex" /> が 0 未満です。  
  
 または  
  
 <paramref name="byteindex" /> <paramref name="byteCount" /> で有効な範囲を表していません <paramref name="bytes" />します。  
  
 または  
  
 <paramref name="charIndex" /> が <paramref name="chars" /> の有効なインデックスではありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="chars" /> 十分な容量がない <paramref name="charIndex" /> に結果の文字を合わせて、配列の末尾にします。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetDecoder">
      <MemberSignature Language="C#" Value="public override System.Text.Decoder GetDecoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Decoder GetDecoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetDecoder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Decoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ASCII でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換するデコーダーを取得します。</summary>
        <returns>A <see cref="T:System.Text.Decoder" /> を ASCII でエンコードされたバイト シーケンスを Unicode 文字のシーケンスに変換します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.Decoder.GetChars%2A?displayProperty=fullName> メソッドと同様の方法での文字の連続ブロックにバイトの連続したブロックを変換する、 <xref:System.Text.ASCIIEncoding.GetChars%2A> このクラスのメソッドです。 ただし、 <xref:System.Text.Decoder> ブロックにまたがるバイト シーケンスを正しくデコードすることができますので、呼び出しの間で状態情報を保持します。<xref:System.Text.Decoder> もデータ ブロックの末尾にある末尾のバイトを保持し、次のデコード操作で末尾のバイトを使用します。 したがって、 <xref:System.Text.ASCIIEncoding.GetDecoder%2A> と <xref:System.Text.ASCIIEncoding.GetEncoder%2A> の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためには、ネットワーク転送とファイルの操作に便利です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Decoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetEncoder">
      <MemberSignature Language="C#" Value="public override System.Text.Encoder GetEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Text.Encoder GetEncoder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetEncoder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoder</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unicode 文字のシーケンスを ASCII でエンコードされたバイト シーケンスに変換するエンコーダーを取得します。</summary>
        <returns>
          <see cref="T:System.Text.Encoder" /> Unicode 文字のシーケンスを ASCII でエンコードされたバイト シーケンスに変換します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.Encoder.GetBytes%2A?displayProperty=fullName> メソッドと同様の方法のバイト数の連続ブロックに文字の連続したブロックを変換する、 <xref:System.Text.ASCIIEncoding.GetBytes%2A> このクラスのメソッドです。 ただし、 <xref:System.Text.Encoder> ブロックにまたがる文字のシーケンスを正しくエンコードすることができますので、呼び出しの間で状態情報を保持します。<xref:System.Text.Encoder> も保持末尾のデータ ブロックの末尾に文字を使用して末尾の文字の次のエンコード操作します。 たとえば、データ ブロックが上位サロゲートで終了し、一致する下位サロゲートが次のデータ ブロックしていることがあります。 したがって、 <xref:System.Text.ASCIIEncoding.GetDecoder%2A> と <xref:System.Text.ASCIIEncoding.GetEncoder%2A> の完全なデータ ストリームではなくデータ ブロックを頻繁にこれらの操作を処理するためには、ネットワーク転送とファイルの操作に便利です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Text.Encoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxByteCount">
      <MemberSignature Language="C#" Value="public override int GetMaxByteCount (int charCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxByteCount(int32 charCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charCount">エンコードする文字数。</param>
        <summary>指定した文字数をエンコードすることによって生成される最大バイト数を計算します。</summary>
        <returns>指定した文字数をエンコードすることによって生成される最大バイト数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.ASCIIEncoding.GetByteCount%2A> メソッドで必要な正確な配列のサイズを計算する、 <xref:System.Text.ASCIIEncoding.GetBytes%2A> が結果のバイトを格納する方法、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは、配列の最大サイズを計算します。<xref:System.Text.ASCIIEncoding.GetByteCount%2A> メソッドは通常より少ないメモリを割り当てますが、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドは通常、高速に実行されます。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 現在選択されている最悪のケースを含む、最悪のケースの数は、 <xref:System.Text.EncoderFallback>です。  置換フォールバックが大きくなる可能性の文字列を選択した場合 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 大きな値を返すことができます。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> メソッドが以前のエンコード操作にサロゲートが残っている可能性があると見なします。 このため場合、 <xref:System.Text.ASCIIEncoding> オブジェクトは既定値の置換フォールバックを使用またはメソッドが返す場合は 1 つの可能なフォールバック文字をカスタムの置換フォールバックを定義すると、 `charCount` \+ 1 です。 場合、 <xref:System.Text.ASCIIEncoding> オブジェクトは、1 つ以上の可能なフォールバック文字を置換フォールバックを使用して、メソッドが返されます *n* \* \(`charCount` \+ 1\)、次のよう *n* フォールバック文字の最大数です。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 関係を持たない <xref:System.Text.ASCIIEncoding.GetChars%2A>します。 使用する類似の機能が、アプリケーションに必要なかどうかは <xref:System.Text.ASCIIEncoding.GetChars%2A>, 、それを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A>します。  
  
> [!NOTE]
>  `GetMaxByteCount(N)` 同じ値とは限りません `N* GetMaxByteCount(1)`します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> 指定数の文字をエンコードするために必要なバイト数を計算する方法です。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetMaxByteCount Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CPP/getmaxbytecount-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetMaxByteCount Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/CS/getmaxbytecount-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetMaxByteCount Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxByteCount Example/VB/getmaxbytecount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="charCount" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetEncoder" />
      </Docs>
    </Member>
    <Member MemberName="GetMaxCharCount">
      <MemberSignature Language="C#" Value="public override int GetMaxCharCount (int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetMaxCharCount(int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="byteCount">デコードするバイト数。</param>
        <summary>指定したバイト数をデコードすることによって生成される最大文字数を計算します。</summary>
        <returns>指定したバイト数をデコードすることによって生成される最大文字数。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Text.ASCIIEncoding.GetCharCount%2A> メソッドで必要な正確な配列のサイズを計算する、 <xref:System.Text.ASCIIEncoding.GetChars%2A> 文字では、その結果を格納する方法、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは、配列の最大サイズを計算します。<xref:System.Text.ASCIIEncoding.GetCharCount%2A> メソッドでは、メモリも減り、一般が割り当てるときに、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドは通常、高速に実行されます。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> 現在選択されている最悪のケースを含む、最悪のケースの数を取得 <xref:System.Text.DecoderFallback>します。 デコーダーのフォールバックが存在する場合のフォールバック最大長を持つ *n*, 、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドが返す *n* \* `byteCount`します。  
  
 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> 関係を持たない <xref:System.Text.ASCIIEncoding.GetBytes%2A>します。 使用する類似の機能が、アプリケーションに必要なかどうかは <xref:System.Text.ASCIIEncoding.GetBytes%2A>, 、それを使用する必要があります <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A>します。  
  
> [!NOTE]
>  `GetMaxCharCount(N)` 同じ値とは限りません `N* GetMaxCharCount(1)`します。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> メソッドを指定したバイト数をデコードするために必要な文字の最大数を計算します。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetMaxCharCount Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CPP/getmaxcharcount-int32.cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetMaxCharCount Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/CS/getmaxcharcount-int32.cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetMaxCharCount Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetMaxCharCount Example/VB/getmaxcharcount-int32.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="byteCount" /> が 0 未満です。  
  
 または  
  
 結果のバイト数が、整数として返すことのできる最大数を超えています。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public override string GetString (byte[] bytes, int byteIndex, int byteCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetString(unsigned int8[] bytes, int32 byteIndex, int32 byteCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bytes" Type="System.Byte[]" />
        <Parameter Name="byteIndex" Type="System.Int32" />
        <Parameter Name="byteCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bytes">デコード対象のバイト シーケンスが格納されたバイト配列。</param>
        <param name="byteIndex">デコードする最初のバイトのインデックス。</param>
        <param name="byteCount">デコードするバイト数。</param>
        <summary>バイト配列に格納されているある範囲のバイトを文字列にデコードします。</summary>
        <returns>指定したバイト シーケンスのデコード結果が格納されている <see cref="T:System.String" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 シーケンシャル ブロック内でのみ使用できるは、ストリームから読み取ったデータなど、変換するデータ。 この場合、またはデータの量が小さなブロックに分割する必要があることが非常に大きい場合は、アプリケーションが使用する必要があります、 [GetString メソッド \(Byte\<xref:System.Text.Decoder> または [GetString メソッド \(Byte\<xref:System.Text.Encoder> によって提供される、 [GetString メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetDecoder%2A> メソッドまたは [GetString メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetEncoder%2A> メソッドをそれぞれします。  
  
 [GetString メソッド \(Byte\<xref:System.Text.ASCIIEncoding> エラーの検出は提供されません。 すべてのバイトを 16 進数の 0x7F よりも大きいが Unicode の疑問符 \(\) としてデコード \("?"\) です。  
  
> [!CAUTION]
>  セキュリティ上の理由から、使用する必要があります、 [GetString メソッド \(Byte\<xref:System.Text.UTF8Encoding>, 、[GetString メソッド \(Byte\<xref:System.Text.UnicodeEncoding>, 、または [GetString メソッド \(Byte\<xref:System.Text.UTF32Encoding> クラスし、使用する代わりに、エラーの検出を有効にする、 [GetString メソッド \(Byte\<xref:System.Text.ASCIIEncoding> クラスです。  
  
   
  
## 例  
 次の例では、使用して、 [GetString メソッド \(Byte\<xref:System.Text.ASCIIEncoding.GetString%2A> にバイト配列に変換するメソッド、 [GetString メソッド \(Byte\<xref:System.String>です。  
  
 [!code-cpp[System.Text.ASCIIEncoding.GetString1 Example\#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CPP/getstring-byte[].cpp#1)]
 [!code-csharp[System.Text.ASCIIEncoding.GetString1 Example\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/CS/getstring-byte[].cs#1)]
 [!code-vb[System.Text.ASCIIEncoding.GetString1 Example\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Text.ASCIIEncoding.GetString1 Example/VB/getstring-byte[].vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="bytes" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> または <paramref name="count" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> および <paramref name="count" /> は <paramref name="bytes" /> において有効な範囲を表していません。</exception>
        <exception cref="T:System.Text.DecoderFallbackException">フォールバックが発生しました \(詳細については、「[Understanding Encodings](http://msdn.microsoft.com/ja-jp/bf6d9823-4c2d-48af-b280-919c5af66ae9)」を参照してください\)。  
  
 および  
  
 <see cref="P:System.Text.Encoding.DecoderFallback" /> が <see cref="T:System.Text.DecoderExceptionFallback" /> に設定されます。</exception>
        <altmember cref="M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetDecoder" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleByte">
      <MemberSignature Language="C#" Value="public override bool IsSingleByte { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleByte" />
      <MemberSignature Language="DocId" Value="P:System.Text.ASCIIEncoding.IsSingleByte" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のエンコーディングが 1 バイト コード ポイントを使用するかどうかを示す値を取得します。</summary>
        <value>このプロパティは常に <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する代わりに、 <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> エンコード操作およびデコード操作の文字配列のサイズをバイト配列のサイズを決定するプロパティ \(バイト配列のサイズができるように、 <xref:System.Text.ASCIIEncoding.IsSingleByte%2A> \* エンコードする文字数\)、呼び出す必要があります、 <xref:System.Text.ASCIIEncoding.GetByteCount%2A> または <xref:System.Text.ASCIIEncoding.GetMaxByteCount%2A> エンコード操作のメソッドと <xref:System.Text.ASCIIEncoding.GetCharCount%2A> または <xref:System.Text.ASCIIEncoding.GetMaxCharCount%2A> デコード操作のメソッドです。 これらのメソッドは、 <xref:System.Text.ASCIIEncoding> 、必要な配列のサイズを計算するときに、オブジェクトの置換フォールバック ストラテジです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)" />
        <altmember cref="M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChars">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイト シーケンスを文字のセットにデコードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetBytes">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字のセットをバイト シーケンスにエンコードします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetByteCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>文字のセットをエンコードすることによって生成されるバイト数を計算します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="GetCharCount">
      <AssemblyInfo>
        <AssemblyName>System.Text.Encoding.Extensions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>バイト シーケンスをデコードすることによって生成される文字数を計算します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>