<Type Name="MessageEnumerator" FullName="System.Messaging.MessageEnumerator">
  <TypeSignature Language="C#" Value="public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>メッセージ キュー内のメッセージを列挙するための順方向専用カーソルを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用する <xref:System.Messaging.MessageEnumerator> キュー内のメッセージの動的な対話のためです。 メソッドで使用できる、 <xref:System.Messaging.MessageQueue> クラスは、いずれかを返すことができます、 <xref:System.Messaging.MessageEnumerator> と呼ばれますが、キューまたはキューの指定された時点のスナップショット \- で時のコピーを格納する配列内のメッセージの動的リストを指定したメソッドを指定します。  
  
 静的なスナップショットとは異なり、列挙子は、コレクションを変更することができます。 使用して、 <xref:System.Messaging.MessageEnumerator>, 、キューからメッセージを削除すること、および変更がすぐにキューに反映されます。  
  
 キューを照会したときに、列挙子は、キューからメッセージを削除できません。 現在のカーソル位置にあるメッセージに関する情報が返されますが、キュー メッセージになります。  
  
 A <xref:System.Messaging.MessageEnumerator> カーソル、動的なリストの先頭に初期化します。 一覧の順序は、メッセージの優先順位に従って、キュー内のメッセージの順序と同じです。 キューの最初のメッセージにカーソルを移動するにを呼び出して <xref:System.Messaging.MessageEnumerator.MoveNext%2A>します。 使用することができます、列挙子が初期化された後 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 残りのメッセージにします。 使用可能になるにタイムアウトを渡すことによって、メッセージに対して待機するかどうかを指定することができます、 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> メソッドです。  
  
 列挙子は動的であるために、カーソルの現在位置を \(たとえば、低優先順位\)、ためより後に追加するメッセージは、列挙子からアクセスできます。 カーソルの現在位置にアクセスできない前に挿入されるメッセージです。 ステップ後退することはできません、 <xref:System.Messaging.MessageEnumerator>です。 カーソルでは、順方向専用の移動が可能です。<xref:System.Messaging.MessageEnumerator.Reset%2A> メソッドを使用すると、キューの先頭にカーソルを置きます。  
  
 インスタンスを <xref:System.Messaging.MessageEnumerator> を特定のキューは独立して動作します。 2 つを作成する <xref:System.Messaging.MessageEnumerator> インスタンスが同じキューに適用されます。 変更を 1 つ <xref:System.Messaging.MessageEnumerator> キュー内のメッセージもはすぐに反映されません 2 番目の列挙子に 2 つ目の列挙子が 1 つ目の前に配置されている場合。 ただし、2 つの列挙子が同じ位置にあるし、その位置にあるメッセージを削除うちの 1 つ、例外がスローされます他の列挙子の値を取得しようとすると、 <xref:System.Messaging.MessageEnumerator.Current%2A> 削除メッセージのプロパティです。  
  
> [!NOTE]
>  インスタンスを作成する場合は、 <xref:System.Messaging.MessageQueue> と <xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> に設定 `true`, 、他のアプリケーションを変更できません、列挙子内のメッセージをキューに接続している間にします。  
  
   
  
## 例  
 次の例は、キューにメッセージの動的リストを取得しですべてのメッセージのカウント、 <xref:System.Messaging.Message.Priority%2A> プロパティに設定 <xref:System.Messaging.MessagePriority.Lowest?displayProperty=fullName>します。  
  
 [!code-cpp[MessageQueue.GetMessageEnumerator\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CPP/mqgetmessageenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageEnumerator\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/CS/mqgetmessageenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageEnumerator\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageEnumerator/VB/mqgetmessageenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.Message" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator2" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子に関連付けられているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オペレーティング システムでは、カーソルの有効期間中にキューへの開いているハンドルを保持します。 列挙子の操作が完了したときに呼び出す <xref:System.Messaging.MessageEnumerator.Close%2A> ハンドルに関連付けられているリソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.Message Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.Message Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>その列挙子が指している現在の <see cref="T:System.Messaging.Message" /> を取得します。</summary>
        <value>現在のメッセージ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 列挙子が作成されると、これは、最初のメッセージより前に、の位置のキューの先頭を指します。 この場合、 <xref:System.Messaging.MessageEnumerator.Current%2A> が無効である場合は、アクセス、例外がスローされます。 呼び出す必要があります <xref:System.Messaging.MessageEnumerator.MoveNext%2A> にキュー内の最初のメッセージをカーソルを移動します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出す <see cref="P:System.Messaging.MessageEnumerator.Current" /> 最初の呼び出しの前に <see cref="M:System.Messaging.MessageEnumerator.MoveNext" />します。 カーソルは、メッセージの列挙体の最初の要素の前に位置します。  
  
 または  
  
 呼び出す <see cref="P:System.Messaging.MessageEnumerator.Current" /> への呼び出し後 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> 返しました <see langword="false" /> \(カーソルを示す、あるメッセージ列挙体の最後の要素の後\)。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">列挙子が現在指して不要になったメッセージが存在します。 削除された可能性があります。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="M:System.Messaging.MessageQueue.GetMessageEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="CursorHandle">
      <MemberSignature Language="C#" Value="public IntPtr CursorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int CursorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.CursorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>キューにメッセージを参照するために使用ネイティブ メッセージ キュー カーソル ハンドルを取得します。</summary>
        <value>ネイティブなカーソルのハンドルです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、列挙型へのネイティブ ハンドルを表します。 列挙子の操作が完了したときに呼び出す <xref:System.Messaging.MessageEnumerator.Close%2A> このリソースを解放します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">ハンドルが存在しません。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Messaging.MessageEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageEnumerator> to be reallocated for other purposes. For more information about <xref:System.Messaging.MessageEnumerator.Dispose%2A>, see [&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Messaging.MessageEnumerator" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public <xref:System.Messaging.MessageEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageEnumerator> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つは現在利用可能な場合は、キューでは、次のメッセージに、列挙子を進めます。</summary>
        <returns>
          <see langword="true" /> 列挙子が正常に次のメッセージに進んだ場合 <see langword="false" /> 、列挙子は、キューの末尾に達した場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、キューにメッセージが存在しないかどうかに直ちに返されます。 指定した待機する別のオーバー ロードがある <xref:System.TimeSpan> メッセージが到着するのです。  
  
 キューが空であるため、または、コレクション内の最後の要素より後に移動したため、メッセージを現在使用可能なことができない場合 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 返します `false` 呼び出し元のメソッドです。  
  
 作成時に、列挙子は概念的には、最初のメッセージ キュー、および最初の呼び出しの前に配置 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 、キューの最初のメッセージを表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューに固有の例外がスローされました。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <see cref="T:System.TimeSpan" /> を使用できる列挙子がキューの末尾に配置されている場合にメッセージを待機します。</param>
        <summary>次のメッセージ キュー内に列挙子を進めます。 列挙子が、キューの末尾に配置されている場合 <see cref="M:System.Messaging.MessageEnumerator.MoveNext" /> にメッセージが使用するか、指定されたタイムアウトになるまで待機します。</summary>
        <returns>
          <see langword="true" /> 列挙子は、次のメッセージに正常に進んだ場合 <see langword="false" /> 、列挙子は、キューの末尾に達していて、メッセージがで指定された時間内では使用可能なならない、 <paramref name="timeout" /> パラメーター。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このオーバー ロードは、キューにメッセージがない場合、またはカーソルが、キューの末尾に達した場合に待機します。 キューが空であるため、または、コレクション内の最後の要素より後に移動したため、メッセージを現在使用可能なことができない場合 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 指定されたタイムアウトを待機します。  
  
 場合は、キューの末尾にカーソルは既に <xref:System.Messaging.MessageEnumerator.MoveNext%2A> のみを返す `true` 指定した時間間隔内で新しいメッセージを受信する場合、キューに現在のすべてのメッセージより低い優先順位を持つし、は、キューの末尾に置かれます。 使用すると、オーバー ロードは、キュー内にさらにメッセージがないかどうかに直ちに返されます。  
  
 作成時に、列挙子は概念的には、列挙し、最初の呼び出しの最初のメッセージの前に配置 <xref:System.Messaging.MessageEnumerator.MoveNext%2A> には、列挙体の最初のメッセージを表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">タイムアウト パラメーターに指定された値が正しくありません。 負の数値を表している可能性があります。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューに固有の例外がスローされました。  
  
 または  
  
 タイムアウトの有効期限が切れました。</exception>
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageEnumerator.Reset" />
        <altmember cref="T:System.Messaging.Message" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RemoveCurrent">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>現在のメッセージをキューから削除して、呼び出し元のアプリケーションにメッセージを返します。 メッセージの削除は、キューから削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのオーバー ロードの動作が適用可能な場合にのみ、 <xref:System.Messaging.MessageEnumerator> を使用してインスタンスを取得、 <xref:System.Messaging.MessageQueue.GetMessageEnumerator2%2A>です。 使用しないで <xref:System.Messaging.MessageQueue.GetMessageEnumerator%2A> のインスタンスを取得する <xref:System.Messaging.MessageEnumerator> ようにこのメソッドは推奨されていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションまたは非トランザクション キューから現在のメッセージを削除し、呼び出し元のアプリケーションにメッセージを返します。 メッセージがキューに到達する指定されたタイムアウト値はありません。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所でメッセージを返します。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは 1 つの内部トランザクションを作成します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">
          <see cref="T:System.Messaging.MessageQueueTransaction" /> でメッセージを削除するトランザクションを指定するオブジェクト。</param>
        <summary>トランザクション キューから現在のメッセージを削除し、呼び出し元のアプリケーションにメッセージを返します。 メッセージがキューに到達する指定されたタイムアウト値はありません。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除してで定義された内部トランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返す、 `transaction` パラメーター。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 呼び出しによって削除されるすべてのメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> がキューに返されます。 トランザクションがコミットされるまで削除は取り消すことができません。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transaction" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="transactionType">いずれか、 <see cref="T:System.Messaging.MessageQueueTransactionType" /> メッセージと関連付けるトランザクション コンテキストの型を記述する値。</param>
        <summary>現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。 メッセージがキューに到達する指定されたタイムアウト値はありません。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除してで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返す、 `transactionType` パラメーター。  
  
 指定 `Automatic` の `transactionType` パラメーター外部トランザクション コンテキストが既にある場合は、メッセージの受信に使用するスレッドにアタッチします。 指定 `Single` 単一の内部トランザクションとメッセージを受信する場合。 指定できます `None` トランザクションのコンテキスト外でトランザクション キューからメッセージを受信する場合。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 呼び出しによって削除されるすべてのメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> がキューに返されます。 トランザクションがコミットされるまで削除は取り消すことができません。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="transactionType" /> パラメーターは、のいずれかではない、 <see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーです。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">メッセージがキューに到達するまで待機する時間間隔。</param>
        <summary>現在のメッセージをキューから削除して、呼び出し元のアプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返しますがすぐに。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所でメッセージを返します。 カーソルが、キューの末尾にある場合は、このメソッドのオーバー ロードを待つできるメッセージがあるかによって指定される間隔ことが、 `timeout` パラメーターの有効期限が切れました。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 トランザクション キューでこのオーバー ロードを呼び出すと、メッセージ キューは 1 つの内部トランザクションを作成します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された値、 <paramref name="timeout" /> パラメーターが無効です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの有効期限が切れました。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, class System.Messaging.MessageQueueTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transaction" Type="System.Messaging.MessageQueueTransaction" />
      </Parameters>
      <Docs>
        <param name="timeout">削除するメッセージに対して待機する時間間隔。</param>
        <param name="transaction">
          <see cref="T:System.Messaging.MessageQueueTransaction" /> メッセージのトランザクション コンテキストを指定するオブジェクト。</param>
        <summary>トランザクション キューから現在のメッセージを削除し、呼び出し元のアプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返しますがすぐに。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除し、カーソルの現在の場所でメッセージを返します。 カーソルが、キューの末尾にある場合は、このメソッドのオーバー ロードを待つできるメッセージがあるかによって指定される間隔ことが、 `timeout` パラメーターの有効期限が切れました。  
  
 呼び出しによって削除されるすべてのメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> がキューに返されます。 トランザクションがコミットされるまで削除は取り消すことができません。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された値、 <paramref name="timeout" /> パラメーターが無効です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="transaction" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの有効期限が切れました。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransaction" />
      </Docs>
    </Member>
    <Member MemberName="RemoveCurrent">
      <MemberSignature Language="C#" Value="public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Messaging.Message RemoveCurrent(valuetype System.TimeSpan timeout, valuetype System.Messaging.MessageQueueTransactionType transactionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.Message</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="transactionType" Type="System.Messaging.MessageQueueTransactionType" />
      </Parameters>
      <Docs>
        <param name="timeout">削除するメッセージに対して待機する時間間隔。</param>
        <param name="transactionType">いずれか、 <see cref="T:System.Messaging.MessageQueueTransactionType" /> メッセージと関連付けるトランザクション コンテキストの型を記述する値。</param>
        <summary>現在のメッセージをキューから削除し、呼び出し元のアプリケーションにメッセージを返します。 削除するメッセージがある場合、メソッドを返しますがすぐに。 それ以外の場合、メソッドは、新しいメッセージが到着する指定のタイムアウトを待機します。</summary>
        <returns>A <see cref="T:System.Messaging.Message" /> キュー内の最初のメッセージを参照します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 削除してで定義されたトランザクション コンテキストを使用して、カーソルの現在位置にあるメッセージを返す、 `transactionType` パラメーター。 カーソルが、キューの末尾にある場合は、このメソッドのオーバー ロードを待つできるメッセージがあるかによって指定される間隔ことが、 `timeout` パラメーターの有効期限が切れました。  
  
 指定 `Automatic` の `transactionType` パラメーター外部トランザクション コンテキストが既にある場合は、メッセージの受信に使用するスレッドにアタッチします。 指定 `Single` 単一の内部トランザクションとメッセージを受信する場合。 指定できます `None` トランザクションのコンテキスト外でトランザクション キューからメッセージを受信する場合。  
  
 メッセージを削除すると同様、ジャーナル キューで保持するコピーであるキューのジャーナルを使用している場合、 <xref:System.Messaging.MessageQueue> クラスの <xref:System.Messaging.MessageQueue.Receive%2A> メソッドです。  
  
 呼び出しによって削除されるすべてのメッセージの原因はトランザクション キューを使用する場合、トランザクションのロールバック <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> がキューに返されます。 トランザクションがコミットされるまで削除は取り消すことができません。  
  
 現在のメッセージを削除すると、カーソルを次のメッセージに移動します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定された値、 <paramref name="timeout" /> パラメーターが無効です。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">タイムアウトの有効期限が切れました。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="transactionType" /> パラメーターは、のいずれかではない、 <see cref="T:System.Messaging.MessageQueueTransactionType" /> メンバーです。</exception>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
        <altmember cref="T:System.Messaging.MessageQueueTransactionType" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageEnumerator.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>キューの先頭を指すように、現在の列挙子をリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 列挙子は、順方向にのみ移動できます。 キューの先頭に最初からやり直すには、このメソッドを使用します。  
  
 呼び出した後 <xref:System.Messaging.MessageEnumerator.Reset%2A>, 、カーソルが最初のメッセージを指します。 呼び出す必要はありません <xref:System.Messaging.MessageEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageEnumerator.Reset%2A> キューの最初のメッセージにカーソルを移動します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>返します。、 <see cref="T:System.Messaging.Message" /> 現在のカーソル位置にあるメッセージを参照します。</summary>
        <value>A <see cref="T:System.Messaging.Message" /> 現在のカーソル位置にあるメッセージを参照します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveNext">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>次のメッセージ キュー内に列挙子を進めます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageEnumerator" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>