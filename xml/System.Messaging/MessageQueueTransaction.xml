<Type Name="MessageQueueTransaction" FullName="System.Messaging.MessageQueueTransaction">
  <TypeSignature Language="C#" Value="public class MessageQueueTransaction : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueTransaction extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueTransaction" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>メッセージ キューの内部トランザクションを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用することができます、トランザクションの一部としてメッセージを送受信する、 <xref:System.Messaging.MessageQueueTransaction> トランザクションを作成してのオーバー ロードに渡すクラス、 <xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> メソッドまたは <xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> を受け取るメソッド、 `transaction` パラメーター。 トランザクションの一部として送信されるメッセージは、トランザクション キューに送信する必要があります。 指定したトランザクションを使用して、トランザクション キューから受信したメッセージを受信する必要があります。  
  
 加え、 <xref:System.Messaging.MessageQueue.Receive%2A> メソッドを指定した識別子または指定された相関識別子を持つメッセージが表示されることができます。 参照してください、 <xref:System.Messaging.MessageQueue.ReceiveById%2A> と <xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> 方法の詳細については、選択的にトランザクション キューからメッセージを受信します。  
  
 トランザクションがコミットされると、トランザクション キューに送信されたメッセージは削除されます。 同様に、トランザクションがロールバックされた場合、トランザクション キューから受信したメッセージはキューに返されます。  
  
 インスタンス化する場合、 <xref:System.Messaging.MessageQueueTransaction> の適用可能なオーバー ロードに渡すと、 <xref:System.Messaging.MessageQueue.Send%2A> メソッドまたは <xref:System.Messaging.MessageQueue.Receive%2A> 非トランザクション キューにメッセージを送信またはメソッドの非トランザクション キューからメッセージを受信するメソッドを「正しくないトランザクションの使用」を示す例外をスロー  
  
 \[Visual Basic\]  
  
 <xref:System.Messaging.MessageQueueTransaction> スレッドのアパートメントに対応する、アパートメント状態の場合これ `STA`, 、複数のスレッドでトランザクションを使用することはできません。 Visual Basic にメイン スレッドの状態を設定する `STA`, を適用する必要がありますので、 <xref:System.MTAThreadAttribute> で、 `Main` サブルーチンです。 適用しない場合、別のスレッドを使用してトランザクション メッセージを送信すると、<xref:System.Messaging.MessageQueueException> 例外がスローされます。 適用する、 <xref:System.MTAThreadAttribute> 次のフラグメントを使用しています。  
  
```  
<System.MTAThreadAttribute>  
 public sub Main()  
```  
  
```vb  
  
```  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
    <altmember cref="M:System.Messaging.MessageQueue.Send(System.Object)" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageQueueTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターの設定、 <xref:System.Messaging.MessageQueueTransaction.Status%2A> プロパティを `Initialized`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Abort">
      <MemberSignature Language="C#" Value="public void Abort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Abort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Abort" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の内部トランザクションをロールバックします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> 呼び出しで開始されたプロセスが正常に完了のマーク <xref:System.Messaging.MessageQueueTransaction.Begin%2A>します。  
  
 呼び出しは通常、 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 内で、 `Try...Catch` への呼び出しを配置する例外処理ブロック <xref:System.Messaging.MessageQueueTransaction.Commit%2A> で、 `Try` を呼び出すと、句 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> で、 `Catch` 句。  
  
 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> トランザクション全体をロールバックします。 これにより、呼び出しの後に送受信されるすべてのメッセージが含まれます。 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">ロールバックしようとしている内部トランザクションが開始されていません。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューの内部エラーが発生します。</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Begin">
      <MemberSignature Language="C#" Value="public void Begin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Begin() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Begin" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>新しいメッセージのキューの内部トランザクションを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> コミットまたはロールバック トランザクションが成功したされる処理の開始をマークします。 処理中に例外が発生した、トランザクション全体がロールバックされます。 これにより、呼び出しの後に送受信されるすべてのメッセージが含まれます。 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>します。  
  
 呼び出しは通常、 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 内で、 `Try...Catch` への呼び出しを配置する例外処理ブロック <xref:System.Messaging.MessageQueueTransaction.Commit%2A> で、 `Try` を呼び出すと、句 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> で、 `Catch` 句。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">トランザクションは既に開始しています。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューの内部エラーが発生します。</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Commit" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Commit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>保留中の内部トランザクションをコミットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageQueueTransaction.Commit%2A> 呼び出しで開始する処理が正常に完了のマーク <xref:System.Messaging.MessageQueueTransaction.Begin%2A>します。 呼び出しの間に例外が発生した場合、 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> への呼び出し <xref:System.Messaging.MessageQueueTransaction.Commit%2A>, 、トランザクション全体がロールバックされます。 これにより、呼び出しの後に送受信されるすべてのメッセージが含まれます。 <xref:System.Messaging.MessageQueueTransaction.Begin%2A>します。  
  
 呼び出しは通常、 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> 内で、 `Try...Catch` への呼び出しを配置する例外処理ブロック <xref:System.Messaging.MessageQueueTransaction.Commit%2A> で、 `Try` を呼び出すと、句 <xref:System.Messaging.MessageQueueTransaction.Abort%2A> で、 `Catch` 句。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">コミットしようとしているトランザクションが開始されていません。</exception>
        <exception cref="T:System.Messaging.MessageQueueException">メッセージ キューの内部エラーが発生します。</exception>
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Abort" />
        <altmember cref="M:System.Messaging.MessageQueueTransaction.Begin" />
        <altmember cref="P:System.Messaging.MessageQueue.Transactional" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageQueueTransaction" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueTransaction> to be reallocated for other purposes. For more information about **languageKeyword tag is not supported!!!!**  
, see [&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213).  
  
 Any pending internal transactions are rolled back by <xref:System.Messaging.MessageQueueTransaction.Dispose%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Messaging.MessageQueueTransaction" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public <xref:System.Messaging.MessageQueueTransaction.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueTransaction> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueTransaction.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のインスタンスに保持されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは <xref:System.Object.Finalize%2A?displayProperty=fullName>です。 アプリケーション コードは、このメソッドを呼び出さないようにオブジェクトの <xref:System.Messaging.MessageQueueTransaction.Finalize%2A> への呼び出しによって、ガベージ コレクターによって終了処理が無効になっていない限りガベージ コレクション中にメソッドが自動的に起動、 <xref:System.GC.SuppressFinalize%2A?displayProperty=fullName> メソッドです。  
  
 詳細については、次を参照してください。 [Finalize メソッドおよびデストラクター](http://msdn.microsoft.com/ja-jp/fd376774-1643-499b-869e-9546a3aeea70), 、[&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213), 、および [Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/ja-jp/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueueTransactionStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Messaging.MessageQueueTransactionStatus Status" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueTransaction.Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueueTransactionStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションの状態を取得します。</summary>
        <value>いずれか、 <see cref="T:System.Messaging.MessageQueueTransactionStatus" /> トランザクションはコミットされていない、初期化が中止されましたか、保留中かどうかを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インスタンス、 <xref:System.Messaging.MessageQueueTransaction> クラスが作成されると、 <xref:System.Messaging.MessageQueueTransaction.Status%2A> をコンス トラクターによって設定されている `Initialized`します。 呼び出した後 <xref:System.Messaging.MessageQueueTransaction.Begin%2A> への呼び出しの前に <xref:System.Messaging.MessageQueueTransaction.Commit%2A> または <xref:System.Messaging.MessageQueueTransaction.Abort%2A>, 、 <xref:System.Messaging.MessageQueueTransaction.Status%2A> は `Pending`です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Messaging.MessageQueueTransactionStatus" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageQueueTransaction" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>