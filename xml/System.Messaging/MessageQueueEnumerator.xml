<Type Name="MessageQueueEnumerator" FullName="System.Messaging.MessageQueueEnumerator">
  <TypeSignature Language="C#" Value="public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MessageQueueEnumerator extends System.MarshalByRefObject implements class System.Collections.IEnumerator, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Messaging.MessageQueueEnumerator" />
  <AssemblyInfo>
    <AssemblyName>System.Messaging</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerator</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>メッセージ キュー内のメッセージを列挙するための順方向専用カーソルを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用 <xref:System.Messaging.MessageQueueEnumerator> ネットワーク上のキューの動的な対話のためです。 メソッドで使用できる、 <xref:System.Messaging.MessageQueue> クラスは、いずれかを返すことができます、 <xref:System.Messaging.MessageQueueEnumerator> キュー、または時にキューのコレクションのスナップショットを格納する配列の動的な一覧を含む、指定されたメソッドが呼び出されました。  
  
 ネットワークでのキューの定義済みの順序はありません。 たとえば、コンピューター、ラベル、パブリックまたはプライベートの状態を順序付けられた、またはその他のユーザーがアクセスできる条件はありません。 A <xref:System.Messaging.MessageQueueEnumerator> カーソル、動的なリストの先頭に初期化します。 列挙体の最初のキューにカーソルを移動するにを呼び出して <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>します。 使用することができます、列挙子が初期化された後 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 残りのキューにします。  
  
 ステップ後退することはできません、 <xref:System.Messaging.MessageQueueEnumerator>です。 カーソルでは、キューの列挙を前方移動のみ可能です。 ただし、呼び出す <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 列挙型をリセットし、リストの先頭にカーソルを置きます。 列挙子は動的であるために、カーソルの現在位置より後に追加するキューは、列挙子からアクセスできます。 カーソルの現在位置の前に挿入されているキューは、最初の reset を呼び出すアクセスできません。  
  
   
  
## 例  
 次のコード例は、ネットワーク内のすべてのメッセージ キューを反復処理し、各キューのパスを検証します。 最後に、ネットワーク上のパブリック キューの数を表示します。  
  
 [!code-cpp[MessageQueue.GetMessageQueueEnumerator\_noparms\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CPP/mqgetmessagequeueenumerator.cpp#1)]
 [!code-csharp[MessageQueue.GetMessageQueueEnumerator\_noparms\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/CS/mqgetmessagequeueenumerator.cs#1)]
 [!code-vb[MessageQueue.GetMessageQueueEnumerator\_noparms\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/MessageQueue.GetMessageQueueEnumerator_noparms/VB/mqgetmessagequeueenumerator.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Messaging.MessageQueue" />
    <altmember cref="M:System.Messaging.MessageQueue.GetMessageQueueEnumerator" />
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Close" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙子に関連付けられているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オペレーティング システムは、開いているハンドルを保持 <xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>, 、カーソルの有効期間中にキューの列挙子にします。 列挙子の操作を完了したらを呼び出す <xref:System.Messaging.MessageQueueEnumerator.Close%2A> ハンドルに関連付けられているリソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public System.Messaging.MessageQueue Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Messaging.MessageQueue Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Messaging.MessageQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の取得 <see cref="T:System.Messaging.MessageQueue" /> 列挙体の。</summary>
        <value>カーソルの現在の位置変更します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 列挙子が作成されると、それを指していない、何もので <xref:System.Messaging.MessageQueueEnumerator.Current%2A> が無効である場合は、アクセス、例外がスローされます。 呼び出す必要があります <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> に列挙体の最初のキューにカーソルを移動します。  
  
 複数回呼び出す <xref:System.Messaging.MessageQueueEnumerator.Current%2A> に介在するを呼び出すと <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 同じを返す <xref:System.Messaging.MessageQueue> オブジェクトです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">呼び出す <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> 最初の呼び出しの前に <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />します。 カーソルは、列挙体の最初のキューの前に位置します。  
  
 または  
  
 呼び出す <see cref="P:System.Messaging.MessageQueueEnumerator.Current" /> への呼び出し後 <see cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" /> が \(最後のキュー列挙体の後にカーソルが存在することを示す\) 場合は false が返されます。</exception>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageQueueEnumerator" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Calling <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> allows the resources used by the <xref:System.Messaging.MessageQueueEnumerator> to be reallocated for other purposes. For more information about <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>, see [&#91;\<topic:\/\/cpconCleaningUpUnmanagedResources\>&#93;](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Messaging.MessageQueueEnumerator" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is called by the public <xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> method and the <xref:System.Object.Finalize%2A> method. **languageKeyword tag is not supported!!!!**  
 invokes the protected **languageKeyword tag is not supported!!!!**  
 method with the **parameterReference tag is not supported!!!!**  
 parameter set to **languageKeyword tag is not supported!!!!**  
. <xref:System.Object.Finalize%2A> invokes **languageKeyword tag is not supported!!!!**  
 with **parameterReference tag is not supported!!!!**  
 set to **languageKeyword tag is not supported!!!!**  
.  
  
 When the **parameterReference tag is not supported!!!!**  
 parameter is **languageKeyword tag is not supported!!!!**  
, this method releases all resources held by any managed objects that this <xref:System.Messaging.MessageQueueEnumerator> references. This method invokes the **languageKeyword tag is not supported!!!!**  
 method of each referenced object.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> can be called multiple times by other objects. When overriding <see langword="Dispose(Boolean)" />, be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />. For more information about how to implement <see langword="Dispose" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 For more information about <see langword="Dispose" /> and <see langword="Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~MessageQueueEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Finalize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocatorHandle">
      <MemberSignature Language="C#" Value="public IntPtr LocatorHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LocatorHandle" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.LocatorHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ネットワークでキューの検索に使用されるネイティブのメッセージ キュー ハンドルを取得します。</summary>
        <value>現在のキューへのネイティブ ハンドル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 時が不要になったこの <xref:System.Messaging.MessageQueueEnumerator> インスタンスを呼び出す必要が <xref:System.Messaging.MessageQueueEnumerator.Close%2A> リソースには、このハンドルを解放します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Messaging.MessageQueueException">ハンドルが存在しません。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコードには、参照のアクセス許可がありません。</exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つは現在利用可能な場合は、列挙体の次のキューに列挙子を進めます。</summary>
        <returns>
          <see langword="true" /> 列挙子は、次のキューに正常に進んだ場合 <see langword="false" /> 、列挙子は列挙体の終わりに達した場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 返します `false` 列挙体に関連付けられたキューがない場合にすぐにします。  
  
 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 戻ります `true` コレクションの末尾に達するまでです。 その `false` 後の呼び出しに対してです。 ただし 1 回 <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 返った `false`, へのアクセス、 <xref:System.Messaging.MessageQueueEnumerator.Current%2A> プロパティは例外をスローします。  
  
 作成時に、列挙子は概念的には 1 つ目の前に配置 <xref:System.Messaging.MessageQueue> 列挙体、および最初の呼び出しの <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> には、列挙体の最初のキューを表示します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコードには、参照のアクセス許可がありません。</exception>
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.Reset" />
        <altmember cref="T:System.Messaging.MessageQueue" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Messaging.MessageQueueEnumerator.Reset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>列挙体の先頭を指すようにカーソルをリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 列挙子は、順方向専用の方向に移動します。 キューの列挙体の先頭に戻るには、このメソッドを使用します。  
  
 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 最初のキュー、リスト内にカーソルを位置付けます。 呼び出す必要はありません <xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 呼び出した後 <xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 列挙体の最初のキューにカーソルを移動します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Messaging.MessageQueueEnumerator.MoveNext" />
        <altmember cref="P:System.Messaging.MessageQueueEnumerator.Current" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerator.Current">
      <MemberSignature Language="C#" Value="object System.Collections.IEnumerator.Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IEnumerator.Current" />
      <MemberSignature Language="DocId" Value="P:System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の取得 <see cref="T:System.Messaging.MessageQueue" /> 列挙体の。</summary>
        <value>カーソルの現在の位置変更します。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Messaging</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Messaging.MessageQueueEnumerator" /> で使用したリソースを解放します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>