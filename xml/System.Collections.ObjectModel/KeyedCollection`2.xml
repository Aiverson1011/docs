<Type Name="KeyedCollection&lt;TKey,TItem&gt;" FullName="System.Collections.ObjectModel.KeyedCollection&lt;TKey,TItem&gt;">
  <TypeSignature Language="C#" Value="public abstract class KeyedCollection&lt;TKey,TItem&gt; : System.Collections.ObjectModel.Collection&lt;TItem&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit KeyedCollection`2&lt;TKey, TItem&gt; extends System.Collections.ObjectModel.Collection`1&lt;!TItem&gt;" />
  <TypeSignature Language="DocId" Value="T:System.Collections.ObjectModel.KeyedCollection`2" />
  <AssemblyInfo>
    <AssemblyName>System.ObjectModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TKey" />
    <TypeParameter Name="TItem" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Collections.ObjectModel.Collection&lt;TItem&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="T">TItem</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(System.Collections.Generic.Mscorlib_KeyedCollectionDebugView`2))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="TKey">コレクション内のキーの型。</typeparam>
    <typeparam name="TItem">コレクション内の項目の型。</typeparam>
    <summary>キーが値に埋め込まれているコレクションの抽象基本クラスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスには、両方の o \(1\) は、検索をインデックスが作成され、o \(1\) に匹敵する検索をキーとが用意されています。 これは、抽象型または抽象基本クラスは、それぞれの構築ジェネリック型のための抽象型の無限がより正確に設定します。 使用する <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、コレクション型を適切に構築された型から派生します。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは、基にしたコレクション間のハイブリッド、 <xref:System.Collections.Generic.IList%601> ジェネリック インターフェイス型とコレクションに基づいて、 <xref:System.Collections.Generic.IDictionary%602> ジェネリック インターフェイスです。 基づくコレクションと同様に、 <xref:System.Collections.Generic.IList%601> ジェネリック インターフェイスは、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 項目のインデックス付きのリストです。 基づくコレクションと同様に、 <xref:System.Collections.Generic.IDictionary%602> ジェネリック インターフェイスは、 <xref:System.Collections.ObjectModel.KeyedCollection%602> の各要素に関連付けられているキーが含まれています。  
  
 ディクショナリの要素とは異なり <xref:System.Collections.ObjectModel.KeyedCollection%602> キー\/値ペアではありません。 代わりに、全体の要素は、値と値の中で、キーが埋め込まれています。  たとえばから派生したコレクションの要素 `KeyedCollection\<String,String>` \(`KeyedCollection(Of String, String)` Visual Basic で\)"John Doe Jr"があります。 この値は"John Doe Jr" キーが"Doe"です。または整数キーを含む従業員レコードのコレクションから派生でした `KeyedCollection\<int,Employee>`します。 抽象 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドは、要素からキーを抽出します。  
  
 既定では、 <xref:System.Collections.ObjectModel.KeyedCollection%602> で入手できます。 検索ディクショナリが含まれています、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Dictionary%2A> プロパティです。  アイテムを追加するときに、 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、項目のキーを 1 回に抽出し、高速な検索の検索ディクショナリに保存します。 作成するときに、ディクショナリの作成のしきい値を指定することによってこの動作がオーバーライドされる、 <xref:System.Collections.ObjectModel.KeyedCollection%602>です。 要素の数は、そのしきい値を超えています。 最初に検索ディクショナリが作成されます。  しきい値として – 1 を指定する場合は、検索ディクショナリは作成されません。  
  
> [!NOTE]
>  場合、コレクション内のすべてのアイテムへの参照がある内部の検索ディクショナリを使用する場合 `TItem` 、参照型では、する場合に、コレクション内のすべてのアイテムのコピーまたは `TItem` は値型です。 したがって、検索ディクショナリを使用して適切ではない場合 `TItem` は値型です。  
  
 使用して、インデックスまたはキーでアイテムにアクセスすることができます、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A>プロパティです。 キーがない項目を追加することができますが、これらの項目は、インデックスによってのみアクセスされることができます。  
  
   
  
## 例  
 このセクションでは、2 つのコード例を示します。 最初の例から派生するために必要な最小限のコード <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、継承されたメソッドの多くを示しています。 2 番目の例は、のプロテクト メソッドをオーバーライドする方法を示しています。 <xref:System.Collections.ObjectModel.KeyedCollection%602> カスタム動作を指定します。  
  
 **例 1**  
  
 このコード例はからコレクション クラスを派生させるために必要な最小限のコードは <xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをパブリック コンス トラクターを基本クラス コンス トラクターにデリゲートします。 コード例も示して多くのプロパティおよびメソッドから継承 <xref:System.Collections.ObjectModel.KeyedCollection%602> と <xref:System.Collections.ObjectModel.Collection%601> クラスです。  
  
 `SimpleOrder` クラスは、非常に単純な要求のリストを含む `OrderItem` 、注文の行アイテムを表すオブジェクト。 キー `OrderItem` は変更できないから派生するクラスの重要な考慮事項 <xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 **例 2**  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, と <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, と <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッド、および既定値を設定するため <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ \(c\# のインデクサー\)。 この例で提供されるカスタムの動作はという名前の通知イベント `Changed`, 、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 作成するコード例、 `SimpleOrder` から派生したクラス <xref:System.Collections.ObjectModel.KeyedCollection%602> 、簡単な注文フォームを表します。 注文書を含む `OrderItem` 注文のアイテムを表すオブジェクトします。 コード例でも作成、 `SimpleOrderChangedEventArgs` イベントの情報、および変更の種類を識別するために列挙体を格納するクラス。  
  
 このコード例では、カスタム動作をでのプロパティと、派生クラスのメソッドを呼び出すことによって、 `Main` のメソッド、 `Demo` クラスです。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Collections.Specialized.StringDictionary" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を既定の等値比較子を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Collections.ObjectModel.KeyedCollection%602> 混ぜ合わせて、このコンス トラクターから取得した、キーの種類の既定のジェネリック等値比較子を使用して <xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=fullName>します。 異なるジェネリック等値比較子を指定するには、使用、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%29> コンス トラクターまたは <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンス トラクターです。  
  
 既定では、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 アイテムを追加するときに、 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、項目のキーを 1 回に抽出し、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドできる、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは抽象クラスです \(`MustInherit` Visual Basic で\)、それを使用するためにそこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンス トラクターです。 等値比較子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
   
  
## 例  
 このコード例はからコレクション クラスを派生させるために必要な最小限のコードは <xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをパブリック コンス トラクターを基本クラス コンス トラクターにデリゲートします。 コード例も示して多くのプロパティおよびメソッドから継承 <xref:System.Collections.ObjectModel.KeyedCollection%602> と <xref:System.Collections.ObjectModel.Collection%601> クラスです。  
  
 `SimpleOrder` クラスは、非常に単純な要求のリストを含む `OrderItem` 、注文の行アイテムを表すオブジェクト。 キー `OrderItem` は変更できないから派生するクラスの重要な考慮事項 <xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <param name="comparer">実装、 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> キーの比較時に使用するジェネリック インターフェイスまたは <see langword="null" /> から取得したキーの種類に既定の等値比較子を使用する <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 指定された等値比較子を使用するクラス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 アイテムを追加するときに、 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、項目のキーを 1 回に抽出し、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドできる、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは抽象クラスです \(`MustInherit` Visual Basic で\)、それを使用するためにそこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンス トラクターです。 等値比較子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected KeyedCollection (System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer, int dictionaryCreationThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; comparer, int32 dictionaryCreationThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Int32)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
        <Parameter Name="dictionaryCreationThreshold" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="comparer">実装、 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> キーの比較時に使用するジェネリック インターフェイスまたは <see langword="null" /> から取得したキーの種類に既定の等値比較子を使用する <see cref="P:System.Collections.Generic.EqualityComparer`1.Default" />です。</param>
        <param name="dictionaryCreationThreshold">検索ディクショナリを作成せずにコレクションが保有できる要素数 \(0 を指定すると最初の項目の追加時に検索ディクショナリが作成される\)。検索ディクショナリを作成しない場合は \-1。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を指定した等値比較子を使用し、指定されたしきい値を超えたときに検索ディクショナリを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 アイテムを追加するときに、 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、項目のキーを 1 回に抽出し、高速な検索の検索ディクショナリに保存します。 このコンス トラクターでは、この動作をオーバーライドすることができます。 最初の要素を追加するときに、ディクショナリを作成する場合は 0、2 番目の要素が追加されると、ディクショナリを作成する場合は 1 を指定します。 しきい値として – 1 を指定する場合は、検索ディクショナリは作成されません。  
  
 非常に小規模なコレクション検索ディクショナリによって提供される検索速度の向上があります、ディクショナリに必要な余分なメモリの価値があります。 しきい値を設定するには、トレードオフするタイミングを決定することができます。  
  
> [!NOTE]
>  <xref:System.Collections.ObjectModel.KeyedCollection%602> クラスは抽象クラスです \(`MustInherit` Visual Basic で\)、それを使用するためにそこから派生する必要があります。 派生型のコンス トラクターで呼び出して、適切な <xref:System.Collections.ObjectModel.KeyedCollection%602> コンス トラクターです。 等値比較子またはコンス トラクター内ディクショナリの作成のしきい値などの機能を公開する必要はありません。  
  
 このコンス トラクターは、o \(1\) 操作です。  
  
   
  
## 例  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, と <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, と <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッド、および既定値を設定するため <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ \(c\# のインデクサー\)。 この例で提供されるカスタムの動作はという名前の通知イベント `Changed`, 、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 コード例では、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> 0 のしきい値を持つコンス トラクターは内部辞書に初めて、オブジェクトが作成されるよう、コレクションに追加されます。  
  
 作成するコード例、 `SimpleOrder` から派生したクラス <xref:System.Collections.ObjectModel.KeyedCollection%602> 、簡単な注文フォームを表します。 注文書を含む `OrderItem` 注文のアイテムを表すオブジェクトします。 コード例でも作成、 `SimpleOrderChangedEventArgs` イベントの情報、および変更の種類を識別するために列挙体を格納するクラス。  
  
 このコード例では、カスタム動作をでのプロパティと、派生クラスのメソッドを呼び出すことによって、 `Main` のメソッド、 `Demo` クラスです。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="dictionaryCreationThreshold" /> – 1 より小さい。</exception>
        <altmember cref="T:System.Collections.Generic.IEqualityComparer`1" />
      </Docs>
    </Member>
    <Member MemberName="ChangeItemKey">
      <MemberSignature Language="C#" Value="protected void ChangeItemKey (TItem item, TKey newKey);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ChangeItemKey(!TItem item, !TKey newKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
        <Parameter Name="newKey" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="item">変更するキーの要素。</param>
        <param name="newKey">新しいキー <c>item</c>します。</param>
        <summary>検索ディクショナリの指定した要素に関連付けられたキーを変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドに埋め込まれているキーを変更していない `item`; 検索ディクショナリに保存されているキーを置き換えるだけです。  そのため場合、 `newKey` に埋め込まれているキーとは異なる `item`, にアクセスできない `item` によって返されるキーを使用して <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>します。  
  
 このメソッドは何場合、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 検索ディクショナリがありません。  
  
 内のすべてのキー、 <xref:System.Collections.ObjectModel.KeyedCollection%602> で一意である必要があります。 キーには `null`です。  
  
 このメソッドは、o \(1\) 操作です。  
  
## 実装についてのメモ  
 アイテムに埋め込まれているキーを変更する前に、検索ディクショナリのキーを更新するには、このメソッドを呼び出す必要があります。 ディクショナリの作成のしきい値が\-1 の場合は、このメソッドを呼び出す必要はありません。  
  
 公開しないでください、 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> 派生クラスのパブリック メソッドとしてメソッドです。 このメソッドの不正使用では、項目キーの同期が取れません検索ディクショナリを配置します。 たとえば、キーを設定 `null` 検索ディクショナリをアイテムに対して複数のキーを追加し、別の値に設定します。 変更可能な項目のキーを許可するには、内部的には、このメソッドを公開します。 このメソッドを使用して検索ディクショナリのキーの変更を、項目のキーが変更されたとき。  
  
   
  
## 例  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> を変更可能なキーと、保護されている上書きする方法をサポートする <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 、キーと、コレクションの整合性を維持する方法です。  
  
 作成するコード例、 `MutableKeys` から派生したコレクション <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、および `MutableKey` クラスです。`MutableKey` クラスには、設定可能な `Key` プロパティです。 新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` \(`Friend` Visual Basic で\) `ChangeKey` を新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッドです。 必要な場合は、例外がスローされ、プロパティ値が変更されていません。  
  
 間の接続を維持するために、 `MutableKey` オブジェクトおよび `MutableKeys` コレクションおよびをオブジェクトが 2 つのコレクションに挿入されることを防ぐために、 `MutableKey` クラスには、 `internal` \(`Friend` Visual Basic で\) `Collection` フィールドです。 このフィールドを追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護されたメソッドは、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドです。 フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> は <see langword="null" /> です。  
  
 \-または\-  
  
 <paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="item" /> が見つかりません。  
  
 または  
  
 <paramref name="key" /> 既に存在する、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="ClearItems">
      <MemberSignature Language="C#" Value="protected override void ClearItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ClearItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> からすべての要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If there is a lookup dictionary, this method clears it but does not delete it.  
  
 If the number of elements has exceeded the dictionary creation threshold and the <xref:System.Collections.ObjectModel.KeyedCollection%602> is using a lookup dictionary, it will continue to use a lookup dictionary even though the number of elements is again under the threshold.  
  
 This method is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
## Notes for Implementers  
 Override this method to provide customized behavior for the <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> method, inherited from the <xref:System.Collections.ObjectModel.Collection%601> generic class.  
  
 Call the base class implementation of this method to clear the underlying collection and to clear the lookup dictionary.  
  
   
  
## 例  
 This section contains two code examples that demonstrate overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A> method to provide custom behavior for clearing all objects from the collection. The first example adds a custom notification event and the second provides support for a collection of objects with mutable keys.  
  
 Example 1  
  
 The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods, to provide custom behavior for the <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, and <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> methods, and for setting the default <xref:System.Collections.ObjectModel.Collection%601.Item%2A> property \(the indexer in C\#\). The custom behavior provided in this example is a notification event named `Changed`, which is raised at the end of each of the overridden methods.  
  
 The code example creates the `SimpleOrder` class, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602> and represents a simple order form. The order form contains `OrderItem` objects representing items ordered. The code example also creates a `SimpleOrderChangedEventArgs` class to contain the event information, and an enumeration to identify the type of change.  
  
 The code example demonstrates the custom behavior by calling the properties and methods of the derived class, in the `Main` method of the `Demo` class.  
  
 This code example uses objects with immutable keys. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 Example 2  
  
 The following code example shows how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> method to support mutable keys, and how to override the protected <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, <xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, and <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> methods to maintain the integrity of the keys and the collection.  
  
 The code example creates the `MutableKeys` collection, which derives from <xref:System.Collections.ObjectModel.KeyedCollection%602>, and the `MutableKey` class. The `MutableKey` class has a settable `Key` property. When a new key is assigned to the property, the property setter calls the **languageKeyword tag is not supported!!!!**  
 \(**languageKeyword tag is not supported!!!!**  
 in Visual Basic\) `ChangeKey` method of the collection to test whether the new key would conflict with an existing key. If so, an exception is thrown and the property value is not changed.  
  
 In order to maintain the connection between a `MutableKey` object and the `MutableKeys` collection and to prevent an object from being inserted into two collections, the `MutableKey` class has an **languageKeyword tag is not supported!!!!**  
 \(**languageKeyword tag is not supported!!!!**  
 in Visual Basic\) `Collection` field. This field is maintained by the protected methods that provide custom behavior for adding and removing items from the collection, such as the <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> method. The field is set when the item is added to a collection and cleared when the item is removed.  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Comparer">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEqualityComparer&lt;TKey&gt; Comparer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IEqualityComparer`1&lt;!TKey&gt; Comparer" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Comparer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEqualityComparer&lt;TKey&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションの複数のキーの値が等しいかどうかを確認するために使用される、ジェネリック等値比較子を取得します。</summary>
        <value>実装、 <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用して、コレクション内のキーが等しいかどうかを決定する一般的なインターフェイスです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Contains(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内で検索されるキー。</param>
        <summary>指定したキーの要素がコレクションに含まれているかどうかを確認します。</summary>
        <returns>指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary, **parameterReference tag is not supported!!!!**  
 is used to search the dictionary. If there is no lookup dictionary, the key of each element is extracted using the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and compared with the specified key.  
  
 This method is an O\(1\) operation if the <xref:System.Collections.ObjectModel.KeyedCollection%602> has a lookup dictionary; otherwise it is an O\(**parameterReference tag is not supported!!!!**  
\) operation, where **parameterReference tag is not supported!!!!**  
 is <xref:System.Collections.ObjectModel.Collection%601.Count%2A>.  
  
   
  
## 例  
 This code example shows the minimum code necessary to derive a collection class from <xref:System.Collections.ObjectModel.KeyedCollection%602>: overriding the <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> method and providing a public constructor that delegates to a base class constructor. The code example also demonstrates many of the properties and methods inherited from <xref:System.Collections.ObjectModel.KeyedCollection%602> and <xref:System.Collections.ObjectModel.Collection%601> classes.  
  
 The `SimpleOrder` class is a very simple requisition list that contains `OrderItem` objects, each of which represents a line item in the order. The key of `OrderItem` is immutable, an important consideration for classes that derive from <xref:System.Collections.ObjectModel.KeyedCollection%602>. For a code example that uses mutable keys, see <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>.  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      </Docs>
    </Member>
    <Member MemberName="Dictionary">
      <MemberSignature Language="C#" Value="protected System.Collections.Generic.IDictionary&lt;TKey,TItem&gt; Dictionary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IDictionary`2&lt;!TKey, !TItem&gt; Dictionary" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Dictionary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;TKey,TItem&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>検索ディクショナリを取得、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />です。</summary>
        <value>検索ディクショナリ、 <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" />, 存在する場合は、それ以外の場合、 <see langword="null" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 最初の項目が追加されたときに作成される検索ディクショナリが含まれています。 アイテムを追加するときに、 <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、項目のキーを 1 回に抽出し、高速な検索の検索ディクショナリに保存します。 使用してこの動作をオーバーライドできる、 <xref:System.Collections.ObjectModel.KeyedCollection%602.%23ctor%28System.Collections.Generic.IEqualityComparer%7B%600%7D%2CSystem.Int32%29> コンス トラクターとディクショナリの作成のしきい値を指定します。  
  
 このプロパティ値を取得することは、O\(1\) 操作になります。  
  
   
  
## 例  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> を変更可能なキーと、保護されている上書きする方法をサポートする <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 、キーと、コレクションの整合性を維持する方法です。  
  
 作成するコード例、 `MutableKeys` から派生したコレクション <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、および `MutableKey` クラスです。`MutableKey` クラスには、設定可能な `Key` プロパティです。 新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` \(`Friend` Visual Basic で\) `ChangeKey` を新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッドです。 必要な場合は、例外がスローされ、プロパティ値が変更されていません。  
  
 間の接続を維持するために、 `MutableKey` オブジェクトおよび `MutableKeys` コレクションおよびをオブジェクトが 2 つのコレクションに挿入されることを防ぐために、 `MutableKey` クラスには、 `internal` \(`Friend` Visual Basic で\) `Collection` フィールドです。 このフィールドを追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護されたメソッドは、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドです。 フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Generic.IDictionary`2" />
      </Docs>
    </Member>
    <Member MemberName="GetKeyForItem">
      <MemberSignature Language="C#" Value="protected abstract TKey GetKeyForItem (TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance !TKey GetKeyForItem(!TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.GetKeyForItem(`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TKey</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="item">キーの抽出元要素。</param>
        <summary>派生クラスで実装された場合、指定した要素からキーを抽出します。</summary>
        <returns>指定した要素のキー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検索ディクショナリのキーに埋め込まれているキーと異なる場合 `item`, にアクセスできない `item` によって返されるキーを使用して <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A>します。  
  
 返すには、このメソッドを実装する `null` キーを持たない項目を含むコレクションの場合は、項目にアクセスできる、インデックスでのみです。 このメソッドは、o \(1\) 操作です。  
  
## 実装についてのメモ  
 ディクショナリ内の項目からキーを抽出する方法を提供するには、このメソッドをオーバーライドする必要があります。  
  
 このメソッドは、内部的に呼び出されます。 パブリックにする必要はありません。  
  
   
  
## 例  
 このコード例はからコレクション クラスを派生させるために必要な最小限のコードは <xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをパブリック コンス トラクターを基本クラス コンス トラクターにデリゲートします。 コード例も示して多くのプロパティおよびメソッドから継承 <xref:System.Collections.ObjectModel.KeyedCollection%602> と <xref:System.Collections.ObjectModel.Collection%601> クラスです。  
  
 `SimpleOrder` クラスは、非常に単純な要求のリストを含む `OrderItem` 、注文の行アイテムを表すオブジェクト。 キー `OrderItem` は変更できないから派生するクラスの重要な考慮事項 <xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ChangeItemKey(`1,`0)" />
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      </Docs>
    </Member>
    <Member MemberName="InsertItem">
      <MemberSignature Language="C#" Value="protected override void InsertItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InsertItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">
          <c>item</c> を挿入する位置の、0 から始まるインデックス。</param>
        <param name="item">挿入するオブジェクト。</param>
        <summary>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `index` に等しい <xref:System.Collections.ObjectModel.Collection%601.Count%2A>, 、`item` の末尾に追加された、 <xref:System.Collections.ObjectModel.KeyedCollection%602>です。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>です。  
  
 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> によって呼び出される、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> と <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> メソッドです。  
  
## 実装についてのメモ  
 動作をカスタマイズするには、このメソッドをオーバーライドして、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A> と <xref:System.Collections.ObjectModel.Collection%601.Insert%2A> から継承されたメソッド、 <xref:System.Collections.ObjectModel.Collection%601> ジェネリック クラスです。  
  
 基になるコレクションに項目を挿入し、検索ディクショナリを更新する、このメソッドの基本クラス実装を呼び出します。  
  
   
  
## 例  
 このセクションには、オーバーライドするかを示す 2 つのコード例が含まれています。、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドを追加またはコレクションにオブジェクトを挿入するためのカスタム動作を指定します。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, と <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, と <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッド、および既定値を設定するため <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ \(c\# のインデクサー\)。 この例で提供されるカスタムの動作はという名前の通知イベント `Changed`, 、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 作成するコード例、 `SimpleOrder` から派生したクラス <xref:System.Collections.ObjectModel.KeyedCollection%602> 、簡単な注文フォームを表します。 注文書を含む `OrderItem` 注文のアイテムを表すオブジェクトします。 コード例でも作成、 `SimpleOrderChangedEventArgs` イベントの情報、および変更の種類を識別するために列挙体を格納するクラス。  
  
 このコード例では、カスタム動作をでのプロパティと、派生クラスのメソッドを呼び出すことによって、 `Main` のメソッド、 `Demo` クラスです。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> を変更可能なキーと、保護されている上書きする方法をサポートする <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 、キーと、コレクションの整合性を維持する方法です。  
  
 作成するコード例、 `MutableKeys` から派生したコレクション <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、および `MutableKey` クラスです。`MutableKey` クラスには、設定可能な `Key` プロパティです。 新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` \(`Friend` Visual Basic で\) `ChangeKey` を新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッドです。 必要な場合は、例外がスローされ、プロパティ値が変更されていません。  
  
 間の接続を維持するために、 `MutableKey` オブジェクトおよび `MutableKeys` コレクションおよびをオブジェクトが 2 つのコレクションに挿入されることを防ぐために、 `MutableKey` クラスには、 `internal` \(`Friend` Visual Basic で\) `Collection` フィールドです。 このフィールドを追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護されたメソッドは、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドです。 フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> が 0 未満です。  
  
 または  
  
 <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public TItem this[TKey key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TItem Item(!TKey)" />
      <MemberSignature Language="DocId" Value="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">取得する要素のキー。</param>
        <summary>指定したキーを持つ要素を取得します。</summary>
        <value>指定したキーを持つ要素。 指定したキーを持つ要素が見つからない場合は、例外がスローされます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティは、次の構文を使用して、コレクション内の特定の要素にアクセスする機能を提供します。 `myCollection[key]` \(`myCollection(key)` Visual Basic で\)。  
  
> [!NOTE]
>  このプロパティは、継承された異なる <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> プロパティを取得し、数値インデックスで要素を設定します。 ただし場合、 `TKey` 型 <xref:System.Int32>, 、このプロパティは、継承されたプロパティがマスクされます。 その場合は、キャストによって継承されたプロパティにアクセスすることができます、 <xref:System.Collections.ObjectModel.KeyedCollection%602> その基本型にします。 たとえば、 `KeyedCollection<int, MyType>` \(`KeyedCollection(Of Integer, MyType)` Visual basic で `KeyedCollection<int, MyType^>` C\+\+ では\) にキャストできる `Collection<MyType>` \(`Collection(Of MyType)` Visual basic で `Collection<MyType^>` C\+\+ では\)。  
  
 場合、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 検索ディクショナリを持つ `key` ディクショナリから要素を取得するために使用します。  使用して、各要素のキーを抽出検索ディクショナリがない場合、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッド、指定したキーと比較します。  
  
 C\# 言語キーワードを使用して実装する代わりに、インデクサーの定義、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> プロパティです。 Visual Basic は、<xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A> を既定のプロパティとして実装しており、同様のインデックス機能を提供します。  
  
 場合は o \(1\) 操作にこのプロパティの値を取得する、 <xref:System.Collections.ObjectModel.KeyedCollection%602> 検索ディクショナリ; を持つそれ以外の場合これは、O \(`n`\) 操作、場所 `n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>です。  
  
   
  
## 例  
 このコード例はからコレクション クラスを派生させるために必要な最小限のコードは <xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをパブリック コンス トラクターを基本クラス コンス トラクターにデリゲートします。 コード例も示して多くのプロパティおよびメソッドから継承 <xref:System.Collections.ObjectModel.KeyedCollection%602> と <xref:System.Collections.ObjectModel.Collection%601> クラスです。  
  
 このコード例では、両方を呼び出します、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=fullName> プロパティは読み取り専用としてキーを取得、および <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> プロパティが設定可能なは、インデックスを取得します。 派生コレクション内のオブジェクトがある整数キー、インデックス付き検索に使用される整数と区別することに後者のプロパティにアクセスする方法を示します。  
  
 `SimpleOrder` クラスは、非常に単純な要求のリストを含む `OrderItem` 、注文の行アイテムを表すオブジェクト。 キー `OrderItem` は変更できないから派生するクラスの重要な考慮事項 <xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">コレクション内で指定したキーを持つ要素がありませんでした。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (TKey key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Remove(!TKey key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
      </Parameters>
      <Docs>
        <param name="key">削除する要素のキー。</param>
        <summary>指定したキーを持つ要素を <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> から削除します。</summary>
        <returns>要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素のキーは、検索ディクショナリからも削除されます。  
  
 要素の数がディクショナリの作成のしきい値を超えて かどうか、 <xref:System.Collections.ObjectModel.KeyedCollection%602> は検索ディクショナリを使用して、引き続き要素の数がしきい値より下に再び検索ディクショナリを使用します。  
  
> [!NOTE]
>  このメソッドの動作をカスタマイズするには、オーバーライド、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> メソッドです。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>です。  
  
   
  
## 例  
 このコード例はからコレクション クラスを派生させるために必要な最小限のコードは <xref:System.Collections.ObjectModel.KeyedCollection%602>: オーバーライドする、 <xref:System.Collections.ObjectModel.KeyedCollection%602.GetKeyForItem%2A> メソッドをパブリック コンス トラクターを基本クラス コンス トラクターにデリゲートします。 コード例も示して多くのプロパティおよびメソッドから継承 <xref:System.Collections.ObjectModel.KeyedCollection%602> と <xref:System.Collections.ObjectModel.Collection%601> クラスです。  
  
 例は、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A> から継承されたメソッド <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、指定したキーを持つ項目を削除して、 <xref:System.Collections.ObjectModel.Collection%601.Remove%2A> と <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%2A> メソッドから継承 <xref:System.Collections.ObjectModel.Collection%601>, 、オブジェクト、およびインデックスをそれぞれ削除します。  
  
 `SimpleOrder` クラスは、非常に単純な要求のリストを含む `OrderItem` 、注文の行アイテムを表すオブジェクト。 キー `OrderItem` は変更できないから派生するクラスの重要な考慮事項 <xref:System.Collections.ObjectModel.KeyedCollection%602>します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection/cs/source.cs#1)]
 [!code-vb[KeyedCollection\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="protected override void RemoveItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RemoveItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.RemoveItem(System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">削除する要素のインデックス。</param>
        <summary>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> の指定したインデックスにある要素を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 要素のキーは、検索ディクショナリからも削除されます。  
  
 要素の数がディクショナリの作成のしきい値を超えて かどうか、 <xref:System.Collections.ObjectModel.KeyedCollection%602> は検索ディクショナリを使用して、引き続き要素の数がしきい値より下に再び検索ディクショナリを使用します。  
  
 このメソッドは O \(`n`\) 操作の場合、 `n` は <xref:System.Collections.ObjectModel.Collection%601.Count%2A>です。  
  
## 実装についてのメモ  
 動作をカスタマイズするには、このメソッドをオーバーライドして、 <xref:System.Collections.ObjectModel.Collection%601.Remove%28%600%29> と <xref:System.Collections.ObjectModel.Collection%601.RemoveAt%28System.Int32%29> から継承されたメソッド、 <xref:System.Collections.ObjectModel.Collection%601> ジェネリック クラスは、および <xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%28%600%29> メソッドです。  
  
 基になるコレクションから項目を削除し、検索ディクショナリを更新する、このメソッドの基本クラス実装を呼び出します。  
  
   
  
## 例  
 このセクションには、オーバーライドするかを示す 2 つのコード例が含まれています。、 <xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A> をコレクションからオブジェクトを削除するカスタム動作を指定します。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, と <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, と <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッド、および既定値を設定するため <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ \(c\# のインデクサー\)。 この例で提供されるカスタムの動作はという名前の通知イベント `Changed`, 、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 作成するコード例、 `SimpleOrder` から派生したクラス <xref:System.Collections.ObjectModel.KeyedCollection%602> 、簡単な注文フォームを表します。 注文書を含む `OrderItem` 注文のアイテムを表すオブジェクトします。 コード例でも作成、 `SimpleOrderChangedEventArgs` イベントの情報、および変更の種類を識別するために列挙体を格納するクラス。  
  
 このコード例では、カスタム動作をでのプロパティと、派生クラスのメソッドを呼び出すことによって、 `Main` のメソッド、 `Demo` クラスです。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> を変更可能なキーと、保護されている上書きする方法をサポートする <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 、キーと、コレクションの整合性を維持する方法です。  
  
 作成するコード例、 `MutableKeys` から派生したコレクション <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、および `MutableKey` クラスです。`MutableKey` クラスには、設定可能な `Key` プロパティです。 新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` \(`Friend` Visual Basic で\) `ChangeKey` を新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッドです。 必要な場合は、例外がスローされ、プロパティ値が変更されていません。  
  
 間の接続を維持するために、 `MutableKey` オブジェクトおよび `MutableKeys` コレクションおよびをオブジェクトが 2 つのコレクションに挿入されることを防ぐために、 `MutableKey` クラスには、 `internal` \(`Friend` Visual Basic で\) `Collection` フィールドです。 このフィールドを追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護されたメソッドは、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドです。 フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.Remove(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.ClearItems" />
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="protected override void SetItem (int index, TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItem(int32 index, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.SetItem(System.Int32,`1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="TItem" />
      </Parameters>
      <Docs>
        <param name="index">置き換えられる項目の 0 から始まるインデックス。</param>
        <param name="item">新しい項目。</param>
        <summary>指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 検索ディクショナリも更新されます。 つまり、置き換えられる項目のキーは検索ディクショナリから削除され、新しい項目のキーが追加されます。  
  
 このメソッドは、o \(1\) 操作です。  
  
## 実装についてのメモ  
 設定のカスタマイズされた動作を提供するには、このメソッドをオーバーライドして、 <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティから継承されて、 <xref:System.Collections.ObjectModel.Collection%601> ジェネリック クラスです。  
  
> [!NOTE]
>  このメソッドではの動作には影響しません、 <xref:System.Collections.ObjectModel.KeyedCollection%602.Item%2A?displayProperty=fullName> は読み取り専用プロパティです。  
  
 基になるコレクションの項目を設定し、検索ディクショナリを更新する、このメソッドの基本クラス実装を呼び出します。  
  
   
  
## 例  
 このセクションには、オーバーライドするかを示す 2 つのコード例が含まれています。、 <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 設定のカスタム動作を提供するメソッド、 <xref:System.Collections.ObjectModel.Collection%601.Item%2A?displayProperty=fullName> プロパティです。 最初の例は、カスタムの通知イベントを追加し、2 つ目は、変更可能なキーを持つオブジェクトのコレクションのサポートを提供します。  
  
 例 1  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, と <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> のカスタム動作を提供する、メソッド、 <xref:System.Collections.ObjectModel.Collection%601.Add%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.Remove%2A>, と <xref:System.Collections.ObjectModel.Collection%601.Clear%2A> メソッド、および既定値を設定するため <xref:System.Collections.ObjectModel.Collection%601.Item%2A> プロパティ \(c\# のインデクサー\)。 この例で提供されるカスタムの動作はという名前の通知イベント `Changed`, 、これらのオーバーライドされたメソッドの最後にこれが発生します。  
  
 作成するコード例、 `SimpleOrder` から派生したクラス <xref:System.Collections.ObjectModel.KeyedCollection%602> 、簡単な注文フォームを表します。 注文書を含む `OrderItem` 注文のアイテムを表すオブジェクトします。 コード例でも作成、 `SimpleOrderChangedEventArgs` イベントの情報、および変更の種類を識別するために列挙体を格納するクラス。  
  
 このコード例では、カスタム動作をでのプロパティと、派生クラスのメソッドを呼び出すことによって、 `Main` のメソッド、 `Demo` クラスです。  
  
 このコード例では、変更できないキーを持つオブジェクトを使用します。 変更可能なキーを使用するためのコード例では「 <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A>します。  
  
 [!code-cpp[KeyedCollection2\#1](~/samples/snippets/cpp/VS_Snippets_CLR/KeyedCollection2/cpp/source.cpp#1)]
 [!code-csharp[KeyedCollection2\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollection2/cs/source.cs#1)]
 [!code-vb[KeyedCollection2\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollection2/vb/source.vb#1)]  
  
 例 2  
  
 次のコード例は、保護されたオーバーライドする方法を示します <xref:System.Collections.ObjectModel.KeyedCollection%602.ChangeItemKey%2A> を変更可能なキーと、保護されている上書きする方法をサポートする <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.RemoveItem%2A>, 、<xref:System.Collections.ObjectModel.KeyedCollection%602.ClearItems%2A>, 、および <xref:System.Collections.ObjectModel.KeyedCollection%602.SetItem%2A> 、キーと、コレクションの整合性を維持する方法です。  
  
 作成するコード例、 `MutableKeys` から派生したコレクション <xref:System.Collections.ObjectModel.KeyedCollection%602>, 、および `MutableKey` クラスです。`MutableKey` クラスには、設定可能な `Key` プロパティです。 新しいキーがプロパティに割り当てられている場合、プロパティ set アクセス操作子、 `internal` \(`Friend` Visual Basic で\) `ChangeKey` を新しいキーは、既存のキーと競合するかどうかをテストするコレクションのメソッドです。 必要な場合は、例外がスローされ、プロパティ値が変更されていません。  
  
 間の接続を維持するために、 `MutableKey` オブジェクトおよび `MutableKeys` コレクションおよびをオブジェクトが 2 つのコレクションに挿入されることを防ぐために、 `MutableKey` クラスには、 `internal` \(`Friend` Visual Basic で\) `Collection` フィールドです。 このフィールドを追加およびなど、コレクションから項目を削除するカスタム動作を提供する保護されたメソッドは、 <xref:System.Collections.ObjectModel.KeyedCollection%602.InsertItem%2A> メソッドです。 フィールドは、項目がコレクションに追加され、項目が削除されたときにクリアに設定されています。  
  
 [!code-csharp[KeyedCollectionMutable\#1](~/samples/snippets/csharp/VS_Snippets_CLR/KeyedCollectionMutable/cs/source.cs#1)]
 [!code-vb[KeyedCollectionMutable\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/KeyedCollectionMutable/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Collections.ObjectModel.KeyedCollection`2.Item(`0)" />
        <altmember cref="M:System.Collections.ObjectModel.KeyedCollection`2.InsertItem(System.Int32,`1)" />
      </Docs>
    </Member>
    <Member MemberName="TryGetValue">
      <MemberSignature Language="C#" Value="public bool TryGetValue (TKey key, out TItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetValue(!TKey key, !TItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.ObjectModel.KeyedCollection`2.TryGetValue(`0,`1@)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="TKey" />
        <Parameter Name="item" Type="TItem&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ObjectModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>