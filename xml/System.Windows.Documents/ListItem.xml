<Type Name="ListItem" FullName="System.Windows.Documents.ListItem">
  <TypeSignature Language="C#" Value="public class ListItem : System.Windows.Documents.TextElement" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListItem extends System.Windows.Documents.TextElement" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Documents.ListItem" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Documents.TextElement</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Markup.ContentProperty("Blocks")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>付きの特定のコンテンツ アイテムを表すフロー コンテンツ要素または順序なし <see cref="T:System.Windows.Documents.List" />します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Documents.ListItem> 子コンテンツの強力なコンテンツ モデルが適用されます。 参照してください [TextElement コンテンツ モデルの概要](http://msdn.microsoft.com/ja-jp/d0a7791c-b090-438c-812f-b9d009d83ee9) の詳細については、 <xref:System.Windows.Documents.ListItem> コンテンツ モデル。  
  
 <xref:System.Windows.Documents.ListItem> 要素が含まれている必要があります、 <xref:System.Windows.Documents.List> 要素。  
  
   
  
## 例  
 次の例では、定義する方法、 <xref:System.Windows.Documents.List> を使用して [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]します。  
  
 [!code-xml[ListSnippets\#\_ListXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml#_listxaml)]  
  
 次の例を作成および取り込む方法を示しています、 <xref:System.Windows.Documents.List> プログラムを使用しています。  
  
 [!code-csharp[ListSnippets\#\_List\_Props](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml.cs#_list_props)]
 [!code-vb[ListSnippets\#\_List\_Props](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListSnippets/visualbasic/window1.xaml.vb#_list_props)]  
  
 次の図は、この例をレンダリングする方法を示しています。  
  
 e0946ef9-ade0-4bce-82bb-94242f0e5d49  
  
 次の例は、入れ子になったを定義する方法を示しています。 <xref:System.Windows.Documents.List> \(一覧内で一覧表示\) を使用して [!INCLUDE[TLA#tla_titlexaml](~/includes/tlasharptla-titlexaml-md.md)]します。  
  
 [!code-xml[ListSnippets\#\_NestedListXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml#_nestedlistxaml)]  
  
 次の図は、この例をレンダリングする方法を示しています。  
  
 cc4d3598-dbe3-44e7-a151-44399787df1b  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しい空のインスタンスを初期化、 <see cref="T:System.Windows.Documents.ListItem" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListItem (System.Windows.Documents.Paragraph paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Documents.Paragraph paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.#ctor(System.Windows.Documents.Paragraph)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="paragraph" Type="System.Windows.Documents.Paragraph" />
      </Parameters>
      <Docs>
        <param name="paragraph">A <see cref="T:System.Windows.Documents.Paragraph" /> 新しいの初期コンテンツを指定するオブジェクト <see cref="T:System.Windows.Documents.ListItem" />します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Windows.Documents.ListItem" /> を指定したクラス <see cref="T:System.Windows.Documents.Paragraph" /> オブジェクトを新しいの初期コンテンツとして <see cref="T:System.Windows.Documents.ListItem" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、このコンス トラクターの使用状況を示します。  
  
 [!code-csharp[ListSnippets\#\_List\_Const](~/samples/snippets/csharp/VS_Snippets_Wpf/ListSnippets/CSharp/Window1.xaml.cs#_list_const)]
 [!code-vb[ListSnippets\#\_List\_Const](~/samples/snippets/visualbasic/VS_Snippets_Wpf/ListSnippets/visualbasic/window1.xaml.vb#_list_const)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blocks">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.BlockCollection Blocks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.BlockCollection Blocks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Blocks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.BlockCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Documents.ListItem" /> の最上位 <see cref="T:System.Windows.Documents.Block" /> 要素を格納するブロック コレクションを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Documents.ListItem" /> の <see cref="T:System.Windows.Documents.Block" /> 要素を格納するブロック コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティによって返されるブロックのコレクションの列挙の内容を操作またはを使用して、 <xref:System.Windows.Documents.Section> 要素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderBrush">
      <MemberSignature Language="C#" Value="public System.Windows.Media.Brush BorderBrush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Media.Brush BorderBrush" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.BorderBrush" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.Brush</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定、 <see cref="T:System.Windows.Media.Brush" /> 要素の境界を描画するときに使用します。</summary>
        <value>要素の罫線を適用するために使用するブラシ。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用可能な定義済みのブラシの色の見本のテーブルを参照してください。 <xref:System.Windows.Media.Brushes>します。  
  
<a name="dependencyPropertyInfo_BorderBrush"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.BorderBrushProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.BorderBrush%2A> の属性、 <xref:System.Windows.Documents.Block> 要素 \(<xref:System.Windows.Documents.Paragraph>\)。  
  
 [!code-xml[BlockSnippets\#\_Block\_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 次の図は、この例をレンダリングする方法を示しています。  
  
 20491906-5a09-4675-8f70-c9c6283b1b63  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.BorderBrush%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets\#\_Block\_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.BorderThickness" />
      </Docs>
    </Member>
    <Member MemberName="BorderBrushProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderBrushProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderBrushProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.BorderBrushProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.BorderBrush" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderThickness">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness BorderThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness BorderThickness" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.BorderThickness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の境界線の太さを取得または設定します。</summary>
        <value>適用する境界線の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定値は 0 \(0.0\) の均一の太さです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="xamlAttributeUsage_BorderThickness"></a>   
## XAML Attribute Usage  
  
```  
<object BorderThickness="uniformThickness"/>  
- or -  
<object BorderThickness="independentThickness"/>  
- or -  
<object BorderThickness="qualifiedUniformThickness"/>  
- or -  
<object BorderThickness="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_BorderThickness"></a>   
## XAML Values  
 *uniformThickness*  
 String representation of a single <xref:System.Double> value to apply uniformly to all four thickness dimensions.  For example, a value of `"10"` is equivalent to a value of `"10,10,10,10"`.  An unqualified value is measured in device independent pixels. Strings need not explicitly include decimal points.  
  
 *independentThickness*  
 String representation of four ordered <xref:System.Double> values corresponding to independent thickness dimensions for left, top, right, and bottom, in this order.  The four values must be separated with commas; spaces are not allowed.  For example, "5,10,15,20" results in 5 pixels of border to the left of content, 10 pixels of border above content, 15 pixels of border to the right of content, and 20 pixels of border below the content.  
  
 *qualifiedUniformThickness*  
 A value described by **legacyItalic tag is not supported!!!!**  
 followed by one of the following unit specifiers: `px`, `in`.  
  
 `px` \(default\) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` is inches; 1in\=\=96px  
  
 For example, `"1in"` provides uniform border of 1 inch in all directions.  
  
 *qualifiedIndependentThickness*  
 A value described by **legacyItalic tag is not supported!!!!**  
, with each independent value followed by one of the following unit specifiers: `px`, `in`.  
  
 `px` \(default\) is [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` is inches; 1in\=\=96px  
  
 For example, `"1.5in,0.8in,1.5in,0.8in"`.  Unit specifiers may be mixed or omitted from one or more values.  
  
<a name="dependencyPropertyInfo_BorderThickness"></a>   
## Dependency Property Information  
  
|||  
|-|-|  
|Identifier field|<xref:System.Windows.Documents.ListItem.BorderThicknessProperty>|  
|Metadata properties set to **languageKeyword tag is not supported!!!!**|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## 例  
 The following example shows how to set the <xref:System.Windows.Documents.ListItem.BorderThickness%2A> attribute of a <xref:System.Windows.Documents.Block> element \(<xref:System.Windows.Documents.Paragraph>\).  
  
 [!code-xml[BlockSnippets\#\_Block\_BordersXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_bordersxaml)]  
  
 The following figure shows how this example renders.  
  
 20491906-5a09-4675-8f70-c9c6283b1b63  
  
 The following example shows how to set the <xref:System.Windows.Documents.ListItem.BorderThickness%2A> property programmatically.  
  
 [!code-csharp[BlockSnippets\#\_Block\_Borders](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_borders)]
 [!code-vb[BlockSnippets\#\_Block\_Borders](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_borders)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.BorderBrush" />
      </Docs>
    </Member>
    <Member MemberName="BorderThicknessProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty BorderThicknessProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty BorderThicknessProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.BorderThicknessProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.BorderThickness" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirection">
      <MemberSignature Language="C#" Value="public System.Windows.FlowDirection FlowDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.FlowDirection FlowDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.FlowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.FlowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定内のコンテンツのフローの相対的な方向、 <see cref="T:System.Windows.Documents.ListItem" /> 要素。</summary>
        <value>いずれか、 <see cref="T:System.Windows.FlowDirection" /> 、相対的なフローの方向を指定する値。  既定値は、<see cref="F:System.Windows.FlowDirection.LeftToRight" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを取得するには、現在有効なフローの方向が返されます。  内容をこのプロパティを設定すると、 <xref:System.Windows.Documents.ListItem> 再を指定した方向にフローする要素。  
  
 コンテンツのフローの方向は、通常、表される言語の本質的なフローの方向に対応します。  ヘブライ語やアラビア語は、右から左にフロー自然言語の例を示します。  英語、ドイツ語、およびロシア語は、左から右に自然なフローの言語の例を示します。  
  
> [!NOTE]
>  このプロパティの値は、オペレーティング システムで使用される言語に合わせて自動的には変更されません。 既定以外の値を使用する必要があるかどうかは <xref:System.Windows.FlowDirection.LeftToRight>, 、自分で、指定する必要があります。  
  
<a name="dependencyPropertyInfo_FlowDirection"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.FlowDirectionProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>, <xref:System.Windows.FrameworkPropertyMetadata.AffectsParentArrange%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.FlowDirection%2A> の属性、 <xref:System.Windows.Documents.Block> 要素 \(<xref:System.Windows.Documents.Paragraph>\)。  
  
 [!code-xml[BlockSnippets\#\_Block\_FlowDirectionXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_flowdirectionxaml)]  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.FlowDirection%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_FlowDirection](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_flowdirection)]
 [!code-vb[BlockSnippets\#\_Block\_FlowDirection](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_flowdirection)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlowDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty FlowDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty FlowDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.FlowDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.FlowDirection" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeight">
      <MemberSignature Language="C#" Value="public double LineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LineHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.LineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.LengthConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテンツの各行の高さを取得または設定します。</summary>
        <value>各行の高さ。単位はデバイスに依存しないピクセルで、値は 0.0034 から 160000 までの範囲です。  値 <see cref="F:System.Double.NaN" /> \(属性値 "<c>Auto</c>" に相当するもの\) に設定すると、行の高さは現在のフォント特性から自動的に決定されます。  既定値は、<see cref="F:System.Double.NaN" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 変更する、 <xref:System.Windows.Documents.ListItem.LineHeight%2A> 値が関連付けられているテキストの高さを変更できません。 代わりに、テキストを含む行の高さを変更します。  
  
 このプロパティでは、内の行のレイアウトだけでなく、 <xref:System.Windows.Documents.ListItem> の影響を受けるその <xref:System.Windows.Documents.ListItem.LineStackingStrategy%2A> プロパティです。  
  
<a name="xamlAttributeUsage_LineHeight"></a>   
## XAML 属性の使用方法  
  
```  
<object LineHeight="double"/>  
- or -  
<object LineHeight="qualifiedDouble"/>  
- or -  
<object LineHeight="Auto"/>  
```  
  
<a name="xamlValues_LineHeight"></a>   
## XAML 値  
 *double*  
 文字列表現、 <xref:System.Double> の範囲の値 `0.0034` に `160000`します。 修飾されていない値は、デバイス非依存のピクセル単位で計測されます。 文字列が必要な小数点を明示的に含まれません。  
  
 *qualifiedDouble*  
 A *二重* 、前述の値 \(ドキュメントを除く `Auto`\) 後に、次の単位指定子の 1 つ: `px`, 、`in`, 、`cm`, 、`pt`です。  
  
 `px` \(既定値\) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px \= \=  
  
 `cm` センチメートルを表します。1cm\=\=\(96\/2.54\) px  
  
 `pt` ポイントです。1pt\=\=\(96\/72\) px  
  
 自動  
 現在のフォント特性から自動的に決定される行の高さをさせます。  プロパティの値と等価 <xref:System.Double.NaN?displayProperty=fullName>します。  
  
<a name="dependencyPropertyInfo_LineHeight"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.LineHeightProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.LineHeight%2A> の属性、 <xref:System.Windows.Documents.Block> 要素。  
  
 [!code-xml[BlockSnippets\#\_Block\_LineHeightXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_lineheightxaml)]  
  
 次の図は、前の例をレンダリングする方法を示しています。  
  
 e530e9d3-8ec0-46eb-88c7-d0a0928bdf6f  
  
 既定の設定の例と同じをレンダリングする方法を次に示します <xref:System.Windows.Documents.ListItem.LineHeight%2A>\=<xref:System.Double.NaN?displayProperty=fullName>です。  
  
 313722fd-53a8-4011-937e-1f24aab57c86  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.LineHeight%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_LineHeight](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_lineheight)]
 [!code-vb[BlockSnippets\#\_Block\_LineHeight](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_lineheight)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeightProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineHeightProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineHeightProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.LineHeightProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.LineHeight" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategy">
      <MemberSignature Language="C#" Value="public System.Windows.LineStackingStrategy LineStackingStrategy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.LineStackingStrategy LineStackingStrategy" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.LineStackingStrategy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.LineStackingStrategy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または設定内のテキストの行ごとに行ボックスを決定する際、メカニズム、 <see cref="T:System.Windows.Documents.ListItem" />です。</summary>
        <value>いずれか、 <see cref="T:System.Windows.LineStackingStrategy" /> 内のテキストの行ごとに行ボックスを決定する際のメカニズムを指定する値、 <see cref="T:System.Windows.Documents.ListItem" />です。 既定値は、<see cref="F:System.Windows.LineStackingStrategy.MaxHeight" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_LineStackingStrategy"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.LineStackingStrategyProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 次の例を使用する方法を示しています、 <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> テキスト行の行のボックスを作成する方法を決定するプロパティ、 <xref:System.Windows.Controls.TextBlock>です。 最初の <xref:System.Windows.Controls.TextBlock> が、 <xref:System.Windows.Controls.TextBlock.LineStackingStrategy%2A> の値 <xref:System.Windows.LineStackingStrategy.MaxHeight> 、2 番目 <xref:System.Windows.Controls.TextBlock> の値を持つ <xref:System.Windows.LineStackingStrategy.BlockLineHeight>です。  
  
 [!code-xml[FlowMiscSnippets\_snip\#LineStackingStrategyExampleWholePage](~/samples/snippets/csharp/VS_Snippets_Wpf/FlowMiscSnippets_snip/cs/linestackingstrategyexample.xaml#linestackingstrategyexamplewholepage)]  
  
 次の図は、上記のコードの結果を示しています。  
  
 a45cbc99-0776-48dc-82f0-05ebbb744b85  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineStackingStrategyProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty LineStackingStrategyProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty LineStackingStrategyProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.LineStackingStrategyProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.LineStackingStrategy" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.List List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.List List" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.List</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Documents.List" /> を含む、 <see cref="T:System.Windows.Documents.ListItem" />です。</summary>
        <value>ボックスの一覧を含む、 <see cref="T:System.Windows.Documents.ListItem" />です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の余白の厚みを取得または設定します。</summary>
        <value>適用する余白の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定では 0 \(0.0\) の均一の幅です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Documents.ListItem.Margin%2A> 要素のコンテンツ領域の端と親要素の端との間での要素のコンテンツ領域の外側にあるバッファー領域がいます。  比較して <xref:System.Windows.Documents.ListItem.Padding%2A>, 、これは、バッファ領域要素のコンテンツと要素の内側の端の間での要素のコンテンツ領域の内側に該当します。  
  
<a name="xamlAttributeUsage_Margin"></a>   
## XAML 属性の使用方法  
  
```  
<object Margin="uniformThickness"/>  
- or -  
<object Margin="independentThickness"/>  
- or -  
<object Margin="qualifiedUniformThickness"/>  
- or -  
<object Margin="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Margin"></a>   
## XAML 値  
 *uniformThickness*  
 1 つの文字列表現 <xref:System.Double> 4 つすべての厚みに一様に分布を適用する値。  たとえばの値 `"10"` はの値と同じ `"10,10,10,10"`します。  修飾されていない値は、デバイス非依存のピクセル単位で計測されます。 文字列が必要な小数点を明示的に含まれません。  
  
 *independentThickness*  
 順序付けになる 4 つの文字列表現 <xref:System.Double> 上、左の太さの独立したディメンションに対応する値が右、および、下には、次の順序で。  4 つの値をコンマで区切る必要があります。スペースは使用できません。  たとえば、「5,10,15,20」結果の余白の 5 ピクセル コンテンツ、コンテンツの上余白の 10 ピクセル、コンテンツの右側の余白 \(ピクセル\) を 15 およびコンテンツ下の余白 20 ピクセルの左側にします。  
  
 *qualifiedUniformThickness*  
 記述された値 *uniformThickness* 次の単位指定子のいずれかが続きます。 `px`, 、`in`です。  
  
 `px` \(既定値\) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px \= \=  
  
 たとえば、 `"1in"` すべての方向に 1 インチの統一された余白を提供します。  
  
 *qualifiedIndependentThickness*  
 記述された値 *independentThickness*, 、独立した各値は、次の単位指定子のいずれかが続きます。 `px`, 、`in`です。  
  
 `px` \(既定値\) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px \= \=  
  
 たとえば、`"1.5in,0.8in,1.5in,0.8in"` のようにします。  単位指定子は、混合または 1 つまたは複数の値からを省略すると場合があります。  
  
<a name="dependencyPropertyInfo_Margin"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.MarginProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.Margin%2A> の属性、 <xref:System.Windows.Documents.Block> 要素 \(<xref:System.Windows.Documents.Paragraph>\)。  
  
 [!code-xml[BlockSnippets\#\_Block\_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 次の図は、この例をレンダリングする方法を示しています。  誇張された太さや色は、図に使用されます。  
  
 23d0adec-0937-4a13-8b42-010952d28fa2  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.Margin%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets\#\_Block\_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.Padding" />
      </Docs>
    </Member>
    <Member MemberName="MarginProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty MarginProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty MarginProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.MarginProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.Margin" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItem NextListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItem NextListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.NextListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>次の取得 <see cref="T:System.Windows.Documents.ListItem" /> 格納しているに <see cref="T:System.Windows.Documents.List" />します。</summary>
        <value>次の <see cref="T:System.Windows.Documents.ListItem" /> で、 <see cref="T:System.Windows.Documents.List" />, 、または <see langword="null" /> 次へ\] が存在しない場合 <see cref="T:System.Windows.Documents.ListItem" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.PreviousListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.SiblingListItems" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Thickness Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Thickness Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Thickness</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素の余白の幅を取得または設定します。</summary>
        <value>適用する余白の量を指定する <see cref="T:System.Windows.Thickness" /> 構造体。デバイス非依存のピクセル単位で指定します。 既定では 0 \(0.0\) の均一の幅です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Documents.ListItem.Padding%2A> 要素のコンテンツと要素の内側の端の間での要素のコンテンツ領域の内側にあるバッファー領域がいます。  比較して <xref:System.Windows.Documents.ListItem.Margin%2A>, 、要素のコンテンツ領域の端と親要素の端との間での要素のコンテンツ領域の外側にあるバッファー領域があります。  
  
<a name="xamlAttributeUsage_Padding"></a>   
## XAML 属性の使用方法  
  
```  
<object Padding="uniformThickness"/>  
- or -  
<object Padding="independentThickness"/>  
- or -  
<object Padding="qualifiedUniformThickness"/>  
- or -  
<object Padding="qualifiedIndependentThickness"/>  
```  
  
<a name="xamlValues_Padding"></a>   
## XAML 値  
 *uniformThickness*  
 1 つの文字列表現 <xref:System.Double> 4 つすべての厚みに一様に分布を適用する値。  たとえばの値 `"10"` はの値と同じ `"10,10,10,10"`します。  修飾されていない値は、デバイス非依存のピクセル単位で計測されます。 文字列が必要な小数点を明示的に含まれません。  
  
 *independentThickness*  
 順序付けになる 4 つの文字列表現 <xref:System.Double> 上、左の太さの独立したディメンションに対応する値が右、および、下には、次の順序で。  4 つの値をコンマで区切る必要があります。スペースは使用できません。  たとえば、「5,10,15,20」によって 5 ピクセルの余白のコンテンツ、コンテンツの上の余白が 10 ピクセル、右の余白の 15 のピクセルおよびコンテンツの下の余白の 20 ピクセルの左側です。  
  
 *qualifiedUniformThickness*  
 記述された値 *uniformThickness* 次の単位指定子のいずれかが続きます。 `px`, 、`in`です。  
  
 `px` \(既定値\) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px \= \=  
  
 たとえば、 `"1in"` すべての方向に 1 インチの統一されたパディングを提供します。  
  
 *qualifiedIndependentThickness*  
 記述された値 *independentThickness*, 、独立した各値は、次の単位指定子のいずれかが続きます。 `px`, 、`in`です。  
  
 `px` \(既定値\) [!INCLUDE[TLA#tla_dipixel#plural](~/includes/tlasharptla-dipixelsharpplural-md.md)]  
  
 `in` インチです。1 96px \= \=  
  
 たとえば、`"1.5in,0.8in,1.5in,0.8in"` のようにします。  単位指定子は、混合または 1 つまたは複数の値からを省略すると場合があります。  
  
<a name="dependencyPropertyInfo_Padding"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.PaddingProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.Padding%2A> の属性、 <xref:System.Windows.Documents.Block> 要素 \(<xref:System.Windows.Documents.Paragraph>\)。  
  
 [!code-xml[BlockSnippets\#\_Block\_MarginPaddingXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_marginpaddingxaml)]  
  
 次の図は、この例をレンダリングする方法を示しています。  誇張された太さや色は、図に使用されます。  
  
 23d0adec-0937-4a13-8b42-010952d28fa2  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.Padding%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_MarginPadding](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_marginpadding)]
 [!code-vb[BlockSnippets\#\_Block\_MarginPadding](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_marginpadding)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.Margin" />
      </Docs>
    </Member>
    <Member MemberName="PaddingProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PaddingProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PaddingProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.PaddingProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.Padding" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItem PreviousListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItem PreviousListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.PreviousListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得前 <see cref="T:System.Windows.Documents.ListItem" /> 格納しているに <see cref="T:System.Windows.Documents.List" />します。</summary>
        <value>前の <see cref="T:System.Windows.Documents.ListItem" /> で、 <see cref="T:System.Windows.Documents.List" />, 、または <see langword="null" /> がない場合 <see cref="T:System.Windows.Documents.ListItem" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.NextListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.SiblingListItems" />
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeBlocks">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeBlocks (System.Windows.Markup.XamlDesignerSerializationManager manager);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeBlocks(class System.Windows.Markup.XamlDesignerSerializationManager manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Documents.ListItem.ShouldSerializeBlocks(System.Windows.Markup.XamlDesignerSerializationManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="manager" Type="System.Windows.Markup.XamlDesignerSerializationManager" />
      </Parameters>
      <Docs>
        <param name="manager">オブジェクトのシリアル化サービス マネージャー オブジェクトです。</param>
        <summary>示す値を返すかどうかの有効な値、 <see cref="P:System.Windows.Documents.ListItem.Blocks" /> のシリアル化中にプロパティをシリアル化する、 <see cref="T:System.Windows.Documents.ListItem" /> オブジェクトです。</summary>
        <returns>
          <see langword="true" /> 場合、 <see cref="P:System.Windows.Documents.ListItem.Blocks" /> シリアル化された以外の場合、プロパティを指定してください <see langword="false" />します。</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.NullReferenceException">
          <paramref name="manager" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SiblingListItems">
      <MemberSignature Language="C#" Value="public System.Windows.Documents.ListItemCollection SiblingListItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Documents.ListItemCollection SiblingListItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.SiblingListItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Documents.ListItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Documents.ListItemCollection" /> を含む、 <see cref="T:System.Windows.Documents.ListItem" /> 、現在の兄弟 <see cref="T:System.Windows.Documents.ListItem" /> 要素。</summary>
        <value>A <see cref="T:System.Windows.Documents.ListItemCollection" /> 子を含む <see cref="T:System.Windows.Documents.ListItem" /> 、現在の親によって直接ホストされる要素 <see cref="T:System.Windows.Documents.ListItem" /> 要素、または <see langword="null" /> 場合、現在 <see cref="T:System.Windows.Documents.ListItem" /> 要素に親がありません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Documents.ListItemCollection> このプロパティによって返されるを含む、 <xref:System.Windows.Documents.ListItem> 要素をコレクションにはアクセス。 つまり、このプロパティを所有する要素が兄弟のコレクションを生成する目的で、独自の兄弟であると見なされます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Documents.ListItem.NextListItem" />
        <altmember cref="P:System.Windows.Documents.ListItem.PreviousListItem" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public System.Windows.TextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.TextAlignment TextAlignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Documents.ListItem.TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.TextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>テキスト コンテンツの水平方向の配置を示す値を取得または設定します。</summary>
        <value>必要な配置を指定する <see cref="T:System.Windows.TextAlignment" /> の値の 1 つ。 既定値は、<see cref="F:System.Windows.TextAlignment.Left" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
<a name="dependencyPropertyInfo_TextAlignment"></a>   
## 依存プロパティ情報  
  
|||  
|-|-|  
|識別子のフィールド|<xref:System.Windows.Documents.ListItem.TextAlignmentProperty>|  
|メタデータのプロパティを設定するには `true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>、<xref:System.Windows.FrameworkPropertyMetadata.AffectsRender%2A>、<xref:System.Windows.FrameworkPropertyMetadata.Inherits%2A>|  
  
   
  
## 例  
 次の例では、設定する方法、 <xref:System.Windows.Documents.Block.TextAlignment%2A> の属性、 <xref:System.Windows.Documents.Block> 要素。  
  
 [!code-xml[BlockSnippets\#\_Block\_TextAlignmentXAML](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml#_block_textalignmentxaml)]  
  
 前の例を表示する方法を次に示します <xref:System.Windows.TextAlignment.Left> テキストの配置 \(既定値\)。  
  
 bfdea1ed-24e6-4686-b104-65547b2b692e  
  
 同じ例を表示する方法を次に示します <xref:System.Windows.TextAlignment.Right> テキストの配置。  
  
 a786348b-6084-4bc3-808a-15c8479cee6f  
  
 同じ例を表示する方法を次に示します <xref:System.Windows.TextAlignment.Center> テキストの配置。  
  
 16731071-bd55-489e-9015-601fdffcde8c  
  
 次の例では、設定する方法、 <xref:System.Windows.Documents.ListItem.TextAlignment%2A> プロパティ プログラムを使用しています。  
  
 [!code-csharp[BlockSnippets\#\_Block\_TextAlignment](~/samples/snippets/csharp/VS_Snippets_Wpf/BlockSnippets/CSharp/Window1.xaml.cs#_block_textalignment)]
 [!code-vb[BlockSnippets\#\_Block\_TextAlignment](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BlockSnippets/visualbasic/window1.xaml.vb#_block_textalignment)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignmentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty TextAlignmentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty TextAlignmentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Documents.ListItem.TextAlignmentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Documents.ListItem.TextAlignment" /> 依存関係プロパティを識別します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Documents.ListItem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>