<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>ユーザー定義型 \(UDT\) とユーザー定義集計のシリアル化および逆シリアル化のカスタム実装を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ユーザー定義型 \(Udt\) およびユーザー定義集計は、のいずれかのストレージ形式を定義する必要が <xref:Microsoft.SqlServer.Server.Format>.`Native` または <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`します。  
  
 <xref:Microsoft.SqlServer.Server.Format>.`Native` SQL Server をシリアル化を処理し、自動的に逆シリアル化が、形式が処理できる型の種類に制限されます。<xref:Microsoft.SqlServer.Server.Format>.`UserDefined` 独自のシリアル化を処理するには、ユーザー定義型と集計を使用します。 ユーザー定義型および集計をマークする必要があります <xref:Microsoft.SqlServer.Server.Format>.`UserDefined` で、 `SqlUserDefinedType` または `SqlUserDefinedAggregate` 属性があり、実装する必要があります、 <xref:Microsoft.SqlServer.Server.IBinarySerialize> インターフェイスです。  
  
 カスタムのシリアル化しても各インスタンスの合計サイズは 8,000 バイトを現在の制限を許可する最大する必要がありますに注意してください。  
  
   
  
## 例  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r">
          <see cref="T:System.IO.BinaryReader" /> 、オブジェクトが逆シリアル化ストリーム配信します。</param>
        <summary>バイナリ形式にからユーザー定義型 \(UDT\) またはユーザー定義集計を生成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> メソッドがによって書き込まれた情報を使用して、オブジェクトを再構成する必要があります、 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> メソッドです。  
  
   
  
## 例  
 実装の次の例を <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> を使用すると、UDT のメソッド、 <xref:System.IO.BinaryReader> に保持されていた UDT を逆シリアル化します。 この例では、UDT が 2 つのデータ プロパティを持つ: `StringValue` と `DoubleValue`です。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <see cref="T:System.IO.BinaryWriter" /> UDT またはユーザー定義集計がシリアル化するストリーム。</param>
        <summary>永続化されるように、バイナリ形式にユーザー定義型 \(UDT\) またはユーザー定義集計を変換します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 十分な情報を許可するようにバイナリ ストリームに書き込み、 <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> UDT またはユーザー定義集計を構築する方法です。  
  
   
  
## 例  
 実装の次の例を <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A>を使用すると、UDT のメソッド、 <xref:System.IO.BinaryWriter> をユーザー定義のバイナリ形式で UDT をシリアル化します。 Null 文字の埋め込みの目的は、TRANSACT\-SQL コード内の他に 1 つの UDT を比較し、文字列のバイトを文字列のバイトを比較し、2 バイト、2 バイトと比較ように文字列の値が完全に double 型の値から分離するためです。  
  
 [!code-csharp[DataWorks IBinarySerialize Samples\#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples\#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>