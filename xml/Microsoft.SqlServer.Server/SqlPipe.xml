<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>マネージ ストアド プロシージャに、呼び出し元に結果を返す SQL Server データベース上でインプロセスで実行を許可します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスのインスタンスがを通じてマネージ ストアド プロシージャに提供されて、 <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> のプロパティ、 <xref:Microsoft.SqlServer.Server.SqlContext> クラスです。  
  
   
  
## 例  
 次の例では使用 <xref:System.Data.SqlClient.SqlConnection> と <xref:System.Data.SqlClient.SqlCommand> ストアド プロシージャ内のデータ ソースから行を選択します。 使用して、 <xref:Microsoft.SqlServer.Server.SqlPipe> コマンドを実行し、結果をクライアントに送信します。  
  
 [!code-csharp[DataWorks SqlPipe\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">
          <see cref="T:System.Data.SqlClient.SqlCommand" /> 実行されるオブジェクト。</param>
        <summary>パラメーターとして渡されるコマンドを実行し、結果をクライアントに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 実際の結果だけでなく他のメッセージやエラーも送信されます直接クライアントにします。  
  
 出力パラメーターと戻り値は、クライアントに送信されません。これらは、コマンド オブジェクトのパラメーター コレクションを通じて、呼び出し元を使用できます。  
  
 コマンドは、インプロセス接続では、バインドされていない場合、 <xref:System.InvalidOperationException> がスローされます。 このメソッドはプロセス外の接続にバインドされたコマンドに対してはサポートされていません。  
  
 エラーがある場合、 <xref:System.Data.SqlClient.SqlCommand> オブジェクト送信された例外は、パイプに送信されますが、コピーが呼び出し元のマネージ コードにも送信します。 呼び出し元のコードが例外をキャッチしない TRANSACT\-SQL コードをスタックに伝播にされ、2 回出力に表示されます。 呼び出し元のコードが例外をキャッチする場合は、パイプ コンシューマーは、エラーが表示されますが、重複エラーされません。  
  
   
  
## 例  
 次の例では使用 <xref:System.Data.SqlClient.SqlConnection> と <xref:System.Data.SqlClient.SqlCommand> ストアド プロシージャ内のデータ ソースから行を選択します。 使用して、 <xref:Microsoft.SqlServer.Server.SqlPipe> コマンドを実行し、結果をクライアントに送信します。  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="command" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">このメソッドはプロセス外の接続にバインドされたコマンドに対してはサポートされていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>示す値を取得するかどうか、 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> が単一の結果セットをクライアントに送信するモード。 このプロパティは読み取り専用です。</summary>
        <value>
          <see langword="true" /> 場合、 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドが呼び出されて、 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> 単一の結果セットをクライアントに送信するモードでは、それ以外の場合 <see langword="false" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアントまたは現在の出力のコンシューマーに直接の結果を送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 **送信** メソッドは、クライアントまたは呼び出し元に直接データを送信します。 出力を使用するクライアントでは通常、 **パイプ** メソッド、入れ子になった CLR の場合、ストアド プロシージャの出力のコンシューマーこともできますストアド プロシージャになります。 たとえば、Procedure1 が <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> コマンド テキスト"EXEC Procedure2"を使用します。 Procedure2 もマネージ ストアド プロシージャ。 ここで procedure2 する場合 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, 、行は、クライアントが、Procedure1 のリーダーに送信します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">1 行の結果セットをクライアントに送信: <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクトです。</param>
        <summary>単一行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">複数行の結果セットをクライアントに送信する: <see cref="T:System.Data.SqlClient.SqlDataReader" /> オブジェクトです。</param>
        <summary>複数行の結果セットを直接クライアントまたは現在の出力のコンシューマーに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 <xref:System.Data.SqlClient.SqlDataReader> ように、このパラメーターが列を非表示に渡されたオブジェクト、それらの列は、クライアントに送信される結果セットには反映されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">クライアントに送信されるメッセージ文字列。</param>
        <summary>クライアントまたは現在の出力のコンシューマーに直接には、文字列メッセージを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メッセージ文字列は、クライアントに情報メッセージとして送信されます。 クライアント アプリケーションがによっては、データ アクセス アプリケーション プログラミング インターフェイス \(API\) を使用して、さまざまなメカニズムを通じてメッセージを待機します。 たとえば、クライアントは、ADO.NET を使用して、メッセージ送信する場合で、 <xref:System.Data.SqlClient.SqlConnection.InfoMessage> イベントです。  
  
   
  
## 例  
 次の例では、 <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> メッセージ文字列を直接クライアントに送信する方法です。  
  
 [!code-csharp[DataWorks SqlPipe.Send\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="message" /> が 4,000 文字を超えています。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="message" /> が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>結果セットの末尾をマークし、返します、 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> インスタンスを初期状態に戻します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できます、 <xref:System.Data.SqlClient.SqlDataReader>です。 このメソッドと共に <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> と <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, 、ストアド プロシージャをクライアントにカスタム結果セットを送信できるようにします。  
  
   
  
## 例  
 次の例が、新たに作成 <xref:Microsoft.SqlServer.Server.SqlDataRecord> とその <xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例では、マークを使用して結果セットの先頭、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> メソッドを使用してクライアントにサンプル データを含むレコードを送信する、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッド、および記号で、結果の最後の設定、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> メソッドです。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドが呼び出されたされません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> クライアントに送信される行に列の値を持つオブジェクト。 レコードのスキーマのメタデータで記述したスキーマと一致する必要があります、 <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> に渡される、 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドです。</param>
        <summary>1 行のデータをクライアントに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できます、 <xref:System.Data.SqlClient.SqlDataReader>です。 このメソッドと共に <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> と <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, 、ストアド プロシージャをクライアントにカスタム結果セットを送信します。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッドがクライアントに 1 行のデータを送信します。 行は、後で呼び出し、呼び出し元に返される <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, 、送信される行ごとに 1 回です。 すべての行が送信されたへの呼び出し後、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> メソッドは、結果セットの末尾を示すために必要です。  
  
   
  
## 例  
 次の例が、新たに作成 <xref:Microsoft.SqlServer.Server.SqlDataRecord> とその <xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例では、マークを使用して結果セットの先頭、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> メソッドを使用してクライアントにサンプル データを含むレコードを送信する、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッド、および記号で、結果の最後の設定、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> メソッドです。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドが呼び出されたされません。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">A <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" /> オブジェクトからメタデータが抽出され、結果セットを記述するために使用します。</param>
        <summary>クライアントに返される結果セットの先頭をマークし、レコードのパラメーターを使用して、結果セットを記述するメタデータを構築します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 マネージ ストアド プロシージャが結果セットを実装していないクライアントに送信できます、 <xref:System.Data.SqlClient.SqlDataReader>です。 このメソッドと共に <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> と <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, 、ストアド プロシージャをクライアントにカスタム結果セットを送信できるようにします。  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> メソッドが結果セットの先頭をマークし、レコードのパラメーターを使用して、結果セットを記述するメタデータを構築します。 それ以降すべての行を使用して送信される、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッドはそのメタデータ定義に一致する必要があります。  
  
 その後の呼び出しに注意してください <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>, だけ <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> と <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 呼び出すことができます。 その他の方法の同じインスタンスで <xref:Microsoft.SqlServer.Server.SqlPipe> スロー、 <xref:System.InvalidOperationException>です。<xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> 設定 <xref:Microsoft.SqlServer.Server.SqlPipe> 他のメソッドを呼び出すことができる初期状態に戻す。  
  
 コントロールが TRANSACT\-SQL に CLR の実行から戻った後に、CLR のメモリを初期化または静的ローカル変数を使用しようとしないでください。 たとえば、操作を処理中のインスタンスがクラス、ストアではなく `SQLDataRecord`, 、CLR から制御が返された後に使用されます。 1 つの例外は、 `SQLMetaData` process クラスにします。  
  
   
  
## 例  
 次の例が、新たに作成 <xref:Microsoft.SqlServer.Server.SqlDataRecord> とその <xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例では、マークを使用して結果セットの先頭、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> メソッドを使用してクライアントにサンプル データを含むレコードを送信する、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッド、および記号で、結果の最後の設定、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> メソッドです。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="record" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="record" /> 列がないか、初期化されていません。</exception>
        <exception cref="T:System.InvalidOperationException">以外のメソッド <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> または <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> 後に呼び出された、 <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> メソッドです。</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>