<Type Name="SqlContext" FullName="Microsoft.SqlServer.Server.SqlContext">
  <TypeSignature Language="C#" Value="public sealed class SqlContext" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlContext extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlContext" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>アクセスを提供する、呼び出し元のコンテキストの抽象化を表す、 <see cref="T:Microsoft.SqlServer.Server.SqlPipe" />, 、<see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" />, 、および <see cref="T:System.Security.Principal.WindowsIdentity" /> オブジェクトです。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.SqlServer.Server.SqlContext> オブジェクトは、トリガーのコンテキスト \(トリガーでコードを実行して\)、およびパイプ オブジェクト \(利用できる場合など、ストアド プロシージャで\) 取得に使用できます。 させることができます、 <xref:System.Security.Principal.WindowsIdentity> 統合認証を使用して、サーバーで、クライアントが認証される場合は、呼び出し元のクライアントの Microsoft Windows id を表すオブジェクト。  
  
   
  
## 例  
 次の例が、新たに作成 <xref:Microsoft.SqlServer.Server.SqlDataRecord> とその <xref:Microsoft.SqlServer.Server.SqlMetaData>します。 例では、マークを使用して結果セットの先頭、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> メソッドを使用してクライアントにサンプル データを含むレコードを送信する、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> メソッド、および記号で、結果の最後の設定、 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> メソッドです。  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsAvailable">
      <MemberSignature Language="C#" Value="public static bool IsAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool IsAvailable" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.IsAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コンテキスト接続にアクセスできる場合と、SQL Server の呼び出し元のコードが実行されているかどうかを指定します。</summary>
        <value>
          <see langword="True" /> コンテキスト接続がある場合や、その他の <see cref="T:Microsoft.SqlServer.Server.SqlContext" /> メンバーにアクセスできます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このプロパティを返す場合、false の場合、その他すべて <xref:Microsoft.SqlServer.Server.SqlContext> メンバー スロー、 <xref:System.InvalidOperationException> 使用されている場合。  
  
 このプロパティが false を返した場合しようとするが、接続オブジェクトを開く"コンテキスト接続 \= true"の接続文字列では失敗します。  
  
 このプロパティは読み取り専用です。  
  
 内部 \(共通言語ランタイム統合を使用して\) SQL Server および SQL Server 外部のコードを実行可能性がある場合は、ADO.NET データ アクセスを使用する、ときに、コンテキスト接続が利用できるかどうかを調べてこのプロパティを使用できます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipe">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlPipe Pipe" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.Pipe" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlPipe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>結果セット、メッセージ、およびクライアントへのコマンドを実行した結果を送信する、呼び出し元は、パイプ オブジェクトを取得します。</summary>
        <value>インスタンス <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> パイプがある場合または <see langword="null" /> のコンテキストで呼び出すと、パイプは \(たとえば、ユーザー定義関数\) で使用できません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SQL Server の外部から呼び出された場合、 <xref:System.NotSupportedException> がスローされます。  
  
 このプロパティは読み取り専用です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TriggerContext">
      <MemberSignature Language="C#" Value="public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.TriggerContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.SqlServer.Server.SqlTriggerContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元に、トリガーを起動するには、原因と更新された列のマップに関する情報を提供するために使用するトリガーのコンテキストを取得します。</summary>
        <value>インスタンス <see cref="T:Microsoft.SqlServer.Server.SqlTriggerContext" /> トリガーのコンテキストがある場合または <see langword="null" /> トリガーの呼び出し元の外部で呼び出されるとします。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.SqlServer.Server.SqlTriggerContext> 共通言語ランタイム トリガー内からオブジェクトが取得のみできます。  
  
 場合、 <xref:Microsoft.SqlServer.Server.SqlContext.TriggerContext%2A> プロパティが SQL Server の外部からアクセス、 <xref:System.NotSupportedException> がスローされます。  
  
 このプロパティは読み取り専用です。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Security.Principal.WindowsIdentity WindowsIdentity" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Principal.WindowsIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>呼び出し元の Microsoft Windows id。</summary>
        <value>A <see cref="T:System.Security.Principal.WindowsIdentity" /> で呼び出し元の Windows id を表すインスタンスまたは <see langword="null" /> SQL Server 認証を使用して、クライアントが認証された場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 SQL Server 内部の共通言語ランタイム \(CLR\) コードは常にプロセス アカウントのコンテキストで呼び出されます。 コードで SQL Server プロセス id ではなく、呼び出し元ユーザーの id を使用してアクションを実行する必要がある場合は、このプロパティを介して偽装トークンを入手してください。 呼び出し元は、<xref:System.Security.Principal.WindowsIdentity> オブジェクトを取得すれば、クライアント アカウントを偽装し、クライアントの代わりに動作を実行できます。  
  
 SQL Server の外部から呼び出された場合、 <xref:System.NotSupportedException> がスローされます。  
  
 `EXTERNAL_ACCESS` アクセス許可または `UNSAFE` アクセス許可でマークされたアセンブリのみが、このプロパティにアクセスできます。  
  
 このプロパティは読み取り専用です。  
  
   
  
## 例  
 次の例では、呼び出し元のクライアントの Windows id を取得し、クライアントを偽装する方法を示します。 SQL Server オンライン ブックを使用した偽装の例については「権限借用サンプル」を参照してください、 <xref:Microsoft.SqlServer.Server.SqlContext.WindowsIdentity%2A> プロパティです。  
  
 [!code-csharp[DataWorks SqlContext.WindowsIdentity Sample\#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/CS/source.cs#1)]
 [!code-vb[DataWorks SqlContext.WindowsIdentity Sample\#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlContext.WindowsIdentity Sample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>