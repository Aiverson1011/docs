<Type Name="SpeechRecognitionEngine" FullName="System.Speech.Recognition.SpeechRecognitionEngine">
  <TypeSignature Language="C#" Value="public class SpeechRecognitionEngine : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeechRecognitionEngine extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.SpeechRecognitionEngine" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>アクセスし、プロセス内の音声認識エンジンを管理するための手段を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 インストール済みの音声認識機能のいずれにも、このクラスのインスタンスを作成できます。 認識エンジンのインストールに関する情報を取得するには、使用、静的な <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> メソッドです。  
  
 このクラスでは、音声認識エンジン、インプロセスで実行するため、し、次のように、音声認識のさまざまな側面を制御を提供します。  
  
-   プロセス内の音声認識を作成するには、いずれかを使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.%23ctor%2A> コンス トラクターです。  
  
-   音声認識の文法を管理するを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A>, と <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> メソッド、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> プロパティです。  
  
-   認識エンジンへの入力を構成するのには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>, 、または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A> メソッドです。  
  
-   音声認識を実行するのには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドです。  
  
-   認識がサイレント状態または予期しない入力を処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
-   認識エンジンが返す候補の数を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> プロパティです。 認識エンジンがで認識結果を返す、 <xref:System.Speech.Recognition.RecognitionResult> オブジェクトです。  
  
-   認識エンジンに変更を同期するを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドです。 認識エンジンでは、1 つ以上のスレッドを使用して、タスクを実行します。  
  
-   認識エンジンへの入力をエミュレートするために使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine> オブジェクトが唯一は、オブジェクトをインスタンス化するプロセスを使用します。 これに対し、 <xref:System.Speech.Recognition.SpeechRecognizer> がそれを使用する任意のアプリケーションと 1 つの認識を共有します。  
  
> [!NOTE]
>  常を呼び出して <xref:System.Speech.Recognition.SpeechRecognitionEngine.Dispose%2A> 音声認識エンジンへの参照を解放する前にします。 それ以外の場合、使用されているリソースは解放されません、ガベージ コレクターが認識エンジン オブジェクトを呼び出すまで `Finalize` メソッドです。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 この例を使用するため、 `Multiple` のモード、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッド、認識を実行してには、コンソール ウィンドウを閉じるか、デバッグを停止するまでです。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.Grammar" />
    <altmember cref="T:System.Speech.Recognition.SpeechRecognizer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構築することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> から、次のいずれかのインスタンス。  
  
-   システムの既定の音声認識エンジン  
  
-   名前を指定している特定の音声認識エンジン  
  
-   指定したロケールの既定の音声認識エンジン  
  
-   指定した条件を満たす特定の認識エンジン、 <xref:System.Speech.Recognition.RecognizerInfo> オブジェクトです。  
  
 音声認識エンジンが認識を始める前に、少なくとも 1 つの音声認識の文法を読み込むおよび認識エンジンの入力を構成する必要です。  
  
 文法を読み込むを呼び出して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスのシステムの既定の音声認識エンジンを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンが音声認識を始める前にに少なくとも 1 つの認識文法を読み込んで、認識エンジンの入力を構成した必要があります。  
  
 文法を読み込むを呼び出して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Globalization.CultureInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="culture">このロケールは、音声認識をサポートする必要があります。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスの指定されたロケールの既定の音声認識エンジンを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Microsoft Windows と System.Speech API は、すべての有効な言語\-国コードを受け入れます。 指定された言語を使用する音声認識を実行する、 `CultureInfo` 引数、音声認識エンジン言語\-国コードをインストールする必要があるをサポートします。 Microsoft Windows 7 に同梱されている音声認識エンジンは、次の言語\-国コードで動作します。  
  
-   en GB。 英語 \(英国\)  
  
-   en\-us \(英語\)。 英語 \(米国\)  
  
-   de\-de などがあります。 ドイツ語 \(ドイツ\)  
  
-   ES\-ES します。 スペイン語 \(スペイン\)  
  
-   FR\-FR フランス語 \(フランス\)  
  
-   日本語 \(日本\)。 日本語 \(日本\)  
  
-   ZH\-CN します。 中国語 \(中国\)  
  
-   中国語 \(台湾\)。 中国語 \(台湾\)  
  
 "En"、"fr"などの 2 文字の言語コードまたは"es"でも許可されます。  
  
 音声認識エンジンが認識を始める前に、少なくとも 1 つの音声認識の文法を読み込むおよび認識エンジンの入力を構成する必要です。  
  
 文法を読み込むを呼び出して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## 例  
 次の例では、基本的な音声認識を示し、EN\-US ロケールに対して音声認識エンジンを初期化するコンソール アプリケーションの一部を示します。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">指定されたロケールをサポートするインストール済みの音声認識機能がないか、 <paramref name="culture" /> インバリアント カルチャします。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Culture" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (System.Speech.Recognition.RecognizerInfo recognizerInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Speech.Recognition.RecognizerInfo recognizerInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerInfo" Type="System.Speech.Recognition.RecognizerInfo" />
      </Parameters>
      <Docs>
        <param name="recognizerInfo">特定の音声認識エンジンの情報です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> で情報を使用して、 <see cref="T:System.Speech.Recognition.RecognizerInfo" /> を使用する認識エンジンを指定するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 インストール済みの音声認識機能のいずれにも、このクラスのインスタンスを作成できます。 認識エンジンのインストールに関する情報を取得する、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> メソッドです。  
  
 音声認識エンジンが認識を始める前に、少なくとも 1 つの音声認識の文法を読み込むおよび認識エンジンの入力を構成する必要です。  
  
 文法を読み込むを呼び出して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## 例  
 次の例では、基本的な音声認識を示し、英語の言語をサポートする音声認識エンジンを初期化するコンソール アプリケーションの一部を示します。  
  
```csharp  
 using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SpeechRecognitionEngine (string recognizerId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string recognizerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.String)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="recognizerId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="recognizerId">使用する音声認識エンジンのトークンの名前です。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> クラスを使用する認識エンジンの名前を指定する文字列パラメーターを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンのトークンの名前は、の値、 <xref:System.Speech.Recognition.RecognizerInfo.Id%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizerInfo> によって返されるオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> 認識エンジンのプロパティです。 インストールされているすべての認識子のコレクションを取得するには、使用、静的な <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> メソッドです。  
  
 音声認識エンジンが認識を始める前に、少なくとも 1 つの音声認識の文法を読み込むおよび認識エンジンの入力を構成する必要です。  
  
 文法を読み込むを呼び出して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## 例  
 次の例は、基本的な音声認識を示し、Windows の音声認識エンジン 8.0 のインスタンスを作成するコンソール アプリケーションの一部を示しています \(英語 \- 米国\) です。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an instance of the Microsoft Speech Recognizer 8.0 for  
      // Windows (English - US).  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine("MS-1033-80-DESK"))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized += new EventHandler(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">トークン同名の音声認識エンジンがインストールされていないか、 <paramref name="recognizerId" /> 空の文字列 \(""\) です。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="recognizerId" /> は <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="AudioFormat">
      <MemberSignature Language="C#" Value="public System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.AudioFormat.SpeechAudioFormatInfo AudioFormat" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.AudioFormat.SpeechAudioFormatInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信しているオーディオの形式を取得、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />です。</summary>
        <value>入力でオーディオの形式、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> インスタンス、または <see langword="null" /> 、入力の構成または null 入力に設定されていない場合。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーディオの入力を構成するには、次のいずれかを使用します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile%2A>  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream%2A>  
  
   
  
## 例  
 使用して次の例 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioFormat%2A> オーディオ形式のデータを取得して表示します。  
  
```  
static void DisplayAudioDeviceFormat(Label label, SpeechRecognitionEngine recognitionEngine)   
{  
  
  if (recognitionEngine != null && label != null)   
  {  
    label.Text = String.Format("Encoding Format:         {0}\n" +  
          "AverageBytesPerSecond    {1}\n" +  
          "BitsPerSample            {2}\n" +  
          "BlockAlign               {3}\n" +  
          "ChannelCount             {4}\n" +  
          "SamplesPerSecond         {5}",  
          recognitionEngine.AudioFormat.EncodingFormat.ToString(),  
          recognitionEngine.AudioFormat.AverageBytesPerSecond,  
          recognitionEngine.AudioFormat.BitsPerSample,  
          recognitionEngine.AudioFormat.BlockAlign,  
          recognitionEngine.AudioFormat.ChannelCount,  
          recognitionEngine.AudioFormat.SamplesPerSecond);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.AudioFormat.SpeechAudioFormatInfo" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioFormat" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevel">
      <MemberSignature Language="C#" Value="public int AudioLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AudioLevel" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信しているオーディオのレベルを取得、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />です。</summary>
        <value>0 ~ 100 は、音声認識エンジンへの入力のオーディオ レベル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 値 0 は、サイレント状態を表し、100 は、最大の音量を表します。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioLevelUpdated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt; AudioLevelUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioLevelUpdatedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 、オーディオ入力のレベルを報告します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 何度も 1 秒間には、このイベントを発生させます。 イベントが発生する頻度は、アプリケーションを実行しているコンピューターによって異なります。  
  
 イベントの時刻にオーディオ レベルを取得する、 <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs.AudioLevel%2A> 、関連するプロパティ <xref:System.Speech.Recognition.AudioLevelUpdatedEventArgs>します。 認識エンジンへの入力の現在のオーディオ レベルを取得するには、使用、認識エンジンの <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> プロパティです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例は、ハンドラーを追加、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevelUpdated> イベントを <xref:System.Speech.Recognition.SpeechRecognitionEngine> オブジェクトです。 ハンドラーは、コンソールに新しいオーディオ レベルを出力します。  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the SpeechRecognitionEngine object.   
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add an event handler for the AudioLevelUpdated event.  
  recognizer.AudioLevelUpdated +=   
   new EventHandler<AudioLevelUpdatedEventArgs>(recognizer_AudioLevelUpdated);  
  
  // Add other initialization code here.  
  
}  
  
// Write the audio level to the console when the AudioLevelUpdated event is raised.  
void recognizer_AudioLevelUpdated(object sender, AudioLevelUpdatedEventArgs e)  
{  
  Console.WriteLine("The audio level is now: {0}.", e.AudioLevel);  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioLevelUpdatedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel" />
      </Docs>
    </Member>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>入力を提供するデバイスによって生成されているオーディオ ストリームの現在の位置を取得、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />です。</summary>
        <value>入力デバイスによって生成されているオーディオ ストリームの現在の位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> プロパティは、生成されたオーディオ ストリームの入力デバイスの位置を参照します。 これに対し、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> プロパティは、オーディオ入力内の認識エンジンの位置を参照します。 それらの位置は異なってもかまいません。 たとえば、認識エンジンが受信した場合どの it されていない入力も、認識結果が次の値を生成、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> プロパティは、の値より小さい、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> プロパティです。  
  
   
  
## 例  
 次の例でインプロセスで音声認識エンジンでは、ディクテーション文法を使用して、音声入力に一致します。 ハンドラーを <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> をコンソールに出力イベント、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A>, 、および  <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioLevel%2A> 音声認識エンジンがその入力で音声が検出した場合。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine for US English.  
      using (recognizer = new SpeechRecognitionEngine(  
        new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create a grammar for finding services in different cities.  
        Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
        Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
        GrammarBuilder findServices = new GrammarBuilder("Find");  
        findServices.Append(services);  
        findServices.Append("near");  
        findServices.Append(cities);  
  
        // Create a Grammar object from the GrammarBuilder and load it to the recognizer.  
        Grammar servicesGrammar = new Grammar(findServices);  
        recognizer.LoadGrammarAsync(servicesGrammar);  
  
        // Add handlers for events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
        Console.WriteLine("Starting asynchronous recognition...");  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Gather information about detected speech and write it to the console.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Speech detected:");  
      Console.WriteLine("  Audio level: " + recognizer.AudioLevel);  
      Console.WriteLine("  Audio position at the event: " + e.AudioPosition);  
      Console.WriteLine("  Current audio position: " + recognizer.AudioPosition);  
      Console.WriteLine("  Current recognizer audio position: " +   
        recognizer.RecognizerAudioPosition);  
    }  
  
    // Write the text of the recognition result to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("\nSpeech recognized: " + e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="AudioSignalProblemOccurred">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt; AudioSignalProblemOccurred" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioSignalProblemOccurredEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オーディオ信号で問題を検出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 どのような問題が発生したためを使用して、 <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs.AudioSignalProblem%2A> 、関連するプロパティ <xref:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs>します。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例に関する情報を収集するイベント ハンドラーを定義する、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioSignalProblemOccurred> イベントです。  
  
```  
private SpeechRecognitionEngine recognizer;  
  
// Initialize the speech recognition engine.  
private void Initialize()  
{  
  recognizer = new SpeechRecognitionEngine();  
  
  // Add a handler for the AudioSignalProblemOccurred event.  
  recognizer.AudioSignalProblemOccurred +=   
    new EventHandler<AudioSignalProblemOccurredEventArgs>(  
      recognizer_AudioSignalProblemOccurred);  
}  
  
// Gather information when the AudioSignalProblemOccurred event is raised.  
void recognizer_AudioSignalProblemOccurred(object sender, AudioSignalProblemOccurredEventArgs e)  
{  
  StringBuilder details = new StringBuilder();  
  
  details.AppendLine("Audio signal problem information:");  
  details.AppendFormat(  
    " Audio level:               {0}" + Environment.NewLine +  
    " Audio position:            {1}" + Environment.NewLine +  
    " Audio signal problem:      {2}" + Environment.NewLine +  
    " Recognition engine audio position: {3}" + Environment.NewLine,  
    e.AudioLevel, e.AudioPosition,  e.AudioSignalProblem,  
    e.recoEngineAudioPosition);  
  
  // Insert additional event handler code here.  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblem" />
        <altmember cref="T:System.Speech.Recognition.AudioSignalProblemOccurredEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="AudioState">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.AudioState AudioState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.AudioState AudioState" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.AudioState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>受信しているオーディオの状態を取得、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />です。</summary>
        <value>音声認識エンジンの音声入力の状態。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> プロパティは、のメンバーとオーディオの状態を表す、 <xref:System.Speech.Recognition.AudioState> 列挙します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognizer.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="AudioStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.AudioStateChangedEventArgs&gt; AudioStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.AudioStateChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オーディオの状態の変化を受信しているときに発生、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />です。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 イベントの時刻にオーディオの状態を取得する、 <xref:System.Speech.Recognition.AudioStateChangedEventArgs.AudioState%2A> 、関連するプロパティ <xref:System.Speech.Recognition.AudioStateChangedEventArgs>します。 認識エンジンへの入力の現在のオーディオの状態を取得するには、使用認識エンジンの <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> プロパティです。 オーディオの状態の詳細については、次を参照してください。、 <xref:System.Speech.Recognition.AudioState> 列挙します。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例のハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> 認識機能を記述するイベントの新しい <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioState%2A> コンソールに変更されるたびにのメンバーを使用して、 <xref:System.Speech.Recognition.AudioState> 列挙します。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder("On this farm he had a");  
        farm.Append(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Attach event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(recognizer_AudioStateChanged);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine();  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Done.");  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the AudioStateChanged event.  
    static void recognizer_AudioStateChanged(object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("The new audio state is: " + e.AudioState);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.AudioState" />
        <altmember cref="T:System.Speech.Recognition.AudioStateChangedEventArgs" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioState" />
      </Docs>
    </Member>
    <Member MemberName="BabbleTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan BabbleTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BabbleTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または時間間隔を設定する、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 認識を確定する前に入力を含むだけバック グラウンド ノイズを受け入れます。</summary>
        <value>時間間隔の期間です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。 認識エンジンは、サイレント以外の状態は、認識エンジンのいずれかの初期の規則に一致しないことを入力するバック グラウンド ノイズが読み込まれ、音声認識の文法を有効になっているように分類します。 認識エンジンは、雑音タイムアウト期間内のバック グラウンド ノイズとサイレント状態のみを受信する場合、認識エンジンはその認識操作を終了します。  
  
-   非同期認識操作の場合、認識エンジンを発生させます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベント、場所、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A?displayProperty=fullName> プロパティは、 `true`, 、および <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティは `null`です。  
  
-   認識エンジンを返す同期認識操作とエミュレーションでは、 `null`, 、有効なのではなく <xref:System.Speech.Recognition.RecognitionResult>です。  
  
 雑音タイムアウト期間が 0 に設定されている場合、認識エンジンに雑音タイムアウト チェックは実行されません。 タイムアウト間隔は、任意の負でない値を指定できます。 既定値は、0 秒です。  
  
   
  
## 例  
 次の例を設定する基本的な音声認識を示すコンソール アプリケーションの一部を示しています、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 音声認識を開始する前にします。 音声認識エンジンのハンドラー <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントを示すためにコンソールにイベント情報を出力する方法、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 認識操作に影響します。  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティは 0 秒未満に設定します。</exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>破棄することも、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトです。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Dispose(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトを破棄し、セッション中に使用するリソースを解放します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーディオの代わりにテキストを使用して、同期の音声認識、音声認識エンジンへの入力をエミュレートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッドは、システムのオーディオ入力をバイパスし、として認識エンジンにテキストを提示 <xref:System.String> オブジェクトの配列として <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトです。 これはするテストまたはアプリケーションまたは文法のデバッグを行うときに役立ちます。 たとえば、エミュレーションを使用するを確認するかどうか、word、文法単語が認識される場合に、どのようなセマンティクスが返されます。 使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> エミュレーション操作中に音声認識エンジンにオーディオの入力を無効にする方法です。  
  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。 認識エンジンでは、改行と余分な空白を無視し、区切り文字をリテラルの入力として扱います。  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.RecognitionResult> エミュレートされた入力に対して音声認識エンジンによって生成されたオブジェクトの値を持つ `null` の <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> プロパティです。  
  
 非同期の認識機能をエミュレートするために使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">認識操作に入力します。</param>
        <summary>オーディオの代わりにテキストを使用して、同期の音声認識、音声認識に、語句の入力をエミュレートします。</summary>
        <returns>認識操作の結果または <see langword="null" /> 操作が失敗したか、認識エンジンが有効になっていません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。  
  
 Vista および Windows 7 に付属する認識エンジンでは、大文字小文字を区別し、文字幅の文法規則を適用する語句を入力するときにします。 この種類の比較に関する詳細については、次を参照してください。、 <xref:System.Globalization.CompareOptions> 列挙値 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> と <xref:System.Globalization.CompareOptions.IgnoreWidth>です。 認識は、新しい行と余分な空白を無視して、区切り文字をリテラルの入力として扱います。  
  
   
  
## 例  
 次のコード例は、エミュレートされた入力、関連付けられている認識の結果、および音声認識エンジンによって生成される、関連するイベントを示すコンソール アプリケーションの一部です。 この例では、次の出力を生成します。  
  
```  
TestRecognize("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
...Recognition result text = Smith  
  
TestRecognize("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
...Recognition result text = Jones  
  
TestRecognize("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
...No recognition result.  
  
TestRecognize("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
...Recognition result text = mister Smith  
  
press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace Sre_EmulateRecognize  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Disable audio input to the recognizer.  
        recognizer.SetInputToNull();  
  
        // Add handlers for events raised by the EmulateRecognize method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
  
        // Start four synchronous emulated recognition operations.  
        TestRecognize(recognizer, "Smith");  
        TestRecognize(recognizer, "Jones");  
        TestRecognize(recognizer, "Mister");  
        TestRecognize(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for synchronous recognition.  
    private static void TestRecognize(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      Console.WriteLine("TestRecognize(\"{0}\")...", input);  
      RecognitionResult result =  
        recognizer.EmulateRecognize(input,CompareOptions.IgnoreCase);  
      if (result != null)  
      {  
        Console.WriteLine("...Recognition result text = {0}",  
          result.Text ?? "<null>");  
      }  
      else  
      {  
        Console.WriteLine("...No recognition result.");  
      }  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    // Handle events.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンには、読み込まれた音声認識の文法がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputText" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="inputText" /> が空の文字列 \(""\) です。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">認識操作の入力が含まれている単語単位の配列。</param>
        <param name="compareOptions">エミュレートされた認識操作に使用する比較の種類を記述する列挙値のビットごとの組み合わせ。</param>
        <summary>オーディオの代わりにテキストを使用して、同期の音声認識、音声認識は、特定の単語の入力をエミュレートし、認識エンジンが単語とアンロードの音声認識の文法の Unicode 比較を処理する方法を指定します。</summary>
        <returns>認識操作の結果または <see langword="null" /> 操作が失敗したか、認識エンジンが有効になっていません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 [EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、[EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、[EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および [EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。  
  
 認識機能を使用して `compareOptions` とき入力フレーズに文法規則を適用します。 Vista および Windows 7 に付属する認識エンジンが場合は、大文字小文字を区別、 [EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> または [EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions.IgnoreCase> 値が存在します。 認識エンジンでは、文字幅は常に無視し、決してひらがなとカタカナを無視します。 認識エンジンもは改行と余分な空白を無視し、区切り文字をリテラルの入力として扱います。 詳細については、文字幅とひらがなとカタカナは、次を参照してください。、 [EmulateRecognize メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions> 列挙します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンには、読み込まれた音声認識の文法がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wordUnits" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wordUnits" /> 1 つ以上含む <see langword="null" /> 要素。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="compareOptions" /> 含む、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグ。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult EmulateRecognize (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult EmulateRecognize(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">認識操作の入力のフレーズです。</param>
        <param name="compareOptions">エミュレートされた認識操作に使用する比較の種類を記述する列挙値のビットごとの組み合わせ。</param>
        <summary>音声認識は、オーディオの代わりにテキストを使用して、同期の音声認識のために、語句の入力をエミュレートし、認識エンジンが、語句とアンロードの音声認識の文法の Unicode 比較を処理する方法を指定します。</summary>
        <returns>認識操作の結果または <see langword="null" /> 操作が失敗したか、認識エンジンが有効になっていません。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。  
  
 認識機能を使用して `compareOptions` とき入力フレーズに文法規則を適用します。 Vista および Windows 7 に付属する認識エンジンが場合は、大文字小文字を区別、 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> または <xref:System.Globalization.CompareOptions.IgnoreCase> 値が存在します。 認識エンジンでは、文字幅は常に無視し、決してひらがなとカタカナを無視します。 認識エンジンもは改行と余分な空白を無視し、区切り文字をリテラルの入力として扱います。 詳細については、文字幅とひらがなとカタカナは、次を参照してください。、 <xref:System.Globalization.CompareOptions> 列挙します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンには、読み込まれた音声認識の文法がありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputText" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="inputText" /> が空の文字列 \(""\) です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="compareOptions" /> 含む、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグ。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <MemberGroup MemberName="EmulateRecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オーディオの代わりにテキストを使用して、非同期の音声認識、音声認識エンジンへの入力をエミュレートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッドは、システムのオーディオ入力をバイパスし、として認識エンジンにテキストを提示 <xref:System.String> オブジェクトの配列として <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトです。 これはするテストまたはアプリケーションまたは文法のデバッグを行うときに役立ちます。 たとえば、エミュレーションを使用するを確認するかどうか、word、文法単語が認識される場合に、どのようなセマンティクスが返されます。 使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull%2A> エミュレーション操作中に音声認識エンジンにオーディオの入力を無効にする方法です。  
  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。 生成、認識エンジンには、非同期の認識操作が完了すると、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントです。 認識エンジンでは、改行と余分な空白を無視し、区切り文字をリテラルの入力として扱います。  
  
> [!NOTE]
>  <xref:System.Speech.Recognition.RecognitionResult> エミュレートされた入力に対して音声認識エンジンによって生成されたオブジェクトの値を持つ `null` の <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> プロパティです。  
  
 同期の認識機能をエミュレートするために使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inputText">認識操作に入力します。</param>
        <summary>オーディオの代わりにテキストを使用して、非同期の音声認識、音声認識に、語句の入力をエミュレートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。 生成、認識エンジンには、非同期の認識操作が完了すると、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントです。  
  
 Vista および Windows 7 に付属する認識エンジンでは、大文字小文字を区別し、文字幅の文法規則を適用する語句を入力するときにします。 この種類の比較に関する詳細については、次を参照してください。、 <xref:System.Globalization.CompareOptions> 列挙値 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> と <xref:System.Globalization.CompareOptions.IgnoreWidth>です。 認識は、新しい行と余分な空白を無視して、区切り文字をリテラルの入力として扱います。  
  
   
  
## 例  
 次のコード例は、非同期のエミュレートされた入力、関連付けられている認識の結果、および音声認識エンジンによって生成される、関連するイベントを示すコンソール アプリケーションの一部です。 この例では、次の出力を生成します。  
  
```  
  
TestRecognizeAsync("Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = Smith  
 Done.  
  
TestRecognizeAsync("Jones")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Jones; Text = Jones  
 EmulateRecognizeCompleted event raised.  
  Grammar = Jones; Text = Jones  
 Done.  
  
TestRecognizeAsync("Mister")...  
 SpeechDetected event raised.  
 SpeechHypothesized event raised.  
  Grammar = Smith; Text = mister  
 SpeechRecognitionRejected event raised.  
  Grammar = <not available>; Text =  
 EmulateRecognizeCompleted event raised.  
  No recognition result available.  
 Done.  
  
TestRecognizeAsync("Mister Smith")...  
 SpeechDetected event raised.  
 SpeechRecognized event raised.  
  Grammar = Smith; Text = mister Smith  
 EmulateRecognizeCompleted event raised.  
  Grammar = Smith; Text = mister Smith  
 Done.  
  
press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace SreEmulateRecognizeAsync  
{  
  class Program  
  {  
    // Indicate when an asynchronous operation is finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Load grammars.  
        recognizer.LoadGrammar(CreateNameGrammar("Smith"));  
        recognizer.LoadGrammar(CreateNameGrammar("Jones"));  
  
        // Configure the audio input.  
        recognizer.SetInputToNull();  
  
        // Add event handlers for the events raised by the  
        // EmulateRecognizeAsync method.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHander);  
  
        // Start four asynchronous emulated recognition operations.  
        TestRecognizeAsync(recognizer, "Smith");  
        TestRecognizeAsync(recognizer, "Jones");  
        TestRecognizeAsync(recognizer, "Mister");  
        TestRecognizeAsync(recognizer, "Mister Smith");  
      }  
  
      Console.WriteLine("press any key to exit...");  
      Console.ReadKey(true);  
    }  
  
    // Create a simple name grammar.  
    // Set the grammar name to the surname.  
    private static Grammar CreateNameGrammar(string surname)  
    {  
      GrammarBuilder builder = new GrammarBuilder("mister", 0, 1);  
      builder.Append(surname);  
  
      Grammar nameGrammar = new Grammar(builder);  
      nameGrammar.Name = surname;  
  
      return nameGrammar;  
    }  
  
    // Send emulated input to the recognizer for asynchronous  
    // recognition.  
    private static void TestRecognizeAsync(  
      SpeechRecognitionEngine recognizer, string input)  
    {  
      completed = false;  
  
      Console.WriteLine("TestRecognizeAsync(\"{0}\")...", input);  
      recognizer.EmulateRecognizeAsync(input);  
  
      // Wait for the operation to complete.  
      while (!completed)  
      {  
        Thread.Sleep(333);  
      }  
  
      Console.WriteLine(" Done.");  
      Console.WriteLine();  
    }  
  
    static void SpeechDetectedHandler(  
      object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechDetected event raised.");  
    }  
  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechHypothesized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    // Handle events.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognitionRejected event raised.");  
      if (e.Result != null)  
      {  
        string grammarName;  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name ?? "<none>";  
        }  
        else  
        {  
          grammarName = "<not available>";  
        }  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          grammarName, e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" SpeechRecognized event raised.");  
      if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text );  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
    }  
  
    static void EmulateRecognizeCompletedHander(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" EmulateRecognizeCompleted event raised.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("  {0} exception encountered: {1}:",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      else if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      else if (e.Result != null)  
      {  
        Console.WriteLine("  Grammar = {0}; Text = {1}",  
          e.Result.Grammar.Name ?? "<none>", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  No recognition result available.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンに読み込まれると、音声認識の文法がないか、認識エンジンが非同期認識操作が完了していないこと。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputText" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="inputText" /> が空の文字列 \(""\) です。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (System.Speech.Recognition.RecognizedWordUnit[] wordUnits, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(class System.Speech.Recognition.RecognizedWordUnit[] wordUnits, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordUnits" Type="System.Speech.Recognition.RecognizedWordUnit[]" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="wordUnits">認識操作の入力が含まれている単語単位の配列。</param>
        <param name="compareOptions">エミュレートされた認識操作に使用する比較の種類を記述する列挙値のビットごとの組み合わせ。</param>
        <summary>特定の単語の配列を使用して、音声認識エンジンへの入力をエミュレートする <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> の非同期の音声認識、音声の代わりにオブジェクトし、認識エンジンが単語とアンロードの音声認識の文法の Unicode 比較を処理する方法を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、[EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、[EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。 生成、認識エンジンには、非同期の認識操作が完了すると、 [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントです。  
  
 認識機能を使用して `compareOptions` とき入力フレーズに文法規則を適用します。 Vista および Windows 7 に付属する認識エンジンが場合は、大文字小文字を区別、 [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> または [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions.IgnoreCase> 値が存在します。 認識対象では、常に文字幅を無視し、カナ型を無視することはありません。 認識は、新しい行と余分な空白を無視して、区切り文字をリテラルの入力として扱います。 詳細については、文字幅とひらがなとカタカナは、次を参照してください。、 [EmulateRecognizeAsync メソッド \(RecognizedWordUnit\<xref:System.Globalization.CompareOptions> 列挙します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンに読み込まれると、音声認識の文法がないか、認識エンジンが非同期認識操作が完了していないこと。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="wordUnits" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="wordUnits" /> 1 つ以上含む <see langword="null" /> 要素。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="compareOptions" /> 含む、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグ。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeAsync">
      <MemberSignature Language="C#" Value="public void EmulateRecognizeAsync (string inputText, System.Globalization.CompareOptions compareOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EmulateRecognizeAsync(string inputText, valuetype System.Globalization.CompareOptions compareOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String,System.Globalization.CompareOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputText" Type="System.String" />
        <Parameter Name="compareOptions" Type="System.Globalization.CompareOptions" />
      </Parameters>
      <Docs>
        <param name="inputText">認識操作の入力のフレーズです。</param>
        <param name="compareOptions">エミュレートされた認識操作に使用する比較の種類を記述する列挙値のビットごとの組み合わせ。</param>
        <summary>音声認識は、オーディオの代わりにテキストを使用して、非同期の音声認識のために、語句の入力をエミュレートし、認識エンジンが、語句とアンロードの音声認識の文法の Unicode 比較を処理する方法を指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベント認識操作がエミュレートされていない場合と同様です。 生成、認識エンジンには、非同期の認識操作が完了すると、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントです。  
  
 認識機能を使用して `compareOptions` とき入力フレーズに文法規則を適用します。 Vista および Windows 7 に付属する認識エンジンが場合は、大文字小文字を区別、 <xref:System.Globalization.CompareOptions.OrdinalIgnoreCase> または <xref:System.Globalization.CompareOptions.IgnoreCase> 値が存在します。 認識対象では、常に文字幅を無視し、カナ型を無視することはありません。 認識は、新しい行と余分な空白を無視して、区切り文字をリテラルの入力として扱います。 詳細については、文字幅とひらがなとカタカナは、次を参照してください。、 <xref:System.Globalization.CompareOptions> 列挙します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">認識エンジンに読み込まれると、音声認識の文法がないか、認識エンジンが非同期認識操作が完了していないこと。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="inputText" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="inputText" /> が空の文字列 \(""\) です。</exception>
        <exception cref="T:System.NotSupportedException">
          <paramref name="compareOptions" /> 含む、 <see cref="F:System.Globalization.CompareOptions.IgnoreNonSpace" />, 、<see cref="F:System.Globalization.CompareOptions.IgnoreSymbols" />, 、または <see cref="F:System.Globalization.CompareOptions.StringSort" /> フラグ。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EmulateRecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt; EmulateRecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.EmulateRecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> エミュレートされた入力の認識の非同期操作を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドが非同期認識操作を開始します。<xref:System.Speech.Recognition.SpeechRecognitionEngine> を発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> 非同期操作を終了したときにイベントです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> 操作が発生する可能性が、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントが最後にこのようなイベントを認識エンジンが、特定の操作を生成します。  
  
 エミュレートされた認識に成功した場合、次のいずれかを使用して、認識結果にアクセスできます。  
  
-   <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> プロパティに、 <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> のハンドラー内のオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> イベントです。  
  
-   <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> プロパティに、 <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> のハンドラー内のオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。  
  
 エミュレートされた認識が、失敗した場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントは発生しません、 <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs.Result%2A> は null になります。  
  
 <xref:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs> は、<xref:System.ComponentModel.AsyncCompletedEventArgs> から派生します。  
  
 <xref:System.Speech.Recognition.SpeechRecognizedEventArgs> は、<xref:System.Speech.Recognition.RecognitionEventArgs> から派生します。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例は、音声認識の文法を読み込みをし、非同期のエミュレートされた入力、関連付けられている認識の結果、音声認識エンジンによって生成される、関連するイベントについて説明するコンソール アプリケーションの一部です。  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InProcessRecognizer  
{  
  class Program  
  {  
    // Indicate whether the asynchronous emulate recognition  
    // operation has completed.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
  
      // Initialize an instance of an in-process recognizer.  
      using (SpeechRecognitionEngine recognizer =   
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a sample grammar.  
        Grammar testGrammar =  
          new Grammar(new GrammarBuilder("testing testing"));  
        testGrammar.Name = "Test Grammar";  
        recognizer.LoadGrammar(testGrammar);  
  
        // Attach event handlers for recognition events.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(SpeechRecognizedHandler);  
        recognizer.EmulateRecognizeCompleted +=  
          new EventHandler<EmulateRecognizeCompletedEventArgs>(  
            EmulateRecognizeCompletedHandler);  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call mathches the grammar  
        // and generates a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing testing");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        completed = false;  
  
        // This EmulateRecognizeAsync call does not match the grammar  
        // or generate a SpeechRecognized event.  
        recognizer.EmulateRecognizeAsync("testing one two three");  
  
        // Wait for the asynchronous operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null)  
      {  
        Console.WriteLine("Result of 1st call to EmulateRecognizeAsync = {0}",  
          e.Result.Text ?? "<no text>");  
        Console.WriteLine();  
      }  
      else  
      {  
        Console.WriteLine("No recognition result");  
      }  
    }  
  
    // Handle the EmulateRecognizeCompleted event.  
    static void EmulateRecognizeCompletedHandler(  
      object sender, EmulateRecognizeCompletedEventArgs e)  
    {  
      if (e.Result == null)  
      {  
        Console.WriteLine("Result of 2nd call to EmulateRecognizeAsync = No result generated.");  
      }  
  
      // Indicate the asynchronous operation is complete.  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.EmulateRecognizeCompletedEventArgs" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサイレント状態の間隔を設定、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 認識操作を確定する前に、あいまいさのない入力の最後にそのまま使用されます。</summary>
        <value>サイレント状態の間隔の期間です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンは、認識の入力があいまいな場合に、このタイムアウト間隔を使用します。 たとえば、いずれかの認識をサポートする音声認識文法"新しいゲームをしてください"または「新しいゲーム」、"新しいゲームをしてください"、あいまいさのない入力は、「新しいゲーム」はあいまいな入力します。  
  
 このプロパティは、音声認識エンジンが認識操作を確定する前に追加の入力を待機はどのくらいの期間を決定します。 タイムアウト間隔を 10 秒、包括的に 0 秒からできます。 既定値は、150 ミリ秒です。  
  
 あいまいな入力のタイムアウト間隔を設定するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">0 秒より小さいか、10 秒を超える、このプロパティが設定されます。</exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="EndSilenceTimeoutAmbiguous">
      <MemberSignature Language="C#" Value="public TimeSpan EndSilenceTimeoutAmbiguous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan EndSilenceTimeoutAmbiguous" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはサイレント状態の間隔を設定、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 認識操作を確定する前に、あいまいな入力の最後にそのまま使用されます。</summary>
        <value>サイレント状態の間隔の期間です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンは、認識の入力があいまいな場合に、このタイムアウト間隔を使用します。 たとえば、いずれかの認識をサポートする音声認識文法"新しいゲームをしてください"または「新しいゲーム」、"新しいゲームをしてください"、あいまいさのない入力は、「新しいゲーム」はあいまいな入力します。  
  
 このプロパティは、音声認識エンジンが認識操作を確定する前に追加の入力を待機はどのくらいの期間を決定します。 タイムアウト間隔を 10 秒、包括的に 0 秒からできます。 既定値は、500 ミリ秒です。  
  
 あいまいさのない入力のタイムアウト間隔を設定するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">0 秒より小さいか、10 秒を超える、このプロパティが設定されます。</exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="Grammars">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt; Grammars { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.Grammar&gt; Grammars" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.Grammar&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コレクションを取得、 <see cref="T:System.Speech.Recognition.Grammar" /> で読み込まれているオブジェクト <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> インスタンス。</summary>
        <value>
          <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトのコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、音声認識エンジンによって現在読み込まれている各音声認識文法については、コンソールに情報を出力します。  
  
> [!IMPORTANT]
>  このメソッドは、コレクションの要素を列挙中にコレクションが変更された場合、エラーを回避する文法コレクションをコピーします。  
  
```csharp  
  
private static void ListGrammars(SpeechRecognitionEngine recognizer)  
{  
  string qualifier;  
  List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
  foreach (Grammar g in grammars)  
  {  
    qualifier = (g.Enabled) ? "enabled" : "disabled";  
  
    Console.WriteLine("Grammar {0} is loaded and is {1}.",  
      g.Name, qualifier);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.Grammar" />
      </Docs>
    </Member>
    <Member MemberName="InitialSilenceTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan InitialSilenceTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan InitialSilenceTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または時間間隔を設定する、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 認識を確定する前に入力を含む唯一の無音を受け入れます。</summary>
        <value>サイレント状態の間隔の期間です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。 認識エンジンの入力は、サイレント状態を初期のサイレント状態のタイムアウト期間中には、認識エンジンはその認識操作を終了します。  
  
-   非同期認識操作とエミュレーションでは、認識エンジンを発生させます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベント、場所、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A?displayProperty=fullName> プロパティは、 `true`, 、および <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A?displayProperty=fullName> プロパティは `null`です。  
  
-   認識エンジンを返す同期認識操作とエミュレーションでは、 `null`, 、有効なのではなく <xref:System.Speech.Recognition.RecognitionResult>です。  
  
 初期のサイレント状態のタイムアウト間隔が 0 に設定されている場合、認識エンジンに、初期無音タイムアウトのチェックは実行されません。 タイムアウト間隔は、任意の負でない値を指定できます。 既定値は、0 秒です。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 設定すると、例を <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 音声認識を開始する前にします。 音声認識エンジンのハンドラー <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioStateChanged> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントを示すためにコンソールにイベント情報を出力する方法、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> プロパティ認識操作に影響します。  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Load a Grammar object.  
        recognizer.LoadGrammar(CreateServicesGrammar("FindServices"));  
  
        // Add event handlers.  
        recognizer.AudioStateChanged +=  
          new EventHandler<AudioStateChangedEventArgs>(  
            AudioStateChangedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(3);  
        recognizer.BabbleTimeout = TimeSpan.FromSeconds(2);  
        recognizer.EndSilenceTimeout = TimeSpan.FromSeconds(1);  
        recognizer.EndSilenceTimeoutAmbiguous = TimeSpan.FromSeconds(1.5);  
  
        Console.WriteLine("BabbleTimeout: {0}", recognizer.BabbleTimeout);  
        Console.WriteLine("InitialSilenceTimeout: {0}", recognizer.InitialSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeout: {0}", recognizer.EndSilenceTimeout);  
        Console.WriteLine("EndSilenceTimeoutAmbiguous: {0}", recognizer.EndSilenceTimeoutAmbiguous);  
        Console.WriteLine();  
  
        // Start asynchronous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Single);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Create a grammar and build it into a Grammar object.   
    static Grammar CreateServicesGrammar(string grammarName)  
    {  
  
      // Create a grammar for finding services in different cities.  
      Choices services = new Choices(new string[] { "restaurants", "hotels", "gas stations" });  
      Choices cities = new Choices(new string[] { "Seattle", "Boston", "Dallas" });  
  
      GrammarBuilder findServices = new GrammarBuilder("Find");  
      findServices.Append(services);  
      findServices.Append("near");  
      findServices.Append(cities);  
  
      // Create a Grammar object from the GrammarBuilder..  
      Grammar servicesGrammar = new Grammar(findServices);  
      servicesGrammar.Name = ("FindServices");  
      return servicesGrammar;  
    }  
  
    // Handle the AudioStateChanged event.  
    static void AudioStateChangedHandler(  
      object sender, AudioStateChangedEventArgs e)  
    {  
      Console.WriteLine("AudioStateChanged ({0}): {1}",  
        DateTime.Now.ToString("mm:ss.f"), e.AudioState);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("RecognizeCompleted ({0}):",  
        DateTime.Now.ToString("mm:ss.f"));  
  
      string resultText;  
      if (e.Result != null) { resultText = e.Result.Text; }  
      else { resultText = "<null>"; }  
  
      Console.WriteLine(  
        " BabbleTimeout: {0}; InitialSilenceTimeout: {1}; Result text: {2}",  
        e.BabbleTimeout, e.InitialSilenceTimeout, resultText);  
      if (e.Error != null)  
      {  
        Console.WriteLine(" Exception message: ", e.Error.Message);  
      }  
  
      // Start the next asynchronous recognition operation.  
      ((SpeechRecognitionEngine)sender).RecognizeAsync(RecognizeMode.Single);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">このプロパティは 0 秒未満に設定します。</exception>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.Speech.Recognition.RecognizedWordUnit[],System.Globalization.CompareOptions)" />
      </Docs>
    </Member>
    <Member MemberName="InstalledRecognizers">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizerInfo&gt; InstalledRecognizers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizerInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のシステムにインストールされている音声認識エンジンのすべての情報を返します。</summary>
        <returns>読み取り専用のコレクション、 <see cref="T:System.Speech.Recognition.RecognizerInfo" /> インストール済みの認識機能を記述するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在の認識に関する情報を取得するを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo%2A> プロパティです。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 によって返されるコレクションを使って、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> 英語の言語をサポートする音声認識エンジンを検索するメソッドです。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Select a speech recognizer that supports English.  
      RecognizerInfo info = null;  
      foreach (RecognizerInfo ri in SpeechRecognitionEngine.InstalledRecognizers())  
      {  
        if (ri.Culture.TwoLetterISOLanguageName.Equals("en"))  
        {  
          info = ri;  
          break;  
        }  
      }  
      if (info == null) return;  
  
      // Create the selected recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(info))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammar">
      <MemberSignature Language="C#" Value="public void LoadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">読み込む文法オブジェクト。</param>
        <summary>同期的に読み込み、 <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合に、認識エンジンが例外をスロー、 <xref:System.Speech.Recognition.Grammar> オブジェクトが既に読み込ま、非同期的に読み込まれて、またはが、認識エンジンを読み込めませんでした。 同じを読み込むことができません <xref:System.Speech.Recognition.Grammar> オブジェクトの複数のインスタンスを <xref:System.Speech.Recognition.SpeechRecognitionEngine>します。 代わりに、作成、新しい <xref:System.Speech.Recognition.Grammar> オブジェクトごとに <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス。  
  
 認識エンジンが実行されている場合、アプリケーションが使用する必要があります <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。  
  
 文法を読み込むときに既定で有効になります。 読み込まれた文章を無効にする、 <xref:System.Speech.Recognition.Grammar.Enabled%2A> プロパティです。  
  
 読み込む、 <xref:System.Speech.Recognition.Grammar> 非同期的にオブジェクトを使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 例を作成し、 <xref:System.Speech.Recognition.DictationGrammar> 音声認識エンジンに読み込みます。  
  
```csharp  
using System;  
using System.Speech.Recognition;  
  
namespace SpeechRecognitionApp  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Create an in-process speech recognizer for the en-US locale.  
      using (  
      SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Add a handler for the speech recognized event.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous speech recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        while (true)  
        {  
          Console.ReadLine();  
        }  
      }  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Recognized text: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Grammar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="Grammar" /> 有効な状態ではありません。</exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarAsync">
      <MemberSignature Language="C#" Value="public void LoadGrammarAsync (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void LoadGrammarAsync(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">読み込みに音声認識の文法。</param>
        <summary>音声認識の文法を非同期的に読み込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンが読み込みが完了したとき、 <xref:System.Speech.Recognition.Grammar> オブジェクトを生成、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> イベントです。 場合に、認識エンジンが例外をスロー、 <xref:System.Speech.Recognition.Grammar> オブジェクトが既に読み込ま、非同期的に読み込まれて、またはが、認識エンジンを読み込めませんでした。 同じを読み込むことができません <xref:System.Speech.Recognition.Grammar> オブジェクトの複数のインスタンスを <xref:System.Speech.Recognition.SpeechRecognitionEngine>します。 代わりに、作成、新しい <xref:System.Speech.Recognition.Grammar> オブジェクトごとに <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス。  
  
 認識エンジンが実行されている場合、アプリケーションが使用する必要があります <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。  
  
 文法を読み込むときに既定で有効になります。 読み込まれた文章を無効にする、 <xref:System.Speech.Recognition.Grammar.Enabled%2A> プロパティです。  
  
 音声認識の文法を同期的に読み込むには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Grammar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="Grammar" /> 有効な状態ではありません。</exception>
        <exception cref="T:System.OperationCanceledException">非同期操作は取り消されました。</exception>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="LoadGrammarCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt; LoadGrammarCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.LoadGrammarCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> の非同期の読み込みが終了したら、 <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンの <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドが非同期操作を開始します。<xref:System.Speech.Recognition.SpeechRecognitionEngine> 操作が完了すると、このイベントを発生させます。 取得する、 <xref:System.Speech.Recognition.Grammar> 認識エンジンが読み込まれているオブジェクトを使用、 <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs.Grammar%2A> 、関連するプロパティ <xref:System.Speech.Recognition.LoadGrammarCompletedEventArgs>します。 現在を取得する <xref:System.Speech.Recognition.Grammar> 認識エンジンが読み込まれたオブジェクトを使用認識エンジンの <xref:System.Speech.Recognition.SpeechRecognitionEngine.Grammars%2A> プロパティです。  
  
 認識エンジンが実行されている場合、アプリケーションが使用する必要があります <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> を読み込み、アンロードが有効にすると、または文法を無効にする前に、音声認識エンジンを一時停止します。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例では、プロセス内の音声認識エンジンを作成し、文法と自由発話のディクテーションを受け入れるための特定の単語を認識するための 2 つの種類を作成します。 例では、構築、 <xref:System.Speech.Recognition.Grammar> オブジェクトから完成した音声認識の文法の各し、非同期的に読み込みます、 <xref:System.Speech.Recognition.Grammar> オブジェクトを <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス。 ハンドラーを認識エンジンの <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarCompleted> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントでは、名前をコンソールに書き込み、 <xref:System.Speech.Recognition.Grammar> を認識し、認識結果のテキストをそれぞれ実行するために使用されたオブジェクト。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and set its input.  
      recognizer = new SpeechRecognitionEngine();  
      recognizer.SetInputToDefaultAudioDevice();  
  
      // Add a handler for the LoadGrammarCompleted event.  
      recognizer.LoadGrammarCompleted +=  
        new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
      // Add a handler for the SpeechRecognized event.  
      recognizer.SpeechRecognized +=  
        new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
      // Create the "yesno" grammar.  
      Choices yesChoices = new Choices(new string[] { "yes", "yup", "yeah" });  
      SemanticResultValue yesValue =  
          new SemanticResultValue(yesChoices, (bool)true);  
      Choices noChoices = new Choices(new string[] { "no", "nope", "neah" });  
      SemanticResultValue noValue =  
          new SemanticResultValue(noChoices, (bool)false);  
      SemanticResultKey yesNoKey =  
          new SemanticResultKey("yesno", new Choices(new GrammarBuilder[] { yesValue, noValue }));  
      Grammar yesnoGrammar = new Grammar(yesNoKey);  
      yesnoGrammar.Name = "yesNo";  
  
      // Create the "done" grammar.  
      Grammar doneGrammar =  
        new Grammar(new Choices(new string[] { "done", "exit", "quit", "stop" }));  
      doneGrammar.Name = "Done";  
  
      // Create a dictation grammar.  
      Grammar dictation = new DictationGrammar();  
      dictation.Name = "Dictation";  
  
      // Load grammars to the recognizer.  
      recognizer.LoadGrammarAsync(yesnoGrammar);  
      recognizer.LoadGrammarAsync(doneGrammar);  
      recognizer.LoadGrammarAsync(dictation);  
  
      // Start asynchronous, continuous recognition.  
      recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
      // Keep the console window open.  
      Console.ReadLine();  
    }  
  
    // Handle the LoadGrammarCompleted event.   
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      string grammarName = e.Grammar.Name;  
      bool grammarLoaded = e.Grammar.Loaded;  
  
      if (e.Error != null)  
      {  
        Console.WriteLine("LoadGrammar for {0} failed with a {1}.",  
        grammarName, e.Error.GetType().Name);  
  
        // Add exception handling code here.  
      }  
  
      Console.WriteLine("Grammar {0} {1} loaded.",  
      grammarName, (grammarLoaded) ? "is" : "is not");  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
  
      // Add event handler code here.  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.LoadGrammarCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.Grammars" />
      </Docs>
    </Member>
    <Member MemberName="MaxAlternates">
      <MemberSignature Language="C#" Value="public int MaxAlternates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxAlternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得または代替認識の結果の最大数を設定、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 認識操作ごとに返します。</summary>
        <value>返す別の検索結果の数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognitionResult> クラスのコレクションを格納する <xref:System.Speech.Recognition.RecognizedPhrase> 入力の解釈を表すオブジェクト。  
  
 既定値 <xref:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates%2A> は 10 です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.MaxAlternates" /> 0 より小さい値に設定されます。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      </Docs>
    </Member>
    <Member MemberName="QueryRecognizerSetting">
      <MemberSignature Language="C#" Value="public object QueryRecognizerSetting (string settingName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object QueryRecognizerSetting(string settingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">取得する設定の名前。</param>
        <summary>認識エンジンの設定の値を返します。</summary>
        <returns>設定の値。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンの設定には、文字列、64 ビットの整数、またはメモリ アドレス データを含めることができます。 次の表に、Microsoft 音声 API \(SAPI\) 用に定義されている設定の準拠の認識機能です。 次の設定によっては、設定をサポートする各認識エンジンの同じ範囲が必要です。 SAPI 準拠認識機能では、これらの設定をサポートする必要がないと、その他の設定をサポートすることができます。  
  
|名前|説明|  
|--------|--------|  
|`ResourceUsage`|認識エンジンの CPU 使用量を指定します。 範囲は 0 ~ 100 です。 既定値は 50 です。|  
|`ResponseSpeed`|音声認識エンジンが認識操作を完了する前に、あいまいさのない入力の最後に、サイレント状態の長さを示します。 範囲は、0 10,000 ミリ秒 \(ms\) です。 この設定は、認識エンジンに対応 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> プロパティです。  既定値 \= 150ms年です。|  
|`ComplexResponseSpeed`|音声認識エンジンが認識操作を完了する前に、あいまいな入力の最後に、サイレント状態の長さを示します。 範囲は 0 ~ 10,000 ミリ秒です。 この設定は、認識エンジンに対応 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。 既定の 500 ミリ秒になります。|  
|`AdaptationOn`|アコースティック モデルの学習機能は有効になっているかどうかを示します \(値 \= `1`\) または OFF \(値 \= `0`\)。 既定値は `1` \(ON\) です。|  
|`PersistedBackgroundAdaptation`|バック グラウンドで調整が ON であるかどうかを示します \(値 \= `1`\) または OFF \(値 \= `0`\)、レジストリの設定が引き続き発生するとします。 既定値は `1` \(ON\) です。|  
  
 認識エンジンの設定を更新するには、いずれかを使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドです。  
  
   
  
## 例  
 次の例は、EN\-US ロケールをサポートする認識エンジンに定義された設定の数の値を出力するコンソール アプリケーションの一部です。 この例では、次の出力を生成します。  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation"  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        foreach (string setting in settings)  
        {  
          try  
          {  
            object value = recognizer.QueryRecognizerSetting(setting);  
            Console.WriteLine("  {0,-30} = {1}", setting, value);  
          }  
          catch  
          {  
            Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
              setting);  
          }  
        }  
      }  
      Console.WriteLine();  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settingName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="settingName" /> が空の文字列 \(""\) です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">認識エンジンには、その名前の設定がありません。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Recognize">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>同期の音声認識操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッドは、単一の同期の認識操作を実行します。 認識エンジンでは、そのロードされ、有効な音声認識の文法に対してこの操作を実行します。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
 認識エンジンは発生しません、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントのいずれかを使用する場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドを返す、 <xref:System.Speech.Recognition.RecognitionResult> オブジェクト、または `null` 操作が失敗したか、認識機能が有効でない場合。  
  
 次の理由で同期の認識操作を実行できます。  
  
-   タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> プロパティ、または、 `initialSilenceTimeout` のパラメーター、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドです。  
  
-   認識エンジンが音声が検出したが、その読み込まれ、有効になっているのいずれかで一致が検出されない <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 認識エンジンが音声または認識に関してサイレント状態のタイミングがどのように処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine> が少なくとも 1 つ <xref:System.Speech.Recognition.Grammar> 認識を実行する前にオブジェクトが読み込まれています。 音声認識の文法を読み込むには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
 非同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>同期の音声認識操作を実行します。</summary>
        <returns>入力の認識結果または <see langword="null" /> 操作が失敗したか、認識機能が有効でない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、1 つの認識操作を実行します。 認識エンジンでは、そのロードされ、有効な音声認識の文法に対してこの操作を実行します。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
 認識エンジンは発生しません、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> このメソッドを使用したときにイベントです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> メソッドが返される、 <xref:System.Speech.Recognition.RecognitionResult> オブジェクト、または `null` 操作が失敗した場合。  
  
 次の理由で同期の認識操作を実行できます。  
  
-   タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> プロパティです。  
  
-   認識エンジンが音声が検出したが、その読み込まれ、有効になっているのいずれかで一致が検出されない <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 非同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 例を作成し、 <xref:System.Speech.Recognition.DictationGrammar>, 、プロセス内の音声認識エンジンに読み込みます、および 1 つの認識操作を実行します。  
  
```  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Modify the initial silence time-out value.  
        recognizer.InitialSilenceTimeout = TimeSpan.FromSeconds(5);  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize();  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Recognize">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognitionResult Recognize (TimeSpan initialSilenceTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognitionResult Recognize(valuetype System.TimeSpan initialSilenceTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize(System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognitionResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="initialSilenceTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="initialSilenceTimeout">音声認識エンジンを受け入れる時間間隔では、認識を確定する前にのみサイレント状態を含むを入力します。</param>
        <summary>指定した初期無音のタイムアウト時間での同期の音声認識操作を実行します。</summary>
        <returns>入力の認識結果または <see langword="null" /> 操作が失敗したか、認識機能が有効でない場合。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 音声認識エンジンが音声を検出で指定された期間内で `initialSilenceTimeout` 引数 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%28System.TimeSpan%29> 1 つの認識操作を実行し、後に終了します。`initialSilenceTimeout` パラメーターには、認識エンジンがよりも優先 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> プロパティです。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
 認識エンジンは発生しません、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> このメソッドを使用したときにイベントです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize> メソッドが返される、 <xref:System.Speech.Recognition.RecognitionResult> オブジェクト、または `null` 操作が失敗した場合。  
  
 次の理由で同期の認識操作を実行できます。  
  
-   タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> 、または、 `initialSilenceTimeout` パラメーター。  
  
-   認識エンジンが音声が検出したが、その読み込まれ、有効になっているのいずれかで一致が検出されない <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 非同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドです。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 例を作成し、 <xref:System.Speech.Recognition.DictationGrammar>, 、プロセス内の音声認識エンジンに読み込みます、および 1 つの認識操作を実行します。  
  
```csharp  
  
using System;  
using System.Speech.Recognition;  
  
namespace SynchronousRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer for the en-US locale.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(  
          new System.Globalization.CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        recognizer.LoadGrammar(new DictationGrammar());  
  
        // Configure input to the speech recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start synchronous speech recognition.  
        RecognitionResult result = recognizer.Recognize(TimeSpan.FromSeconds(5));  
  
        if (result != null)  
        {  
          Console.WriteLine("Recognized text = {0}", result.Text);  
        }  
        else  
        {  
          Console.WriteLine("No recognition result available.");  
        }  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to continue...");  
      Console.ReadKey();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RecognizeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>非同期の音声認識操作を開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これらのメソッド実行の 1 つまたは複数の非同期認識操作します。 認識エンジンでは、読み込まれ、有効な音声認識文法に対して各操作を実行します。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。 いつ発生するか、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> 操作が完了するとします。  
  
 非同期の認識操作の結果を取得するには、認識エンジンのイベント ハンドラーをアタッチ <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。 認識エンジンでは、同期または非同期の認識操作が正常に完了するたびに、このイベントを生成します。 認識が、失敗した場合、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> プロパティを <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> のハンドラーでアクセスできるオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントがある `null`です。  
  
 次の理由により、非同期の認識操作を実行できます。  
  
-   タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> プロパティです。  
  
-   認識エンジンが音声が検出したが、その読み込まれ、有効になっているのいずれかで一致が検出されない <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine> が少なくとも 1 つ <xref:System.Speech.Recognition.Grammar> 認識を実行する前にオブジェクトが読み込まれています。 音声認識の文法を読み込むには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync%2A> メソッドです。  
  
-   認識エンジンが音声または認識に関してサイレント状態のタイミングがどのように処理する方法を変更するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
-   同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>1 つ、非同期の音声認識操作を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、1 つ、非同期の認識操作を実行します。 認識エンジンでは、そのロードされ、有効な音声認識の文法に対して演算を実行します。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。 いつ発生するか、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> 操作が完了するとします。  
  
 非同期の認識操作の結果を取得するには、認識エンジンのイベント ハンドラーをアタッチ <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。 認識エンジンでは、同期または非同期の認識操作が正常に完了するたびに、このイベントを生成します。 認識が、失敗した場合、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> プロパティを <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> のハンドラーでアクセスできるオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントがある `null`です。  
  
 同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドです。  
  
   
  
## 例  
 次の例では、基本的な非同期音声認識を示すコンソール アプリケーションの一部を示します。 例を作成し、 <xref:System.Speech.Recognition.DictationGrammar>, 、プロセス内の音声認識エンジンへのロード、および 1 つの認識の非同期操作を実行します。 イベント ハンドラーは、認識エンジンを操作中に発生させるイベントを示すために含まれています。  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[]   
        { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start an asynchronous  
        // recognition operation.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsync">
      <MemberSignature Language="C#" Value="public void RecognizeAsync (System.Speech.Recognition.RecognizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsync(valuetype System.Speech.Recognition.RecognizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync(System.Speech.Recognition.RecognizeMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Speech.Recognition.RecognizeMode" />
      </Parameters>
      <Docs>
        <param name="mode">1 つまたは複数の認識操作を実行するかどうかを示します。</param>
        <summary>1 つまたは複数の非同期の音声認識操作を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `mode` は <xref:System.Speech.Recognition.RecognizeMode.Multiple>, 、認識エンジンでは、まで認識の非同期操作を実行するが引き続き、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> メソッドが呼び出されます。  
  
 このメソッドの呼び出し中に、認識エンジンは、次のイベントを発生させることができます。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected>。  認識エンジンが入力として音声認識を特定することを検出した場合に発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>。  入力は、アクティブな文法の 1 つにあいまいな一致を作成するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>。 認識エンジンが認識操作を終了するときに発生します。  
  
-   <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>。 いつ発生するか、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> 操作が完了するとします。  
  
 非同期の認識操作の結果を取得するには、認識エンジンのイベント ハンドラーをアタッチ <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。 認識エンジンでは、同期または非同期の認識操作が正常に完了するたびに、このイベントを生成します。 認識が、失敗した場合、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.Result%2A> プロパティを <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> のハンドラーでアクセスできるオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> イベントがある `null`です。  
  
 次の理由により、非同期の認識操作を実行できます。  
  
-   タイムアウト間隔は、の有効期限が切れる前に、音声が検出されない、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A> プロパティです。  
  
-   認識エンジンが音声が検出したが、その読み込まれ、有効になっているのいずれかで一致が検出されない <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 同期の認識を実行するのいずれかの操作を使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> メソッドです。  
  
   
  
## 例  
 次の例では、基本的な非同期音声認識を示すコンソール アプリケーションの一部を示します。 例を作成し、 <xref:System.Speech.Recognition.DictationGrammar>, 、プロセス内の音声認識エンジンに読み込みます、および複数の非同期認識操作を実行します。 非同期操作は 30 秒後に取り消されました。 イベント ハンドラーは、認識エンジンを操作中に発生させるイベントを示すために含まれています。  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create a grammar for choosing cities for a flight.  
        Choices cities = new Choices(new string[] { "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I want to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Construct a Grammar object and load it to the recognizer.  
        Grammar cityChooser = new Grammar(gb);  
        cityChooser.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(cityChooser);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer and start asynchronous  
        // recognition.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        completed = false;  
        Console.WriteLine("Starting asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 30 seconds, and then cancel asynchronous recognition.  
        Thread.Sleep(TimeSpan.FromSeconds(30));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
        Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncCancel">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在認識操作の完了を待つことがなく、非同期の認識を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、非同期の認識をすぐに終了します。 現在の非同期認識操作は、入力を受け取って場合、は、入力が切り捨てられ、既存の入力と操作が完了します。 認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> 非同期操作は取り消され、設定したときにイベント、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> に `true`します。 このメソッドによって開始される非同期操作のキャンセル、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 入力を切り捨てずに非同期の認識機能を停止するには使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> メソッドです。  
  
   
  
## 例  
 使用方法を示すコンソール アプリケーションの一部の次の例を <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> メソッドです。 例は、作成し、音声認識の文法を読み込みます化しが継続して非同期認識操作を開始し、操作をキャンセルする前に、2 秒間一時停止します。 認識エンジンが、ファイルから入力を受け取る c:\\temp\\audioinput\\sample.wav します。 イベント ハンドラーは、認識エンジンを操作中に発生させるイベントを示すために含まれています。  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then cancel the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncCancel();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeAsyncStop">
      <MemberSignature Language="C#" Value="public void RecognizeAsyncStop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RecognizeAsyncStop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の認識操作の完了後は、非同期の認識を停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、入力を切り捨てずに非同期の認識を終了します。 現在の非同期認識操作は、入力を受け取って、認識エンジンは現在認識操作が完了するまでの入力の受け入れを続行します。 認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted> 非同期操作は停止し、設定したときにイベント、 <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> に `true`します。 このメソッドによって開始される非同期操作を停止する、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 既存の入力だけの非同期の認識をすぐに取り消す場合にを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel%2A> メソッドです。  
  
   
  
## 例  
 使用方法を示すコンソール アプリケーションの一部の次の例を <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncStop%2A> メソッドです。 例は、作成し、音声認識の文法を読み込みます化しが継続して非同期認識操作を開始し、操作を停止する前に、2 秒間一時停止します。 認識エンジンが、ファイルから入力を受け取る c:\\temp\\audioinput\\sample.wav します。 イベント ハンドラーは、認識エンジンを操作中に発生させるイベントを示すために含まれています。  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace AsynchronousRecognition  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      // Create an in-process speech recognizer.  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        // Create and load a dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers.  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(  
            SpeechDetectedHandler);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(  
            SpeechHypothesizedHandler);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(  
            SpeechRecognitionRejectedHandler);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Begin asynchronous recognition from pre-recorded input.  
        recognizer.SetInputToWaveFile(@"c:\temp\audioinput\sample.wav");  
  
        completed = false;  
        Console.WriteLine("Begin continuing asynchronous recognition...");  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait 2 seconds and then stop the recognition operation.  
        Thread.Sleep(TimeSpan.FromSeconds(2));  
        recognizer.RecognizeAsyncStop();  
  
        // Wait for the operation to complete.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechDetected event.  
    static void SpeechDetectedHandler(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechDetectedHandler:");  
      Console.WriteLine(" - AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void SpeechHypothesizedHandler(  
      object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechHypothesizedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void SpeechRecognitionRejectedHandler(  
      object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognitionRejectedHandler:");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine(" In SpeechRecognizedHandler.");  
  
      string grammarName = "<not available>";  
      string resultText = "<not available>";  
      if (e.Result != null)  
      {  
        if (e.Result.Grammar != null)  
        {  
          grammarName = e.Result.Grammar.Name;  
        }  
        resultText = e.Result.Text;  
      }  
  
      Console.WriteLine(" - Grammar Name = {0}; Result Text = {1}",  
        grammarName, resultText);  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine(" In RecognizeCompletedHandler.");  
  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          " - Error occurred during recognition: {0}", e.Error);  
        return;  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine(" - asynchronous operation canceled.");  
      }  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          " - BabbleTimeout = {0}; InitialSilenceTimeout = {1}",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          " - AudioPosition = {0}; InputStreamEnded = {1}",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
      if (e.Result != null)  
      {  
        Console.WriteLine(  
          " - Grammar = {0}; Text = {1}; Confidence = {2}",  
          e.Result.Grammar.Name, e.Result.Text, e.Result.Confidence);  
      }  
      else  
      {  
        Console.WriteLine(" - No result.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsyncCancel" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="RecognizeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizeCompletedEventArgs&gt; RecognizeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 非同期認識操作を終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine> オブジェクトの <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドが非同期認識操作を開始します。 認識エンジンでは、非同期操作を終了、このイベントが発生します。  
  
 ハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> アクセスできる、イベント、 <xref:System.Speech.Recognition.RecognitionResult> で、 <xref:System.Speech.Recognition.RecognizeCompletedEventArgs> オブジェクトです。 認識できなかった場合、 <xref:System.Speech.Recognition.RecognitionResult> は `null`です。 タイムアウトまたはオーディオ入力の中断の認識が失敗する原因となったかどうかを判断するのプロパティにアクセスすることができます <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs.BabbleTimeout%2A>, 、または <xref:System.Speech.Recognition.RecognizeCompletedEventArgs.InputStreamEnded%2A>です。  
  
 詳細については、<xref:System.Speech.Recognition.RecognizeCompletedEventArgs> クラスを参照してください。  
  
 最適な認識が拒否された候補の詳細を取得するには、ハンドラーをアタッチ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> イベントです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例では、「ジャズのカテゴリのアーティストの一覧を表示する」や「アルバム絶対的を表示する」などの語句を認識します。 この例のハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> 認識の結果に関する情報をコンソールに表示するイベントです。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
        recognizer.LoadGrammarCompleted +=   
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted, error occurred during recognition: {0}", e.Error);  
        return;  
      }  
  
      if (e.InitialSilenceTimeout || e.BabbleTimeout)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: BabbleTimeout({0}), InitialSilenceTimeout({1}).",  
          e.BabbleTimeout, e.InitialSilenceTimeout);  
        return;  
      }  
  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine(  
          "RecognizeCompleted: AudioPosition({0}), InputStreamEnded({1}).",  
          e.AudioPosition, e.InputStreamEnded);  
      }  
  
      if (e.Result != null)  
      {  
        Console.WriteLine("RecognizeCompleted:");  
        Console.WriteLine("  Grammar: " + e.Result.Grammar.Name);  
        Console.WriteLine("  Recognized text: " + e.Result.Text);  
        Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
        Console.WriteLine("  Audio position: " + e.AudioPosition);  
      }  
  
      else  
      {  
        Console.WriteLine("RecognizeCompleted: No result.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded:  " + e.Grammar.Name);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizeCompletedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerAudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan RecognizerAudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan RecognizerAudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の場所を取得、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オーディオの入力が処理しているのです。</summary>
        <value>処理しているオーディオの入力で、認識エンジンの位置。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 オーディオの位置は、各音声認識エンジンに固有です。 有効な場合は、入力ストリームのゼロ値が確立されます。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> プロパティ参照、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> オーディオ入力内のオブジェクトの位置。 これに対し、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> プロパティは、生成されたオーディオ ストリームの入力デバイスの位置を参照します。 それらの位置は異なってもかまいません。 たとえば、認識エンジンが受信した場合どの it されていない入力も、認識結果が次の値を生成、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> プロパティは、の値より小さい、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> プロパティです。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerInfo">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizerInfo RecognizerInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizerInfo RecognizerInfo" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizerInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のインスタンスに関する情報を取得 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" />します。</summary>
        <value>現在の音声認識エンジンについて説明します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 に現在のシステムのすべてのインストール済みの音声認識機能に関する情報を取得するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers%2A> メソッドです。  
  
   
  
## 例  
 次の例では、現在のプロセス内の音声認識エンジンのデータの部分的な一覧を取得します。 詳細については、「<xref:System.Speech.Recognition.RecognizerInfo>」を参照してください。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace RecognitionEngine  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
        Console.WriteLine("Information for the current speech recognition engine:");  
        Console.WriteLine("  Name: {0}", recognizer.RecognizerInfo.Name);  
        Console.WriteLine("  Culture: {0}", recognizer.RecognizerInfo.Culture.ToString());  
        Console.WriteLine("  Description: {0}", recognizer.RecognizerInfo.Description);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.#ctor(System.Speech.Recognition.RecognizerInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.InstalledRecognizers" />
      </Docs>
    </Member>
    <Member MemberName="RecognizerUpdateReached">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt; RecognizerUpdateReached" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.RecognizerUpdateReachedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行中のときに発生 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> の変更を受け入れるように一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションを使用する必要があります <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> のインスタンスが実行を一時停止する <xref:System.Speech.Recognition.SpeechRecognitionEngine> の設定を変更する前に、または <xref:System.Speech.Recognition.Grammar> オブジェクトです。<xref:System.Speech.Recognition.SpeechRecognitionEngine> の変更を受け入れる準備ができた場合は、このイベントを発生させます。  
  
 などの <xref:System.Speech.Recognition.SpeechRecognitionEngine> は、一時停止、アンロードを有効に読み込んでできますを無効にする <xref:System.Speech.Recognition.Grammar> オブジェクト、およびの値を変更、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> プロパティです。 詳細については、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドを参照してください。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例では、コンソール アプリケーションをロードおよびアンロード <xref:System.Speech.Recognition.Grammar> オブジェクトです。 アプリケーションを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドを一時停止、更新プログラムを受信できるようにする音声認識エンジンを要求します。 アプリケーションが読み込むか、アンロード、 <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 各更新プログラムのハンドラーで <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントは、名前と現在読み込み済みの状態を書き込みます <xref:System.Speech.Recognition.Grammar> オブジェクトをコンソールです。 文法は読み込まれ、アンロード、アプリケーションは、ファームの動物の名前、果物の名前およびファーム動物の名前の順果物の名前にのみに最初に認識します。  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognizerUpdateReachedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RequestRecognizerUpdate">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>要求の状態を更新する認識エンジンが一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンへの変更を同期するのにには、このメソッドを使用します。 たとえば、ロード、認識エンジンは入力を処理中に音声認識の文法をアンロードするか、このメソッドを使用し、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 認識エンジンの状態とアプリケーションの動作を同期するイベントです。  
  
 このメソッドが呼び出されるを一時停止しますまたは非同期操作が完了して、レコグナイザーが生成されます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントです。 A <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント ハンドラーは認識操作の間に認識エンジンの状態を変更できます。 処理するときに <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント、イベント ハンドラーによって返されるまで、認識エンジンは一時停止します。  
  
> [!NOTE]
>  認識エンジンが発生する前に、認識エンジンへの入力が変更された場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント、要求が破棄されます。  
  
 このメソッドが呼び出されたとき。  
  
-   認識エンジンが直ちに生成、認識エンジンは入力を処理していない場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントです。  
  
-   認識エンジンが認識操作を一時停止し、生成、認識エンジンがサイレント状態またはバック グラウンド ノイズので構成される入力を処理している場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントです。  
  
-   認識エンジンが認識操作を完了し、生成、認識エンジンがサイレント状態またはバック グラウンド ノイズの数に達していない入力を処理している場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントです。  
  
 認識エンジンが処理中に、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント。  
  
-   認識エンジンでは、入力、およびの値は処理されません、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> プロパティは変わりません。  
  
-   認識エンジンは、入力の収集との値を <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> プロパティを変更することができます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>要求の状態を更新する認識エンジンが一時停止します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンが生成するとき、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> 、イベント、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> は `null`です。  
  
 ユーザー トークンを指定するには、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドです。 オーディオの位置のオフセットを指定するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドです。  
  
   
  
## 例  
 次の例では、コンソール アプリケーションをロードおよびアンロード <xref:System.Speech.Recognition.Grammar> オブジェクトです。 アプリケーションを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドを一時停止、更新プログラムを受信できるようにする音声認識エンジンを要求します。 アプリケーションが読み込むか、アンロード、 <xref:System.Speech.Recognition.Grammar> オブジェクトです。  
  
 各更新プログラムのハンドラーで <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベントは、名前と現在読み込み済みの状態を書き込みます <xref:System.Speech.Recognition.Grammar> オブジェクトをコンソールです。 文法は読み込まれ、アンロード、アプリケーションは、ファームの動物の名前、果物の名前およびファーム動物の名前の順果物の名前にのみに最初に認識します。  
  
```  
using System;  
using System.Speech.Recognition;  
using System.Collections.Generic;  
using System.Threading;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    private static SpeechRecognitionEngine recognizer;  
    public static void Main(string[] args)  
    {  
  
      // Initialize an in-process speech recognition engine and configure its input.  
      using (recognizer = new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Create the first grammar - Farm.  
        Choices animals = new Choices(new string[] { "cow", "pig", "goat" });  
        GrammarBuilder farm = new GrammarBuilder(animals);  
        Grammar farmAnimals = new Grammar(farm);  
        farmAnimals.Name = "Farm";  
  
        // Create the second grammar - Fruit.  
        Choices fruit = new Choices(new string[] { "apples", "peaches", "oranges" });  
        GrammarBuilder favorite = new GrammarBuilder(fruit);  
        Grammar favoriteFruit = new Grammar(favorite);  
        favoriteFruit.Name = "Fruit";  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizerUpdateReached +=  
          new EventHandler<RecognizerUpdateReachedEventArgs>(recognizer_RecognizerUpdateReached);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the Farm grammar.  
        recognizer.LoadGrammar(farmAnimals);  
  
        // Start asynchronous, continuous recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
        Console.WriteLine("Starting asynchronous, continuous recognition");  
        Console.WriteLine("  Farm grammar is loaded and enabled.");  
  
        // Pause to recognize farm animals.  
        Thread.Sleep(7000);  
        Console.WriteLine();  
  
        // Request an update and load the Fruit grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.LoadGrammarAsync(favoriteFruit);  
        Thread.Sleep(7000);  
  
        // Request an update and unload the Farm grammar.  
        recognizer.RequestRecognizerUpdate();  
        recognizer.UnloadGrammar(farmAnimals);  
        Thread.Sleep(7000);  
      }  
  
      // Keep the console window open.  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // At the update, get the names and enabled status of the currently loaded grammars.  
    public static void recognizer_RecognizerUpdateReached(  
      object sender, RecognizerUpdateReachedEventArgs e)  
    {  
      Console.WriteLine();  
      Console.WriteLine("Update reached:");  
      Thread.Sleep(1000);  
  
      string qualifier;  
      List<Grammar> grammars = new List<Grammar>(recognizer.Grammars);  
      foreach (Grammar g in grammars)  
      {  
        qualifier = (g.Enabled) ? "enabled" : "disabled";  
        Console.WriteLine("  {0} grammar is loaded and {1}.",  
        g.Name, qualifier);  
      }  
    }  
  
    // Write the text of the recognized phrase to the console.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("    Speech recognized: " + e.Result.Text);  
    }  
  
    // Write a message to the console when recognition fails.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("    Recognition attempt failed");  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userToken">操作に関する情報を含むユーザー定義情報。</param>
        <summary>認識エンジンがその状態を更新するを一時停止し、関連するイベントのユーザー トークンを提供する要求。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンが生成するとき、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> の値を含む、 `userToken` パラメーター。  
  
 オーディオの位置のオフセットを指定するには、使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="RequestRecognizerUpdate">
      <MemberSignature Language="C#" Value="public void RequestRecognizerUpdate (object userToken, TimeSpan audioPositionAheadToRaiseUpdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RequestRecognizerUpdate(object userToken, valuetype System.TimeSpan audioPositionAheadToRaiseUpdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate(System.Object,System.TimeSpan)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userToken" Type="System.Object" />
        <Parameter Name="audioPositionAheadToRaiseUpdate" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="userToken">操作に関する情報を含むユーザー定義情報。</param>
        <param name="audioPositionAheadToRaiseUpdate">現在のオフセット <see cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" /> 要求を遅延します。</param>
        <summary>認識エンジンがその状態を更新するを一時停止し、関連付けられているイベントのオフセットとユーザー トークンを提供することを要求します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンは、認識するまで認識エンジンの更新要求を開始せず <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition%2A> "現在"と等しい <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> plus `audioPositionAheadToRaiseUpdate`します。  
  
 認識エンジンが生成するとき、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached> イベント、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs.UserToken%2A> のプロパティ、 <xref:System.Speech.Recognition.RecognizerUpdateReachedEventArgs> の値を含む、 `userToken` パラメーター。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerUpdateReached" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.RecognizerAudioPosition" />
        <altmember cref="P:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToAudioStream">
      <MemberSignature Language="C#" Value="public void SetInputToAudioStream (System.IO.Stream audioSource, System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToAudioStream(class System.IO.Stream audioSource, class System.Speech.AudioFormat.SpeechAudioFormatInfo audioFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
        <Parameter Name="audioFormat" Type="System.Speech.AudioFormat.SpeechAudioFormatInfo" />
      </Parameters>
      <Docs>
        <param name="audioSource">オーディオの入力ストリーム。</param>
        <param name="audioFormat">オーディオの入力の形式です。</param>
        <summary>構成、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オーディオのストリームからの入力を受信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンでは、認識操作中に、入力ストリームの末尾に達すると、利用可能な入力で認識操作を終了します。 認識エンジンへの入力を更新する場合を除き、後で認識操作で例外を生成することができます。  
  
   
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 例では、入力を使用して、オーディオ ファイル、フレーズを含む、example.wav から"1 つのテストをテストする 2 つ次の 3 つ"と"先々 cooper"、一時停止で区切られました。 この例では、次の出力を生成します。  
  
```  
  
Starting asynchronous recognition...  
  Recognized text =  Testing testing 123  
  Recognized text =  Mr. Cooper  
  End of stream encountered.  
Done.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.IO;  
using System.Speech.AudioFormat;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace InputExamples  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition is complete.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
        recognizer.SetInputToAudioStream(  
          File.OpenRead(@"c:\temp\audioinput\example.wav"),  
          new SpeechAudioFormatInfo(  
            44100, AudioBitsPerSample.Sixteen, AudioChannel.Mono));  
  
        // Attach event handlers.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Perform recognition of the whole file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
          e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToDefaultAudioDevice">
      <MemberSignature Language="C#" Value="public void SetInputToDefaultAudioDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToDefaultAudioDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>構成、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 既定のオーディオ デバイスからの入力を受信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 次の例では、基本的な音声認識を示すコンソール アプリケーションの一部を示します。 例は既定のオーディオ デバイスからの出力を使用して、複数の非同期認識操作、および終了するときに、ユーザーは、語句を utters"exit"です。  
  
```csharp  
  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
using System.Threading;  
  
namespace DefaultInput  
{  
  class Program  
  {  
    // Indicate whether asynchronous recognition has finished.  
    static bool completed;  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
  
        // Create and load the exit grammar.  
        Grammar exitGrammar = new Grammar(new GrammarBuilder("exit"));  
        exitGrammar.Name = "Exit Grammar";  
        recognizer.LoadGrammar(exitGrammar);  
  
        // Create and load the dictation grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
        recognizer.LoadGrammar(dictation);  
  
        // Attach event handlers to the recognizer.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(  
            SpeechRecognizedHandler);  
        recognizer.RecognizeCompleted +=  
          new EventHandler<RecognizeCompletedEventArgs>(  
            RecognizeCompletedHandler);  
  
        // Assign input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Begin asynchronous recognition.  
        Console.WriteLine("Starting recognition...");  
        completed = false;  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Wait for recognition to finish.  
        while (!completed)  
        {  
          Thread.Sleep(333);  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    static void SpeechRecognizedHandler(  
      object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized:");  
      string grammarName = "<not available>";  
      if (e.Result.Grammar.Name != null &&  
        !e.Result.Grammar.Name.Equals(string.Empty))  
      {  
        grammarName = e.Result.Grammar.Name;  
      }  
      Console.WriteLine("    {0,-17} - {1}",  
        grammarName, e.Result.Text);  
  
      if (grammarName.Equals("Exit Grammar"))  
      {  
        ((SpeechRecognitionEngine)sender).RecognizeAsyncCancel();  
      }  
    }  
  
    static void RecognizeCompletedHandler(  
      object sender, RecognizeCompletedEventArgs e)  
    {  
      Console.WriteLine("  Recognition completed.");  
      completed = true;  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToNull">
      <MemberSignature Language="C#" Value="public void SetInputToNull ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>音声認識エンジンへの入力を無効にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 構成、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> オブジェクトの入力を使用する場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> と <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッド、または一時的にオフライン認識エンジンを取得するとします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveFile">
      <MemberSignature Language="C#" Value="public void SetInputToWaveFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">入力として使用するファイルのパス。</param>
        <summary>構成、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ウェーブ フォーム オーディオ形式 \(.wav\) ファイルからの入力を受信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンでは、認識操作中に、入力ファイルの末尾に達すると、利用可能な入力で認識操作を終了します。 認識エンジンへの入力を更新する場合を除き、後で認識操作で例外を生成することができます。  
  
   
  
## 例  
 次の例では、.wav ファイルのオーディオの認識を実行し、コンソールに、認識されたテキストを書き込みます。  
  
```  
using System;  
using System.IO;  
using System.Speech.Recognition;  
using System.Speech.AudioFormat;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static bool completed;  
  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create and load a grammar.  
        Grammar dictation = new DictationGrammar();  
        dictation.Name = "Dictation Grammar";  
  
        recognizer.LoadGrammar(dictation);  
  
        // Configure the input to the recognizer.  
recognizer.SetInputToWaveFile(@"c:\temp\SampleWAVInput.wav");  
  
        // Attach event handlers for the results of recognition.  
        recognizer.SpeechRecognized +=   
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.RecognizeCompleted +=   
          new EventHandler<RecognizeCompletedEventArgs>(recognizer_RecognizeCompleted);  
  
        // Perform recognition on the entire file.  
        Console.WriteLine("Starting asynchronous recognition...");  
        completed = false;  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        while (!completed)  
        {  
          Console.ReadLine();  
        }  
        Console.WriteLine("Done.");  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      if (e.Result != null && e.Result.Text != null)  
      {  
        Console.WriteLine("  Recognized text =  {0}", e.Result.Text);  
      }  
      else  
      {  
        Console.WriteLine("  Recognized text not available.");  
      }  
    }  
  
    // Handle the RecognizeCompleted event.  
    static void recognizer_RecognizeCompleted(object sender, RecognizeCompletedEventArgs e)  
    {  
      if (e.Error != null)  
      {  
        Console.WriteLine("  Error encountered, {0}: {1}",  
        e.Error.GetType().Name, e.Error.Message);  
      }  
      if (e.Cancelled)  
      {  
        Console.WriteLine("  Operation cancelled.");  
      }  
      if (e.InputStreamEnded)  
      {  
        Console.WriteLine("  End of stream encountered.");  
      }  
      completed = true;  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SetInputToWaveStream">
      <MemberSignature Language="C#" Value="public void SetInputToWaveStream (System.IO.Stream audioSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetInputToWaveStream(class System.IO.Stream audioSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveStream(System.IO.Stream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="audioSource" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="audioSource">オーディオ データを格納しているストリーム。</param>
        <summary>構成、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> ウェーブ フォーム オーディオ形式 \(.wav\) データを格納しているストリームからの入力を受信するオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンでは、認識操作中に、入力ストリームの末尾に達すると、利用可能な入力で認識操作を終了します。 認識エンジンへの入力を更新する場合を除き、後で認識操作で例外を生成することができます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToAudioStream(System.IO.Stream,System.Speech.AudioFormat.SpeechAudioFormatInfo)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToDefaultAudioDevice" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToNull" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.SetInputToWaveFile(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted" />
      </Docs>
    </Member>
    <Member MemberName="SpeechDetected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechDetectedEventArgs&gt; SpeechDetected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechDetectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 入力と音声を特定することを検出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 各音声認識エンジンには、サイレント状態と音声認識とを区別するためのアルゴリズムがあります。 ときに、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 、音声認識の操作を実行を生成、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> のアルゴリズムとして音声入力を識別するときにイベントです。<xref:System.Speech.Recognition.SpeechDetectedEventArgs.AudioPosition%2A> 、関連するプロパティ <xref:System.Speech.Recognition.SpeechDetectedEventArgs> オブジェクトは、認識エンジンが音声を認識する場合、入力ストリームの位置を示します。<xref:System.Speech.Recognition.SpeechRecognitionEngine> を発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> イベントのいずれかが発生する前に、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>, 、または <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> イベントです。  
  
 詳細については、次を参照してください。、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例は、フライトの出発地と目的の都市を選択するためのコンソール アプリケーションの一部です。 「したいシカゴ マイアミ支社からスライドします」など、アプリケーションがフレーズを認識します。  例では、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected> イベント レポートを <xref:System.Speech.Recognition.SpeechRecognitionEngine.AudioPosition%2A> 各時間音声が検出されました。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        Choices cities = new Choices(new string[] {   
          "Los Angeles", "New York", "Chicago", "San Francisco", "Miami", "Dallas" });  
  
        GrammarBuilder gb = new GrammarBuilder();  
        gb.Append("I would like to fly from");  
        gb.Append(cities);  
        gb.Append("to");  
        gb.Append(cities);  
  
        // Create a Grammar object and load it to the recognizer.  
        Grammar g = new Grammar(gb);  
        g.Name = ("City Chooser");  
        recognizer.LoadGrammarAsync(g);  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechDetected +=  
          new EventHandler<SpeechDetectedEventArgs>(recognizer_SpeechDetected);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechDetected event.  
    static void recognizer_SpeechDetected(object sender, SpeechDetectedEventArgs e)  
    {  
      Console.WriteLine("  Speech detected at AudioPosition = {0}", e.AudioPosition);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("  Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechHypothesized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechHypothesizedEventArgs&gt; SpeechHypothesized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechHypothesizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 単語または文法で語句全体を複数のコンポーネントの可能性がある単語が認識されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 多数生成 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> のイベントは入力のフレーズを特定しようとしています。 部分的に認識された語句を指定のテキストにアクセスすることができます、 <xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> のハンドラー内のオブジェクト、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> イベントです。 通常、これらのイベントの処理は、のみのデバッグに役立ちます。  
  
 <xref:System.Speech.Recognition.SpeechHypothesizedEventArgs> は、<xref:System.Speech.Recognition.RecognitionEventArgs> から派生します。  
  
 詳細については、次を参照してください。、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティおよび <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> メソッドです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例では、「ジャズのカテゴリのアーティストの一覧を表示する」などの語句を認識します。 例では、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized> イベントを認識するように、不完全な語句フラグメントをコンソールに表示します。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine())  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display the list of");  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the");  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category.");  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechHypothesized +=  
          new EventHandler<SpeechHypothesizedEventArgs>(recognizer_SpeechHypothesized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start asynchronous recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechHypothesized event.  
    static void recognizer_SpeechHypothesized(object sender, SpeechHypothesizedEventArgs e)  
    {  
      Console.WriteLine("Speech hypothesized: " + e.Result.Text);  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine();   
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognitionRejected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt; SpeechRecognitionRejected" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognitionRejectedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> のすべての読み込まれたと有効になっていると一致しない入力を受け取る <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 入力が一致しないことための十分な安定してすべての読み込まれたと有効になっていると判断した場合、認識エンジンにこのイベントを発生させます <xref:System.Speech.Recognition.Grammar> オブジェクトです。<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> 、拒否されたを含む <xref:System.Speech.Recognition.RecognitionResult> オブジェクトです。 ハンドラーを使用することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> 認識を取得するイベント <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 拒否されたりして、 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> スコアです。  
  
 アプリケーションが使用されている場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス、入力の承諾または拒否のいずれかを使用する音声認識での信頼レベルを変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドです。 以外の音声入力を使用する音声認識の応答方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例では、「ジャズのカテゴリのアーティストの一覧を表示する」や「アルバム絶対的を表示する」などの語句を認識します。 例では、ハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected> の音声入力のための十分なである文法の内容に一致することはできないときに、コンソールで通知を表示するイベント <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> を正常に認識を生成します。 ハンドラーでは、認識結果も表示されます <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 確信度の低いスコアによって拒否されたされています。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer =  
         new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
  
        // Create a grammar.  
        //  Create lists of alternative choices.  
        Choices listTypes = new Choices(new string[] { "albums", "artists" });  
        Choices genres = new Choices(new string[] {   
          "blues", "classical", "gospel", "jazz", "rock" });  
  
        //  Create a GrammarBuilder object and assemble the grammar components.  
        GrammarBuilder mediaMenu = new GrammarBuilder("Display");  
        mediaMenu.Append("the list of", 0, 1);  
        mediaMenu.Append(listTypes);  
        mediaMenu.Append("in the", 0, 1);  
        mediaMenu.Append(genres);  
        mediaMenu.Append("category", 0, 1);  
  
        //  Build a Grammar object from the GrammarBuilder.  
        Grammar mediaMenuGrammar = new Grammar(mediaMenu);  
        mediaMenuGrammar.Name = "Media Chooser";  
  
        // Attach event handlers.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
        recognizer.SpeechRecognitionRejected +=  
          new EventHandler<SpeechRecognitionRejectedEventArgs>(recognizer_SpeechRecognitionRejected);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(mediaMenuGrammar);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync(RecognizeMode.Multiple);  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the SpeechRecognitionRejected event.  
    static void recognizer_SpeechRecognitionRejected(object sender, SpeechRecognitionRejectedEventArgs e)  
    {  
      Console.WriteLine("Speech input was rejected.");  
      foreach (RecognizedPhrase phrase in e.Result.Alternates)  
      {  
      Console.WriteLine("  Rejected phrase: " + phrase.Text);  
      Console.WriteLine("  Confidence score: " + phrase.Confidence);  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized: " + e.Result.Text);  
      Console.WriteLine("  Confidence score: " + e.Result.Confidence);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      </Docs>
    </Member>
    <Member MemberName="SpeechRecognized">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Speech.Recognition.SpeechRecognizedEventArgs&gt; SpeechRecognized" />
      <MemberSignature Language="DocId" Value="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Speech.Recognition.SpeechRecognizedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>いつ発生するか、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> と一致するすべての読み込まれたと有効な入力を受け取る <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 いずれかを使用して認識操作を開始する、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.Recognize%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync%2A> メソッドです。 認識エンジンを発生させる、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> 入力は、ロードのいずれかに一致するいると判断した場合、イベント <xref:System.Speech.Recognition.Grammar> 認識機能を構成する信頼性の向上のための十分なレベルのオブジェクト。<xref:System.Speech.Recognition.RecognitionEventArgs.Result%2A> のプロパティ、 <xref:System.Speech.Recognition.SpeechRecognitionRejectedEventArgs> 承諾が含まれています <xref:System.Speech.Recognition.RecognitionResult> オブジェクトです。 ハンドラー <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントは、認識された語句と認識の一覧を取得できます <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 低い信頼度スコアを持つ。  
  
 アプリケーションが使用されている場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス、入力の承諾または拒否のいずれかを使用する音声認識での信頼レベルを変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドです。  以外の音声入力を使用する音声認識の応答方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
 認識エンジンは、文法に一致する入力を受け取る、 <xref:System.Speech.Recognition.Grammar> オブジェクトが生成できる、 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントです。<xref:System.Speech.Recognition.Grammar> オブジェクトの <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントは、音声認識エンジンの前に <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。 特定の文法に固有のすべてのタスクは、のハンドラーによって常に実行する必要があります、 <xref:System.Speech.Recognition.Grammar.SpeechRecognized> イベントです。  
  
 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> デリゲートを作成する場合は、イベントを処理するメソッドを指定します。 イベントをイベント ハンドラーに関連付けるには、デリゲートのインスタンスをイベントに追加します。 デリゲートを削除しない限り、そのイベントが発生すると常にイベント ハンドラーが呼び出されます。 イベント ハンドラー デリゲートの詳細については、次を参照してください。 [Events and Delegates](http://go.microsoft.com/fwlink/?LinkId=162418)します。  
  
   
  
## 例  
 次の例は、音声認識の文法、構成要素を作成するコンソール アプリケーションの一部、 <xref:System.Speech.Recognition.Grammar> オブジェクト、およびに読み込み、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> 認識を実行します。 例は、音声入力、 <xref:System.Speech.Recognition.SpeechRecognitionEngine>, 、関連付けられている認識結果、および音声認識エンジンによって生成される、関連するイベントです。  
  
 トリガーを miami スライドイン シカゴから「必要など入力を読み上げ、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。 "飛行 me ヒューストンからシカゴ"という語句を言うとトリガーは、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントです。  
  
 例では、ハンドラーを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> イベントを正常に表示するには、語句と、コンソールに含まれるセマンティクスが認識されています。  
  
```  
using System;  
using System.Speech.Recognition;  
  
namespace SampleRecognition  
{  
  class Program  
  {  
    static void Main(string[] args)  
  
    // Initialize an in-process speech recognition engine.  
    {  
      using (SpeechRecognitionEngine recognizer = new SpeechRecognitionEngine())  
      {  
  
        // Create SemanticResultValue objects that contain cities and airport codes.  
        SemanticResultValue chicago = new SemanticResultValue("Chicago", "ORD");  
        SemanticResultValue boston = new SemanticResultValue("Boston", "BOS");  
        SemanticResultValue miami = new SemanticResultValue("Miami", "MIA");  
        SemanticResultValue dallas = new SemanticResultValue("Dallas", "DFW");  
  
        // Create a Choices object and add the SemanticResultValue objects, using  
        // implicit conversion from SemanticResultValue to GrammarBuilder  
        Choices cities = new Choices();  
        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  
  
        // Build the phrase and add SemanticResultKeys.  
        GrammarBuilder chooseCities = new GrammarBuilder();  
        chooseCities.Append("I want to fly from");  
        chooseCities.Append(new SemanticResultKey("origin", cities));  
        chooseCities.Append("to");  
        chooseCities.Append(new SemanticResultKey("destination", cities));  
  
        // Build a Grammar object from the GrammarBuilder.  
        Grammar bookFlight = new Grammar(chooseCities);  
        bookFlight.Name = "Book Flight";  
  
        // Add a handler for the LoadGrammarCompleted event.  
        recognizer.LoadGrammarCompleted +=  
          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  
  
        // Add a handler for the SpeechRecognized event.  
        recognizer.SpeechRecognized +=  
          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  
  
        // Load the grammar object to the recognizer.  
        recognizer.LoadGrammarAsync(bookFlight);  
  
        // Set the input to the recognizer.  
        recognizer.SetInputToDefaultAudioDevice();  
  
        // Start recognition.  
        recognizer.RecognizeAsync();  
  
        // Keep the console window open.  
        Console.ReadLine();  
      }  
    }  
  
    // Handle the LoadGrammarCompleted event.  
    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  
    {  
      Console.WriteLine("Grammar loaded: " + e.Grammar.Name);  
      Console.WriteLine();  
    }  
  
    // Handle the SpeechRecognized event.  
    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  
    {  
      Console.WriteLine("Speech recognized:  " + e.Result.Text);  
      Console.WriteLine();  
      Console.WriteLine("Semantic results:");  
      Console.WriteLine("  The flight origin is " + e.Result.Semantics["origin"].Value);  
      Console.WriteLine("  The flight destination is " + e.Result.Semantics["destination"].Value);  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.SpeechDetectedEventArgs" />
        <altmember cref="T:System.Speech.Recognition.Grammar" />
        <altmember cref="T:System.Speech.Recognition.RecognitionResult" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.Recognize" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeAsync" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize(System.String)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync(System.String)" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechDetected" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
        <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UnloadAllGrammars">
      <MemberSignature Language="C#" Value="public void UnloadAllGrammars ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadAllGrammars() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべてアンロード <see cref="T:System.Speech.Recognition.Grammar" /> 認識エンジンからのオブジェクト。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンが現在読み込んでいる場合、 <xref:System.Speech.Recognition.Grammar> までこのメソッドは、非同期的に待機、 <xref:System.Speech.Recognition.Grammar> 読み込まれると、すべてのアンロードする前に、 <xref:System.Speech.Recognition.Grammar> オブジェクトから、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス。  
  
 特定の文法をアンロードするには、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar%2A> メソッドです。  
  
   
  
## 例  
 次の例では、音声認識の文法の同期のロードとアンロードを示すコンソール アプリケーションの一部を示します。  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      </Docs>
    </Member>
    <Member MemberName="UnloadGrammar">
      <MemberSignature Language="C#" Value="public void UnloadGrammar (System.Speech.Recognition.Grammar grammar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UnloadGrammar(class System.Speech.Recognition.Grammar grammar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadGrammar(System.Speech.Recognition.Grammar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="grammar" Type="System.Speech.Recognition.Grammar" />
      </Parameters>
      <Docs>
        <param name="grammar">アンロードする文法オブジェクト。</param>
        <summary>指定したアンロード <see cref="T:System.Speech.Recognition.Grammar" /> オブジェクトから、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> インスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンが実行されている場合、アプリケーションが使用する必要があります <xref:System.Speech.Recognition.SpeechRecognitionEngine.RequestRecognizerUpdate%2A> を一時停止、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンスの読み込み、アンロードが有効にすると、または無効にする前に、 <xref:System.Speech.Recognition.Grammar> オブジェクトです。 すべてアンロードする <xref:System.Speech.Recognition.Grammar> オブジェクトを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars%2A> メソッドです。  
  
   
  
## 例  
 次の例では、音声認識の文法の同期のロードとアンロードを示すコンソール アプリケーションの一部を示します。  
  
```  
Loading grammars...  
Loaded grammars:  
 - Grammar1  
 - Grammar2  
 - Grammar3  
  
Unloading Grammar1...  
Loaded grammars:  
 - Grammar2  
 - Grammar3  
  
Unloading all grammars...  
No grammars loaded.  
  
Press any key to exit...  
```  
  
```csharp  
  
using System;  
using System.Collections.Generic;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace UnloadGrammars  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new CultureInfo("en-US")))  
      {  
        Console.WriteLine("Loading grammars...");  
  
        // Create and load a number of grammars.  
        Grammar grammar1 = new Grammar(new GrammarBuilder("first grammar"));  
        grammar1.Name = "Grammar1";  
        recognizer.LoadGrammar(grammar1);  
  
        Grammar grammar2 = new Grammar(new GrammarBuilder("second grammar"));  
        grammar2.Name = "Grammar2";  
        recognizer.LoadGrammar(grammar2);  
  
        Grammar grammar3 = new Grammar(new GrammarBuilder("third grammar"));  
        grammar3.Name = "Grammar3";  
        recognizer.LoadGrammar(grammar3);  
  
        // List the recognizer's loaded grammars.  
        ListGrammars(recognizer);  
  
        // Unload one grammar and list the loaded grammars.  
        Console.WriteLine("Unloading Grammar1...");  
        recognizer.UnloadGrammar(grammar1);  
        ListGrammars(recognizer);  
  
        // Unload all grammars and list the loaded grammars.  
        Console.WriteLine("Unloading all grammars...");  
        recognizer.UnloadAllGrammars();  
        ListGrammars(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListGrammars(SpeechRecognitionEngine recognizer)  
    {  
      // Make a copy of the recognizer's grammar collection.  
      List<Grammar> loadedGrammars = new List<Grammar>(recognizer.Grammars);  
  
      if (loadedGrammars.Count > 0)  
      {  
        Console.WriteLine("Loaded grammars:");  
        foreach (Grammar g in recognizer.Grammars)  
        {  
          Console.WriteLine(" - {0}", g.Name);  
        }  
      }  
      else  
      {  
        Console.WriteLine("No grammars loaded.");  
      }  
      Console.WriteLine();  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="Grammar" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">文法は、この認識エンジンに読み込まれていないか、この認識エンジンが現在読み込んでいる文法は、非同期的にします。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammar(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.LoadGrammarAsync(System.Speech.Recognition.Grammar)" />
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.UnloadAllGrammars" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateRecognizerSetting">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>認識エンジンの設定の値を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンの設定には、文字列、64 ビットの整数、またはメモリ アドレス データを含めることができます。 次の表に、Microsoft 音声 API \(SAPI\) 用に定義されている設定の準拠の認識機能です。 次の設定によっては、設定をサポートする各認識エンジンの同じ範囲が必要です。 SAPI 準拠認識機能では、これらの設定をサポートする必要がないと、その他の設定をサポートすることができます。  
  
|名前|説明|  
|--------|--------|  
|`ResourceUsage`|認識エンジンの CPU 使用量を指定します。 範囲は 0 ~ 100 です。 既定値は 50 です。|  
|`ResponseSpeed`|音声認識エンジンが認識操作を完了する前に、あいまいさのない入力の最後に、サイレント状態の長さを示します。 範囲は、0 10,000 ミリ秒 \(ms\) です。 この設定は、認識エンジンに対応 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A> プロパティです。 既定値 \= 150ms年です。|  
|`ComplexResponseSpeed`|音声認識エンジンが認識操作を完了する前に、あいまいな入力の最後にミリ秒 \(ms\) 単位でサイレント状態の長さを示します。 範囲は 0 ~ 10,000 ミリ秒です。 この設定は、認識エンジンに対応 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。 既定の 500 ミリ秒になります。|  
|`AdaptationOn`|アコースティック モデルの学習機能は有効になっているかどうかを示します \(値 \= `1`\) または OFF \(値 \= `0`\)。 既定値は `1` \(ON\) です。|  
|`PersistedBackgroundAdaptation`|バック グラウンドで調整が ON であるかどうかを示します \(値 \= `1`\) または OFF \(値 \= `0`\)、レジストリの設定が引き続き発生するとします。 既定値は `1` \(ON\) です。|  
  
 認識エンジンの設定のいずれかを返すを使用して、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting%2A> メソッドです。  
  
 例外です `PersistedBackgroundAdaptation`, 、プロパティの値を使用して設定、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドは現在のインスタンスに対してのみ有効になります <xref:System.Speech.Recognition.SpeechRecognitionEngine>, 、既定の設定に戻すが後にします。  
  
 以外の音声入力を使用する音声認識の応答方法を変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.BabbleTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.InitialSilenceTimeout%2A>, 、<xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeout%2A>, 、および <xref:System.Speech.Recognition.SpeechRecognitionEngine.EndSilenceTimeoutAmbiguous%2A> プロパティです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, int updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, int32 updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.Int32)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="settingName">更新設定の名前。</param>
        <param name="updatedValue">設定の新しい値。</param>
        <summary>について指定した設定を更新、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> 指定の整数値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例外として `PersistedBackgroundAdaptation`, 、プロパティの値を使用して設定、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドは、現在のインスタンスに対してのみ有効になります <xref:System.Speech.Recognition.SpeechRecognitionEngine>, 、既定の設定に、元に戻すを後です。 参照してください <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 説明についてはサポートされている設定です。  
  
   
  
## 例  
 次の例は、EN\-US ロケールをサポートする認識エンジンに定義された設定の数の値を出力するコンソール アプリケーションの一部です。 この例では、信頼レベルの設定を更新し、更新された値をチェックする認識エンジンを照会します。 この例では、次の出力を生成します。  
  
```  
Settings for recognizer MS-1033-80-DESK:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 150  
  ComplexResponseSpeed           = 500  
  AdaptationOn                   = 1  
  PersistedBackgroundAdaptation  = 1  
  
Updated settings:  
  
  ResourceUsage                  is not supported by this recognizer.  
  ResponseSpeed                  = 200  
  ComplexResponseSpeed           = 300  
  AdaptationOn                   = 0  
  PersistedBackgroundAdaptation  = 0  
  
Press any key to exit...  
```  
  
```csharp  
using System;  
using System.Globalization;  
using System.Speech.Recognition;  
  
namespace RecognizerSettings  
{  
  class Program  
  {  
    static readonly string[] settings = new string[] {  
      "ResourceUsage",  
      "ResponseSpeed",  
      "ComplexResponseSpeed",  
      "AdaptationOn",  
      "PersistedBackgroundAdaptation",  
    };  
  
    static void Main(string[] args)  
    {  
      using (SpeechRecognitionEngine recognizer =  
        new SpeechRecognitionEngine(new System.Globalization.CultureInfo("en-US")))  
      {  
        Console.WriteLine("Settings for recognizer {0}:",  
          recognizer.RecognizerInfo.Name);  
        Console.WriteLine();  
  
        // List the current settings.  
        ListSettings(recognizer);  
  
        // Change some of the settings.  
        recognizer.UpdateRecognizerSetting("ResponseSpeed", 200);  
        recognizer.UpdateRecognizerSetting("ComplexResponseSpeed", 300);  
        recognizer.UpdateRecognizerSetting("AdaptationOn", 1);  
        recognizer.UpdateRecognizerSetting("PersistedBackgroundAdaptation", 0);  
  
        Console.WriteLine("Updated settings:");  
        Console.WriteLine();  
  
        // List the updated settings.  
        ListSettings(recognizer);  
      }  
  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    private static void ListSettings(SpeechRecognitionEngine recognizer)  
    {  
      foreach (string setting in settings)  
      {  
        try  
        {  
          object value = recognizer.QueryRecognizerSetting(setting);  
          Console.WriteLine("  {0,-30} = {1}", setting, value);  
        }  
        catch  
        {  
          Console.WriteLine("  {0,-30} is not supported by this recognizer.",  
            setting);  
        }  
      }  
      Console.WriteLine();  
    }  
  }  
}  
  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settingName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="settingName" /> が空の文字列 \(""\) です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">認識エンジンには、その名前の設定がありません。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="UpdateRecognizerSetting">
      <MemberSignature Language="C#" Value="public void UpdateRecognizerSetting (string settingName, string updatedValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void UpdateRecognizerSetting(string settingName, string updatedValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="settingName" Type="System.String" />
        <Parameter Name="updatedValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="settingName">更新設定の名前。</param>
        <param name="updatedValue">設定の新しい値。</param>
        <summary>指定した文字列値で指定した音声認識エンジンの設定を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 例外として `PersistedBackgroundAdaptation`, 、プロパティの値を使用して設定、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドは、現在のインスタンスに対してのみ有効になります <xref:System.Speech.Recognition.SpeechRecognitionEngine>, 、既定の設定に、元に戻すを後です。 参照してください <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> 説明についてはサポートされている設定です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="settingName" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="settingName" /> が空の文字列 \(""\) です。</exception>
        <exception cref="T:System.Collections.Generic.KeyNotFoundException">認識エンジンには、その名前の設定がありません。</exception>
        <altmember cref="M:System.Speech.Recognition.SpeechRecognitionEngine.QueryRecognizerSetting(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>破棄することも、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>