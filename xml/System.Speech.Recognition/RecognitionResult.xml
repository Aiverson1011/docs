<Type Name="RecognitionResult" FullName="System.Speech.Recognition.RecognitionResult">
  <TypeSignature Language="C#" Value="public sealed class RecognitionResult : System.Speech.Recognition.RecognizedPhrase, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit RecognitionResult extends System.Speech.Recognition.RecognizedPhrase implements class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognitionResult" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Recognition.RecognizedPhrase</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("{DebuggerDisplayString ()}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>インスタンスで認識される入力に関する詳細情報を含む <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> または <see cref="T:System.Speech.Recognition.SpeechRecognizer" />です。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 このクラスから派生 <xref:System.Speech.Recognition.RecognizedPhrase> 音声認識、たとえば、次に関する詳細な情報を提供します。  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A> プロパティ参照、 <xref:System.Speech.Recognition.Grammar> の音声を識別するために、認識エンジンが使用されることです。  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> プロパティには、単語の正規化されたテキストが含まれています。 テキストの正規化の詳細については、次を参照してください。 <xref:System.Speech.Recognition.ReplacementText>します。  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> プロパティは、結果に含まれているセマンティクス情報を参照します。 セマンティック情報は、キー名と関連付けられたセマンティック データのディクショナリです。  
  
-   <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> プロパティのコレクションを格納する <xref:System.Speech.Recognition.RecognizedPhrase> 音声入力の他の候補の解釈を表すオブジェクト。 参照してください <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> の詳細。  
  
-   <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティには順序付けられたコレクションが含まれています <xref:System.Speech.Recognition.RecognizedWordUnit> 各を表すオブジェクトが、入力内の単語を認識します。 各 <xref:System.Speech.Recognition.RecognizedWordUnit> 表示形式や構文形式は、対応する単語の発音情報が含まれます。  
  
 特定のメンバー、 <xref:System.Speech.Recognition.SpeechRecognitionEngine>, 、<xref:System.Speech.Recognition.SpeechRecognizer>, 、および <xref:System.Speech.Recognition.Grammar> クラスを生成できる、 <xref:System.Speech.Recognition.RecognitionResult>です。 詳細については、次のメソッドとイベントを参照してください。  
  
-   メソッドおよびイベント、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> クラス。  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized>  
  
-   メソッドおよびイベント、 <xref:System.Speech.Recognition.SpeechRecognizer> クラス。  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected>  
  
    -   <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized>  
  
-   <xref:System.Speech.Recognition.Grammar.SpeechRecognized> のイベント、 <xref:System.Speech.Recognition.Grammar> クラスです。  
  
 認識のイベントの詳細については、次を参照してください。 [Using Speech Recognition Events](http://msdn.microsoft.com/ja-jp/01c598ca-2e0e-4e89-b303-cd1cef9e8482)します。  
  
   
  
## 例  
 次の例では、ハンドラーを `SpeechRecognized` のイベント、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> または <xref:System.Speech.Recognition.SpeechRecognizer> オブジェクト、および関連付けられたに関する情報のいくつか <xref:System.Speech.Recognition.RecognitionResult>します。  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
    <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognizer.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechHypothesized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized" />
    <altmember cref="E:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognitionRejected" />
    <altmember cref="E:System.Speech.Recognition.Grammar.SpeechRecognized" />
  </Docs>
  <Members>
    <Member MemberName="Alternates">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt; Alternates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Speech.Recognition.RecognizedPhrase&gt; Alternates" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Alternates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Speech.Recognition.RecognizedPhrase&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識エンジンへの入力に一致する候補のコレクションを取得します。</summary>
        <value>代替認識の読み取り専用コレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> の値によって順序が、 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> プロパティです。 特定のフレーズの信頼度の値では、語句が、入力と一致している確率を示します。 最上位の信頼度の値を持つ語句は、ほとんどの場合、入力に一致する語句です。  
  
 各 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> 個々 にし、その他の信頼度の値を参照しなくても、値を評価する必要が <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>です。 プロパティを <xref:System.Speech.Recognition.RecognitionResult> から継承 <xref:System.Speech.Recognition.RecognizedPhrase> 信頼スコアが高いというフレーズに関する詳細情報を提供します。  
  
 用途の 1 つ、 <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> コレクションは自動エラー訂正用です。 たとえば、ディレクトリ\] ダイアログを設計する場合、アプリケーション ユーザーにメッセージがアプリケーションに認識のイベントから、正しい情報がある場合は、in として「おっしゃいました 'Anna'?」を確認するにはユーザーが話した"no"かどうかは、充分に高のある任意の代替のユーザーが、アプリケーションのクエリを実行 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> スコアです。  
  
 音声認識と代替認識の使用に関する詳細については、次を参照してください。 [Speech Recognition](http://msdn.microsoft.com/ja-jp/6a7dc524-07fc-4862-8d48-8c10dc64b919) と [Using Speech Recognition Events](http://msdn.microsoft.com/ja-jp/01c598ca-2e0e-4e89-b303-cd1cef9e8482)です。  
  
   
  
## 例  
 次の例では、ハンドラーを `SpeechRecognized` イベントと関連付けられたに関する情報のいくつか <xref:System.Speech.Recognition.RecognitionResult>します。  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
  Console.WriteLine("Grammar({0}), {1}: {2}",  
    e.Result.Grammar.Name, e.Result.Audio.Duration, e.Result.Text);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
      </Docs>
    </Member>
    <Member MemberName="Audio">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio Audio { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Speech.Recognition.RecognizedAudio Audio" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognitionResult.Audio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識結果に関連付けられたオーディオを取得します。</summary>
        <value>認識結果に関連付けられているオーディオまたは <see langword="null" /> 認識エンジンがへの呼び出しから結果を生成するかどうか、 <see langword="EmulateRecognize" /> または <see langword="EmulateRecognizeAsync" /> のメソッド、 <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> または <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> インスタンス。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 特定の認識結果内の単語の範囲に関連付けられているオーディオのセクションを取得する、 <xref:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange%2A> メソッドです。  
  
   
  
## 例  
 次の例では、ハンドラーを **SpeechRecognized** イベントと関連付けられたに関する情報のいくつか <xref:System.Speech.Recognition.RecognitionResult>します。  
  
```csharp  
  
// Handle the SpeechRecognized event.   
void SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  // Add event handler code here.  
  
  // The following code illustrates some of the information available  
  // in the recognition result.  
      Console.WriteLine("Grammar({0}): {1}", e.Result.Grammar.Name, e.Result.Text);  
      Console.WriteLine("Audio for result:");  
      Console.WriteLine("  Start time: "+ e.Result.Audio.StartTime);  
      Console.WriteLine("  Duration: " + e.Result.Audio.Duration);  
      Console.WriteLine("  Format: " + e.Result.Audio.Format.EncodingFormat);  
  
  // Display the semantic values in the recognition result.  
  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  
  {  
    Console.WriteLine(" {0} key: {1}",  
      child.Key, child.Value.Value ?? "null");  
  }  
  Console.WriteLine();  
  
  // Display information about the words in the recognition result.  
  foreach (RecognizedWordUnit word in e.Result.Words)  
  {  
    RecognizedAudio audio = e.Result.GetAudioForWordRange(word, word);  
    Console.WriteLine(" {0,-10} {1,-10} {2,-10} {3} ({4})",  
      word.Text, word.LexicalForm, word.Pronunciation,  
      audio.Duration, word.DisplayAttributes);  
  }  
  
  // Display the recognition alternates for the result.  
  foreach (RecognizedPhrase phrase in e.Result.Alternates)  
  {  
    Console.WriteLine(" alt({0}) {1}", phrase.Confidence, phrase.Text);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      </Docs>
    </Member>
    <Member MemberName="GetAudioForWordRange">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.RecognizedAudio GetAudioForWordRange (System.Speech.Recognition.RecognizedWordUnit firstWord, System.Speech.Recognition.RecognizedWordUnit lastWord);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Speech.Recognition.RecognizedAudio GetAudioForWordRange(class System.Speech.Recognition.RecognizedWordUnit firstWord, class System.Speech.Recognition.RecognizedWordUnit lastWord) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.GetAudioForWordRange(System.Speech.Recognition.RecognizedWordUnit,System.Speech.Recognition.RecognizedWordUnit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.RecognizedAudio</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="firstWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
        <Parameter Name="lastWord" Type="System.Speech.Recognition.RecognizedWordUnit" />
      </Parameters>
      <Docs>
        <param name="firstWord">範囲の最初の単語です。</param>
        <param name="lastWord">範囲の最後の単語です。</param>
        <summary>特定の認識結果内の単語の範囲に関連付けられているオーディオのセクションを取得します。</summary>
        <returns>単語の範囲に関連付けられているオーディオのセクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識結果に関連付けられている完全なオーディオを取得する、 <xref:System.Speech.Recognition.RecognitionResult.Audio%2A> プロパティです。  
  
   
  
## 例  
 次の例は、名前の入力を受け付ける文法を作成し、ハンドラーを接続すると、 `SpeechRecognized` イベントです。 文法は、フレーズの name 要素にワイルドカードを使用します。 イベント ハンドラーでは、ワイルドカードのオーディオを使用して作成し、応答メッセージのプロンプトを再生します。  
  
```csharp  
  
private Grammar CreateNameInputGrammar()  
{  
  GrammarBuilder wildcardBuilder = new GrammarBuilder();  
  wildcardBuilder.AppendWildcard();  
  SemanticResultKey nameKey =  
    new SemanticResultKey("Name", wildcardBuilder);  
  
  GrammarBuilder nameBuilder =  
    new GrammarBuilder("My name is");  
  nameBuilder.Append(nameKey);  
  
  Grammar nameGrammar = new Grammar(nameBuilder);  
  nameGrammar.Name = "Name input";  
  
  nameGrammar.SpeechRecognized +=  
    new EventHandler<SpeechRecognizedEventArgs>(  
      NameInputHandler);  
  
  return nameGrammar;  
}  
  
// Handle the SpeechRecognized event for the name grammar.  
private void NameInputHandler(object sender, SpeechRecognizedEventArgs e)  
{  
  if (e.Result == null) return;  
  
  RecognitionResult result = e.Result;  
  SemanticValue semantics = e.Result.Semantics;  
  
  if (semantics.ContainsKey("Name"))  
  {  
    RecognizedAudio nameAudio =  
      result.GetAudioForWordRange(  
        result.Words[3], result.Words[result.Words.Count - 1]);  
  
    // Save the audio. Create a directory and file as necessary.  
    FileInfo fi = new FileInfo(@"C:\temp\temp.wav");  
    if (!fi.Directory.Exists)  
    {  
      fi.Directory.Create();  
    }  
    FileStream stream = new FileStream(fi.FullName, FileMode.Create);  
    nameAudio.WriteToWaveStream(stream);  
    stream.Close();  
  
    // Greet the person using the saved audio.  
    SpeechSynthesizer synthesizer = new SpeechSynthesizer();  
    PromptBuilder builder = new PromptBuilder();  
    builder.AppendText("Hello");  
    builder.AppendAudio(fi.FullName);  
    synthesizer.Speak(builder);  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">認識エンジンへの呼び出しから結果を生成する <see langword="EmulateRecognize" /> または <see langword="EmulateRecognizeAsync" /> のメソッド、 <see cref="T:System.Speech.Recognition.SpeechRecognizer" /> または <see cref="T:System.Speech.Recognition.SpeechRecognitionEngine" /> オブジェクトです。</exception>
        <altmember cref="T:System.Speech.Recognition.RecognitionEventArgs" />
        <altmember cref="T:System.Speech.Recognition.RecognizedPhrase" />
        <altmember cref="T:System.Speech.Recognition.RecognizedWordUnit" />
        <altmember cref="P:System.Speech.Recognition.RecognitionResult.Audio" />
        <altmember cref="P:System.Speech.Recognition.RecognizedPhrase.Words" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognitionResult.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">データを読み込む先のオブジェクト。</param>
        <param name="context">シリアル化先。</param>
        <summary>設定、 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ターゲット オブジェクトをシリアル化に必要なデータを持つインスタンス。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメンバーは、明示的なインターフェイス メンバーの実装です。 これは、<xref:System.Speech.Recognition.RecognitionResult> のインスタンスが <xref:System.Runtime.Serialization.ISerializable> インターフェイスにキャストされる場合にのみ、使用できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
      </Docs>
    </Member>
  </Members>
</Type>