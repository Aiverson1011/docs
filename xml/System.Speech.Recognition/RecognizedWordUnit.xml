<Type Name="RecognizedWordUnit" FullName="System.Speech.Recognition.RecognizedWordUnit">
  <TypeSignature Language="C#" Value="public class RecognizedWordUnit" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RecognizedWordUnit extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Recognition.RecognizedWordUnit" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Text: {Text}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>認識した音声のアトミック ユニットを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 認識エンジンによって返されるすべての結果が構築された <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトです。  
  
 配列 <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトは、すべての認識操作を通じてアクセス可能な <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
 認識の確実性のメジャーを提供するだけでなく \(<xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A>\)、 <xref:System.Speech.Recognition.RecognizedWordUnit> インスタンスを提供します。  
  
-   認識された単語の正規化と正確な \(構文\) のテキスト表現。 詳しくは、「<xref:System.Speech.Recognition.ReplacementText>」、「<xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>」、「<xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>」をご覧ください。  
  
-   国際音声記号 \(IPA\) やユニバーサル電話設定 \(UPS\) などのサポートされている音声記号の文字を使用して情報を発音します。 詳細については、「<xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>」を参照してください。  
  
-   印刷用の書式設定します。 詳細については、次を参照してください。、 <xref:System.Speech.Recognition.DisplayAttributes> クラスとその <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティです。  
  
   
  
## 例  
 次の例では、ユーティリティ ルーチン \(`stringFromWordArray`\) 文字列を生成します。 文字列には、構文上の出力が含まれます \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>\)、テキストの正規化 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>\)、または国際音声記号からのルビ文字 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>\)。 使用して文字列の書式設定 <xref:System.Speech.Recognition.DisplayAttributes> から取得したオブジェクト、 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティから、 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトです。<xref:System.Speech.Recognition.RecognizedWordUnit> からオブジェクトが取得した、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(ReadOnlyCollection<RecognizedWordUnit> words, WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RecognizedWordUnit (string text, float confidence, string pronunciation, string lexicalForm, System.Speech.Recognition.DisplayAttributes displayAttributes, TimeSpan audioPosition, TimeSpan audioDuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, float32 confidence, string pronunciation, string lexicalForm, valuetype System.Speech.Recognition.DisplayAttributes displayAttributes, valuetype System.TimeSpan audioPosition, valuetype System.TimeSpan audioDuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Speech.Recognition.RecognizedWordUnit.#ctor(System.String,System.Single,System.String,System.String,System.Speech.Recognition.DisplayAttributes,System.TimeSpan,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="confidence" Type="System.Single" />
        <Parameter Name="pronunciation" Type="System.String" />
        <Parameter Name="lexicalForm" Type="System.String" />
        <Parameter Name="displayAttributes" Type="System.Speech.Recognition.DisplayAttributes" />
        <Parameter Name="audioPosition" Type="System.TimeSpan" />
        <Parameter Name="audioDuration" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="text">認識された単語の正規化されたテキスト。  
  
 この値は、 <see langword="null" />, 、""、または <see cref="F:System.String.Empty" />です。</param>
        <param name="confidence">A <see langword="float" /> 0.0 ~ 1.0 の単語の認識の確実性を示す値。</param>
        <param name="pronunciation">認識された単語の音声のスペル チェックします。  
  
 この値は、 <see langword="null" />, 、""、または <see cref="F:System.String.Empty" />です。</param>
        <param name="lexicalForm">認識された単語の正規化されていないテキストです。  
  
 この引数が必要があります <see langword="null" />, 、""、または <see cref="F:System.String.Empty" />です。</param>
        <param name="displayAttributes">認識された単語を表示する空白文字の使用を定義します。</param>
        <param name="audioPosition">認識された単語のオーディオの入力ストリームの位置。  
  
 この値は、<see cref="F:System.TimeSpan.Zero" /> の場合もあります。</param>
        <param name="audioDuration">認識されたテキストに対応するオーディオ入力の長さ。  
  
 この値は、<see cref="F:System.TimeSpan.Zero" /> の場合もあります。</param>
        <summary>
          <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合 `text` または `pronunciation` は `null`, 、""、または <xref:System.String.Empty> と <xref:System.Speech.Recognition.RecognizedWordUnit> 使用認識操作で、認識エンジンは、出力で適切な値を生成 <xref:System.Speech.Recognition.RecognizedWordUnit> インスタンス。  
  
 構築を直接 <xref:System.Speech.Recognition.RecognizedWordUnit> インスタンスは通常の認識を使用して操作をエミュレートする場合にのみに使用、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognize%2A> または <xref:System.Speech.Recognition.SpeechRecognitionEngine.EmulateRecognizeAsync%2A> のメソッド、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> クラスおよび <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognize%2A> または <xref:System.Speech.Recognition.SpeechRecognizer.EmulateRecognizeAsync%2A> のメソッド、 <xref:System.Speech.Recognition.SpeechRecognizer> クラスです。  
  
 実際のアプリケーションを直接構築しないで <xref:System.Speech.Recognition.RecognizedWordUnit>, 、を通じて入手ではなく、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
   
  
## 例  
 次の例は、多少不自然なテストのエミュレーションでは、新しい単語を入力から生成されると、エミュレーターに渡されるやその後、検証する場所です。  
  
```csharp  
private void _emulateAndVerify_Click(object sender, EventArgs e)   
{  
  char[] delimiterChars = { ' ', ',', '.', ':', ';', '\t' };  
  string text = _emulateTextBox.Text;  
  string[] words = text.Split(delimiterChars);  
  
  RecognizedWordUnit[] InputWordUnits = new RecognizedWordUnit[words.Length];  
  for (int i = 0; i < words.Length; i++)   
  {  
    InputWordUnits[i] = new RecognizedWordUnit(  
        "",   
        0,   
        "",  
        words[i].ToLower(),   
        DisplayAttributes.OneTrailingSpace,   
        new TimeSpan(),   
        new TimeSpan());  
  }  
  
  RecognitionResult rec = _recognizer.EmulateRecognize(  
        InputWordUnits,   
        System.Globalization.CompareOptions.IgnoreCase);  
  if (rec == null)   
  {  
    MessageBox.Show(String.Format("Recognition emulation for {0} failed.\n", text));  
  }   
  else if (InputWordUnits.Length != rec.Words.Count)   
  {  
    MessageBox.Show(  
       String.Format("Length mismatch: Input was {0} words, Recognition has {1} words.\n}"));  
  }   
  else   
  {  
    for (int i = 0; i < InputWordUnits.Length; i++)   
    {  
  
      if (rec.Words[i].LexicalForm.ToLower() != InputWordUnits[i].LexicalForm.ToLower())   
      {  
        MessageBox.Show(  
          String.Format("Input word {0} \"{1}\" not found. Recognition output is {2}",  
          i, InputWordUnits[i].LexicalForm, rec.Words[i].LexicalForm));  
        continue;  
      }  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Confidence">
      <MemberSignature Language="C#" Value="public float Confidence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Confidence" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Confidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語が特定の入力と一致している可能性を表す認識エンジンによって割り当てられた値を取得します。</summary>
        <value>単語の正しい認識の確実性の相対測定値。 値は 0.0 から 1.0 までであり、低い数字ほど信頼度が低くなります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 信頼スコアには、絶対尤度が、単語が正しく認識されることが示されていません。 代わりに、信頼スコアは、特定の入力の複数の代替認識の相対的な精度を比較するためのメカニズムを提供します。 これには、最も正確な認識結果を返すことが容易にします。 たとえば、認識された単語に 0.8 信頼スコアがある場合は、これはないという単語の入力を適切な一致の確率の 80% であります。  単語が信頼のあるその他の結果よりも、入力の適切な一致のスコア 0.8 未満である可能性の高いことを意味します。  
  
 独自の信頼スコアは、比較の同じ認識操作とは、同じ入力の以前の評価から、対象となる代替の結果がない限り意味がありません。  
  
 によって返される値 <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 各認識エンジンが、相対パスと一意です。 2 つの異なる認識エンジンの間の信頼度の値の比較方法の定義がない方法も <xref:System.Speech.Recognition.RecognizedWordUnit.Confidence%2A> 個々 の <xref:System.Speech.Recognition.RecognizedWordUnit> オブジェクトは、定義、 <xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A> の <xref:System.Speech.Recognition.RecognizedPhrase>です。  
  
 音声認識エンジンは、さまざまな理由から、バック グラウンド干渉、inarticulate 音声または予定外の単語または単語の順序を含む、音声指示に確信度の低いスコアを割り当てることができます。 アプリケーションが使用されている場合、 <xref:System.Speech.Recognition.SpeechRecognitionEngine> インスタンス、入力の承諾または拒否のいずれかを使用する音声認識での信頼レベルを変更することができます、 <xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> メソッドです。 信頼度のしきい値によって管理される共有の認識機能を <xref:System.Speech.Recognition.SpeechRecognizer>, がユーザー プロファイルに関連付けられているし、Windows レジストリに格納します。 アプリケーションでは、共有の認識機能のプロパティのレジストリに変更を書き込む必要があります。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayAttributes">
      <MemberSignature Language="C#" Value="public System.Speech.Recognition.DisplayAttributes DisplayAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Speech.Recognition.DisplayAttributes DisplayAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Speech.Recognition.DisplayAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のテキスト出力を作成するための情報を書式設定を取得 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> インスタンス。</summary>
        <value>内容を表示する空白文字を使用して、 <see cref="T:System.Speech.Recognition.RecognizedWordUnit" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Speech.Recognition.DisplayAttributes> によって返されるオブジェクト、 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティが存在する場合、特定のワードで使用される先頭および末尾のスペースを指定します。  
  
 この書式設定情報を使用する方法の詳細については、次を参照してください。、 <xref:System.Speech.Recognition.DisplayAttributes> 列挙します。  
  
   
  
## 例  
 次の例では、ユーティリティ ルーチン \(`stringFromWordArray`\) 3 つの方法のいずれかで書式設定された文字列を生成する: 構文的に \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>\)、正規化された \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>\)、または発音 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>\)。 テキスト出力を取得してから、 <xref:System.Speech.Recognition.RecognizedWordUnit.DisplayAttributes%2A> プロパティを <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit> から取得されるオブジェクト、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
        ReadOnlyCollection<RecognizedWordUnit> words,   
        WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }  
    else if (type == WordType.Pronunciation)   
    {  
       wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
         String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="LexicalForm">
      <MemberSignature Language="C#" Value="public string LexicalForm { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LexicalForm" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.LexicalForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語の正規化されていないテキストを取得します。</summary>
        <value>返します。、 <see cref="T:System.String" /> どのような正規化せず、認識された単語のテキストを格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ほとんどの場合返される値 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> と <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> と同じです。 ただし、認識エンジンよりわかりやすいまたは口語的の文字列表現のオーディオ入力を返す音声正規化を使用する場合があります。  
  
 音声認識の正規化は、特殊な構成体または書面での音声を表現するシンボルの使用です。 などの正規化では、「ドル 1.16」テキストを出力するのに「ドルと 16 セント」は、話された単語を置き換えることができます。  
  
   
  
## 例  
 次の例では、3 つの形式のいずれかでテキストを生成するユーティリティ ルーチン: 構文 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>\)、正規化された \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>\)、および音声 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>\)。 テキスト出力を取得してから、 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit> から取得されるオブジェクト、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
         ReadOnlyCollection<RecognizedWordUnit> words,   
         WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)  
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)  
    {  
    wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Pronunciation">
      <MemberSignature Language="C#" Value="public string Pronunciation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pronunciation" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Pronunciation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>音声認識された単語のスペルを取得します。</summary>
        <value>国際音声記号 \(IPA\) やユニバーサル電話設定 \(UPS\) などのサポートされている音声記号文字の文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 内容 <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A> 、音声認識エンジンが、ロードのいずれかに音声入力の照合に使用する発音を示す <xref:System.Speech.Recognition.Grammar> オブジェクトです。 発音を読み込んだで認識文法からリンクされている辞書ドキュメント内の音声認識エンジンの内部辞書で定義することがあります <xref:System.Speech.Recognition.Grammar> オブジェクト、または、読み込まれたで認識文法でインライン <xref:System.Speech.Recognition.Grammar> オブジェクトです。 音声認識エンジンでは、その発音が辞書または音声認識エンジン現在にあるアクセス文法で定義されていない特殊な単語の発音を作成することもできます。  
  
 Courier New などの多くの Windows ベースの Unicode フォントは、IPA 文字列の表示をサポートします。 詳細については、次を参照してください。 [International Phonetic Alphabet](http://go.microsoft.com/fwlink/?LinkId=58363)します。  
  
   
  
## 例  
 次の例では、3 つの可能な形式のいずれかで文字列を生成するユーティリティ ルーチン: 構文 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>\)、正規化された \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>\)、および音声 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>\)。 テキスト出力を取得してから、 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit> から取得されるオブジェクト、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
          String.Format("[0}: is not a valid input", type));  
    }  
    // Use display attribute  
  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Speech.Recognition.DisplayAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Recognition.RecognizedWordUnit.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>認識された単語の正規化されたテキストを取得します。</summary>
        <value>指定された入力の単語の正規化されたテキスト出力を含む文字列です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ほとんどの場合返される値 <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A> と <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A> と同じになります。 ただし、認識エンジンよりわかりやすいまたは口語的の文字列表現のオーディオ入力を返す音声正規化を使用する場合があります。  
  
 音声認識の正規化は、特殊な構成体または書面での音声を表現するシンボルの使用です。 などの正規化では、「ドル 1.16」テキストを出力するのに「ドルと 16 セント」は、話された単語を置き換えることができます。  
  
   
  
## 例  
 次の例では、3 つの形式のいずれかで文字列を生成するユーティリティ ルーチン: 構文 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.LexicalForm%2A>\)、正規化された \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Text%2A>\)、および音声 \(を使用して <xref:System.Speech.Recognition.RecognizedWordUnit.Pronunciation%2A>\)。 テキスト出力を取得してから、 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> の <xref:System.Speech.Recognition.RecognizedWordUnit> から取得されるオブジェクト、 <xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> プロパティを <xref:System.Speech.Recognition.RecognizedPhrase> オブジェクトです。  
  
```csharp  
  
internal enum WordType   
{  
  Text,  
  Normalized = Text,  
  Lexical,  
  Pronunciation  
}  
```  
  
```csharp  
internal static string stringFromWordArray(  
          ReadOnlyCollection<RecognizedWordUnit> words,   
          WordType type)   
{  
  string text = "";  
  foreach (RecognizedWordUnit word in words)   
  {  
    string wordText = "";  
    if (type == WordType.Text || type == WordType.Normalized)   
    {  
      wordText = word.Text;  
    }   
    else if (type == WordType.Lexical)   
    {  
      wordText = word.LexicalForm;  
    }   
    else if (type == WordType.Pronunciation)   
    {  
      wordText = word.Pronunciation;  
    }   
    else   
    {  
      throw new InvalidEnumArgumentException(  
           String.Format("[0}: is not a valid input", type));  
    }  
  
    // Use display attribute  
    if ((word.DisplayAttributes & DisplayAttributes.OneTrailingSpace) != 0)   
    {  
      wordText += " ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.TwoTrailingSpaces) != 0)   
    {  
      wordText += "  ";  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ConsumeLeadingSpaces) != 0)   
    {  
      wordText = wordText.TrimStart();  
    }  
    if ((word.DisplayAttributes & DisplayAttributes.ZeroTrailingSpaces) != 0)   
    {  
      wordText = wordText.TrimEnd();  
    }  
  
    text += wordText;  
  
  }  
  return text;  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>