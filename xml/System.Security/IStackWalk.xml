<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>呼び出し履歴内のすべての呼び出し元に、保護されたリソースへのアクセスに必要なアクセス許可を設定するかどうかを判断するスタック ウォークを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 部分的に信頼されたコードは、セキュリティ上のリスクを常に表示します。 リソースにアクセスする権限がない、悪意のあるコードの代理としてアクションを実行することもあります操作できます。 これにより、悪意のあるコードが許可するかよりも上位のセキュリティ アクセスを実現できます。  
  
 共通言語ランタイムにより、これらの攻撃からのすべての呼び出しでスタック ウォークを実行して、マネージ コードを保護します。 スタック ウォークは、コール スタック内のすべてのコードが保護されたリソースにアクセスする権限を持っている必要があります。 なので、攻撃を行おうとするコードは常にどこかにコール スタックに、そのことはできませんを独自のセキュリティ権限を超えます。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スタック内の上位の呼び出し元がリソースへのアクセス許可を付与されていない場合であっても、呼び出し元のコードが現在のアクセス許可で識別されるリソースにアクセスできることをアサートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出す <xref:System.Security.IStackWalk.Assert%2A> コール スタックの上位の呼び出し元のアクセス許可のチェックを停止します。 そのため、これらの呼び出し元は必要なアクセス許可を持っていない場合でもリソースもアクセスできます。 アサーションは、コードを呼び出す場合にのみ <xref:System.Security.IStackWalk.Assert%2A> をアサートしている、アクセス許可のセキュリティ チェックに合格します。  
  
 呼び出し <xref:System.Security.IStackWalk.Assert%2A> または後続の呼び出しになるまで、呼び出し元に呼び出し元のコードが返されるまでは、効果的な <xref:System.Security.IStackWalk.Assert%2A> 薄い前のアサーションをレンダリングします。 また、 <xref:System.Security.CodeAccessPermission.RevertAssert%2A> または <xref:System.Security.CodeAccessPermission.RevertAll%2A> 削除の保留中 <xref:System.Security.IStackWalk.Assert%2A>します。  
  
 <xref:System.Security.IStackWalk.Assert%2A> アクセス許可をその要求は成功しませんのでは与えないでアクセス許可は無視されます。 ただし、コール スタックの下部のコードから呼び出す場合 <xref:System.Security.IStackWalk.Demand%2A> そのアクセス許可、 <xref:System.Security.SecurityException> スタック ウォークが呼び出しを試行していたコードに達した場合にスローされる <xref:System.Security.IStackWalk.Assert%2A>します。 これは、コードを呼び出すため <xref:System.Security.IStackWalk.Assert%2A> が与えられていない、アクセス許可、しようとした場合でも <xref:System.Security.IStackWalk.Assert%2A> ことです。  
  
> [!CAUTION]
>  呼び出すため <xref:System.Security.IStackWalk.Assert%2A> 削除呼び出しチェーンにコードのすべての要件は、指定されたリソースにアクセスする権限を付与する必要がある、誤ってまたは不適切な使用されている場合はセキュリティの脆弱性を開くことができます。 したがって、注意して使用する必要があります。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコードに <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /> がありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し履歴のすべての呼び出し元に、現在のアクセス許可オブジェクトで指定されたアクセス許可が付与されているかどうかを判断します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method is typically used by secure libraries to ensure that callers have permission to access a resource. For example, a file class in a secure class library calls <xref:System.Security.IStackWalk.Demand%2A> for the necessary <xref:System.Security.Permissions.FileIOPermission> before performing a file operation requested by the caller.  
  
 The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack. <xref:System.Security.IStackWalk.Demand%2A> succeeds only if no <xref:System.Security.SecurityException> is raised.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し履歴の上位にある呼び出し元には、現在のアクセス許可オブジェクトで指定されたアクセス許可がありません。  
  
 または  
  
 呼び出し履歴内の呼び出し元は、現在のアクセス許可オブジェクトで <see cref="M:System.Security.IStackWalk.Deny" /> を呼び出しました。</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し元のコードを通過する現在のオブジェクトのすべての <see cref="M:System.Security.IStackWalk.Demand" /> が失敗します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it. The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.  
  
 <xref:System.Security.IStackWalk.Deny%2A> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <xref:System.Security.IStackWalk.Deny%2A> from being used to access the resource protected by the denied permission. If a method calls <xref:System.Security.IStackWalk.Deny%2A> on a permission, and if a <xref:System.Security.IStackWalk.Demand%2A> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <xref:System.Security.IStackWalk.Deny%2A>.  
  
 <xref:System.Security.IStackWalk.Deny%2A> is ignored for a permission not granted because a demand for that permission will not succeed.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>You cannot override this method.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>呼び出し側コードによってパススルーされる現在のものを除き、全オブジェクトのあらゆる <see cref="M:System.Security.IStackWalk.Demand" /> を失敗させます。これは、呼び出しスタックの上位にあるコードに対して他のリソースにアクセスするためのアクセス権限が付与されている場合にも当てはまります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.IStackWalk.PermitOnly%2A> ような <xref:System.Security.IStackWalk.Deny%2A>, 両方が発生するスタック ウォークをそれ以外の場合操作が成功したときに失敗することで、します。 その違いは <xref:System.Security.IStackWalk.Deny%2A> が失敗し、スタック ウォークを原因となるアクセス許可を指定が、 <xref:System.Security.IStackWalk.PermitOnly%2A> が失敗するスタック ウォークが発生しない唯一のアクセス許可を指定します。 指定されたリソースのみにアクセスするコードを使用できることを確認するには、このメソッドを呼び出します。  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> アクセス許可をその要求は成功しませんのでは与えないでアクセス許可は無視されます。 ただし場合は、コードのコール スタックを後で呼び出し <xref:System.Security.IStackWalk.Demand%2A> そのアクセス許可、 <xref:System.Security.SecurityException> スタック ウォークが呼び出しを試行していたコードに達した場合にスローされる <xref:System.Security.IStackWalk.PermitOnly%2A>します。 これは、コードを呼び出すため <xref:System.Security.IStackWalk.PermitOnly%2A> が与えられていない、アクセス許可、これと呼ばれる場合でも <xref:System.Security.IStackWalk.PermitOnly%2A> そのアクセス許可。 通常、呼び出し履歴は、コール スタックのコール スタックの上位にあるメソッドが下にあるメソッドを呼び出すように、拡張として表されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>