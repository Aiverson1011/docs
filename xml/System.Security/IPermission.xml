<Type Name="IPermission" FullName="System.Security.IPermission">
  <TypeSignature Language="C#" Value="public interface IPermission : System.Security.ISecurityEncodable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPermission implements class System.Security.ISecurityEncodable" />
  <TypeSignature Language="DocId" Value="T:System.Security.IPermission" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.ISecurityEncodable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>アクセス許可の種類によって実装されるメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 共通言語ランタイムでのアクセス許可は、指定したリソースのセキュリティを設定できる操作のセットを記述するオブジェクトです。 アクセス許可オブジェクトは、操作またはセキュリティ制御の対象となるアクセスについて説明します。アクセスまたは操作を実行する権限は表しません。 アクセス許可は、次の方法でアプリケーション コードと .NET Framework セキュリティ システムの両方で使用されます。  
  
-   コードでは、実行するために必要なアクセス許可を要求します。  
  
-   システムのセキュリティ ポリシーを実行するためにコードにアクセス許可を付与します。  
  
-   コードでは、コードの呼び出しのアクセス許可があることを要求します。  
  
-   コードでは、アサート\/拒否\/許可だけを使用してセキュリティの履歴を上書きします。  
  
> [!NOTE]
>  新しいアクセス許可を記述する場合は、クラスでこのインターフェイスを実装する必要があります。  
  
> [!IMPORTANT]
>  アクセス許可は、複数のスレッドがアクセスできます。 このインターフェイスを実装する場合、ことを保証する必要があります、 <xref:System.Security.IPermission.IsSubsetOf%2A>, 、<xref:System.Security.IPermission.Intersect%2A>, 、<xref:System.Security.IPermission.Union%2A>, 、および <xref:System.Security.IPermission.Copy%2A> メソッドの実装は、スレッド セーフです。  
  
   
  
## 例  
 この例では、コード アクセス セキュリティを使用するためのアクセス許可クラスを定義する方法を示します。 すべての必要なアクセス許可のインターフェイスが実装されます。  
  
 [!code-cpp[Permission\#1](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#1)]
 [!code-csharp[Permission\#1](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#1)]
 [!code-vb[Permission\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Copy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のアクセス許可の同一のコピーを作成して返します。</summary>
        <returns>現在のアクセス許可のコピー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アクセス許可のコピーは、元のアクセス許可とリソースに対して同じアクセス許可を表します。  
  
   
  
## 例  
 次のコード例では、実装することを示しています、 <xref:System.Security.IPermission.Copy%2A> メソッドです。 このコード例が示されている例の一部は、 <xref:System.Security.IPermission> クラスです。  
  
 [!code-cpp[Permission\#4](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#4)]
 [!code-csharp[Permission\#4](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#4)]
 [!code-vb[Permission\#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Demand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スローする <see cref="T:System.Security.SecurityException" /> セキュリティ要件が満たされていない場合、実行時にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは呼び出し元がリソースにアクセスする権限を持っていることを確認する安全なライブラリが通常使用されます。 安全なクラス ライブラリでファイルのクラスを呼び出して、たとえば、 <xref:System.Security.CodeAccessPermission.Demand%2A> 、必要なの <xref:System.Security.Permissions.FileIOPermission> 、呼び出し元が要求されたファイルの操作を実行する前にします。  
  
 ただし、このインターフェイス メソッドを実装するクラスの大部分は、完全なスタック ウォークを実行することによってセキュリティ基準を満たすため、必ずしもスタック ウォークは実行されません。 スタック ウォークを実行しないの実装の例としては <xref:System.Security.Permissions.PrincipalPermission.Demand%2A?displayProperty=fullName>です。  
  
 スタック ウォークが実行されると、このメソッドを呼び出すコードのアクセス許可はチェックされません。チェックは、そのコードの直前の呼び出し元から開始し、スタックを実行します。 通常、呼び出し履歴は、コール スタックのコール スタックの上位にあるメソッドが下にあるメソッドを呼び出すように、拡張として表されます。<xref:System.Security.CodeAccessPermission.Demand%2A> 場合にのみ成功しない <xref:System.Security.SecurityException> が発生します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Intersect(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可との共通部分のあるアクセス許可。 これは、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可と指定したアクセス許可の積集合であるアクセス許可を作成して返します。</summary>
        <returns>現在のアクセス許可と指定したアクセス許可の共通部分を表す新しいアクセス許可。 積集合が空の場合、この新しいアクセス許可は <see langword="null" /> です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 2 つのアクセス許可の積集合は、両方に共通する操作のセットを表すアクセス許可です。 両方の元のアクセス許可に適合する要求だけでは、交差する位置を渡します。  
  
 次のステートメントが true のすべての実装に必要な <xref:System.Security.IPermission.Intersect%2A> メソッドです。`X``Y` 表す <xref:System.Security.IPermission> れていないオブジェクト参照 `null`します。  
  
-   `X`.交差 \(`X`\) と等しい値を返します `X`します。  
  
-   `X`.交差 \(`Y`\) と同じ値を返します `Y`します。交差 \(`X`\)。  
  
-   `X`.交差 \(`null`\) を返します `null`します。  
  
   
  
## 例  
 次のコード例では、実装することを示しています、 <xref:System.Security.IPermission.Intersect%2A> メソッドです。 このコード例が示されている例の一部は、 <xref:System.Security.IPermission> クラスです。  
  
 [!code-cpp[Permission\#2](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#2)]
 [!code-csharp[Permission\#2](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#2)]
 [!code-vb[Permission\#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> パラメーターは <see langword="null" /> ではなく、現在のアクセス許可と同じクラスのインスタンスでもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">サブセットの関係にあるかどうかをテストするアクセス許可。 このアクセス許可は、現在のアクセス許可と同じ型であることが必要です。</param>
        <summary>現在のアクセス許可が、指定したアクセス許可のサブセットであるかどうかを判断します。</summary>
        <returns>現在のアクセス許可が、指定したアクセス許可のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のアクセス許可は、現在のアクセス許可を指定した権限によって完全に含まれる一連の操作を指定する場合、指定した権限のサブセットです。 たとえば、C:\\example.txt へのアクセスを表すアクセス許可は、C:\\ のアクセスを表すためのアクセス許可のサブセットです。 このメソッドが戻る場合 `true`, 、現在のアクセス許可がない以上へのアクセスが保護されたリソースは、指定した権限を表します。  
  
 次のステートメントが true のすべての実装に必要な <xref:System.Security.IPermission.IsSubsetOf%2A> メソッドです。`X`, 、`Y`, 、および `Z` 表す <xref:System.Security.IPermission> れていないオブジェクト `null`します。  
  
-   `X`.IsSubsetOf \(`X`\) を返します `true`します。  
  
-   `X`.IsSubsetOf \(`Y`\) と同じ値を返します `Y`します。IsSubsetOf \(`X`\) 場合にだけ、 `X` と `Y` 権限のセットは変わりません。  
  
-   場合 `X`します。IsSubsetOf \(`Y`\) と `Y`です。IsSubsetOf \(`Z`\) 返す `true`, 、`X`です。IsSubsetOf \(`Z`\) を返します `true`します。  
  
 場合 `X` 空を表す <xref:System.Security.IPermission> のアクセス許可の状態を持つオブジェクト <xref:System.Security.Permissions.PermissionState.None> と `Y` を表す、 <xref:System.Security.IPermission> オブジェクトを `null`, 、`X`です。IsSubsetOf \(`Y`\) を返します `true`します。 場合 `Z` 空のアクセス許可、複合セット操作も `X`です。Union\(Z\) します。IsSubsetOf\(Y\) も返します `true` 2 つの空の権限の和集合が空のアクセス許可であるためです。  
  
   
  
## 例  
 次のコード例では、実装することを示しています、 <xref:System.Security.IPermission.IsSubsetOf%2A> メソッドです。 このコード例が示されている例の一部は、 <xref:System.Security.IPermission> クラスです。  
  
 [!code-cpp[Permission\#3](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#3)]
 [!code-csharp[Permission\#3](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#3)]
 [!code-vb[Permission\#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public System.Security.IPermission Union (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IPermission.Union(System.Security.IPermission)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">現在のアクセス許可と結合するアクセス許可。 現在のアクセス許可と同じ型である必要があります。</param>
        <summary>現在のアクセス許可と指定されたアクセス許可の和集合であるアクセス許可を作成します。</summary>
        <returns>現在のアクセス許可と指定されたアクセス許可の和集合を表す新しいアクセス許可。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 呼び出しの結果 <xref:System.Security.IPermission.Union%2A> は現在のアクセス許可と、指定した権限の両方で表されるすべての操作を表す権限。 いずれかのアクセス許可に適合する要求は、その共用体を渡します。  
  
 次のステートメントが true のすべての実装に必要な <xref:System.Security.IPermission.Union%2A> メソッドです。`X``Y` 表す <xref:System.Security.IPermission> れていないオブジェクト `null`します。  
  
-   `X`.共用体 \(`X`\) と同じ値を持つオブジェクトを返す `X`します。  
  
-   `X`.共用体 \(`Y`\) によって返されるオブジェクトと同じ値を持つオブジェクトを返す `Y`します。共用体 \(`X`\)。  
  
-   `X`.共用体 \(`null`\) と同じ値を持つオブジェクトを返す `X`します。  
  
   
  
## 例  
 次のコード例では、実装することを示しています、 <xref:System.Security.IPermission.Union%2A> メソッドです。 このコード例が示されている例の一部は、 <xref:System.Security.IPermission> クラスです。  
  
 [!code-cpp[Permission\#5](~/samples/snippets/cpp/VS_Snippets_CLR/Permission/cpp/Permission.cpp#5)]
 [!code-csharp[Permission\#5](~/samples/snippets/csharp/VS_Snippets_CLR/Permission/CS/Permission.cs#5)]
 [!code-vb[Permission\#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/Permission/vb/permission.vb#5)]  
  
-  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> パラメーターが <see langword="null" /> でなく、また現在のアクセス許可と同じ型でもありません。</exception>
      </Docs>
    </Member>
  </Members>
</Type>