<Type Name="SecurityContext" FullName="System.Security.SecurityContext">
  <TypeSignature Language="C#" Value="public sealed class SecurityContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SecurityContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecurityContext" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>複数のスレッド間で転送される実行コンテキストのすべてのセキュリティ関連データをカプセル化し、反映します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 A <xref:System.Security.SecurityContext> オブジェクトに含まれる情報を含む論理スレッドでは、すべてのセキュリティに関連する情報のキャプチャ、 <xref:System.Security.Principal.WindowsIdentity> と <xref:System.Threading.CompressedStack> オブジェクトです。  この構成により、自動的にいつ反映されるまで、スタック上の Windows id およびセキュリティ要素、 <xref:System.Security.SecurityContext> がコピーされ、非同期スレッド間で転送します。  
  
> [!NOTE]
>  共通言語ランタイム \(CLR\) は、偽装プラットフォームを介してなどのマネージ コードの外部で実行の権限借用のないのマネージ コードを使用して実行される操作を呼び出すアンマネージ コードへ、または Win32 関数への直接の呼び出しに注意してください。 マネージのみ <xref:System.Security.Principal.WindowsIdentity> しない限り、非同期ポイント間でオブジェクトが流れることができます、 `alwaysFlowImpersonationPolicy` に要素が設定されている `true` \(`<alwaysFlowImpersonationPolicy enabled="true"/>`\)。 設定、 `alwaysFlowImpersonationPolicy` 要素 `true` Windows id が常に偽装が実行する方法に関係なく、非同期ポイント間にフローするかを指定します。 詳細については、フローでは、権限借用をアンマネージ非同期ポイント間を参照してください [\<alwaysFlowImpersonationPolicy\> Element](http://msdn.microsoft.com/ja-jp/ee622801-9e46-470b-85ab-88c4b1dd2ee1)します。  
  
 <xref:System.Security.SecurityContext> うち、大きい方の一部である <xref:System.Threading.ExecutionContext> とフローまたは移行時に、 <xref:System.Threading.ExecutionContext> フローまたは移行します。  
  
> [!IMPORTANT]
>  この型は、 <xref:System.IDisposable> インターフェイスです。 型の使用が完了したらを直接または間接的にその破棄する必要があります。 型の直接 dispose を呼び出してその <xref:System.IDisposable.Dispose%2A> メソッドで、 `try`\/`catch` ブロックします。 直接ことのない破棄する場合など言語構成要素を使用して `using` \(c\#\) のまたは `Using` \(Visual Basic で\)。 詳細については、"を使用して、オブジェクトを実装して IDisposable"」セクションを参照してください、 <xref:System.IDisposable> インターフェイスに関するトピック。  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public static System.Security.SecurityContext Capture ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Security.SecurityContext Capture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Capture" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のスレッドのセキュリティ コンテキストをキャプチャします。</summary>
        <returns>現在のスレッドのセキュリティ コンテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The captured security context can be applied to another thread. The <xref:System.Security.SecurityContext> consists of the <xref:System.Threading.CompressedStack> and the <xref:System.Security.Principal.WindowsIdentity> for the executing thread.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCopy">
      <MemberSignature Language="C#" Value="public System.Security.SecurityContext CreateCopy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecurityContext CreateCopy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.CreateCopy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセキュリティ コンテキストのコピーを作成します。</summary>
        <returns>現在のスレッドのセキュリティ コンテキスト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 現在のコンテキストには、キャプチャ操作またはコピー操作を通じて取得したいる必要があります。 このメソッドは、キャプチャしたを適用するために役立ちます <xref:System.Security.SecurityContext> 複数のスレッドにします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">現在のセキュリティ コンテキストが過去に使用された、アプリケーション ドメイン間でマーシャ リングされたまたはを通じて取得されませんでした、 <see cref="M:System.Security.SecurityContext.Capture" /> メソッドです。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Security.SecurityContext" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Call **languageKeyword tag is not supported!!!!**  
 when you are finished using the <xref:System.Security.SecurityContext>. The **languageKeyword tag is not supported!!!!**  
 method leaves the <xref:System.Security.SecurityContext> in an unusable state. After calling **languageKeyword tag is not supported!!!!**  
, you must release all references to the <xref:System.Security.SecurityContext> so the garbage collector can reclaim the memory that the <xref:System.Security.SecurityContext> was occupying.  
  
 For more information, see [Cleaning Up Unmanaged Resources](http://msdn.microsoft.com/ja-jp/a17b0066-71c2-4ba4-9822-8e19332fc213) and [Implementing a Dispose Method](http://msdn.microsoft.com/ja-jp/eb4e1af0-3b48-4fbc-ad4e-fc2f64138bf9).  
  
> [!NOTE]
>  Always call **languageKeyword tag is not supported!!!!**  
>  before you release your last reference to the <xref:System.Security.SecurityContext>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Security.SecurityContext> object's **languageKeyword tag is not supported!!!!**  
>  method.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.IsFlowSuppressed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>セキュリティ コンテキストのフローが中止されたかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> フローが中止された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.SecurityContext.IsFlowSuppressed%2A> メソッドは、転送するかどうかを判断するインフラストラクチャ コンポーネントによって使用、 <xref:System.Security.SecurityContext> 中の非同期操作の情報です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWindowsIdentityFlowSuppressed">
      <MemberSignature Language="C#" Value="public static bool IsWindowsIdentityFlowSuppressed ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsWindowsIdentityFlowSuppressed() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のセキュリティ コンテキストの Windows ID 部分のフローが中止されたかどうかを判断します。</summary>
        <returns>
          <see langword="true" /> フローが中止された場合それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.SecurityContext.IsWindowsIdentityFlowSuppressed%2A> メソッドは、Windows id 情報を転送するかどうかを判断するインフラストラクチャ コンポーネントによって使用時に、 <xref:System.Security.SecurityContext> は非同期操作中に移行します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RestoreFlow">
      <MemberSignature Language="C#" Value="public static void RestoreFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RestoreFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.RestoreFlow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の非同期スレッド間におけるセキュリティ コンテキストのフローを復元します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Security.SecurityContext.RestoreFlow%2A> メソッドは、 <xref:System.Threading.AsyncFlowControl.Undo%2A?displayProperty=fullName> 以前の効果を反転させるメソッド <xref:System.Security.SecurityContext.SuppressFlow%2A> メソッドの呼び出しです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">セキュリティ コンテキストが <see langword="null" /> または空の文字列です。</exception>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Security.SecurityContext securityContext, System.Threading.ContextCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Security.SecurityContext securityContext, class System.Threading.ContextCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="securityContext" Type="System.Security.SecurityContext" />
        <Parameter Name="callback" Type="System.Threading.ContextCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="securityContext">設定するセキュリティ コンテキスト。</param>
        <param name="callback">指定されたセキュリティ コンテキストで実行するメソッドを表すデリゲート。</param>
        <param name="state">コールバック メソッドに渡すオブジェクト。</param>
        <summary>現在のスレッドの指定されたセキュリティ コンテキストで、指定されたメソッドを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 メソッドの呼び出しが完了すると、以前の状態を現在のスレッドのセキュリティ コンテキストが返されます。  
  
   
  
## 例  
 次のコード例を使用する方法を示しています、 <xref:System.Security.SecurityContext.Run%2A> メソッドを指定したセキュリティ コンテキストで実行するメソッドです。  
  
 [!code-csharp[System.Security.SecurityContext.Run\#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecurityContext.Run/CS/form1.cs#1)]
 [!code-vb[System.Security.SecurityContext.Run\#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecurityContext.Run/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="securityContext" /> は <see langword="null" /> です。  
  
 または  
  
 <paramref name="securityContext" /> キャプチャ操作では取得されませんでした。  
  
 または  
  
 <paramref name="securityContext" /> 引数として既に使用されて、 <see cref="M:System.Security.SecurityContext.Run(System.Security.SecurityContext,System.Threading.ContextCallback,System.Object)" /> メソッドの呼び出しです。</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlow">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.SuppressFlow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の非同期スレッド間におけるセキュリティ コンテキストのフローを中止します。</summary>
        <returns>
          <see cref="T:System.Threading.AsyncFlowControl" /> フローを復元するための構造です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用してフローを抑制する <xref:System.Security.SecurityContext> 非同期操作の現在のスレッドに関する情報。  
  
 共通言語ランタイム \(CLR\) は、マネージ コードを使用して実行された偽装操作の対応はのみです。 など、プラットフォーム呼び出しまたは Win32 関数への呼び出しを通して偽装、アンマネージ コードに、CLR はマネージ コードの外部で実行される偽装の知識がありません。 マネージを使用する必要があります非同期ポイント間のフローの id に <xref:System.Security.Principal.WindowsIdentity> と <xref:System.Security.Principal.WindowsImpersonationContext> メソッドです。  
  
 使用して、 <xref:System.Threading.AsyncFlowControl.Undo%2A> メソッドで返された <xref:System.Threading.AsyncFlowControl> 構造体を返す、 <xref:System.Security.SecurityContext> を以前の状態オブジェクト。  
  
 このメソッドがで保護されている、 <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=fullName> の <xref:System.Security.Permissions.SecurityPermissionFlag.Infrastructure?displayProperty=fullName> 権限です。 完全に信頼されたコンポーネントのフローを抑制するには、このメソッドを呼び出すことができます、 <xref:System.Security.SecurityContext> 非同期呼び出し中に情報。 フローを中止すると、ときに、 <xref:System.Security.SecurityContext.Capture%2A> メソッドが返す `null`します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
    <Member MemberName="SuppressFlowWindowsIdentity">
      <MemberSignature Language="C#" Value="public static System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.AsyncFlowControl SuppressFlowWindowsIdentity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecurityContext.SuppressFlowWindowsIdentity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.AsyncFlowControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>複数の非同期スレッドにおける現在のセキュリティ コンテキストの Windows ID 部分のフローを中止します。</summary>
        <returns>フローを復元するための構造体。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを使用して、Windows id のフローを抑制すると、 <xref:System.Security.SecurityContext> 非同期スレッド間で移行します。  
  
 使用して、 <xref:System.Threading.AsyncFlowControl.Undo%2A> メソッドで返された <xref:System.Threading.AsyncFlowControl> 構造体を返す、 <xref:System.Security.SecurityContext> を以前の状態オブジェクト。  
  
> [!NOTE]
>  共通言語ランタイム \(CLR\) は、偽装プラットフォームを介してなどのマネージ コードの外部で実行の権限借用のないのマネージ コードを使用して実行される操作を呼び出すアンマネージ コードへ、または Win32 関数への直接の呼び出しに注意してください。 マネージのみ <xref:System.Security.Principal.WindowsIdentity> しない限り、非同期ポイント間でオブジェクトが流れることができます、 `alwaysFlowImpersonationPolicy` に要素が設定されている `true` \(`<alwaysFlowImpersonationPolicy enabled="true"/>`\)。 設定、 `alwaysFlowImpersonationPolicy` 要素 `true` Windows id が常に偽装が実行する方法に関係なく、非同期ポイント間にフローするかを指定します。 詳細については、フローでは、権限借用をアンマネージ非同期ポイント間を参照してください [\< alwaysFlowImpersonationPolicy \> 要素](http://msdn.microsoft.com/ja-jp/ee622801-9e46-470b-85ab-88c4b1dd2ee1)します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">requires full trust for the immediate caller. This member cannot be used by partially trusted or transparent code.</permission>
      </Docs>
    </Member>
  </Members>
</Type>