<Type Name="BerConverter" FullName="System.DirectoryServices.Protocols.BerConverter">
  <TypeSignature Language="C#" Value="public sealed class BerConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit BerConverter extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.DirectoryServices.Protocols.BerConverter" />
  <AssemblyInfo>
    <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <see cref="T:System.DirectoryServices.Protocols.BerConverter" /> クラスは、エンコードし、基本的なエンコード rules \(BER\) を使用して構造化データをデコードします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Decode">
      <MemberSignature Language="C#" Value="public static object[] Decode (string format, byte[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object[] Decode(string format, unsigned int8[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <param name="value">BER データの配列。</param>
        <summary>
          <see cref="M:System.DirectoryServices.Protocols.BerConverter.Decode(System.String,System.Byte[])" /> メソッドが BER を使用して構造化データを取得するデータのバイナリ表現をデコードします。</summary>
        <returns>デコードされたデータ。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="format" /> パラメーターに null 参照が含まれています \(<see langword="Nothing" /> Visual Basic で\)。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="format" /> パラメーターには、未定義の文字が含まれています。</exception>
        <exception cref="T:System.DirectoryServices.Protocols.BerConversionException">基になるデコーディングが失敗します。 デコードの規則を以下にできます。  
  
 <list type="table">  
<listheader>  
<term> コード  
  
 </term>  
<description> 対応する結果  
  
 </description>  
</listheader>  
<item>  
<term> '{' '}' '\[' '\]' 'n' 'x'  
  
 </term>  
<description> 対応する結果がありません。  
  
 </description>  
</item>  
<item>  
<term> "i"の"e"  
  
 </term>  
<description> int  
  
 </description>  
</item>  
<item>  
<term> "b"  
  
 </term>  
<description> bool  
  
 </description>  
</item>  
<item>  
<term> ' a'  
  
 </term>  
<description> string  
  
 </description>  
</item>  
<item>  
<term> ' O '  
  
 </term>  
<description> byte\[\]  
  
 </description>  
</item>  
<item>  
<term> "B"  
  
 </term>  
<description> byte\[\] ビット文字列が含まれる  
  
 </description>  
</item>  
<item>  
<term> ' v'  
  
 </term>  
<description> 文字列  
  
 </description>  
</item>  
<item>  
<term> ' V'  
  
 </term>  
<description> byte\[\]  
  
 </description>  
</item>  
</list></exception>
      </Docs>
    </Member>
    <Member MemberName="Encode">
      <MemberSignature Language="C#" Value="public static byte[] Encode (string format, object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] Encode(string format, object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.DirectoryServices.Protocols</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="value" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">書式指定文字列。</param>
        <param name="value">書式付きデータの配列。</param>
        <summary>
          <see cref="M:System.DirectoryServices.Protocols.BerConverter.Encode(System.String,System.Object[])" /> メソッドが、データのバイナリ表現を取得する BER を使用して、構造化データをエンコードします。</summary>
        <returns>BER でエンコードされたデータの配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 有効な書式指定文字を次に示します。  
  
 エンコーディング規則。  
  
|コード|対応する引数|  
|---------|------------|  
|'{' '}' '\[' '\]' 'n'|対応する引数がいません。|  
|' t '"i"の"e"|int|  
|' a'|オクテット文字列|  
|"b"|bool|  
|'|string|  
|' 'X' o '|byte\[\]|  
|' v'|文字列|  
|' V'|byte\[\]|  
  
> [!NOTE]
>  'v' および 'V' で二重の {} が必要です。 たとえば、{{v}} を使用すると {{V}}。  
  
## 例外  
  
|例外|条件|  
|--------|--------|  
|ArgumentNullException|`format` が null 参照 \(Visual Basic の場合は `Nothing`\) です。|  
|ArgumentException|この例外は、次の条件のいずれかで発生します。<br /><br /> -   書式指定文字列のための十分な引数がありません。<br />-   書式指定文字列の引数が正しくありません。<br />-   書式指定文字列には、未定義の文字が含まれています。|  
|BerConversionException|エラー処理の戻り値。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>