<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>プロパティ、メソッド、および現在のアプリケーションに関連するイベントを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 によって公開されるプロパティ、 `My.Application` オブジェクトの現在のアプリケーションまたは DLL にのみ関連付けられているデータを返す。 システム レベルの情報を変更しない `My.Application`します。  
  
 `My.Application` オブジェクトは、次のクラスで構成されます。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> すべてのプロジェクトで使用可能なメンバーを提供します。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Windows フォーム アプリケーションで使用可能なメンバーを提供します。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> コンソール アプリケーションで使用可能なメンバーを提供します。  
  
   
  
## 例  
 この例は、アプリケーションの開いているフォームを反復処理するループを使用して、現在のスレッドによって直接アクセスできるフォームを選択しのタイトルを表示、 <xref:System.Windows.Forms.ListBox> コントロールです。 開いているフォームにアクセスする方法については、次を参照してください。 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>します。  
  
 [!code-vb[VbVbalrMyApplication\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 この例では、Windows フォーム アプリケーションは、という名前のフォームである必要があります `Form1` というリスト ボックスを含む `ListBox1`します。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />。 アプリケーションの認証モードを指定します。</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> した認証モードを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 場合、 `authenticationMode` パラメーターは、 <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> 列挙値が \[このコンス トラクターが、現在のスレッドを設定しよう <xref:System.Threading.Thread.CurrentPrincipal%2A> プロパティを <xref:System.Security.Principal.WindowsPrincipal> 、現在のユーザーです。  
  
 場合、 `authenticationMode` パラメーターは、 <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> 列挙値が \[このコンス トラクターが現在のスレッドの <xref:System.Threading.Thread.CurrentPrincipal%2A> プロパティが変更されていません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得、 <see cref="T:System.Windows.Forms.ApplicationContext" /> Windows フォーム アプリケーションの現在のスレッドのオブジェクト。</summary>
        <value>このプロパティを返します、<see cref="T:System.Windows.Forms.ApplicationContext" />現在のスレッド オブジェクト。 そのオブジェクトには、スレッドのコンテキスト情報が含まれています。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 これは、高度なメンバーの場合です。クリックするまで、IntelliSense では表示されない、**すべて**タブです。  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メッセージ キューに現在ある Windows メッセージをすべて処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The **languageKeyword tag is not supported!!!!**  
 method allows your application to handle other events that might be raised while you code runs. The **languageKeyword tag is not supported!!!!**  
 method has the same behavior as the <xref:System.Windows.Forms.Application.DoEvents%2A> method.  
  
 When you run a Windows Forms application, it creates a new form, which then waits for events to be handled. Each time the form handles an event, such as a button click, it processes all the code associated with that event. All other events wait in the queue. While your code handles the event, your application does not respond. For example, the window does not repaint if another window is dragged on top.  
  
 If you call **languageKeyword tag is not supported!!!!**  
 in your code, your application can handle the other events. For example, if your code adds data to a <xref:System.Windows.Forms.ListBox> in a loop, and after each step of the loop it calls **languageKeyword tag is not supported!!!!**  
, your form repaints when another window is dragged over it. If you remove **languageKeyword tag is not supported!!!!**  
 from your code, your form will not repaint until the click event handler of the button is finished executing.  
  
 Typically, you use this method in a loop to process messages.  
  
> [!NOTE]
>  The **languageKeyword tag is not supported!!!!**  
>  method does not process events in exactly the same way as the form does. Use multithreading to make the form directly handle the events. For more information, see [Multithreaded Applications \(C\# and Visual Basic\)](http://msdn.microsoft.com/ja-jp/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  If a method that handles a user interface \(UI\) event calls the **languageKeyword tag is not supported!!!!**  
>  method, the method might be re\-entered before it finishes. This can happen because the **languageKeyword tag is not supported!!!!**  
>  method processes Windows messages, and Windows messages can raise events.  
  
 The following table lists an example of a task involving the **languageKeyword tag is not supported!!!!**  
 method.  
  
|||  
|-|-|  
|To|See|  
|Allow a form to respond to UI input while busy|[Walkthrough: Handling Events](http://msdn.microsoft.com/ja-jp/f145b3fc-5ae0-4509-a2aa-1ff6934706bd)|  
  
## Availability by Project Type  
  
|||  
|-|-|  
|Project type|Available|  
|Windows Forms Application|**Yes**|  
|Class Library|No|  
|Console Application|No|  
|Windows Forms Control Library|No|  
|Web Control Library|No|  
|Windows Service|No|  
|Web Site|No|  
  
   
  
## 例  
 This example uses the **languageKeyword tag is not supported!!!!**  
 method to allow the UI for `TextBox1` to update.  
  
 [!code-vb[VbVbalrMyApplication\#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 This code should be in a form that has a `TextBox1` component with a `Text` property.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the Clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このアプリケーションが、windows、コントロール、およびなどの Windows XP スタイルを使用するかどうかを決定します。</summary>
        <value>A <see cref="T:System.Boolean" /> をこのアプリケーションが、windows や、コントロールの XP Windows スタイルを使用するかどうかを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> メソッドを呼び出すかどうかを判断するこのプロパティを使用して <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>アプリケーションのスプラッシュ スクリーンは表示されません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase>クラスは、別のスレッドで、スプラッシュ スクリーンを作成します。 このメソッドは、正しいスレッドの呼び出しをマーシャ リングします。  
  
 このメソッドは、メイン フォームが終わったときにロードします。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このアプリケーションが単一インスタンスのアプリケーションであるかどうかを判断します。</summary>
        <value>A <see cref="T:System.Boolean" /> をこのアプリケーションは、単一インスタンスのアプリケーションであるかどうかを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> メソッドでは、このプロパティを使用して、このアプリケーションが単一インスタンスのアプリケーションであるかどうかを確認します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのアプリケーションのメイン フォームを設定します。</summary>
        <value>取得またはこのアプリケーションのメイン フォームを設定します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用して、 `MainForm` プロパティを取得または設定を <xref:System.Windows.Forms.Form> アプリケーションのメイン フォームとして、Visual Basic アプリケーションのスタートアップ\/シャット ダウンのモデルを使用するオブジェクト。  
  
 このプロパティは、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] モデルのアプリケーションのスタートアップ\/シャット ダウンします。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 アプリケーションを終了すると、このプロパティに対する変更は保持されません。 メイン フォームを完全に変更するには、設定を変更する必要があります、 **プロジェクト デザイナー**します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スプラッシュ スクリーンが表示されます \(ミリ秒\) の時間の最小の長さを決定します。</summary>
        <value>
          <see langword="Integer" />。 最短時間 \(ミリ秒\)、スプラッシュ スクリーンが表示されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.MinimumSplashScreenDisplayTime` プロパティでは、アプリケーションのスプラッシュ画面を表示する時間の最小の長さを指定することができます。 メイン フォームでは、このプロパティによって指定されている内容よりも短時間での初期化が完了すると、スプラッシュ スクリーンが要求された時間が経過するれた時点で、メイン フォームが表示されるまで残ります。 開始する、アプリケーションがかかる場合は、メイン フォームがアクティブになった時点スプラッシュ画面が閉じられます。  
  
 プロジェクト デザイナーを使用して、アプリケーションにスプラッシュ スクリーンを追加するときに、設定、 `My.Application.MinimumSplashScreenDisplayTime` 2000 では、2 秒間の最小値の表示時間を提供するプロパティです。  
  
 このプロパティは、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーション モデルです。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 設定する必要があります、 `My.Application.MinimumSplashScreenDisplayTime` プロパティをオーバーライドするメソッドに、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> または <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> メソッドです。 メソッドをオーバーライドするコード、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> ApplicationEvents.vb ファイルは、既定で非表示でクラスを入力してください。  
  
||  
|-|  
|メンバーをオーバーライドするためのコード エディター ウィンドウにアクセスするには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  **\[アプリケーション イベントの表示\]** をクリックしてコード エディターを開きます。<br />     詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。|  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例では、設定、 `My.Application.MinimumSplashScreenDisplayTime` プロパティをオーバーライドすることで、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> プロパティです。  
  
 [!code-vb[VbVbalrMyApplication\#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 この例では、プロジェクトのスプラッシュ スクリーンである必要があります。  
  
 アプリケーション イベントのコード エディター ウィンドウで次のコードを入力する必要があります。 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ネットワークの可用性が変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An application raises the **languageKeyword tag is not supported!!!!**  
 event every time that the availability of the network changes. You can use the <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> property of the **parameterReference tag is not supported!!!!**  
 parameter to get the new state of the network connection. To get the current state of the network connection, use the <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property.  
  
 This event is raised on the application's main thread with the other user\-interface events. This enables the event handler to access directly the application's UI. However, if the application is busy handling another user\-interface event when this event is raised, this event cannot be processed until the other event handler finishes or calls the <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> method.  
  
 The <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> event provides the same functionality as this event but is available for all application types.  
  
 The code for the **languageKeyword tag is not supported!!!!**  
 event handler is stored in the ApplicationEvents.vb file, which is hidden by default.  
  
||  
|-|  
|To access the Code Editor window for application events|  
|1.  Have a project selected in **ui tag is not supported!!!!**<br />     Click **ui tag is not supported!!!!**<br />     on the **ui tag is not supported!!!!**<br />     menu.<br />2.  Click the **ui tag is not supported!!!!**<br />     tab.<br />3.  Click the **ui tag is not supported!!!!**<br />     button to open the Code Editor.<br />     For more information, see [Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74).|  
  
> [!NOTE]
>  Many network hubs will provide a network connection even if the hub is disconnected from a larger network. Consequently, for wired connections, this event indicates change in the connection between the computer and a hub.  
  
> [!NOTE]
>  The **languageKeyword tag is not supported!!!!**  
>  event is not raised by applications when they are run on Windows 95 and Windows 98, or when they are run by a non\-administrator on Windows 2000. If your application might run on those operating systems, use the <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> property to check for network availability.  
  
## Availability by Project Type  
  
|||  
|-|-|  
|Project type|Available|  
|Windows Forms Application|**Yes**|  
|Class Library|No|  
|Console Application|No|  
|Windows Forms Control Library|No|  
|Web Control Library|No|  
|Windows Service|No|  
|Web Site|No|  
  
   
  
## 例  
 This example calls the `SetConnectionStatus` method of the default `Form1` class when the network availability changes.  
  
 You must enter the code in the Code Editor window for application events. To access this window, follow the instructions from this topic's Remarks section.  
  
 The project should have a form named `Form1`. It should have a method named `SetConnectionStatus` that takes a **languageKeyword tag is not supported!!!!**  
 parameter.  
  
 [!code-vb[VbVbalrMyApplication\#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、スプラッシュ スクリーンとメイン フォームを構成するコードを出力するデザイナーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドは何もしません。 ただしでのアプリケーションのメイン フォームを選択すると、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] **プロジェクト デザイナー**, 、デザイナーを設定するメソッドを使用してこのメソッドをオーバーライドし、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> プロパティをメイン フォームの新しいインスタンスにします。  
  
 このメソッドは、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、スプラッシュ スクリーンを初期化するコードを出力するデザイナーを使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドは何もしません。 アプリケーションのスプラッシュ画面を選択するかどうか、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] **プロジェクト デザイナー**, 、デザイナーをオーバーライドし、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> メソッドを設定するメソッドを使用して、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> プロパティ スプラッシュ スクリーンのフォームの新しいインスタンスをします。  
  
 このメソッドは、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> の <see langword="String" />, 、現在のアプリケーションの文字列としてコマンドライン引数を格納します。</param>
        <summary>Visual スタイル、テキストの表示スタイル、および \(アプリケーションでは、Windows 認証を使用\) 場合は、メイン アプリケーション スレッドの現在のプリンシパルを設定し、定義されている場合は、スプラッシュ スクリーンを初期化します。</summary>
        <returns>A <see cref="T:System.Boolean" /> アプリケーションの起動を続行するかどうかを示します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Visual スタイル、テキストの表示スタイル、および \(アプリケーションでは、Windows 認証を使用\) 場合は、メイン アプリケーション スレッドの現在のプリンシパル既定では、このメソッドを設定および呼び出し `ShowSplashScreen` されなかった場合 `/nosplash` も `-nosplash` コマンドライン引数として使用します。  
  
 このメソッドは、次のメソッドを呼び出します。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>。  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メインのアプリケーションに、初期化が完了した後に実行を開始する準備ができて場合の開始点を提供します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、Windows フォームのメッセージ ループに入る前にこのメソッドは、 `OnCreateMainForm` \(フォームを作成するアプリケーションのメイン\) と `HideSplashScreen` \(スプラッシュ画面を閉じる\) をメソッド。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>。 デザイナーでメイン フォームの初期化コードを出力する方法を提供します。  
  
     既定では、このメソッドは何もしません。 ただしでのアプリケーションのメイン フォームを選択すると、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] **プロジェクト デザイナー**, 、デザイナーをオーバーライドし、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> メソッドを設定するメソッドを <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> プロパティをメイン フォームの新しいインスタンスにします。  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>。 アプリケーションが、スプラッシュ スクリーンが定義されており、それが開いている場合、このメソッドは、スプラッシュ スクリーンを閉じます。  
  
     既定では、このメソッドは、スプラッシュ スクリーンを閉じます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされた場合は、アプリケーションのシャット ダウン時に実行するコードをできるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、メインのアプリケーションでハンドルされない例外が発生した場合に実行されません。  
  
 既定では、このメソッドを発生させる、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> イベントです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />。 アプリケーションのコマンドライン引数を格納し、アプリケーションの起動を取り消す必要があるかどうかを示します。</param>
        <summary>派生クラスでオーバーライドされるは、アプリケーションの起動時に実行するコードをできるようにします。</summary>
        <returns>A <see cref="T:System.Boolean" /> を示すかどうか、アプリケーションが起動を続行する必要があります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドを発生させる、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> イベントです。 イベント ハンドラーを設定できる、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> イベント引数のプロパティです。 場合 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> は `True`, 、このメソッドが戻る `False` アプリケーションの起動をキャンセルします。 それ以外の場合、このメソッドは `True` を返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />。 後続のアプリケーション インスタンスのコマンドライン引数を格納し、最初のアプリケーション インスタンスを導入するときに例外ハンドラーの終了時にフォア グラウンドを使用するかどうかを示します。</param>
        <summary>派生クラスでオーバーライドされた場合は、単一インスタンスのアプリケーションの後続のインスタンスの起動時に実行するコードをできるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドを発生させる、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> イベントです。 イベント ハンドラーを設定できる、 <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> イベント引数のプロパティです。 場合 <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> は `True`, 、メソッドは、メイン フォームをアクティブにします。 それ以外の場合、メイン フォームは、現在の状態に残されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />。</param>
        <summary>派生クラスでオーバーライドされた場合は、アプリケーションでハンドルされない例外が発生したときに実行するコードをできるようにします。</summary>
        <returns>A <see cref="T:System.Boolean" /> を示すかどうか、 <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" /> イベントが発生します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドを発生させる、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> イベントは、デバッガーがアタッチされていないと、ユーザーの処理とならない限り、 `UnhandledException` イベントです。 イベント ハンドラーを設定できる、 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> プロパティです。 場合 <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> は `False`, 、または例外ハンドラーからの復帰時に、アプリケーションの終了イベントが処理されない場合。 それ以外の場合、アプリケーションのコントロールは、Windows フォームのメッセージ ループに返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのすべての開いているフォームのコレクションを取得します。</summary>
        <value>A <see cref="T:System.Windows.Forms.FormCollection" /> すべてのアプリケーションの開いているフォームを含むオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.OpenForms` プロパティは、アプリケーションのすべての開いているフォームのコレクションを取得します。 コンス トラクターを使用する、 <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=fullName> プロパティです。  
  
> [!NOTE]
>  `My.Application.OpenForms` プロパティを返します、開いているすべてのフォームに関係なくどのスレッドの開いたします。 確認する必要があります、 <xref:System.Windows.Forms.Control.InvokeRequired%2A> ; にアクセスする前に、各フォームのスローされることがそれ以外の場合、 <xref:System.InvalidOperationException> 例外です。  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例は、アプリケーションの開いているフォームをループ処理し、現在のスレッドで直接アクセスできるを選択しのタイトルを表示、 <xref:System.Windows.Forms.ListBox> コントロールです。 この例では、Windows フォーム アプリケーションは、という名前のフォームである必要があります `Form1` というリスト ボックスを含む `ListBox1`します。  
  
 [!code-vb[VbVbalrMyApplication\#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 この例は、アプリケーションの開いているフォームをループ処理しのタイトルを表示、 <xref:System.Windows.Forms.ListBox> コントロールです。  
  
 [!code-vb[VbVbalrMyApplication\#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions that are related to user interfaces and the Clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">型の配列 <see langword="String" />します。 コマンドラインから <see langword="Sub Main" />します。</param>
        <summary>設定し、Visual Basic アプリケーション モデルを開始します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.Run` メソッドのサポートを提供する、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーション モデルです。 このメソッドは、アプリケーションからのみ呼び出すことは `Sub Main`です。 既定では、 `Sub Main` Windows フォームのアプリケーションがこのメソッドを呼び出します。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Controls the ability to access all environment variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Controls the ability to access files and folders. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Controls the ability to access registry variables. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Controls the permissions related to user interfaces and the Clipboard. Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Controls rights to access HTTP Internet resources. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Controls rights to make or accept connections on a transport address. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Controls access to a Windows NT performance counter component. Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションが、終了時にユーザー設定を保存するかどうかを決定します。</summary>
        <value>
          <see langword="Boolean" />。<see langword="True" /> アプリケーションが終了時にユーザー設定を保存することを示します。 それ以外の場合、設定は暗黙的に保存されません。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `SaveMySettingsOnExit` プロパティにより、ユーザーは、アプリケーションが実行時の設定を保存する方法を変更します。 使用して明示的に設定の変更を保存できます、 <xref:System.Configuration.ApplicationSettingsBase.Save%2A> のメソッド、 `My.Settings` オブジェクトです。 設定を保存または変更する方法の詳細については、次を参照してください。 [Managing Application Properties](http://msdn.microsoft.com/ja-jp/0ad4926f-636e-41f8-a5b1-faf9d9b0a254)します。  
  
 アプリケーションを終了すると、このプロパティに対する変更は保持されません。 変更する、 `SaveMySettingsOnExit` プロパティ永続的にする必要があります設定を変更、 **プロジェクト デザイナー**:  
  
||  
|-|  
|プロジェクト デザイナーで設定を変更するには|  
|1.  **ソリューション エクスプローラー**でプロジェクトを選択します。 をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  選択 **My.Settings をシャット ダウン時に保存**します。|  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例には、2 つの部分があります。  
  
-   `InitializeSaveMySettingsOnExit` のチェック状態を初期化するサブルーチン、 <xref:System.Windows.Forms.CheckBox> コントロールの現在の値を `SaveMySettingsOnExit` プロパティです。  
  
-   `SaveMySettingsOnExit_CheckedChanged` への変更を処理するサブルーチン、 <xref:System.Windows.Forms.CheckBox> を更新するコントロール、 `My.Application.SaveMySettingsOnExit` プロパティです。  
  
 [!code-vb[VbVbalrMyApplication\#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 この例を実行するには、アプリケーションが必要な <xref:System.Windows.Forms.CheckBox> という名前のコントロール `SaveMySettingsOnExit`します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>かどうかをアプリケーション定義、スプラッシュ スクリーンし、そのような場合は、それを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このメソッドを呼び出す `OnCreateSplashScreen` スレッド セーフな方法でします。  
  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> メソッドには、スプラッシュを表示するコードが含まれている画面を少なくともによって指定されたミリ秒数、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> プロパティです。 この機能を使用するに設定する必要があります、 `My.Application.MinimumSplashScreenDisplayTime` プロパティをオーバーライドするメソッドに、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> または <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> メソッドを使用して、アプリケーションのスプラッシュ画面の追加、または、 **プロジェクト デザイナー**します。 詳細については、「<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>」を参照してください。  
  
 このメソッドは、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> メソッドです。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのシャット ダウン時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーションは、 `Shutdown` イベントが終了する前にします。 これにより、アプリケーションがそのリソースを閉じる方法を制御することができます。 このイベントの一部である、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーション モデルです。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 コードを `Shutdown` ApplicationEvents.vb ファイルは、既定で非表示にイベント ハンドラーが格納されています。  
  
||  
|-|  
|アプリケーション イベントのコード エディター ウィンドウにアクセスするには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  **\[アプリケーション イベントの表示\]** をクリックしてコード エディターを開きます。<br />     詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。|  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例は、アプリケーションのシャット ダウン時にメッセージを記録します。  
  
 [!code-vb[VbVbalrMyApplication\#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 アプリケーション イベントのコード エディター ウィンドウで、コードを入力する必要があります。 このウィンドウにアクセスするには、このトピックの「解説」セクションから手順を実行します。 詳細については、「[How to: Log Messages When the Application Starts or Shuts Down](http://msdn.microsoft.com/ja-jp/67624d05-cddf-48b7-8c36-5c99baa4c621)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションのメイン フォームが閉じたときの動作を決定します。</summary>
        <value>A <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" /> アプリケーションに何がメイン フォームが閉じたときを示す列挙値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> メソッドは、メイン フォームが閉じられると、または新しいメイン フォームとしてフォームを昇格する場合は別の開いているときに、アプリケーションをシャット ダウンかどうかを判断するには、このプロパティの値をチェックします。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはこのアプリケーションのスプラッシュ スクリーンを設定します。</summary>
        <value>A <see cref="T:System.Windows.Forms.Form" /> アプリケーションが、スプラッシュ スクリーンとして使用するオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 `My.Application.SplashScreen` プロパティを取得または設定を使用する、 <xref:System.Windows.Forms.Form> アプリケーションが、スプラッシュ スクリーンとして使用するオブジェクト、アプリケーションの開始中に表示される最初のグラフィック形式です。  
  
 このプロパティは、Visual Basic アプリケーション モデルをサポートします。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 アプリケーションを終了すると、このプロパティに対する変更は保持されません。 スプラッシュ スクリーンを完全に変更するには、設定を変更する必要があります、 **プロジェクト デザイナー**します。  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例では、 `My.Application.SplashScreen` プロパティおよび `My.Application.Startup` アプリケーションの起動時に、ステータス情報、スプラッシュ画面を更新するイベントです。  
  
 [!code-vb[VbVbalrMyApplication\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 この例では、プロジェクトのスプラッシュ スクリーンがという名前である必要があります `SplashScreen1`します。 スプラッシュ スクリーンがという名前のプロパティを持つ必要がある `Status` 、ユーザー インターフェイスを更新します。  
  
 アプリケーション イベントのコード エディター ウィンドウで次のコードを入力する必要があります。 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">このプロパティに同じ値を割り当てると、 <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" /> プロパティです。</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アプリケーションの起動時に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 通常の \(単一インスタンスではない\) アプリケーションを生成、 `Startup` イベントを起動するたびにします。 単一インスタンス アプリケーションは、 `Startup` イベントを発生させる場合は、アプリケーションは既にアクティブでない場合、専用の開始時に、 `StartupNextInstance` イベントです。 詳細については、「<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>」を参照してください。  
  
 このイベントの一部である、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーション モデルです。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 使用することができます、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> のプロパティ、 `e` パラメーターをアプリケーションのスタートアップ フォームの読み込みを制御します。 ときに、 <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> にプロパティが設定されている `True`, 、スタートアップ フォームは開始されません。 その場合は、コードでは、別のスタートアップ コード パスを呼び出す必要があります。  
  
 使用することができます、 <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> のプロパティ、 `e` パラメーターまたは <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> アプリケーションのコマンドライン引数にアクセスするプロパティです。  
  
 コードを `Startup` ApplicationEvents.vb ファイルは、既定で非表示にイベント ハンドラーが格納されています。  
  
||  
|-|  
|アプリケーション イベントのコード エディター ウィンドウにアクセスするには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  **\[アプリケーション イベントの表示\]** をクリックしてコード エディターを開きます。<br /><br /> 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。|  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|**はい**|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例では、 `My.Application.SplashScreen` プロパティおよび `My.Application.Startup` アプリケーションの起動時に、ステータス情報、スプラッシュ画面を更新するイベントです。  
  
 [!code-vb[VbVbalrMyApplication\#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 この例では、プロジェクトのスプラッシュ スクリーンがという名前である必要があります `SplashScreen1`します。 スプラッシュ スクリーンをという名前のプロパティがある必要がある `Status` 、ユーザー インターフェイスを更新します。  
  
 アプリケーション イベントのコード エディター ウィンドウで、コードを入力する必要があります。 このウィンドウにアクセスするには、このトピックの「解説」セクションから手順を実行します。 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controls the ability to add an event handler for this event. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>単一インスタンス アプリケーションとアプリケーションを起動しようとしていますが既にアクティブなときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 単一インスタンスのアプリケーション、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> が既にアクティブなときに、アプリケーションを再起動しようとするイベントです。 単一インスタンス アプリケーションを初めて起動すると発生、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> イベントです。 詳細については、「<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>」を参照してください。  
  
 このイベントの一部である、 [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)] アプリケーション モデルです。 詳細については、「[Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b)」を参照してください。  
  
 このイベントは、他のユーザー インターフェイス イベントと、アプリケーションのメイン スレッドで発生します。 これにより、イベント ハンドラーは、アプリケーションのユーザー インターフェイスに直接アクセスできます。 ただし、アプリケーションがこのイベントが発生したときに別のユーザー インターフェイス イベントを処理する場合は、このイベント処理できません、その他のイベント ハンドラーが完了するかを呼び出すまで、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> メソッドです。  
  
> [!NOTE]
>  `StartupNextInstance` イベントは、単一インスタンス アプリケーションでのみ発生します。 確認する必要があります、アプリケーションの単一インスタンスの動作を有効にする、 **単一インスタンス アプリケーションを作成する** プロジェクト デザイナー\] チェック ボックスです。  
  
||  
|-|  
|アプリケーションを単一インスタンスを作成するには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  選択、 **単一インスタンス アプリケーションを作成する** チェック ボックスをオンします。|  
  
 使用する必要があります、 <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> のプロパティ、 `e` 単一インスタンス アプリケーションを起動する後続の試行中に引数にアクセスするパラメーターです。<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> プロパティは、単一インスタンスのアプリケーションの最初のインスタンスを開始するための引数を提供します。  
  
 コードを <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> ApplicationEvents.vb ファイルは、既定で非表示にイベント ハンドラーが格納されています。  
  
||  
|-|  
|アプリケーション イベントのコード エディター ウィンドウにアクセスするには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  **\[アプリケーション イベントの表示\]** をクリックしてコード エディターを開きます。<br />     詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。|  
  
 次の表に、関連するタスクの例については、 `My.Application.StartupNextInstance` イベントです。  
  
|||  
|-|-|  
|目的|参照トピック|  
|最初のアプリケーション インスタンスのコマンドライン引数をチェックします。|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## プロジェクトの種類別の可用性  
  
|||  
|-|-|  
|プロジェクトの種類|使用可能|  
|Windows フォーム アプリケーション|はい|  
|クラス ライブラリ|いいえ|  
|コンソール アプリケーション|いいえ|  
|Windows フォーム コントロール ライブラリ|いいえ|  
|Web コントロール ライブラリ|いいえ|  
|Windows サービス|いいえ|  
|Web サイト|いいえ|  
  
   
  
## 例  
 この例では、 `e` のパラメーター、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> イベント ハンドラーをアプリケーションのコマンドライン引数を確認します。 始まる引数が見つかった場合 `/input=`, 、その引数の残りの部分が表示されます。  
  
 [!code-vb[VbVbalrMyApplication\#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 アプリケーション イベントのコード エディター ウィンドウで、コードを入力する必要があります。 このウィンドウにアクセスするには、このトピックの「解説」セクションから手順を実行します。 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハンドルされない例外がアプリケーションで生じたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 An application raises the **languageKeyword tag is not supported!!!!**  
 event when it encounters an unhandled exception. This event is part of the Visual Basic Application model. For more information, see [Overview of the Visual Basic Application Model](http://msdn.microsoft.com/ja-jp/17538984-84fe-43c9-82c8-724c9529fe8b).  
  
 You can use the <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> property of the **parameterReference tag is not supported!!!!**  
 parameter to access the unhandled exception that caused this event.  
  
 You can use the <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> property of the **parameterReference tag is not supported!!!!**  
 parameter to control whether the application exits. By default, <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> is **languageKeyword tag is not supported!!!!**  
. Therefore, the application exits after completing the **languageKeyword tag is not supported!!!!**  
 event handler. You can set the value to **languageKeyword tag is not supported!!!!**  
 in the **languageKeyword tag is not supported!!!!**  
 event handler to keep the application running, and have it return to a waiting state.  
  
 The code for the **languageKeyword tag is not supported!!!!**  
 event handler is stored in the ApplicationEvents.vb file, which is hidden by default.  
  
||  
|-|  
|To access the Code Editor window for application events|  
|1.  With a project selected in **ui tag is not supported!!!!**<br />    , click **ui tag is not supported!!!!**<br />     on the **ui tag is not supported!!!!**<br />     menu.<br />2.  Click the **ui tag is not supported!!!!**<br />     tab.<br />3.  Click the **ui tag is not supported!!!!**<br />     button to open the Code Editor.|  
  
 For more information, see [Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74).  
  
> [!NOTE]
>  The Visual Basic compiler prevents applications that are built for debugging from raising this event, to enable a debugger to handle the unhandled exceptions. This means that if you are testing your application by running it under the Visual Studio Integrated Development Environment debugger, your **languageKeyword tag is not supported!!!!**  
>  event handler will not be called. For more information about building applications for debugging, see [\/debug \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/c2b0bea5-1d5e-499f-9bd5-4f6c6b715ea2).  
  
## Tasks  
 The following table lists examples of tasks that involve the **languageKeyword tag is not supported!!!!**  
 event.  
  
|||  
|-|-|  
|To|See|  
|Log unhandled exceptions|[How to: Log Exceptions in Visual Basic](http://msdn.microsoft.com/ja-jp/a26c60e2-ae39-444a-aebb-33eccadc0eeb)|  
  
## Availability by Project Type  
  
|||  
|-|-|  
|Project type|Available|  
|Windows Forms Application|**Yes**|  
|Class Library|No|  
|Console Application|No|  
|Windows Forms Control Library|No|  
|Web Control Library|No|  
|Windows Service|No|  
|Web Site|No|  
  
   
  
## 例  
 This example uses the **languageKeyword tag is not supported!!!!**  
 event to log any unhandled exceptions.  
  
 You must enter the code in the Code Editor window for application events. To access this window, follow the procedure found in this topic's Remarks section. For more information, see [Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74).  
  
 Because the **languageKeyword tag is not supported!!!!**  
 event is not raised when a debugger is attached to the application, you have to run this example outside the Visual Studio Integrated Development Environment.  
  
 [!code-vb[VbVbalrMyApplication\#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Controls the ability to add an event handler for this event. Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>派生クラスでオーバーライドされると、このプロパティは、デザイナーで、アプリケーションのフォームの既定のテキスト レンダリング エンジンの指定を使用します。</summary>
        <value>
          <see langword="Boolean" />。 値 <see langword="False" /> アプリケーションでの既定のテキスト レンダリング エンジンを使用することを示します Visual Basic 2005します。 値 <see langword="True" /> アプリケーションが Visual Basic .NET 2002年および Visual Basic .NET 2003年のテキストのレンダリング エンジンを使用することを示します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既定では、このプロパティが返す `False` レンダリング エンジンの GDI テキストを示すために [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] アプリケーションのフォームを使用します。 ただし、このプロパティを上書きできます `True` し、アプリケーションのフォームが、GDI \+ テキスト レンダリング エンジン、Visual Basic .NET 2002年および Visual Basic .NET 2003年で使用されているを使用するように指定します。  
  
 このプロパティがによって呼び出される、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> コンス トラクターです。  
  
 メソッドをオーバーライドするコード、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> ApplicationEvents.vb ファイルは、既定で非表示でクラスを入力してください。  
  
||  
|-|  
|メンバーをオーバーライドするためのコード エディター ウィンドウにアクセスするには|  
|1.  プロジェクトを選択 **ソリューション エクスプ ローラー**, 、\] をクリックして **プロパティ** 上、 **プロジェクト** メニュー。<br />2.  **\[アプリケーション\]** タブをクリックします。<br />3.  **\[アプリケーション イベントの表示\]** をクリックしてコード エディターを開きます。<br />     詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。|  
  
   
  
## 例  
 この例では、アプリケーションの既定のレンダリング エンジンとして、GDI \+ テキスト レンダリング エンジンの設定をオーバーライドする、 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> プロパティです。  
  
```  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 アプリケーション イベントのコード エディター ウィンドウで次のコードを入力する必要があります。 詳細については、「[Application Page, Project Designer \(Visual Basic\)](http://msdn.microsoft.com/ja-jp/8cec9fea-cd92-47ff-88dd-7c928f0b4a74)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>