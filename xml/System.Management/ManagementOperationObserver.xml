<Type Name="ManagementOperationObserver" FullName="System.Management.ManagementOperationObserver">
  <TypeSignature Language="C#" Value="public class ManagementOperationObserver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ManagementOperationObserver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Management.ManagementOperationObserver" />
  <AssemblyInfo>
    <AssemblyName>System.Management</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>非同期操作と管理情報を処理および非同期的に受信したイベントを管理します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次の例では、非同期インスタンス列挙を実行する方法を示します。 例では、 <xref:System.Management.ManagementOperationObserver> 管理情報とイベントを非同期的に処理するクラス。  
  
 [!code-csharp[wminet\_ManagementOperationObserver\#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver/cs/ManagementOperationObserver.cs#1)]
 [!code-vb[wminet\_ManagementOperationObserver\#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver/vb/ManagementOperationObserver.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementOperationObserver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementOperationObserver.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Management.ManagementOperationObserver" /> クラスの新しいインスタンスを初期化します。 これは、既定のコンス トラクターです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
   
  
## 例  
 次の例では、非同期インスタンス列挙を実行する方法を示します。 例では、 <xref:System.Management.ManagementOperationObserver> 管理情報とイベントを非同期的に処理するクラス。  
  
 [!code-csharp[wminet\_ManagementOperationObserver\(\)\#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver()/cs/ManagementOperationObserver().cs#1)]
 [!code-vb[wminet\_ManagementOperationObserver\(\)\#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver()/vb/ManagementOperationObserver().vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.ManagementOperationObserver.Cancel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>すべての未処理の操作をキャンセルします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event System.Management.CompletedEventHandler Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Management.CompletedEventHandler Completed" />
      <MemberSignature Language="DocId" Value="E:System.Management.ManagementOperationObserver.Completed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.CompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>操作が完了したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## イベント データ  
 イベント ハンドラーは、型の引数を受け取る <xref:System.Management.CompletedEventArgs> このイベントに関連するデータを格納します。 次 <xref:System.Management.CompletedEventArgs> プロパティは、このイベントに固有の情報を提供します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Management.ManagementEventArgs.Context%2A> \(から継承された <xref:System.Management.ManagementEventArgs>\)|イベントをトリガーした操作からエコー操作コンテキストを取得します。|  
|<xref:System.Management.CompletedEventArgs.Status%2A>|操作の完了ステータスを取得します。|  
|<xref:System.Management.CompletedEventArgs.StatusObject%2A>|取得または WMI オブジェクト内の他の状態情報を設定します。 null でもかまいません。|  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
   
  
## 例  
 次の例では、非同期インスタンス列挙を実行する方法を示します。 例では、 <xref:System.Management.ManagementOperationObserver> 管理情報とイベントを非同期的に処理するクラス。  
  
 [!code-csharp[wminet\_ManagementOperationObserver\_Completed\#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver_Completed/cs/ManagementOperationObserver_Completed.cs#1)]
 [!code-vb[wminet\_ManagementOperationObserver\_Completed\#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver_Completed/vb/ManagementOperationObserver_Completed.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectPut">
      <MemberSignature Language="C#" Value="public event System.Management.ObjectPutEventHandler ObjectPut;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Management.ObjectPutEventHandler ObjectPut" />
      <MemberSignature Language="DocId" Value="E:System.Management.ManagementOperationObserver.ObjectPut" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.ObjectPutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オブジェクトが正常にコミットされたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## イベント データ  
 イベント ハンドラーは、型の引数を受け取る <xref:System.Management.ObjectPutEventArgs> このイベントに関連するデータを格納します。 次 <xref:System.Management.ObjectPutEventArgs> プロパティは、このイベントに固有の情報を提供します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Management.ManagementEventArgs.Context%2A> \(から継承された <xref:System.Management.ManagementEventArgs>\)|イベントをトリガーした操作からエコー操作コンテキストを取得します。|  
|<xref:System.Management.ObjectPutEventArgs.Path%2A>|格納されているオブジェクトの id を取得します。|  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectReady">
      <MemberSignature Language="C#" Value="public event System.Management.ObjectReadyEventHandler ObjectReady;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Management.ObjectReadyEventHandler ObjectReady" />
      <MemberSignature Language="DocId" Value="E:System.Management.ManagementOperationObserver.ObjectReady" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.ObjectReadyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しいオブジェクトがあるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## イベント データ  
 イベント ハンドラーは、型の引数を受け取る <xref:System.Management.ObjectReadyEventArgs> このイベントに関連するデータを格納します。 次 <xref:System.Management.ObjectReadyEventArgs> プロパティは、このイベントに固有の情報を提供します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Management.ManagementEventArgs.Context%2A> \(から継承された <xref:System.Management.ManagementEventArgs>\)|イベントをトリガーした操作からエコー操作コンテキストを取得します。|  
|<xref:System.Management.ObjectReadyEventArgs.NewObject%2A>|新しく返されたオブジェクトを取得します。|  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
   
  
## 例  
 次の例では、非同期インスタンス列挙を実行する方法を示します。 例では、 <xref:System.Management.ManagementOperationObserver> 管理情報とイベントを非同期的に処理するクラス。  
  
 [!code-csharp[wminet\_ManagementOperationObserver\_ObjectReady\#1](~/samples/snippets/csharp/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver_ObjectReady/cs/ManagementOperationObserver_ObjectReady.cs#1)]
 [!code-vb[wminet\_ManagementOperationObserver\_ObjectReady\#1](~/samples/snippets/visualbasic/VS_Snippets_WindowsServer/wminet_ManagementOperationObserver_ObjectReady/vb/ManagementOperationObserver_ObjectReady.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Progress">
      <MemberSignature Language="C#" Value="public event System.Management.ProgressEventHandler Progress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Management.ProgressEventHandler Progress" />
      <MemberSignature Language="DocId" Value="E:System.Management.ManagementOperationObserver.Progress" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Management</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Management.ProgressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>実行中の操作の進行状況を示すために発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
## イベント データ  
 イベント ハンドラーは、型の引数を受け取る <xref:System.Management.ProgressEventArgs> このイベントに関連するデータを格納します。 次 <xref:System.Management.ProgressEventArgs> プロパティは、このイベントに固有の情報を提供します。  
  
|プロパティ|説明|  
|-----------|--------|  
|<xref:System.Management.ManagementEventArgs.Context%2A> \(から継承された <xref:System.Management.ManagementEventArgs>\)|イベントをトリガーした操作からエコー操作コンテキストを取得します。|  
|<xref:System.Management.ProgressEventArgs.Current%2A>|現在の操作によって実行される作業量を取得します。 以下にこれは常に <xref:System.Management.ProgressEventArgs.UpperBound%2A>します。|  
|<xref:System.Management.ProgressEventArgs.Message%2A>|取得または操作の進行状況に関するオプションの追加情報を設定します。|  
|<xref:System.Management.ProgressEventArgs.UpperBound%2A>|操作によって実行するために必要な作業量の合計を取得します。|  
  
## .NET Framework セキュリティ  
 直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。 詳細については、「[Using Libraries from Partially Trusted Code](http://msdn.microsoft.com/ja-jp/dd66cd4c-b087-415f-9c3e-94e3a1835f74)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>