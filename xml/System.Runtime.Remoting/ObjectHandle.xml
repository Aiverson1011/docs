<Type Name="ObjectHandle" FullName="System.Runtime.Remoting.ObjectHandle">
  <TypeSignature Language="C#" Value="public class ObjectHandle : MarshalByRefObject, System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ObjectHandle extends System.MarshalByRefObject implements class System.Runtime.Remoting.IObjectHandle" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.ObjectHandle" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Runtime.Remoting.IObjectHandle</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>間接参照を通じて返されるように、値渡しのマーシャ リング オブジェクト参照をラップします。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Runtime.Remoting.ObjectHandle> クラスは、各でラップされたオブジェクトのメタデータを読み込むことがなく複数のアプリケーション ドメイン間でオブジェクトを渡し \(ラップされた状態\) で使用 <xref:System.AppDomain> 使用される、 <xref:System.Runtime.Remoting.ObjectHandle> 移動します。 したがって、 <xref:System.Runtime.Remoting.ObjectHandle> クラスは、呼び出し元コントロールの場合、 <xref:System.Type> リモート オブジェクトは、ドメインに読み込まれます。  
  
   
  
## 例  
 次のコード例は、別のオブジェクトを作成する方法を示しています。 <xref:System.AppDomain>, 、からオブジェクトへのプロキシを取得し、 <xref:System.Runtime.Remoting.ObjectHandle>です。 この例でを想定できますのコード、 `MyType` クラスが"ObjectHandleAssembly"と呼ばれるアセンブリにコンパイルします。  
  
 [!code-cpp[ObjectHandle\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#1)]
 [!code-csharp[ObjectHandle\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#1)]
 [!code-vb[ObjectHandle\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectHandle (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.#ctor(System.Object)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">新しいによってラップされたオブジェクト <see cref="T:System.Runtime.Remoting.ObjectHandle" />します。</param>
        <summary>インスタンスを初期化、 <see cref="T:System.Runtime.Remoting.ObjectHandle" /> クラスの特定のオブジェクトのラップ <paramref name="o" />します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ラップされたオブジェクトの有効期間リースを初期化します。</summary>
        <returns>初期化された <see cref="T:System.Runtime.Remoting.Lifetime.ILease" /> 、ラップされたオブジェクトの有効期間を制御することができます。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unwrap">
      <MemberSignature Language="C#" Value="public object Unwrap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Unwrap() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.ObjectHandle.Unwrap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ラップされたオブジェクトを返します。</summary>
        <returns>ラップされたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 次のコード例は、別のオブジェクトをアクティブ化する方法を示します <xref:System.AppDomain>, を使用してプロキシを取得、 <xref:System.Runtime.Remoting.ObjectHandle.Unwrap%2A> メソッド、およびリモート オブジェクトへのアクセス プロキシを使用します。  
  
 [!code-cpp[ObjectHandle\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/ObjectHandle/CPP/objecthandleassembly.cpp#2)]
 [!code-csharp[ObjectHandle\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/ObjectHandle/CS/objecthandleassembly.cs#2)]
 [!code-vb[ObjectHandle\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ObjectHandle/VB/objecthandleassembly.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage">
          <para>A <see cref="T:System.Runtime.Remoting.ObjectHandle" /> is a remoted <see cref="T:System.MarshalByRefObject" /> that is tracked by the remoting lifetime service. A call to the current method can fail if the lifetime lease on the <see cref="T:System.Runtime.Remoting.ObjectHandle" /> expires.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>