<Type Name="RemotingConfiguration" FullName="System.Runtime.Remoting.RemotingConfiguration">
  <TypeSignature Language="C#" Value="public static class RemotingConfiguration" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit RemotingConfiguration extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Remoting.RemotingConfiguration" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>リモート処理インフラストラクチャを構成するためのさまざまな静的メソッドを提供します。</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ApplicationId">
      <MemberSignature Language="C#" Value="public static string ApplicationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.RemotingConfiguration.ApplicationId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在実行中のアプリケーションの ID を取得します。</summary>
        <value>A <see cref="T:System.String" /> 実行中のアプリケーションの ID を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーション ID の先頭は、現在実行中のアプリケーションによって作成されたオブジェクトの URI に追加されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、インフラストラクチャ アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For operating with infrastructure code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ApplicationName">
      <MemberSignature Language="C#" Value="public static string ApplicationName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string ApplicationName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.RemotingConfiguration.ApplicationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>取得またはリモート処理アプリケーションの名前を設定します。</summary>
        <value>リモート処理アプリケーションの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 アプリケーション名は、現在のプロパティまたは構成ファイルのいずれか 1 回だけ設定できます。 アプリケーションがインターネット インフォメーション サービス \(IIS\) などをホストされた環境内で実行されている場合は、\(通常、仮想ディレクトリ\) にこの値が設定されて既に可能性があります。 現在のプロパティが返す `null` アプリケーション名が設定されていない場合。  
  
   
  
## 例  
 次のコード例では、使用、 <xref:System.Runtime.Remoting.RemotingConfiguration.ApplicationName%2A> をリモート処理アプリケーションの名前を示すプロパティです。 例については、コードの例を参照してください、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> と <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> メソッドです。  
  
 [!code-cpp[RemotingConfiguration.ServerActivation1\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]
 [!code-csharp[RemotingConfiguration.ServerActivation1\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]
 [!code-vb[RemotingConfiguration.ServerActivation1\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  
  
 次のコード例では、名前付きのアプリケーションからリモート オブジェクトにアクセスする方法を示します。  
  
 [!code-cpp[RemotingConfiguration.ServerActivation1\#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]
 [!code-csharp[RemotingConfiguration.ServerActivation1\#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]
 [!code-vb[RemotingConfiguration.ServerActivation1\#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。 プロパティの値を設定する場合にのみ、この例外がスローされます。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public static void Configure (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Configure(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Configure(String,Boolean)")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">リモート処理構成ファイルの名前。<see langword="null" /> の可能性があります。</param>
        <summary>構成ファイルを読み込んで、リモート処理インフラストラクチャを構成します。<see cref="M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String)" /> は互換性のために残されています。 代わりに、<see cref="M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)" /> を使用してください。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
  
> [!NOTE]
>  <xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%29> は互換性のために残されています。 代わりに、<xref:System.Runtime.Remoting.RemotingConfiguration.Configure%28System.String%2CSystem.Boolean%29> を使用してください。  
  
 渡す `null` として、 `filename` パラメーターが、構成ファイルの存在を必要とすることがなくリモート処理の既定の初期化とします。  
  
 構成ファイルの構文を参照してください。 [リモート処理設定スキーマ](http://msdn.microsoft.com/ja-jp/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)します。  
  
> [!NOTE]
>  参照渡しのマーシャ リング オブジェクト \(Mbr\) に存在しないメモリ永久にします。 代わりに、型をオーバーライドしない限り <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> をそれ自身の有効期間ポリシーを制御するには、それぞれの MBR には有限の存続期間、.NET Framework リモート処理システムは、削除して、メモリを再利用のプロセスを開始する前にします。 詳細については、「[Lifetime Leases](http://msdn.microsoft.com/ja-jp/c72d561c-1266-4c8b-b258-2c168c08da9a)」を参照してください。  
  
   
  
## 例  
 [!code-cpp[RemotingConfiguration\_Configure\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#1)]
 [!code-csharp[RemotingConfiguration\_Configure\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#1)]
 [!code-vb[RemotingConfiguration\_Configure\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Configure">
      <MemberSignature Language="C#" Value="public static void Configure (string filename, bool ensureSecurity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Configure(string filename, bool ensureSecurity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.Configure(System.String,System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="ensureSecurity" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="filename">リモート処理構成ファイルの名前。<see langword="null" /> の可能性があります。</param>
        <param name="ensureSecurity">場合に設定 <see langword="true" /> セキュリティが必要です。 場合に設定 <see langword="false" />, セキュリティは必要ありませんが、それでも、使用することがあります。</param>
        <summary>構成ファイルを読み込んで、リモート処理インフラストラクチャを構成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 渡す `null` として、 `filename` パラメーターが、構成ファイルの存在を必要とすることがなくリモート処理の既定の初期化とします。 詳細については、リモート処理とセキュリティを参照 [Security in Remoting.](http://msdn.microsoft.com/ja-jp/9574262c-d4b1-41c5-8600-24ff147c0add)  
  
 構成ファイルの構文を参照してください。 [リモート処理設定スキーマ](http://msdn.microsoft.com/ja-jp/dc2d1e62-9af7-4ca1-99fd-98b93bb4db9e)します。  
  
> [!NOTE]
>  参照渡しのマーシャ リング オブジェクト \(Mbr\) に存在しないメモリ永久にします。 代わりに、型をオーバーライドしない限り <xref:System.MarshalByRefObject.InitializeLifetimeService%2A?displayProperty=fullName> をそれ自身の有効期間ポリシーを制御するには、それぞれの MBR には有限の存続期間、.NET Framework リモート処理システムは、削除して、メモリを再利用のプロセスを開始する前にします。 詳細については、「[Lifetime Leases](http://msdn.microsoft.com/ja-jp/c72d561c-1266-4c8b-b258-2c168c08da9a)」を参照してください。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomErrorsEnabled">
      <MemberSignature Language="C#" Value="public static bool CustomErrorsEnabled (bool isLocalRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CustomErrorsEnabled(bool isLocalRequest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsEnabled(System.Boolean)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isLocalRequest" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="isLocalRequest">
          <see langword="true" /> ローカルの呼び出し元を指定するには <see langword="false" /> をリモートの呼び出し元を指定します。</param>
        <summary>このアプリケーション ドメインのサーバー チャネルによって、ローカルまたはリモートの呼び出し元に対して、フィルター処理した例外情報を返すか、またはすべての例外情報を返すかを指定します。</summary>
        <returns>
          <see langword="true" /> 指定したとおり、ローカルまたはリモート呼び出し元に返される例外情報をフィルター処理された場合のみ、 <paramref name="isLocalRequest" /> パラメーター <see langword="false" /> 場合は、完全な例外情報が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 完全な例外情報には、厳密なサーバー例外とサーバー スタック トレースが含まれます。 フィルター処理された情報には、標準リモート処理例外が含まれますが、サーバー スタック トレースは含まれません。  
  
 `CustomErrorsEnabled` メソッドで指定された構成設定を反映して、 `mode` の属性、 `<customErrors>` アプリケーション構成ファイルの要素。 構成オプションの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconconfiguration\>&#93;](http://msdn.microsoft.com/ja-jp/92c0c097-d984-4315-835b-7490ecdf1097)します。  
  
 次の表は、3 つのサーバー チャネルに例外情報を受け取る呼び出し元と受け取る情報の種類を指定するプロパティ値を示します。  
  
|値|説明|  
|-------|--------|  
|`off`|すべての呼び出し元は、完全な例外情報を受け取ります。|  
|`on`|すべての呼び出し元は、フィルター処理された例外情報を受け取ります。|  
|`remoteOnly`|ローカルの呼び出し元は完全な例外情報を受け取り、リモートの呼び出し元はフィルター処理された例外情報を受け取ります。|  
  
 次の表は、の相互作用を示しています、 `isLocalRequest` パラメーターと、サーバー チャネル プロパティです。  
  
|値|isLocalRequest|戻り値|説明|  
|-------|--------------------|---------|--------|  
|`on`|`true`|`true`|ローカルの呼び出し元は、フィルター処理された例外情報を受け取ります。|  
|`on`|`false`|`true`|リモートの呼び出し元は、フィルター処理された例外情報を受け取ります。|  
|`off`|`true`|`false`|ローカルの呼び出し元は、完全な例外情報を受け取ります。|  
|`off`|`false`|`false`|リモートの呼び出し元は、完全な例外情報を受け取ります。|  
|`remoteOnly`|`true`|`false`|ローカルの呼び出し元は、完全な例外情報を受け取ります。|  
|`remoteOnly`|`false`|`true`|リモートの呼び出し元は、フィルター処理された例外情報を受け取ります。|  
  
 アプリケーション構成ファイルを使用して、呼び出し元に例外情報の戻り値を制御する方法については、次を参照してください。、 `<customErrors>` 要素。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomErrorsMode">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Runtime.Remoting.CustomErrorsModes CustomErrorsMode" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.RemotingConfiguration.CustomErrorsMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.CustomErrorsModes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>設定をどのようにカスタム エラーを示す値を取得または処理されます。</summary>
        <value>メンバー、 <see cref="T:System.Runtime.Remoting.CustomErrorsModes" /> をどのようにカスタム エラーを示す列挙体を処理します。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredActivatedClientTypes">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ActivatedClientTypeEntry[] GetRegisteredActivatedClientTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedClientTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ActivatedClientTypeEntry[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リモートからアクティブ化する型としてクライアントに登録されているオブジェクトの種類の配列を取得します。</summary>
        <returns>オブジェクトの種類の配列は、リモートからアクティブ化する型としてクライアントに登録します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredActivatedServiceTypes">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ActivatedServiceTypeEntry[] GetRegisteredActivatedServiceTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredActivatedServiceTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ActivatedServiceTypeEntry[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>クライアントからの要求に基づいてアクティブ化可能なサービス エンドで登録されているオブジェクト型の配列を取得します。</summary>
        <returns>オブジェクトの種類の配列は、クライアントからの要求に基づいてアクティブ化可能なサービス エンドで登録されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)します。  
  
   
  
## 例  
 [!code-cpp[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#2)]
 [!code-csharp[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#2)]
 [!code-vb[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredWellKnownClientTypes">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.WellKnownClientTypeEntry[] GetRegisteredWellKnownClientTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownClientTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.WellKnownClientTypeEntry[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既知の型としてクライアント エンドで登録されているオブジェクトの種類の配列を取得します。</summary>
        <returns>オブジェクトの種類の配列は、既知の型としてクライアント エンドで登録されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既知のオブジェクト型には、1 回の呼び出しまたはシングルトンのいずれかを指定できます。 オブジェクトの種類が 1 回の呼び出しの場合は、新しいインスタンスが毎回では、クライアントからの呼び出しを作成します。 シングルトン オブジェクトのすべての呼び出しは、そのオブジェクトの 1 つのインスタンスによって処理されます。  
  
 既知のオブジェクトのより詳細な説明を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
   
  
## 例  
 [!code-cpp[RemotingConfiguration\_GetRegisteredWellKnownClient\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CPP/remotingconfiguration_getregisteredwellknownclient_client.cpp#1)]
 [!code-csharp[RemotingConfiguration\_GetRegisteredWellKnownClient\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/CS/remotingconfiguration_getregisteredwellknownclient_client.cs#1)]
 [!code-vb[RemotingConfiguration\_GetRegisteredWellKnownClient\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredWellKnownClient_Client/VB/remotingconfiguration_getregisteredwellknownclient_client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetRegisteredWellKnownServiceTypes">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.WellKnownServiceTypeEntry[] GetRegisteredWellKnownServiceTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.GetRegisteredWellKnownServiceTypes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.WellKnownServiceTypeEntry[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>既知の型として、サービス側で登録されているオブジェクトの種類の配列を取得します。</summary>
        <returns>オブジェクトの種類の配列は、サービス側で既知の型として登録されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 既知のオブジェクト型には、1 回の呼び出しまたはシングルトンのいずれかを指定できます。 オブジェクトの種類が 1 回の呼び出しの場合は、新しいインスタンスが毎回では、クライアントからの呼び出しを作成します。 シングルトン オブジェクトのすべての呼び出しは、そのオブジェクトの 1 つのインスタンスによって処理されます。  
  
 既知のオブジェクトのより詳細な説明を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
   
  
## 例  
 [!code-cpp[RemotingConfiguration\_Configure\_Client\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CPP/remotingconfiguration_configure_server.cpp#2)]
 [!code-csharp[RemotingConfiguration\_Configure\_Client\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/CS/remotingconfiguration_configure_server.cs#2)]
 [!code-vb[RemotingConfiguration\_Configure\_Client\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_Configure_Client/VB/remotingconfiguration_configure_server.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)" />
        <altmember cref="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsActivationAllowed">
      <MemberSignature Language="C#" Value="public static bool IsActivationAllowed (Type svrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsActivationAllowed(class System.Type svrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.IsActivationAllowed(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="svrType">オブジェクト <see cref="T:System.Type" /> を確認します。</param>
        <summary>示すブール値を返すかどうか、指定した <see cref="T:System.Type" /> を許容する、クライアントがアクティブにします。</summary>
        <returns>
          <see langword="true" /> 場合は、指定した <see cref="T:System.Type" /> をクライアントがアクティブに許される、それ以外の場合は、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー側のオブジェクトのアクティブ化するかどうかを決定する、現在のメソッドが使用される <xref:System.Type> がサーバーによって明示的に許可します。  
  
   
  
## 例  
 [!code-cpp[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CPP/RemotingConfiguration_GetRegisteredActivatedService_server.cpp#1)]
 [!code-csharp[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/CS/remotingconfiguration_getregisteredactivatedservice_server.cs#1)]
 [!code-vb[RemotingConfiguration\_GetRegisteredActivatedServer\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_GetRegisteredActivatedServer_Client/VB/remotingconfiguration_getregisteredactivatedservice_server.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsRemotelyActivatedClientType">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (Type svrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(class System.Type svrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ActivatedClientTypeEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="svrType">確認するオブジェクトの型。</param>
        <summary>チェックするかどうか、指定したオブジェクト <see cref="T:System.Type" /> クライアントをリモートでアクティブ化された型として登録されます。</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> 、指定したオブジェクトの種類に対応します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[RemotingConfiguration\_IsRemotelyActivatedClientType1\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype1_client.cpp#1)]
 [!code-csharp[RemotingConfiguration\_IsRemotelyActivatedClientType1\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/CS/remotingconfiguration_isremotelyactivatedclienttype1_client.cs#1)]
 [!code-vb[RemotingConfiguration\_IsRemotelyActivatedClientType1\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType1_Client/VB/remotingconfiguration_isremotelyactivatedclienttype1_client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsRemotelyActivatedClientType">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType (string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.ActivatedClientTypeEntry IsRemotelyActivatedClientType(string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.IsRemotelyActivatedClientType(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.ActivatedClientTypeEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">確認するオブジェクトの型名。</param>
        <param name="assemblyName">確認するオブジェクトのアセンブリ名。</param>
        <summary>型名とアセンブリ名で指定されたオブジェクトがリモートでアクティブ化されたクライアントの種類として登録されているかどうかを確認します。</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> 、指定したオブジェクトの種類に対応します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[RemotingConfiguration\_IsRemotelyActivatedClientType2\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CPP/remotingconfiguration_isremotelyactivatedclienttype2_client.cpp#1)]
 [!code-csharp[RemotingConfiguration\_IsRemotelyActivatedClientType2\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/CS/remotingconfiguration_isremotelyactivatedclienttype2_client.cs#1)]
 [!code-vb[RemotingConfiguration\_IsRemotelyActivatedClientType2\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsRemotelyActivatedClientType2_Client/VB/remotingconfiguration_isremotelyactivatedclienttype2_client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsWellKnownClientType">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (Type svrType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(class System.Type svrType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.WellKnownClientTypeEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svrType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="svrType">オブジェクト <see cref="T:System.Type" /> を確認します。</param>
        <summary>チェックするかどうか、指定したオブジェクト <see cref="T:System.Type" /> 既知のクライアント型として登録されます。</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> 、指定したオブジェクトの種類に対応します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[RemotingConfiguration\_IsWellKnownClientType1\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CPP/remotingconfiguration_iswellknownclienttype1_client.cpp#1)]
 [!code-csharp[RemotingConfiguration\_IsWellKnownClientType1\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/CS/remotingconfiguration_iswellknownclienttype1_client.cs#1)]
 [!code-vb[RemotingConfiguration\_IsWellKnownClientType1\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType1_Client/VB/remotingconfiguration_iswellknownclienttype1_client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="IsWellKnownClientType">
      <MemberSignature Language="C#" Value="public static System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType (string typeName, string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Runtime.Remoting.WellKnownClientTypeEntry IsWellKnownClientType(string typeName, string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.IsWellKnownClientType(System.String,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.Remoting.WellKnownClientTypeEntry</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeName" Type="System.String" />
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeName">確認するオブジェクトの型名。</param>
        <param name="assemblyName">確認するオブジェクトのアセンブリ名。</param>
        <summary>よく知られているクライアントの種類として、型名とアセンブリ名で指定されたオブジェクトが登録されているかどうかを確認します。</summary>
        <returns>
          <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> 、指定したオブジェクトの種類に対応します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 例  
 [!code-cpp[RemotingConfiguration\_IsWellKnownClientType2\_Client\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CPP/remotingconfiguration_iswellknownclienttype2_client.cpp#1)]
 [!code-csharp[RemotingConfiguration\_IsWellKnownClientType2\_Client\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/CS/remotingconfiguration_iswellknownclienttype2_client.cs#1)]
 [!code-vb[RemotingConfiguration\_IsWellKnownClientType2\_Client\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration_IsWellKnownClientType2_Client/VB/remotingconfiguration_iswellknownclienttype2_client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ProcessId">
      <MemberSignature Language="C#" Value="public static string ProcessId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProcessId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Remoting.RemotingConfiguration.ProcessId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在実行中のプロセスの ID を取得します。</summary>
        <value>A <see cref="T:System.String" /> 現在実行中のプロセスの ID を格納します。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Security.SecurityException">直前の呼び出し元には、インフラストラクチャ アクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">For operating with infrastructure code. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Infrastructure" /></permission>
      </Docs>
    </Member>
    <Member MemberName="RegisterActivatedClientType">
      <MemberSignature Language="C#" Value="public static void RegisterActivatedClientType (System.Runtime.Remoting.ActivatedClientTypeEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterActivatedClientType(class System.Runtime.Remoting.ActivatedClientTypeEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Runtime.Remoting.ActivatedClientTypeEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Runtime.Remoting.ActivatedClientTypeEntry" />
      </Parameters>
      <Docs>
        <param name="entry">クライアント側でアクティブの種類の設定を構成します。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> に指定された記録 <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> サーバーでアクティブ化可能な型としてクライアント エンドでします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー上のクライアント側でアクティブ オブジェクトのインスタンスを作成するが必要にその <xref:System.Type> を使用してサーバー側に登録する必要があり、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> メソッドです。 クライアント側でアクティブ オブジェクトの新しいインスタンスをプロキシを取得するには、クライアント登録する必要があります最初のチャネル <xref:System.Runtime.Remoting.Channels.ChannelServices> を呼び出して、オブジェクトをアクティブ化する `new`です。  
  
 クライアント側でアクティブ オブジェクト型、 `new` キーワード、まずクライアント エンドを使用して、\[オブジェクトの種類を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドにより、リモート処理インフラストラクチャのリモート アプリケーションの場所、 `new` 作成を試みます。 その一方を使用する場合、 <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> メソッドは、クライアント側でアクティブ オブジェクトの新しいインスタンスを作成するクライアント エンドで、事前に登録する必要はありませんのでをパラメーターとして、リモート アプリケーションの URL を指定する必要があります。 指定する、 <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> メソッド オブジェクトを作成するサーバーの URL を使用して URL のインスタンスにカプセル化する必要があります、 <xref:System.Runtime.Remoting.Activation.UrlAttribute> クラスです。  
  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterActivatedClientType">
      <MemberSignature Language="C#" Value="public static void RegisterActivatedClientType (Type type, string appUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterActivatedClientType(class System.Type type, string appUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="appUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">オブジェクト <see cref="T:System.Type" />します。</param>
        <param name="appUrl">この型がアクティブ化されたアプリケーションの URL です。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> サーバーでアクティブ化可能な型としてクライアント エンドでの新しいインスタンスを初期化するために指定したパラメーターを使用して、 <see cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー上のクライアント側でアクティブ オブジェクトのインスタンスを作成するが必要にその <xref:System.Type> を使用してサーバー側に登録する必要があり、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> メソッドです。 クライアント側でアクティブ オブジェクトの新しいインスタンスをプロキシを取得するには、クライアント登録する必要があります最初のチャネル <xref:System.Runtime.Remoting.Channels.ChannelServices> を呼び出して、オブジェクトをアクティブ化する `new`です。  
  
 クライアント側でアクティブ オブジェクト型、 `new` キーワード、まずクライアント エンドを使用して、\[オブジェクトの種類を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドにより、リモート処理インフラストラクチャのリモート アプリケーションの場所、 `new` 作成を試みます。 その一方を使用する場合、 <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> メソッドは、クライアント側でアクティブ オブジェクトの新しいインスタンスを作成するクライアント エンドで、事前に登録する必要はありませんのでをパラメーターとして、リモート アプリケーションの URL を指定する必要があります。 指定する、 <xref:System.Activator.CreateInstance%2A?displayProperty=fullName> メソッド オブジェクトを作成するサーバーの URL を使用して URL のインスタンスにカプセル化する必要があります、 <xref:System.Runtime.Remoting.Activation.UrlAttribute> クラスです。  
  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)  
  
   
  
## 例  
 次のコード例では、サーバーのアクティブ化可能な型としてクライアント エンドでオブジェクトの種類の登録を示します。 提示されたクライアント コードに対応する、サーバー コードの例を参照してください、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> メソッドです。  
  
 [!code-cpp[RemotingConfiguration.ClientActivation\#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/client.cpp#1)]
 [!code-csharp[RemotingConfiguration.ClientActivation\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/client.cs#1)]
 [!code-vb[RemotingConfiguration.ClientActivation\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/client.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="typeName" /> パラメーターまたは <paramref name="URI" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterActivatedServiceType">
      <MemberSignature Language="C#" Value="public static void RegisterActivatedServiceType (System.Runtime.Remoting.ActivatedServiceTypeEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterActivatedServiceType(class System.Runtime.Remoting.ActivatedServiceTypeEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Runtime.Remoting.ActivatedServiceTypeEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Runtime.Remoting.ActivatedServiceTypeEntry" />
      </Parameters>
      <Docs>
        <param name="entry">クライアント側でアクティブの種類の設定を構成します。</param>
        <summary>オブジェクトの種類が指定されたに記録されているレジスタ <see cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" /> クライアントからの要求に基づいてアクティブ化可能な 1 つとして、サービス側でします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー上のクライアント側でアクティブ オブジェクトのインスタンスを作成するが必要にその <xref:System.Type> を使用してサーバー側に登録する必要があり、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> メソッドです。 クライアント側でアクティブ オブジェクトの新しいインスタンスをプロキシを取得するには、クライアント登録する必要があります最初のチャネル <xref:System.Runtime.Remoting.Channels.ChannelServices> を呼び出して、オブジェクトをアクティブ化する `new` または <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>です。  
  
 クライアント側でアクティブ オブジェクト型、 `new` キーワード、まずクライアント エンドを使用して、\[オブジェクトの種類を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドにより、リモート処理インフラストラクチャのリモート アプリケーションの場所、 `new` 作成を試みます。 その一方を使用する場合、 <xref:System.Activator.CreateInstance%2A> メソッドは、クライアント側でアクティブ オブジェクトの新しいインスタンスを作成するクライアント エンドで、事前に登録する必要はありませんのでをパラメーターとして、リモート アプリケーションの URL を指定する必要があります。 指定する、 <xref:System.Activator.CreateInstance%2A> メソッド オブジェクトを作成するサーバーの URL を使用して URL のインスタンスにカプセル化する必要があります、 <xref:System.Runtime.Remoting.Activation.UrlAttribute> クラスです。  
  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterActivatedServiceType">
      <MemberSignature Language="C#" Value="public static void RegisterActivatedServiceType (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterActivatedServiceType(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType(System.Type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <see cref="T:System.Type" /> の登録するオブジェクト。</param>
        <summary>クライアントからの要求に基づいてアクティブ化可能な型としては、サービス側で指定したオブジェクトの種類を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 サーバー上のクライアント側でアクティブ オブジェクトのインスタンスを作成するが必要にその <xref:System.Type> を使用してサーバー側に登録する必要があり、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedServiceType%2A> メソッドです。 クライアント側でアクティブ オブジェクトの新しいインスタンスをプロキシを取得するには、クライアント登録する必要があります最初のチャネル <xref:System.Runtime.Remoting.Channels.ChannelServices> を呼び出して、オブジェクトをアクティブ化する `new` または <xref:System.Activator.CreateInstance%2A?displayProperty=fullName>です。  
  
 クライアント側でアクティブ オブジェクト型、 `new` キーワード、まずクライアント エンドを使用して、\[オブジェクトの種類を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドにより、リモート処理インフラストラクチャのリモート アプリケーションの場所、 `new` 作成を試みます。 その一方を使用する場合、 <xref:System.Activator.CreateInstance%2A> メソッドは、クライアント側でアクティブ オブジェクトの新しいインスタンスを作成するクライアント エンドで、事前に登録する必要はありませんのでをパラメーターとして、リモート アプリケーションの URL を指定する必要があります。 指定する、 <xref:System.Activator.CreateInstance%2A> メソッド オブジェクトを作成するサーバーの URL を使用して URL のインスタンスにカプセル化する必要があります、 <xref:System.Runtime.Remoting.Activation.UrlAttribute> クラスです。  
  
 クライアント側でアクティブ オブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconClientActivation\>&#93;](http://msdn.microsoft.com/ja-jp/4a791494-c18a-4711-a5c1-4ab0e49a8f1a)します。  
  
   
  
## 例  
 次のコード例では、クライアントがアクティブ化可能な型として、サーバー上のオブジェクトの種類の登録を示します。 提示されたサーバー コードに対応するクライアント コードでは、例を参照してください、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterActivatedClientType%2A> メソッドです。  
  
 [!code-cpp[RemotingConfiguration.ClientActivation\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/server.cpp#2)]
 [!code-csharp[RemotingConfiguration.ClientActivation\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/server.cs#2)]
 [!code-vb[RemotingConfiguration.ClientActivation\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/server.vb#2)]  
  
 次のコード例では、前のサンプル コードで登録されているサービス オブジェクトを示します。  
  
 [!code-cpp[RemotingConfiguration.ClientActivation\#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CPP/service.cpp#3)]
 [!code-csharp[RemotingConfiguration.ClientActivation\#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/CS/service.cs#3)]
 [!code-vb[RemotingConfiguration.ClientActivation\#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ClientActivation/VB/service.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.ActivatedServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.ActivatedClientTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterWellKnownClientType">
      <MemberSignature Language="C#" Value="public static void RegisterWellKnownClientType (System.Runtime.Remoting.WellKnownClientTypeEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterWellKnownClientType(class System.Runtime.Remoting.WellKnownClientTypeEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Runtime.Remoting.WellKnownClientTypeEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Runtime.Remoting.WellKnownClientTypeEntry" />
      </Parameters>
      <Docs>
        <param name="entry">既知の型の構成設定。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> に指定された記録 <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> サーバーでアクティブ化可能な既知の型としてクライアント エンドでします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されている既知のオブジェクトの URI を知っているすべてのクライアントが優先的に使用するチャネルを登録することによって、オブジェクトのプロキシを取得できます <xref:System.Runtime.Remoting.Channels.ChannelServices>, 、呼び出すことによって、オブジェクトをアクティブ化と `new` または <xref:System.Activator.GetObject%2A?displayProperty=fullName>です。 使用して、よく知られているオブジェクトをアクティブ化する `new`, 、まずを使用してクライアントのよく知られているオブジェクト型を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドにより、リモート処理インフラストラクチャにより、リモート オブジェクトの場所、 `new` キーワードを作成します。 その一方を使用する場合は、 <xref:System.Activator.GetObject%2A?displayProperty=fullName> 既知のオブジェクトをアクティブ化するメソッドが必要にオブジェクトの URL を使用して、引数としてためクライアント エンドで、事前に登録する必要はありません。  
  
 既知のオブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterWellKnownClientType">
      <MemberSignature Language="C#" Value="public static void RegisterWellKnownClientType (Type type, string objectUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterWellKnownClientType(class System.Type type, string objectUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType(System.Type,System.String)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="objectUrl" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">オブジェクト <see cref="T:System.Type" />します。</param>
        <param name="objectUrl">クライアントのよく知られているオブジェクトの URL です。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> サーバーでアクティブ化可能な既知の型としてクライアント エンドでの新しいインスタンスを初期化するために指定したパラメーターを使用して、 <see cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" /> クラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されている既知のオブジェクトの URI を知っているすべてのクライアントが優先的に使用するチャネルを登録することによって、オブジェクトのプロキシを取得できます <xref:System.Runtime.Remoting.Channels.ChannelServices>, 、呼び出すことによって、オブジェクトをアクティブ化と `new` または <xref:System.Activator.GetObject%2A?displayProperty=fullName>です。 使用して、よく知られているオブジェクトをアクティブ化する `new`, 、まずを使用してクライアントのよく知られているオブジェクト型を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドにより、リモート処理インフラストラクチャにより、リモート オブジェクトの場所、 `new` キーワードを作成します。 その一方を使用する場合は、 <xref:System.Activator.GetObject%2A?displayProperty=fullName> 既知のオブジェクトをアクティブ化するメソッドが必要にオブジェクトの URL を使用して、引数としてためクライアント エンドで、事前に登録する必要はありません。  
  
 既知のオブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
   
  
## 例  
 次のコード例では、既知の型としてクライアント エンドでオブジェクトの種類の登録を示します。 提示されたクライアント コードに対応する、サーバー コードの例を参照してください、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType%2A> メソッドです。  
  
 [!code-cpp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#5)]
 [!code-csharp[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#5)]
 [!code-vb[RemotingConfiguration.ServerActivation1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#5)]  
[!code-cpp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#6)]
[!code-csharp[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#6)]
[!code-vb[RemotingConfiguration.ServerActivation1#6](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#6)]  
[!code-cpp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/client.cpp#7)]
[!code-csharp[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/client.cs#7)]
[!code-vb[RemotingConfiguration.ServerActivation1#7](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/client.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterWellKnownServiceType">
      <MemberSignature Language="C#" Value="public static void RegisterWellKnownServiceType (System.Runtime.Remoting.WellKnownServiceTypeEntry entry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterWellKnownServiceType(class System.Runtime.Remoting.WellKnownServiceTypeEntry entry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Runtime.Remoting.WellKnownServiceTypeEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entry" Type="System.Runtime.Remoting.WellKnownServiceTypeEntry" />
      </Parameters>
      <Docs>
        <param name="entry">既知の型の構成設定。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> に指定された記録 <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" /> 既知の型としてのサービス側でします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されている既知のオブジェクトの URI を知っているすべてのクライアントが優先的に使用するチャネルを登録することによって、オブジェクトのプロキシを取得できます <xref:System.Runtime.Remoting.Channels.ChannelServices>, 、呼び出すことによって、オブジェクトをアクティブ化と `new` または <xref:System.Activator.GetObject%2A?displayProperty=fullName> メソッドです。 使用して、よく知られているオブジェクトをアクティブ化する `new`, 、まずを使用してクライアントのよく知られているオブジェクト型を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドにより、リモート処理インフラストラクチャにより、リモート オブジェクトの場所、 `new` キーワードを作成します。 その一方を使用する場合は、 <xref:System.Activator.GetObject%2A?displayProperty=fullName> 既知のオブジェクトをアクティブ化するメソッドが必要にオブジェクトの URL を使用して、引数としてためクライアント エンドで、事前に登録する必要はありません。  
  
 サーバーでの呼び出しが到着すると、.NET Framework は、URI がメッセージから抽出を URI に一致し、必要に応じて、オブジェクトのインスタンスを作成し、オブジェクトの参照を検索するリモート テーブルをチェック オブジェクトのメソッド呼び出しを転送します。 オブジェクトとして登録されている場合 <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, 、メソッドの呼び出しが完了した後に破棄します。 呼び出される各メソッドは、オブジェクトの新しいインスタンスが作成されます。 唯一の違い <xref:System.Activator.GetObject%2A?displayProperty=fullName> と `new` 以前では、パラメーターとして URL を指定することができますし、後者の構成から URL を取得します。  
  
 登録プロセスでは、リモート オブジェクト自体がインスタンス化されません。 これは、のみ、クライアントは、オブジェクトのメソッドを呼び出すを試みたときまたはクライアント側からオブジェクトをアクティブにします。  
  
 既知のオブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
   
  
## 例  
 [!code-cpp[CreateObjRef2\#2](~/samples/snippets/cpp/VS_Snippets_Remoting/CreateObjRef2/CPP/example.cpp#2)]
 [!code-csharp[CreateObjRef2\#2](~/samples/snippets/csharp/VS_Snippets_Remoting/CreateObjRef2/CS/example.cs#2)]
 [!code-vb[CreateObjRef2\#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/CreateObjRef2/VB/example.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
      </Docs>
    </Member>
    <Member MemberName="RegisterWellKnownServiceType">
      <MemberSignature Language="C#" Value="public static void RegisterWellKnownServiceType (Type type, string objectUri, System.Runtime.Remoting.WellKnownObjectMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterWellKnownServiceType(class System.Type type, string objectUri, valuetype System.Runtime.Remoting.WellKnownObjectMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownServiceType(System.Type,System.String,System.Runtime.Remoting.WellKnownObjectMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="objectUri" Type="System.String" />
        <Parameter Name="mode" Type="System.Runtime.Remoting.WellKnownObjectMode" />
      </Parameters>
      <Docs>
        <param name="type">オブジェクト <see cref="T:System.Type" />します。</param>
        <param name="objectUri">オブジェクトの URI。</param>
        <param name="mode">登録されている既知のオブジェクト型のアクティブ化モード。 \(「<see cref="T:System.Runtime.Remoting.WellKnownObjectMode" />」を参照\)。</param>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> 既知の型としてサービス エンドでの新しいインスタンスを初期化するために指定したパラメーターを使用して <see cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 登録されている既知のオブジェクトの URI を知っているすべてのクライアントが優先的に使用するチャネルを登録することによって、オブジェクトのプロキシを取得できます <xref:System.Runtime.Remoting.Channels.ChannelServices>, 、呼び出すことによって、オブジェクトをアクティブ化と `new` または <xref:System.Activator.GetObject%2A?displayProperty=fullName> メソッドです。 使用して、よく知られているオブジェクトをアクティブ化する `new`, 、まずを使用してクライアントのよく知られているオブジェクト型を登録する必要があります、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドです。 呼び出す、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドにより、リモート処理インフラストラクチャにより、リモート オブジェクトの場所、 `new` キーワードを作成します。 その一方を使用する場合は、 <xref:System.Activator.GetObject%2A?displayProperty=fullName> 既知のオブジェクトをアクティブ化するメソッドが必要にオブジェクトの URL を使用して、引数としてためクライアント エンドで、事前に登録する必要はありません。  
  
 サーバーでの呼び出しが到着すると、.NET Framework は、URI がメッセージから抽出を URI に一致し、必要に応じて、オブジェクトのインスタンスを作成し、オブジェクトの参照を検索するリモート テーブルをチェック オブジェクトのメソッド呼び出しを転送します。 オブジェクトとして登録されている場合 <xref:System.Runtime.Remoting.WellKnownObjectMode.SingleCall>, 、メソッドの呼び出しが完了した後に破棄します。 呼び出される各メソッドは、オブジェクトの新しいインスタンスが作成されます。 唯一の違い <xref:System.Activator.GetObject%2A?displayProperty=fullName> と `new` 以前では、パラメーターとして URL を指定することができますし、後者の構成から URL を取得します。  
  
 登録プロセスでは、リモート オブジェクト自体がインスタンス化されません。 これは、のみ、クライアントは、オブジェクトのメソッドを呼び出すを試みたときまたはクライアント側からオブジェクトをアクティブにします。  
  
 既知のオブジェクトの詳細については、次を参照してください。 [&#91;\<topic:\/\/cpconServerActivation\>&#93;](http://msdn.microsoft.com/ja-jp/77ded6e2-4ca8-448b-acf2-562d27fd4396)します。  
  
   
  
## 例  
 次のコード例では、よく知られているオブジェクトの種類として、サーバー上のオブジェクトの種類の登録を示します。 提示されたサーバー コードに対応するクライアント コードでは、例を参照してください、 <xref:System.Runtime.Remoting.RemotingConfiguration.RegisterWellKnownClientType%2A> メソッドです。  
  
 [!code-cpp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#1)]
 [!code-csharp[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#1)]
 [!code-vb[RemotingConfiguration.ServerActivation1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#1)]  
[!code-cpp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#2)]
[!code-csharp[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#2)]
[!code-vb[RemotingConfiguration.ServerActivation1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#2)]  
[!code-cpp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/server.cpp#3)]
[!code-csharp[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/server.cs#3)]
[!code-vb[RemotingConfiguration.ServerActivation1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/server.vb#3)]  
  
 次のコード例では、前のサンプル コードで登録されているサービス オブジェクトを示します。  
  
 [!code-cpp[RemotingConfiguration.ServerActivation1\#4](~/samples/snippets/cpp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CPP/service.cpp#4)]
 [!code-csharp[RemotingConfiguration.ServerActivation1\#4](~/samples/snippets/csharp/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/CS/service.cs#4)]
 [!code-vb[RemotingConfiguration.ServerActivation1\#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/RemotingConfiguration.ServerActivation1/VB/service.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元のコール スタックの上位の少なくとも 1 つに、リモート処理の型とチャネルを構成するアクセス許可がありません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">for configuration of the remoting infrastructure. Demand value: <see cref="F:System.Security.Permissions.SecurityAction.Demand" />; Permission value: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.RemotingConfiguration" /></permission>
        <altmember cref="T:System.Runtime.Remoting.WellKnownServiceTypeEntry" />
        <altmember cref="T:System.Runtime.Remoting.WellKnownClientTypeEntry" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterWellKnownServiceType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> 既知の型を使用している \(1 回の呼び出しまたはシングルトン\) としてサービス エンドでします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterWellKnownClientType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> \(1 回の呼び出しまたはシングルトン\) 既知の型としてクライアント エンドでします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsRemotelyActivatedClientType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトの種類が、リモートでアクティブ化されたクライアントの種類として登録されているかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterActivatedServiceType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> クライアントからの要求に基づいてアクティブ化可能な 1 つとして、サービス側でします。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="IsWellKnownClientType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したオブジェクトの種類が、よく知られているクライアントの種類として登録されているかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="RegisterActivatedClientType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>オブジェクトを登録 <see cref="T:System.Type" /> サーバーでアクティブ化可能な型としてクライアント エンドでします。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>