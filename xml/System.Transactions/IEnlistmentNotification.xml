<Type Name="IEnlistmentNotification" FullName="System.Transactions.IEnlistmentNotification">
  <TypeSignature Language="C#" Value="public interface IEnlistmentNotification" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEnlistmentNotification" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.IEnlistmentNotification" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>リソース マネージャーが参加の登録時にトランザクション マネージャーに対して 2 フェーズ コミット通知コールバックを提供するために実装する必要があるインターフェイスについて説明します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 In order for a resource manager to participate in a transaction, it must enlist in the transaction through the transaction manager. The <xref:System.Transactions.Transaction> class defines a set of methods whose names begin with **languageKeyword tag is not supported!!!!**  
 that provide this functionality. The different **languageKeyword tag is not supported!!!!**  
 methods correspond to the different types of enlistment that a resource maanger may have.  
  
 This class describes an interface that a resource manager should implement to provide two phase commit notification callbacks for the transaction manager upon enlisting for participation. For each resource manager's implementation of the <xref:System.Transactions.IEnlistmentNotification> interface, you should enlist it using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method or the <xref:System.Transactions.Transaction.EnlistDurable%2A> method of the <xref:System.Transactions.Transaction> class, depending on whether your resource is volatile or durable. For more information on enlistment and 2PC, see [Enlisting Resources as Participants in a Transaction](http://msdn.microsoft.com/ja-jp/786a12c2-d530-49f4-9c59-5c973e15a11d) and [Committing a Transaction in Single\-Phase and Multi\-Phase](http://msdn.microsoft.com/ja-jp/694ea153-e4db-41ae-96ac-9ac66dcb69a9) respectively.  
  
 The transaction manager notifies the enlisted object at different phases of the Two Phase Commit Protocol by the following methods.  
  
|Method|Description|  
|------------|-----------------|  
|<xref:System.Transactions.IEnlistmentNotification.Prepare%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the first phase of a transaction, when the transaction manager asks participants whether they can commit the transaction.|  
|<xref:System.Transactions.IEnlistmentNotification.Commit%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is commited.|  
|<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is aborted \(that is, rolled back\).|  
|<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>|This method of an enlisted object is used as a callback by the Transaction Manager during the second phase of a transaction if the transaction is in doubt.|  
  
> [!NOTE]
>  You should be aware that notifications might not be sent sequentially, or in a particular order.  
  
   
  
## 例  
 The following example shows an implementation of this interface, as well as enlisting the object as a participant in a transaction using the <xref:System.Transactions.Transaction.EnlistVolatile%2A> method.  
  
 [!code-csharp[Tx\_Enlist\#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx\_Enlist\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Transactions.ISinglePhaseNotification" />
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public void Commit (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Commit(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Commit(System.Transactions.Enlistment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">
          <see cref="T:System.Transactions.Enlistment" /> 、トランザクション マネージャーに応答を送信するために使用します。</param>
        <summary>参加していることを通知オブジェクトのトランザクションがコミットされていること。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクション マネージャーは、トランザクションをコミットするすべての参加要素を指示するときに、中、コミットの 2 番目のフェーズに参加しているオブジェクトのこのメソッドを呼び出します。  
  
 リソース マネージャーがトランザクションを終了し、呼び出すことによって完了した TM に通知するために必要な作業を実行する必要があります、 <xref:System.Transactions.Enlistment.Done%2A> メソッドを `enlistment` パラメーター。  
  
 リソース マネージャーが永続的に、参加しているが、呼び出すことで応答しないかどうか <xref:System.Transactions.Enlistment.Done%2A> メソッドでは、トランザクション マネージャーは、リソース マネージャーが受信したことを確認は、 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> 呼び出します。 そのため、トランザクション マネージャーは、応答を待つを保持し、このトランザクションに関連する情報を保持します。  場合 <xref:System.Transactions.Enlistment.Done%2A> は呼び出されず、情報を無限に保持されるメモリやシステム全体のリソースにします。 これにより、リソースが解放されることができません。 分散トランザクションの場合は、最終的に MSDTC プロセスが中断される MSDTC のログを入力この可能性があります。 によって管理されるトランザクションの場合 <xref:System.Transactions>, 、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します。 したがってを呼び出すことが重要です、 <xref:System.Transactions.Enlistment.Done%2A> メソッドで、リソース マネージャーが完了したら、作業を準備します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InDoubt">
      <MemberSignature Language="C#" Value="public void InDoubt (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InDoubt(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.InDoubt(System.Transactions.Enlistment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">
          <see cref="T:System.Transactions.Enlistment" /> 、トランザクション マネージャーに応答を送信するために使用します。</param>
        <summary>トランザクションの状態がイン ダウトの状態が参加しているオブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、トランザクション マネージャーが単一の永続的なリソースでは、単一フェーズ コミット操作を呼び出すし、持続性のあるリソースへの接続がトランザクションの結果を取得する前に失われた、揮発性リソースに対して呼び出されます。 その時点では、トランザクションの結果に安全に判断できません。  
  
 として <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> はトランザクションの最終的な状態にあると、呼び出す必要はありません <xref:System.Transactions.IEnlistmentNotification.Commit%2A> または <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 呼び出した後 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>します。  
  
> [!NOTE]
>  揮発性リソースに対して、このメソッドの実装では、影響を受けるデータに対してを認識しているどのような回復や含有の操作を実行する必要があります。  またに呼び出す必要があります、 <xref:System.Transactions.Enlistment.Done%2A> メソッドを上、 `enlistment` パラメーター自体の作業が完了します。  
  
 リソース マネージャーが永続的に、参加しているが、呼び出すことで応答しないかどうか <xref:System.Transactions.Enlistment.Done%2A> メソッドでは、トランザクション マネージャーは、リソース マネージャーが受信したことを確認は、 <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> 呼び出します。 そのため、トランザクション マネージャーは、応答を待つを保持し、このトランザクションに関連する情報を保持します。  場合 <xref:System.Transactions.Enlistment.Done%2A> は呼び出されず、情報を無限に保持されるメモリやシステム全体のリソースにします。 これにより、リソースが解放されることができません。 分散トランザクションの場合は、最終的に MSDTC プロセスが中断される MSDTC のログを入力この可能性があります。 によって管理されるトランザクションの場合 <xref:System.Transactions>, 、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します。 したがってを呼び出すことが重要です、 <xref:System.Transactions.Enlistment.Done%2A> メソッドで、リソース マネージャーが完了したら、作業を準備します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public void Prepare (System.Transactions.PreparingEnlistment preparingEnlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class System.Transactions.PreparingEnlistment preparingEnlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Prepare(System.Transactions.PreparingEnlistment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preparingEnlistment" Type="System.Transactions.PreparingEnlistment" />
      </Parameters>
      <Docs>
        <param name="preparingEnlistment">A <see cref="T:System.Transactions.PreparingEnlistment" /> 、トランザクション マネージャーに応答を送信するために使用します。</param>
        <summary>トランザクションがコミットの準備している参加しているオブジェクトに通知します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクション マネージャーは、このメソッドを呼び出します参加しているリソースのマネージャー、コミットの第 1 フェーズ中にトランザクションをコミットするかどうかの参加者に問い合わせる際です。  
  
 記録する永続的リソース マネージャーを実装するとき、このフェーズでレコードを準備します。 レコードには、回復を実行するために必要なすべての情報を含める必要があります。 これが含まれています、 <xref:System.Transactions.PreparingEnlistment.RecoveryInformation%2A> でトランザクション マネージャーに渡されるプロパティ、 <xref:System.Transactions.TransactionManager.Reenlist%2A> 回復中にメソッドです。 回復の詳細については、「[Performing Recovery](http://msdn.microsoft.com/ja-jp/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)」を参照してください。  
  
 リソース マネージャーは、呼び出す前に完了する必要があるすべての作業を完了する必要があります、 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> のメソッド、 `preparingEnlistment` コミットの決定を示します。 コミット、ロールバック、または不明なこのようなフェーズ 2 通知を受信する前にこれを行うことを確認する必要があります。 これは、フェーズ 2 の通知は、インラインを呼び出した同じスレッドで発生する可能性があるため、 <xref:System.Transactions.PreparingEnlistment.Prepared%2A> フェーズ 1 でのメソッドです。 このため、フェーズ 2 の通知を受け取る前に既に完了したと考えられる作業 \(ロックの解除など\) は、<xref:System.Transactions.PreparingEnlistment.Prepared%2A> 呼び出しの後には実行できません。  
  
 メソッドを呼び出すこともできます、 `preparingEnlistment` ロールバックのための票を表すためのパラメーターです。  
  
 なし、呼び出す必要がありますが、このメソッドの実装に参加しているだけで確認し、トランザクションの進行状況に対応するオブジェクトを修正する場合、 <xref:System.Transactions.Enlistment.Done%2A> のメソッド、 `preparingEnlistment` パラメーター自体の作業が完了します。 これにより、リソース マネージャーでは、フェーズ 2 の通知は表示されません。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (System.Transactions.Enlistment enlistment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Rollback(class System.Transactions.Enlistment enlistment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.IEnlistmentNotification.Rollback(System.Transactions.Enlistment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistment" Type="System.Transactions.Enlistment" />
      </Parameters>
      <Docs>
        <param name="enlistment">A <see cref="T:System.Transactions.Enlistment" /> 、トランザクション マネージャーに応答を送信するために使用します。</param>
        <summary>参加しているオブジェクトに、トランザクションのロールバック通知 \(中断\)。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクション マネージャーは、トランザクションはロールバック、トランザクションをコミットできない 1 つまたは複数のトランザクションの参加者のためには \(中断\) 場合に、参加しているオブジェクトのこのメソッドを呼び出します。  
  
 リソース マネージャーがトランザクションを終了し、呼び出すことによって完了した TM に通知するために必要な作業を実行する必要があります、 <xref:System.Transactions.Enlistment.Done%2A> メソッドを `enlistment` パラメーター。  
  
 リソース マネージャーが永続的に、参加しているが、呼び出すことで応答しないかどうか <xref:System.Transactions.Enlistment.Done%2A> メソッドでは、トランザクション マネージャーは、リソース マネージャーが受信したことを確認は、 <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> 呼び出します。 そのため、トランザクション マネージャーは、応答を待つを保持し、このトランザクションに関連する情報を保持します。  場合 <xref:System.Transactions.Enlistment.Done%2A> は呼び出されず、情報を無限に保持されるメモリやシステム全体のリソースにします。 これにより、リソースが解放されることができません。 分散トランザクションの場合は、最終的に MSDTC プロセスが中断される MSDTC のログを入力この可能性があります。 によって管理されるトランザクションの場合 <xref:System.Transactions>, 、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します。 したがってを呼び出すことが重要です、 <xref:System.Transactions.Enlistment.Done%2A> メソッドで、リソース マネージャーが完了したら、作業を準備します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>