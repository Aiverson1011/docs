<Type Name="Enlistment" FullName="System.Transactions.Enlistment">
  <TypeSignature Language="C#" Value="public class Enlistment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Enlistment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Enlistment" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>トランザクションの最終フェーズで登録されているトランザクションの参加要素と、トランザクション マネージャー間の通信を容易になります。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 ときに、 <xref:System.Transactions.Transaction.EnlistVolatile%2A> と <xref:System.Transactions.Transaction.EnlistDurable%2A> のメソッド、 <xref:System.Transactions.Transaction> オブジェクトが起動され、トランザクションの参加者の参加、参加リストを示すこのオブジェクトを返します。  
  
 トランザクションのコミットの最終フェーズでは、トランザクション マネージャーを実装するリソース マネージャーにこのオブジェクトを渡す、 <xref:System.Transactions.IEnlistmentNotification> トランザクションに参加しているインターフェイス。 具体的には、トランザクション マネージャーを呼び出すか、 <xref:System.Transactions.IEnlistmentNotification.Commit%2A> または <xref:System.Transactions.IEnlistmentNotification.Rollback%2A> かどうか、後者を決定したがコミットまたはトランザクションをロールバックすることによって、参加要素のメソッドです。 参加要素を呼び出す必要があります、 <xref:System.Transactions.Enlistment.Done%2A> 、トランザクション マネージャーがその作業が完了したことを確認できるようにするには、このオブジェクトのメソッドです。  
  
 参加リストが呼び出すことができます、 <xref:System.Transactions.Enlistment.Done%2A> 呼び出したメソッドの前にいつでもで <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 準備フェーズにします。  これにより、参加リストはトランザクションのコミットの投票は、最終結果を受信する必要はありません、つまり読み取り専用の決定にキャストします。 その後に注意してください、 <xref:System.Transactions.Enlistment.Done%2A> メソッドが呼び出されると、参加要素を受け取る、トランザクション マネージャーからさらに通知されません。  
  
   
  
## 例  
 次の例の実装を示しています、 <xref:System.Transactions.IEnlistmentNotification> インターフェイスと、 <xref:System.Transactions.Enlistment.Done%2A> メソッドを呼び出す必要があります。  
  
 [!code-csharp[Tx\_Enlist\#2](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#2)]
 [!code-vb[Tx\_Enlist\#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#2)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
    <altmember cref="T:System.Transactions.PreparingEnlistment" />
    <altmember cref="T:System.Transactions.IEnlistmentNotification" />
  </Docs>
  <Members>
    <Member MemberName="Done">
      <MemberSignature Language="C#" Value="public void Done ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Done() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Enlistment.Done" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションの参加要素がその作業を完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクションのコミットの最終フェーズでは、トランザクション マネージャーを呼び出すか、 <xref:System.Transactions.IEnlistmentNotification.Commit%2A>, 、<xref:System.Transactions.IEnlistmentNotification.Rollback%2A> または <xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> トランザクションがコミットまたはロールバックするかどうかに応じて、参加要素のメソッドです。 リソース マネージャーでのトランザクションを終了し、呼び出すことによってこれが完了したこと、トランザクション マネージャーに通知し、必要な作業を実行する必要があります、 <xref:System.Transactions.Enlistment.Done%2A> メソッドを `enlistment` パラメーター。  
  
 リソース マネージャーが永続的に、参加しているを呼び出して応答しないかどうかは <xref:System.Transactions.Enlistment.Done%2A> メソッドでは、トランザクション マネージャーは、リソース マネージャーが、それぞれの通知呼び出しを受信したことを確認ができます。 そのため、トランザクション マネージャーは、応答を待つを保持し、このトランザクションに関連する情報を保持します。  場合 <xref:System.Transactions.Enlistment.Done%2A> は呼び出されず、情報を無限に保持されるメモリやシステム全体のリソースにします。 これにより、リソースが解放されることができません。 分散トランザクションの場合は、最終的に MSDTC プロセスが中断される MSDTC のログを入力この可能性があります。 によって管理されるトランザクションの場合 <xref:System.Transactions>, 、この結果、リソース マネージャーのプロセスのメモリの消費量が段階的なと継続的な増加します。 したがってを呼び出すことが重要です、 <xref:System.Transactions.Enlistment.Done%2A> メソッドで、リソース マネージャーが完了したら、作業を準備します。  
  
 参加リストが呼び出すことができます、 <xref:System.Transactions.Enlistment.Done%2A> 呼び出したメソッドの前にいつでもで <xref:System.Transactions.PreparingEnlistment.Prepared%2A> 準備フェーズにします。 これにより、参加リストはトランザクションのコミットの投票は、最終結果を受信する必要はありません、つまり読み取り専用の決定にキャストします。 このメソッドが呼び出された後に参加要素通知を受信しないさらに、トランザクション マネージャーからに注意してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Transactions.PreparingEnlistment" />
        <altmember cref="T:System.Transactions.IEnlistmentNotification" />
      </Docs>
    </Member>
  </Members>
</Type>