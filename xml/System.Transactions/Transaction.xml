<Type Name="Transaction" FullName="System.Transactions.Transaction">
  <TypeSignature Language="C#" Value="public class Transaction : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Transaction extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.Transaction" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>トランザクションを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Transactions> 名前空間は、<xref:System.Transactions.Transaction> クラスに基づく明示的なプログラミング モデルだけでなく、インフラストラクチャがトランザクションを自動的に管理する、<xref:System.Transactions.TransactionScope> クラスを使用した暗黙的なプログラミング モデルも提供します。 開発のため、簡単に暗黙的なモデルを使用することを強くお勧めします。 最初に、次を参照してください、 [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/ja-jp/1ddba95e-7587-48b2-8838-708c275e7199) トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [Writing A Transactional Application](http://msdn.microsoft.com/ja-jp/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)します。  
  
 <xref:System.Transactions.Transaction> クラスには、リソース マネージャーの参加を実装している開発者によって使用されるメソッドが含まれています。 トランザクションのクローンを作成および現在のトランザクション コンテキストを制御するための機能も提供します。 現在のトランザクションを取得するには、設定されている場合、静的 <xref:System.Transactions.Transaction.Current%2A> プロパティです。  
  
   
  
## 例  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName="BeginCommitInternal">
      <MemberSignature Language="C#" Value="protected IAsyncResult BeginCommitInternal (AsyncCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.IAsyncResult BeginCommitInternal(class System.AsyncCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.BeginCommitInternal(System.AsyncCallback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Transactions.Transaction Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Transaction Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Clone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションの複製を作成します。</summary>
        <returns>A <see cref="T:System.Transactions.Transaction" /> 現在のトランザクション オブジェクトのコピーであります。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクションを渡すには、複製が作成されます。  たとえば、たくないに渡す、 <xref:System.Transactions.CommittableTransaction> 他のアプリケーションに対するたくない、トランザクションをコミットするためです。  マーシャ リングまたはトランザクションをシリアル化しようとする場合、複製が自動的に作成します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Transactions.Transaction Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Transactions.Transaction Current" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Transaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アンビエント トランザクションを取得または設定します。</summary>
        <value>現在のトランザクションを説明する <see cref="T:System.Transactions.Transaction" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 For more information on ambient transactions, please see the "Managing transaction flow using TransactionScopeOption" section of the [Implementing an Implicit Transaction using Transaction Scope](http://msdn.microsoft.com/ja-jp/49d1706a-1e0c-4c85-9704-75c908372eb9) topic.  
  
 Although you can set the ambient transaction using this property, you should use the <xref:System.Transactions.TransactionScope> object to manipulate the ambient transaction whenever possible.  
  
 This property is thread static. If you change the ambient transaction using this property inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DependentClone">
      <MemberSignature Language="C#" Value="public System.Transactions.DependentTransaction DependentClone (System.Transactions.DependentCloneOption option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.DependentTransaction DependentClone(valuetype System.Transactions.DependentCloneOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.DependentTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cloneOption" Type="System.Transactions.DependentCloneOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <summary>トランザクションの依存している複製を作成します。</summary>
        <returns>A <see cref="T:System.Transactions.DependentTransaction" /> を表す依存している複製します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 依存トランザクションとは、トランザクションがあり、結果が複製されたトランザクションの結果によって異なります。  
  
 `cloneoption` パラメーターが作成する依存トランザクションの種類を制御します。 依存トランザクションが作成された場合 <xref:System.Transactions.DependentCloneOption.BlockCommitUntilComplete>, 、トランザクションがタイムアウトするまでは、トランザクションのコミット処理をブロックまたは <xref:System.Transactions.DependentTransaction.Complete%2A> で呼び出される、 <xref:System.Transactions.DependentTransaction>です。 使用して作成された場合 <xref:System.Transactions.DependentCloneOption.RollbackIfNotComplete>, 場合、トランザクションを自動的に中止 <xref:System.Transactions.CommittableTransaction.Commit%2A> 前に呼び出されます <xref:System.Transactions.DependentTransaction.Complete%2A> で呼び出される、 <xref:System.Transactions.DependentTransaction>です。  
  
   
  
## 例  
 次の例では、依存トランザクションを作成する方法を示します。  
  
 [!code-csharp[Tx\_DependentTx\#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_dependenttx/cs/dependenttx.cs#1)]
 [!code-vb[Tx\_DependentTx\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_dependenttx/vb/dependenttx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトによって保持されているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If you change the ambient transaction by setting <xref:System.Transactions.Transaction.Current%2A> inside a <xref:System.Transactions.TransactionScope> an <xref:System.InvalidOperationException> is thrown when <xref:System.Transactions.TransactionScope.Dispose%2A> is called, and the previous ambient transaction value is restored.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndCommitInternal">
      <MemberSignature Language="C#" Value="protected void EndCommitInternal (IAsyncResult ar);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void EndCommitInternal(class System.IAsyncResult ar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EndCommitInternal(System.IAsyncResult)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ar" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="ar">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnlistDurable">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トランザクションに参加する永続的リソース マネージャーを参加させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 **注** このメソッドを使用して <xref:System.Security.Permissions.SecurityAction.LinkDemand> されないようにすることには、信頼できないコードからと呼ばれます。 ただし、直前の呼び出し元だけが所有する必要が、 `FullTrust` アクセス許可セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistDurable (Guid manager, System.Transactions.IEnlistmentNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistDurable(valuetype System.Guid manager, class System.Transactions.IEnlistmentNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="enlistmentNotification" Type="System.Transactions.IEnlistmentNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 2 フェーズ コミットをサポートする永続的リソース マネージャーを参加させます。</summary>
        <returns>
          <see cref="T:System.Transactions.Enlistment" /> 、参加リストを記述するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 永続参加リストを持つリソース マネージャーは、エラーが発生した場合は、回復を実行できる必要があります。 回復の詳細については、「[Performing Recovery](http://msdn.microsoft.com/ja-jp/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)」を参照してください。 永続的な揮発性リソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [Implementing A Resource Manager](http://msdn.microsoft.com/ja-jp/81509719-d579-4530-831e-42e1acdef63e)します。  リソース マネージャーがコミット通知し、2 フェーズ コミットのコミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Committing A Transaction In Single\-Phase and Multi\-Phase](http://msdn.microsoft.com/ja-jp/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)します。  
  
 このメソッドで、トランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する 2 つのフェーズ コミット通知を受信する、 <xref:System.Transactions.IEnlistmentNotification> インターフェイスです。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistDurable (Guid manager, System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistDurable(valuetype System.Guid manager, class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="singlePhaseNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する単一フェーズ コミットの最適化をサポートする永続的リソース マネージャーを参加させます。</summary>
        <returns>
          <see cref="T:System.Transactions.Enlistment" /> 、参加リストを記述するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 永続参加リストを持つリソース マネージャーは、エラーが発生した場合は、回復を実行できる必要があります。 回復の詳細については、「[Performing Recovery](http://msdn.microsoft.com/ja-jp/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)」を参照してください。 永続的な揮発性リソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [Implementing A Resource Manager](http://msdn.microsoft.com/ja-jp/81509719-d579-4530-831e-42e1acdef63e)します。  
  
 リソース マネージャーの実装は、このメソッドを使用して参加、いなくてとは限りません単一フェーズ コミットを受け取ることに注意してください。 トランザクション マネージャーは代わりに 2 つのフェーズ コミット通知を送信もできます。 単一フェーズ コミットの最適化の詳細については、次を参照してください。 [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/ja-jp/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistPromotableSinglePhase">
      <MemberSignature Language="C#" Value="public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification notification);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnlistPromotableSinglePhase(class System.Transactions.IPromotableSinglePhaseNotification notification) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableSinglePhaseNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <summary>昇格可能な単一フェーズの参加リスト \(PSPE\) を使用して内部トランザクションを持つリソース マネージャーを参加させます。</summary>
        <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 Enlistments in a transaction are volatile; that is, they do not survive the failure of the participant. In addition, this method only suggests the transaction manager to escalate control, but the escalation itself is not guaranteed. If escalation fails, the user is not notified and the transaction is rolled back.  
  
 The parameter **parameterReference tag is not supported!!!!**  
 is used to communicate to the transaction manager the outcome of attempting to commit the resource manager's internal transaction.  If inconsistent data is reported, the transaction manager throws an exception. If an <xref:System.Transactions.TransactionStatus.InDoubt> outcome is reported, the transaction manager looks for the outcome notification in its own internal enlistment and ignores the reported response.  
  
 For more information on enlistments and escalation of a transaction, please see [Transaction Management Escalation](http://msdn.microsoft.com/ja-jp/5b87ae58-8ccf-4b9b-9715-41e4aade89b7). For more information on PSPE, see [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/ja-jp/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb).  
  
 **Note** This method uses <xref:System.Security.Permissions.SecurityAction.LinkDemand> to prevent it from being called from untrusted code; however, only the immediate caller is required to possess the `FullTrust` permission set.  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistPromotableSinglePhase">
      <MemberSignature Language="C#" Value="public bool EnlistPromotableSinglePhase (System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, Guid promoterType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnlistPromotableSinglePhase(class System.Transactions.IPromotableSinglePhaseNotification promotableSinglePhaseNotification, valuetype System.Guid promoterType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableSinglePhaseNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="promoterType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="promotableSinglePhaseNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
        <param name="promoterType">分散トランザクション プロセッサの種類。</param>
        <summary>昇格可能な単一フェーズの参加リスト \(PSPE\) を使用して内部トランザクションを持つリソース マネージャーを参加させます。</summary>
        <returns>参加リストを記述する <see cref="T:System.Transactions.SinglePhaseEnlistment" /> インターフェイスの実装。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 If the value specified for the `promoterType` parameter is `TransactionInterop.PromoterTypeDtc`, the transaction **legacyBold tag is not supported!!!!**  
 be promoted by MSDTC and the `byte[]` returned from the `IPromotableSinglePhaseNotification.Promote` method **legacyBold tag is not supported!!!!**  
 be an MSDTC transaction propagation token.  
  
 If the value specified for the `promoterType` parameter is **legacyBold tag is not supported!!!!**  
`TransactionInterop.PromoterTypeDTC`, the transaction will not be promoted by MSDTC, but rather by the caller’s implementation of `IPromotableSinglePhaseNotification`. If this call is successful, there is a set of subsequent operations on the transaction that will return a `TransactionPromotionException`. These operations are:  
  
-   `Transaction.EnlistDurable`  
  
-   `TransactionInterop.GetDtcTransaction`  
  
-   `TransactionInterop.GetExportCookie`  
  
-   `TransctionInterop.GetTransmitterPropagationToken`  
  
-   Serialization of a Transaction object  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnlistVolatile">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>トランザクションに参加するための揮発性リソース マネージャーを参加させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 永続的な揮発性リソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [Implementing A Resource Manager](http://msdn.microsoft.com/ja-jp/81509719-d579-4530-831e-42e1acdef63e)します。 リソース マネージャーがコミット通知し、コミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Committing A Transaction In Single\-Phase and Multi\-Phase](http://msdn.microsoft.com/ja-jp/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="EnlistVolatile">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistVolatile (System.Transactions.IEnlistmentNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistVolatile(class System.Transactions.IEnlistmentNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enlistmentNotification" Type="System.Transactions.IEnlistmentNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する 2 フェーズ コミットをサポートしている揮発性リソース マネージャーを参加させます。</summary>
        <returns>参加リストについて記述している <see cref="T:System.Transactions.Enlistment" />オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、<xref:System.Transactions.Transaction.EnlistDurable%2A>メソッドです。  
  
 このメソッドをトランザクションに参加するために参加しているリソース マネージャーで定義されたメソッドに対応する 2 つのフェーズ コミットの通知を受信する、<xref:System.Transactions.IEnlistmentNotification>インターフェイスです。  
  
   
  
## 例  
 次の例の実装を示しています<xref:System.Transactions.IEnlistmentNotification>インターフェイスだけでなくを使用して、トランザクションの参加者としてオブジェクトを参加させること、<xref:System.Transactions.Transaction.EnlistVolatile%2A>メソッドです。  
  
 [!code-csharp[Tx\_Enlist\#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_enlist/cs/enlist.cs#1)]
 [!code-vb[Tx\_Enlist\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_enlist/vb/enlist.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistVolatile">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment EnlistVolatile (System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment EnlistVolatile(class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="singlePhaseNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>トランザクションに参加する単一フェーズ コミットの最適化をサポートしている揮発性リソース マネージャーを参加させます。</summary>
        <returns>
          <see cref="T:System.Transactions.Enlistment" /> 、参加リストを記述するオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 揮発性リソース マネージャーでは、関与してトランザクションを完了する障害からの復旧はできません。 トランザクションで永続参加リストを取得するを使用して、 <xref:System.Transactions.Transaction.EnlistDurable%2A> メソッドです。 永続的な揮発性リソースだけでなく、リソースを参加させる方法の詳細については、次を参照してください。 [Implementing A Resource Manager](http://msdn.microsoft.com/ja-jp/81509719-d579-4530-831e-42e1acdef63e)します。 リソース マネージャーがコミット通知し、コミットの準備にどのように応答する方法の詳細については、次を参照してください。 [Committing A Transaction In Single\-Phase and Multi\-Phase](http://msdn.microsoft.com/ja-jp/74b3cfe1-d33a-45b8-91f4-dfd6f6598c4d)します。  
  
 リソース マネージャーの実装は、このメソッドを使用して参加、いなくてとは限りません単一フェーズ コミットを受け取ることに注意してください。 トランザクション マネージャーは代わりに 2 つのフェーズ コミット通知を送信もできます。 単一フェーズ コミットの最適化の詳細については、次を参照してください。 [Optimization Using Single Phase Commit and Promotable Single Phase Notification](http://msdn.microsoft.com/ja-jp/653d51d1-b4bf-4e34-9a6f-aec073f0f5bb)します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Equals(System.Object)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">このインスタンスと比較するオブジェクト。</param>
        <summary>このトランザクションと、指定したオブジェクトが等しいかどうかを決定します。</summary>
        <returns>
          <see langword="true" /> 場合 <paramref name="obj" /> このトランザクションが同じである、それ以外の場合、 <see langword="false" />です。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.GetHashCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスのハッシュ コードを返します。</summary>
        <returns>32 ビット符号付き整数ハッシュ コード。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPromotedToken">
      <MemberSignature Language="C#" Value="public byte[] GetPromotedToken ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance unsigned int8[] GetPromotedToken() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.GetPromotedToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクションを昇格するときに、<c>Promote</c> メソッドで返される <c>byte[]</c> を取得します。</summary>
        <returns>トランザクションを昇格するときに、<c>Promote</c> メソッドで返される <c>byte[]</c>。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドには、既に昇格していない場合は、トランザクションの昇格の原因の副作用があります。  
  
 返されたの形式 `byte[]` の値によって定義された、 `Transation.PromoterType` プロパティです。 場合の値、 `Transaction.PromoterType` プロパティは `TransactionInterop.PromoterTypeDtc` または `Guid.Empty`, 、 `byte[]` MSDTC トランスミッター伝達トークンは、このメソッドによって返されます。 その他の値、 `Transaction.PromoterType` プロパティの呼び出し元によって定義されている形式を指定する `Transaction.EnlistPromotableSinglePhase` プロパティ型の値を指定します。 昇格を解釈するためにトークンをこの後者の場合にする必要が行われたコードのマニュアルを参照、 `EnlistPromotableSinglePhase` 呼び出します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public System.Transactions.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Transactions.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.IsolationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションの分離レベルを取得します。</summary>
        <value>いずれか、 <see cref="T:System.Transactions.IsolationLevel" /> をトランザクションの分離レベルを示す値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクションの分離レベルでは、完了他のトランザクションがトランザクションの前に、揮発性のデータに対して持つアクセス レベルを決定します。 分離レベルの詳細については、ドキュメントを参照して、 <xref:System.Transactions.IsolationLevel> 列挙します。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (System.Transactions.Transaction x, System.Transactions.Transaction y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Transactions.Transaction x, class System.Transactions.Transaction y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Transactions.Transaction" />
        <Parameter Name="y" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="x">
          <see cref="T:System.Transactions.Transaction" /> 等値演算子の左側にあるインスタンスです。</param>
        <param name="y">
          <see cref="T:System.Transactions.Transaction" /> 等値演算子の右側にあるインスタンスです。</param>
        <summary>指定した 2 つあるかどうかをテスト <see cref="T:System.Transactions.Transaction" /> インスタンスは同等です。</summary>
        <returns>
          <see langword="true" /> と <paramref name="x" /> が等しい場合は <paramref name="y" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The equivalent method for this operator is <xref:System.Transactions.Transaction.Equals%28System.Transactions.Transaction%2CSystem.Transactions.Transaction%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (System.Transactions.Transaction x, System.Transactions.Transaction y);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Transactions.Transaction x, class System.Transactions.Transaction y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Transactions.Transaction" />
        <Parameter Name="y" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="x">
          <see cref="T:System.Transactions.Transaction" /> 非等値演算子の左側にあるインスタンスです。</param>
        <param name="y">
          <see cref="T:System.Transactions.Transaction" /> 非等値演算子の右側にあるインスタンスです。</param>
        <summary>2 つの <see cref="T:System.Transactions.Transaction" /> インスタンスが等しくないかどうかを示す値を返します。</summary>
        <returns>
          <paramref name="x" /> と <paramref name="y" /> が等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 The equivalent method for this operator is <xref:System.Transactions.Transaction.Compare%28System.Transactions.Transaction%2CSystem.Transactions.Transaction%29?displayProperty=fullName>  
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromoteAndEnlistDurable">
      <MemberSignature Language="C#" Value="public System.Transactions.Enlistment PromoteAndEnlistDurable (Guid manager, System.Transactions.IPromotableSinglePhaseNotification promotableNotification, System.Transactions.ISinglePhaseNotification notification, System.Transactions.EnlistmentOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Transactions.Enlistment PromoteAndEnlistDurable(valuetype System.Guid manager, class System.Transactions.IPromotableSinglePhaseNotification promotableNotification, class System.Transactions.ISinglePhaseNotification notification, valuetype System.Transactions.EnlistmentOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.Enlistment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceManagerIdentifier" Type="System.Guid" />
        <Parameter Name="promotableNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="enlistmentNotification" Type="System.Transactions.ISinglePhaseNotification" />
        <Parameter Name="enlistmentOptions" Type="System.Transactions.EnlistmentOptions" />
      </Parameters>
      <Docs>
        <param name="manager">To be added.</param>
        <param name="promotableNotification">リソース マネージャーの内部非分散トランザクションのコミットの代理として機能するオブジェクト。</param>
        <param name="notification">To be added.</param>
        <param name="options">To be added.</param>
        <summary>\[.NET Framework 4.5.2 以降のバージョンでのみでサポート\]  
  
 昇格し、トランザクションに参加する 2 フェーズ コミットをサポートする永続的リソース マネージャーの参加します。</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromoterType">
      <MemberSignature Language="C#" Value="public Guid PromoterType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid PromoterType" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.PromoterType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションを昇格するときに、Promote メソッドで返される <c>byte[]</c> の形式を一意に識別します。</summary>
        <value>トランザクションを昇格するときに、Promote メソッドで返される <c>byte[]</c> の形式を一意に識別する Guid。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクションがまだ昇格されていない、昇格可能単一フェーズの参加リストがない場合は、このプロパティの値になります `Guid.Empty`します。 このプロパティの値があるかどうかは、トランザクションを超えたかは、MSDTC に昇格 `TransactionInterop.PromoterTypeDtc`します。 トランザクションされましたまたは非 MSDTC プロモーターによって昇格は、このプロパティの値することが事前に呼び出したに指定された値 `Transaction.EnlistPromotableSinglePhase`です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Rollback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ロールバック \(中止\) トランザクションです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 トランザクション オブジェクトのすべてのコピーは、このメソッドを呼び出すことによって、トランザクションのロールバックを開始できます。 元のトランザクション オブジェクトのみ、これは、 <xref:System.Transactions.CommittableTransaction> オブジェクト、トランザクションのコミットを開始するために使用できます。 トランザクションの結果が既に決定した後、このメソッドが呼び出されたときに、例外がスローされます。  
  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.Rollback(System.Exception)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">To be added.</param>
        <summary>ロールバック \(中止\) トランザクションです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDistributedTransactionIdentifier">
      <MemberSignature Language="C#" Value="public void SetDistributedTransactionIdentifier (System.Transactions.IPromotableSinglePhaseNotification promotableNotification, Guid distributedTransactionIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDistributedTransactionIdentifier(class System.Transactions.IPromotableSinglePhaseNotification promotableNotification, valuetype System.Guid distributedTransactionIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="promotableNotification" Type="System.Transactions.IPromotableSinglePhaseNotification" />
        <Parameter Name="distributedTransactionIdentifier" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="promotableNotification">参加者によって実装された <see cref="T:System.Transactions.IPromotableSinglePhaseNotification" /> インターフェイス。</param>
        <param name="distributedTransactionIdentifier">分散トランザクション マネージャーによって使用されるトランザクションの識別子です。</param>
        <summary>MSDTC でないプロモーターによって生成される分散トランザクションの識別子を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドは、正常にのみ呼び出すことができます中に、`IPromotableSinglePhaseNotification.Promote`メソッドを処理しています。 その他の任意の時にこのメソッドが呼び出された場合、`TransactionException`がスローされます。  
  
 指定された値、`promotableNotification`パラメーターが指定されていたものを同じオブジェクトにする必要があります、`Transaction.EnlistPromotableSinglePhase`呼び出しです。 この場合、これがない場合、`InvalidOperationException`がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serializationInfo" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">To be added.</param>
        <param name="context">宛先 \(を参照してください <see cref="T:System.Runtime.Serialization.StreamingContext" /> \) このシリアル化します。</param>
        <summary>取得、 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> このトランザクションをシリアル化に必要なデータをします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransactionCompleted">
      <MemberSignature Language="C#" Value="public event System.Transactions.TransactionCompletedEventHandler TransactionCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Transactions.TransactionCompletedEventHandler TransactionCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Transactions.Transaction.TransactionCompleted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.TransactionCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションが完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 揮発性参加リストを使用して、トランザクションの結果情報を取得する代わりにこのイベントを登録することができます。 渡されたパラメーター、 <xref:System.Transactions.TransactionCompletedEventHandler> デリゲートは、 <xref:System.Transactions.Transaction> インスタンス。 クエリを実行できます、 <xref:System.Transactions.Transaction.TransactionInformation%2A> のインスタンスを取得する特定のインスタンスのプロパティを <xref:System.Transactions.TransactionInformation>, が <xref:System.Transactions.TransactionInformation.Status%2A> プロパティがいずれかでトランザクションの状態を表す、 <xref:System.Transactions.TransactionStatus.Committed> または <xref:System.Transactions.TransactionStatus.Aborted> 値。  
  
 **注意** を接続しているトランザクションのパフォーマンスに影響を及ぼす悪影響このイベントにサインアップします。  
  
   
  
## 例  
 次の例は、購読することにより、アプリケーションが、トランザクションの結果を取得する方法を示しています、 <xref:System.Transactions.Transaction.TransactionCompleted> イベントです。  
  
 [!code-csharp[Tx\_Outcome\#1](~/samples/snippets/csharp/VS_Snippets_CFX/tx_outcome/cs/txoutcome.cs#1)]
 [!code-vb[Tx\_Outcome\#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/tx_outcome/vb/txoutcome.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">破棄されているトランザクションでは、このイベントをサブスクライブしようとしました。</exception>
      </Docs>
    </Member>
    <Member MemberName="TransactionInformation">
      <MemberSignature Language="C#" Value="public System.Transactions.TransactionInformation TransactionInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Transactions.TransactionInformation TransactionInformation" />
      <MemberSignature Language="DocId" Value="P:System.Transactions.Transaction.TransactionInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Transactions.TransactionInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>トランザクションに関する追加情報を取得します。</summary>
        <value>A <see cref="T:System.Transactions.TransactionInformation" /> トランザクションに関する追加情報を格納します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
   
  
## 例  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="EnlistPromotableSinglePhase">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>昇格可能な単一フェーズの参加リスト \(PSPE\) を使用して、内部トランザクションを持つリソース マネージャーを参加させます。</summary>
      </Docs>
    </MemberGroup>
    <MemberGroup MemberName="Rollback">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>ロールバック \(中止\) トランザクションです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
  </Members>
</Type>