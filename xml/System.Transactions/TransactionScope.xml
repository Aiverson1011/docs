<Type Name="TransactionScope" FullName="System.Transactions.TransactionScope">
  <TypeSignature Language="C#" Value="public sealed class TransactionScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit TransactionScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Transactions.TransactionScope" />
  <AssemblyInfo>
    <AssemblyName>System.Transactions</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Transactions.Local</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>トランザクションのコード ブロックになります。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## 解説  
 <xref:System.Transactions> インフラストラクチャは、両方明示的なプログラミング モデルに基づいて、 <xref:System.Transactions.Transaction> クラスだけでなく、暗黙的なプログラミング モデルを使用して、 <xref:System.Transactions.TransactionScope> トランザクションを自動的にインフラストラクチャを管理するクラス。  
  
> [!IMPORTANT]
>  使用して暗黙のトランザクションを作成することをお勧めしますが、 <xref:System.Transactions.TransactionScope> クラスのアンビエント トランザクション コンテキストが自動的に管理できるようにします。 使用することも必要があります、 <xref:System.Transactions.TransactionScope> と <xref:System.Transactions.DependentTransaction> の複数の関数呼び出しまたは複数のスレッド呼び出し間で同じトランザクションの使用を必要とするアプリケーションのクラスです。 このモデルの詳細については、次を参照してください。、 [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/ja-jp/1ddba95e-7587-48b2-8838-708c275e7199) トピックです。 トランザクション アプリケーションの作成の詳細については、次を参照してください。 [Writing A Transactional Application](http://msdn.microsoft.com/ja-jp/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)します。  
  
 インスタンス化時に、 <xref:System.Transactions.TransactionScope> によって、 `new` ステートメント、トランザクション マネージャーの決定に参加するトランザクションができます。 いったん決定されると、このスコープは常にそのトランザクションに参加します。 この決定は 2 つの要因に基づいて行われます。1 つはアンビエント トランザクションが存在するかどうか、もう 1 つはコンストラクターの `TransactionScopeOption` パラメーターの値です。  アンビエント トランザクションとは、トランザクションでコードを実行します。<xref:System.Transactions.Transaction.Current%2A> クラスの静的 <xref:System.Transactions.Transaction> プロパティを呼び出すことによってアンビエント トランザクションへの参照を取得できます。 このパラメーターを使用する方法の詳細については、の「トランザクション フローの管理」セクションを参照してください、 [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/ja-jp/1ddba95e-7587-48b2-8838-708c275e7199) トピックです。  
  
 トランザクション スコープ内で例外が発生しない場合 \(つまりの初期化の間、 <xref:System.Transactions.TransactionScope> オブジェクトとの呼び出し、 <xref:System.Transactions.TransactionScope.Dispose%2A> メソッド\)、スコープが参加するトランザクションの実行を許可し、します。 トランザクション スコープ内で例外が発生が参加するトランザクションはロールバックされます。  
  
 アプリケーションがすべての作業を完了すると、トランザクション内で実行する、呼び出す必要があります、 <xref:System.Transactions.TransactionScope.Complete%2A> には、トランザクションをコミットできることをそのトランザクション マネージャに通知するメソッドを一度だけです。 このメソッドの呼び出しに失敗すると、トランザクションが中止されます。  
  
 呼び出し、 <xref:System.Transactions.TransactionScope.Dispose%2A> メソッドは、トランザクション スコープの終了を示します。 このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。  
  
 値を変更する場合は、 <xref:System.Transactions.Transaction.Current%2A> 、スコープ内で、例外がスロー <xref:System.Transactions.TransactionScope.Dispose%2A> が呼び出されます。 ただし、スコープの最後に、以前の値が復元されます。 さらを呼び出す場合 <xref:System.Transactions.TransactionScope.Dispose%2A> に <xref:System.Transactions.Transaction.Current%2A> スコープの最後に、トランザクションを作成したトランザクション スコープ内部トランザクションが中止されました。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Transactions.TransactionScope> トランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>この型はスレッド セーフです。</threadsafe>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このコンス トラクターを作成、新しいトランザクション スコープのトランザクションのスコープ オプションを使用してに等しい <xref:System.Transactions.TransactionScopeOption.Required>します。 これは、トランザクションは新しいスコープに必要であり、既に存在する場合に、アンビエント トランザクションが使用されることを意味します。 それ以外の場合、スコープに入る前に新しいトランザクションを作成します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスし、アンビエント トランザクションとして指定されたトランザクションを設定して、このトランザクションが、スコープ内でトランザクションの処理に使用するようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="asyncFlow">To be added.</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスを指定した非同期フロー オプションを使用します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラス要件を指定しています。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <param name="timeout">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> 指定されたタイムアウト値を持つクラスされ、スコープ内でトランザクションの処理は、このトランザクションを使用するように、指定されたトランザクションをアンビエント トランザクションとして設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transactionToUse, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="transactionToUse">このトランザクションが、スコープ内でトランザクションの処理に使用されるように、アンビエント トランザクションとして設定するトランザクションです。</param>
        <param name="asyncFlowOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> タスクまたは非同期\/待機の .NET 非同期プログラミング パターンを使用する場合スレッド継続間トランザクションのスコープに関連付けられているアンビエント トランザクションをフローするかどうかを表す列挙体です。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスし、アンビエント トランザクションとして指定されたトランザクションを設定して、このトランザクションが、スコープ内でトランザクションの処理に使用するようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="timeout">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> 、指定したタイムアウト値と要件を持つクラス。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeOption" /> このトランザクション スコープに関連付けられているトランザクションの要件を表す列挙体です。</param>
        <param name="options">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラス要件を指定しています。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると、 `transactionOptions` を指定するパラメーター、 <xref:System.Transactions.IsolationLevel>, 、スコープ後でトランザクションを作成して、新しいトランザクションが指定された分離レベルに関連付けられています。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同一の分離レベルが必要または、例外がスローされます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="asyncFlow">To be added.</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスの指定した要件と非同期のフロー オプション。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transaction, TimeSpan timeout, System.Transactions.EnterpriseServicesInteropOption opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transaction, valuetype System.TimeSpan timeout, valuetype System.Transactions.EnterpriseServicesInteropOption opt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="interopOption" Type="System.Transactions.EnterpriseServicesInteropOption" />
      </Parameters>
      <Docs>
        <param name="transaction">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="opt">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスは、指定したタイムアウト値と COM \+ 相互運用性要件にされ、スコープ内でトランザクションの処理は、このトランザクションを使用するように、指定されたトランザクションをアンビエント トランザクションとして設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 **注** このメソッドを使用して <xref:System.Security.Permissions.SecurityAction.LinkDemand> されないようにすることには、信頼できないコードからと呼ばれます。 ただし、直前の呼び出し元だけが所有する必要が、 `FullTrust` アクセス許可セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Transactions.Transaction transactionToUse, valuetype System.TimeSpan scopeTimeout, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="transactionToUse" Type="System.Transactions.Transaction" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="transactionToUse">このトランザクションが、スコープ内でトランザクションの処理に使用されるように、アンビエント トランザクションとして設定するトランザクションです。</param>
        <param name="scopeTimeout">
          <see cref="T:System.TimeSpan" /> するまで、トランザクション スコープがタイムアウトになると、トランザクションを中止します。</param>
        <param name="asyncFlowOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> タスクまたは非同期\/待機の .NET 非同期プログラミング パターンを使用する場合スレッド継続間トランザクションのスコープに関連付けられているアンビエント トランザクションをフローするかどうかを表す列挙体です。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> 指定されたタイムアウト値を持つクラスされ、スコープ内でトランザクションの処理は、このトランザクションを使用するように、指定されたトランザクションをアンビエント トランザクションとして設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption option, TimeSpan timeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption option, valuetype System.TimeSpan timeout, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="scopeTimeout" Type="System.TimeSpan" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="option">To be added.</param>
        <param name="timeout">To be added.</param>
        <param name="asyncFlow">To be added.</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスで指定したタイムアウト値、要件、および非同期のフロー オプション。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions options, System.Transactions.EnterpriseServicesInteropOption opt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions options, valuetype System.Transactions.EnterpriseServicesInteropOption opt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
        <Parameter Name="interopOption" Type="System.Transactions.EnterpriseServicesInteropOption" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeOption" /> このトランザクション スコープに関連付けられているトランザクションの要件を表す列挙体です。</param>
        <param name="options">To be added.</param>
        <param name="opt">To be added.</param>
        <summary>新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> 指定されたスコープと COM \+ 相互運用性の要件、トランザクション オプションを使用してクラスです。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 使用すると、 `transactionOptions` を指定するパラメーター、 <xref:System.Transactions.IsolationLevel>, 、スコープ後でトランザクションを作成して、新しいトランザクションが指定された分離レベルに関連付けられています。 分離レベルがトランザクションと共に渡された場合は、トランザクションは、同一の分離レベルが必要または、例外がスローされます。  
  
 **注** このメソッドを使用して <xref:System.Security.Permissions.SecurityAction.LinkDemand> されないようにすることには、信頼できないコードからと呼ばれます。 ただし、直前の呼び出し元だけが所有する必要が、 `FullTrust` アクセス許可セットです。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Transactions.TransactionScopeOption scopeOption, valuetype System.Transactions.TransactionOptions transactionOptions, valuetype System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scopeOption" Type="System.Transactions.TransactionScopeOption" />
        <Parameter Name="transactionOptions" Type="System.Transactions.TransactionOptions" />
        <Parameter Name="asyncFlowOption" Type="System.Transactions.TransactionScopeAsyncFlowOption" />
      </Parameters>
      <Docs>
        <param name="scopeOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeOption" /> このトランザクション スコープに関連付けられているトランザクションの要件を表す列挙体です。</param>
        <param name="transactionOptions">A <see cref="T:System.Transactions.TransactionOptions" /> 構造体の新しいトランザクションが作成された場合に使用するトランザクションのオプションについて説明します。 既存のトランザクションを使用すると、このパラメーターのタイムアウト値は、トランザクション スコープに適用されます。 スコープが破棄される前に、その時点に達すると、トランザクションは中止されます。</param>
        <param name="asyncFlowOption">インスタンス、 <see cref="T:System.Transactions.TransactionScopeAsyncFlowOption" /> タスクまたは非同期\/待機の .NET 非同期プログラミング パターンを使用する場合スレッド継続間トランザクションのスコープに関連付けられているアンビエント トランザクションをフローするかどうかを表す列挙体です。</param>
        <summary>\[.NET Framework 4.5.1 以降のバージョンでサポート\]  
  
 新しいインスタンスを初期化、 <see cref="T:System.Transactions.TransactionScope" /> クラスの指定した要件と非同期のフロー オプション。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.Complete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>スコープ内のすべての操作が正常に完了したことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 問題がなければ、スコープ内のすべての操作が正常に完了、すべてのリソースの状態に整合性があることと、トランザクションをコミットすることができます、トランザクション マネージャーに通知する、1 回だけ、このメソッドを呼び出す必要があります。 最後のステートメントとしての呼び出しを配置することを非常にお勧めします `using` ブロックします。  
  
 このメソッドを使用する方法の詳細については、次を参照してください。、 [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/ja-jp/1ddba95e-7587-48b2-8838-708c275e7199) トピックです。  
  
 このメソッドの呼び出しに失敗すると、トランザクション マネージャーは、システム障害と解釈するため、またはトランザクションのスコープ内でスローされた例外に、トランザクションが中止されます。 ただし、このメソッドを呼び出すことが保証しないこと、トランザクションのコミットを注意する必要があります。 これはトランザクション マネージャーにステータスを通知する手段にすぎません。 このメソッドを呼び出した後、アンビエント トランザクションを使用してを不要になったにアクセスできる、 <xref:System.Transactions.Transaction.Current%2A> プロパティ、およびしようとしてスローされる例外になります。  
  
 リソース マネージャー間のコミットの実際の作業するとき、 `End Using` ステートメント場合、 <xref:System.Transactions.TransactionScope> オブジェクトは、トランザクションを作成します。 このオブジェクトによってトランザクションが作成されていない場合、<xref:System.Transactions.CommittableTransaction.Commit%2A> オブジェクトの所有者によって <xref:System.Transactions.CommittableTransaction> が呼び出されるたびにコミットが発生します。 その時点でトランザクション マネージャーはリソース マネージャーを呼び出して、コミットまたはロールバックにこのメソッドが呼び出されたかどうかに基づいてのいずれかを知らせる、 <xref:System.Transactions.TransactionScope> オブジェクトです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Transactions.TransactionScope> トランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドは既に 1 回呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Transactions.TransactionScope.Dispose" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Transactions.Local</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>トランザクション スコープを終了します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## 解説  
 このメソッドを呼び出すことは、トランザクション スコープの終了を示します。 場合、 <xref:System.Transactions.TransactionScope> オブジェクトは、トランザクションを作成し、 <xref:System.Transactions.TransactionScope.Complete%2A> 、スコープで呼び出されましたが、 <xref:System.Transactions.TransactionScope> オブジェクトが、このメソッドが呼び出されると、トランザクションをコミットしようとしています。 します。  
  
 C\# での使用 `using` 構築により、例外が発生した場合でも、このメソッドが呼び出されます。 このメソッドの呼び出し後に発生した例外は、トランザクションに影響しない場合があります。 このメソッドも、アンビエント トランザクションを元の状態を復元します。 A <xref:System.Transactions.TransactionAbortedException> が、実際にコミットされたトランザクションがない場合にスローされます。  
  
 このメソッドは同期で、トランザクションのコミットまたは中止するまでブロックします。 このため、Windows フォーム \(WinForm\) アプリケーションでこのメソッドを使用する場合、注意する必要がありますか、デッドロックが発生することができます。 \(ボタンのクリックしてなど\) の 1 つの WinForm コントロール イベント内にこのメソッドを呼び出して、同期を使用した場合 <xref:System.Windows.Forms.Control.Invoke%2A> メソッドをデッドロックが発生する、トランザクションの処理中に一部の UI タスク \(たとえば、変化する色\) を実行するコントロールに指示します。 これは、 <xref:System.Windows.Forms.Control.Invoke%2A> メソッドは同期であり、UI スレッドには、そのジョブが完了するまでは、ワーカー スレッドをブロックします。 ただし、このシナリオでは、UI スレッドも待機しているワーカー スレッドが、トランザクションをコミットします。 どのもを続行できませんされず、スコープを無期限に待機コミットが完了することになります。 使用する必要があります <xref:System.Windows.Forms.Control.BeginInvoke%2A> なく <xref:System.Windows.Forms.Control.Invoke%2A> 可能な限り、非同期およびため、デッドロックに陥りやすい未満であるためです。  
  
 このメソッドを使用する方法の詳細については、次を参照してください。、 [Implementing An Implicit Transaction Using Transaction Scope](http://msdn.microsoft.com/ja-jp/1ddba95e-7587-48b2-8838-708c275e7199) トピックです。  
  
   
  
## 例  
 次の例では、使用して、 <xref:System.Transactions.TransactionScope> トランザクションに参加するためのコードのブロックを定義するクラス。  
  
 [!code-csharp[TransactionScope\#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TransactionScope/cs/ScopeWithSQL.cs#1)]
 [!code-vb[TransactionScope\#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TransactionScope/vb/ScopeWithSQL.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Transactions</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Transactions.TransactionScope" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
  </Members>
</Type>